
./Object/RME：     文件格式 elf64-x86-64


Disassembly of section .text:

ffffffff80100000 <__RME_X64_Mboot_Header>:
ffffffff80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80100006:	01 00                	add    %eax,(%rax)
ffffffff80100008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010000b:	e4 00                	in     $0x0,%al
ffffffff8010000d:	00 10                	add    %dl,(%rax)
ffffffff8010000f:	00 00                	add    %al,(%rax)
ffffffff80100011:	00 10                	add    %dl,(%rax)
ffffffff80100013:	00 00                	add    %al,(%rax)
ffffffff80100015:	b0 22                	mov    $0x22,%al
ffffffff80100017:	00 58 47             	add    %bl,0x47(%rax)
ffffffff8010001a:	23 00                	and    (%rax),%eax
ffffffff8010001c:	00 80 10 00 90 e9    	add    %al,-0x166ffff0(%rax)
ffffffff80100022:	da 0f                	fimull (%rdi)
ffffffff80100024:	00 00                	add    %al,(%rax)
ffffffff80100026:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010002d:	00 00 00 00 
ffffffff80100031:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100038:	00 00 00 00 
ffffffff8010003c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100043:	00 00 00 00 
ffffffff80100047:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010004e:	00 00 00 00 
ffffffff80100052:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100059:	00 00 00 00 
ffffffff8010005d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100064:	00 00 00 00 
ffffffff80100068:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010006f:	00 00 00 00 
ffffffff80100073:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010007a:	00 00 00 00 
ffffffff8010007e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100085:	00 00 00 00 
ffffffff80100089:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100090:	00 00 00 00 
ffffffff80100094:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010009b:	00 00 00 00 
ffffffff8010009f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000a6:	00 00 00 00 
ffffffff801000aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000b1:	00 00 00 00 
ffffffff801000b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000bc:	00 00 00 00 
ffffffff801000c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000c7:	00 00 00 00 
ffffffff801000cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000d2:	00 00 00 00 
ffffffff801000d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000dd:	00 00 00 00 
ffffffff801000e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000e8:	00 00 00 00 
ffffffff801000ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000f3:	00 00 00 00 
ffffffff801000f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000fe:	00 00 00 00 
ffffffff80100102:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100109:	00 00 00 00 
ffffffff8010010d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100114:	00 00 00 00 
ffffffff80100118:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010011f:	00 00 00 00 
ffffffff80100123:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010012a:	00 00 00 00 
ffffffff8010012e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100135:	00 00 00 00 
ffffffff80100139:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100140:	00 00 00 00 
ffffffff80100144:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010014b:	00 00 00 00 
ffffffff8010014f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100156:	00 00 00 00 
ffffffff8010015a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100161:	00 00 00 00 
ffffffff80100165:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010016c:	00 00 00 00 
ffffffff80100170:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100177:	00 00 00 00 
ffffffff8010017b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100182:	00 00 00 00 
ffffffff80100186:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010018d:	00 00 00 00 
ffffffff80100191:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100198:	00 00 00 00 
ffffffff8010019c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001a3:	00 00 00 00 
ffffffff801001a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ae:	00 00 00 00 
ffffffff801001b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001b9:	00 00 00 00 
ffffffff801001bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001c4:	00 00 00 00 
ffffffff801001c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001cf:	00 00 00 00 
ffffffff801001d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001da:	00 00 00 00 
ffffffff801001de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001e5:	00 00 00 00 
ffffffff801001e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001f0:	00 00 00 00 
ffffffff801001f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001fb:	00 00 00 00 
ffffffff801001ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100206:	00 00 00 00 
ffffffff8010020a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100211:	00 00 00 00 
ffffffff80100215:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010021c:	00 00 00 00 
ffffffff80100220:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100227:	00 00 00 00 
ffffffff8010022b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100232:	00 00 00 00 
ffffffff80100236:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010023d:	00 00 00 00 
ffffffff80100241:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100248:	00 00 00 00 
ffffffff8010024c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100253:	00 00 00 00 
ffffffff80100257:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010025e:	00 00 00 00 
ffffffff80100262:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100269:	00 00 00 00 
ffffffff8010026d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100274:	00 00 00 00 
ffffffff80100278:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010027f:	00 00 00 00 
ffffffff80100283:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010028a:	00 00 00 00 
ffffffff8010028e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100295:	00 00 00 00 
ffffffff80100299:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002a0:	00 00 00 00 
ffffffff801002a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ab:	00 00 00 00 
ffffffff801002af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002b6:	00 00 00 00 
ffffffff801002ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002c1:	00 00 00 00 
ffffffff801002c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002cc:	00 00 00 00 
ffffffff801002d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002d7:	00 00 00 00 
ffffffff801002db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002e2:	00 00 00 00 
ffffffff801002e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ed:	00 00 00 00 
ffffffff801002f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002f8:	00 00 00 00 
ffffffff801002fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100303:	00 00 00 00 
ffffffff80100307:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010030e:	00 00 00 00 
ffffffff80100312:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100319:	00 00 00 00 
ffffffff8010031d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100324:	00 00 00 00 
ffffffff80100328:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010032f:	00 00 00 00 
ffffffff80100333:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010033a:	00 00 00 00 
ffffffff8010033e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100345:	00 00 00 00 
ffffffff80100349:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100350:	00 00 00 00 
ffffffff80100354:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010035b:	00 00 00 00 
ffffffff8010035f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100366:	00 00 00 00 
ffffffff8010036a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100371:	00 00 00 00 
ffffffff80100375:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010037c:	00 00 00 00 
ffffffff80100380:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100387:	00 00 00 00 
ffffffff8010038b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100392:	00 00 00 00 
ffffffff80100396:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010039d:	00 00 00 00 
ffffffff801003a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003a8:	00 00 00 00 
ffffffff801003ac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003b3:	00 00 00 00 
ffffffff801003b7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003be:	00 00 00 00 
ffffffff801003c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003c9:	00 00 00 00 
ffffffff801003cd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003d4:	00 00 00 00 
ffffffff801003d8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003df:	00 00 00 00 
ffffffff801003e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003ea:	00 00 00 00 
ffffffff801003ee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003f5:	00 00 00 00 
ffffffff801003f9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100400:	00 00 00 00 
ffffffff80100404:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010040b:	00 00 00 00 
ffffffff8010040f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100416:	00 00 00 00 
ffffffff8010041a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100421:	00 00 00 00 
ffffffff80100425:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010042c:	00 00 00 00 
ffffffff80100430:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100437:	00 00 00 00 
ffffffff8010043b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100442:	00 00 00 00 
ffffffff80100446:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010044d:	00 00 00 00 
ffffffff80100451:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100458:	00 00 00 00 
ffffffff8010045c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100463:	00 00 00 00 
ffffffff80100467:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010046e:	00 00 00 00 
ffffffff80100472:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100479:	00 00 00 00 
ffffffff8010047d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100484:	00 00 00 00 
ffffffff80100488:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010048f:	00 00 00 00 
ffffffff80100493:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010049a:	00 00 00 00 
ffffffff8010049e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004a5:	00 00 00 00 
ffffffff801004a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004b0:	00 00 00 00 
ffffffff801004b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004bb:	00 00 00 00 
ffffffff801004bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004c6:	00 00 00 00 
ffffffff801004ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004d1:	00 00 00 00 
ffffffff801004d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004dc:	00 00 00 00 
ffffffff801004e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004e7:	00 00 00 00 
ffffffff801004eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004f2:	00 00 00 00 
ffffffff801004f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004fd:	00 00 00 00 
ffffffff80100501:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100508:	00 00 00 00 
ffffffff8010050c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100513:	00 00 00 00 
ffffffff80100517:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010051e:	00 00 00 00 
ffffffff80100522:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100529:	00 00 00 00 
ffffffff8010052d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100534:	00 00 00 00 
ffffffff80100538:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010053f:	00 00 00 00 
ffffffff80100543:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010054a:	00 00 00 00 
ffffffff8010054e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100555:	00 00 00 00 
ffffffff80100559:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100560:	00 00 00 00 
ffffffff80100564:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010056b:	00 00 00 00 
ffffffff8010056f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100576:	00 00 00 00 
ffffffff8010057a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100581:	00 00 00 00 
ffffffff80100585:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010058c:	00 00 00 00 
ffffffff80100590:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100597:	00 00 00 00 
ffffffff8010059b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005a2:	00 00 00 00 
ffffffff801005a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ad:	00 00 00 00 
ffffffff801005b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005b8:	00 00 00 00 
ffffffff801005bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005c3:	00 00 00 00 
ffffffff801005c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ce:	00 00 00 00 
ffffffff801005d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005d9:	00 00 00 00 
ffffffff801005dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005e4:	00 00 00 00 
ffffffff801005e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ef:	00 00 00 00 
ffffffff801005f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005fa:	00 00 00 00 
ffffffff801005fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100605:	00 00 00 00 
ffffffff80100609:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100610:	00 00 00 00 
ffffffff80100614:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010061b:	00 00 00 00 
ffffffff8010061f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100626:	00 00 00 00 
ffffffff8010062a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100631:	00 00 00 00 
ffffffff80100635:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010063c:	00 00 00 00 
ffffffff80100640:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100647:	00 00 00 00 
ffffffff8010064b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100652:	00 00 00 00 
ffffffff80100656:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010065d:	00 00 00 00 
ffffffff80100661:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100668:	00 00 00 00 
ffffffff8010066c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100673:	00 00 00 00 
ffffffff80100677:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010067e:	00 00 00 00 
ffffffff80100682:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100689:	00 00 00 00 
ffffffff8010068d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100694:	00 00 00 00 
ffffffff80100698:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010069f:	00 00 00 00 
ffffffff801006a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006aa:	00 00 00 00 
ffffffff801006ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006b5:	00 00 00 00 
ffffffff801006b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006c0:	00 00 00 00 
ffffffff801006c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006cb:	00 00 00 00 
ffffffff801006cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006d6:	00 00 00 00 
ffffffff801006da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006e1:	00 00 00 00 
ffffffff801006e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006ec:	00 00 00 00 
ffffffff801006f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006f7:	00 00 00 00 
ffffffff801006fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100702:	00 00 00 00 
ffffffff80100706:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010070d:	00 00 00 00 
ffffffff80100711:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100718:	00 00 00 00 
ffffffff8010071c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100723:	00 00 00 00 
ffffffff80100727:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010072e:	00 00 00 00 
ffffffff80100732:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100739:	00 00 00 00 
ffffffff8010073d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100744:	00 00 00 00 
ffffffff80100748:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010074f:	00 00 00 00 
ffffffff80100753:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010075a:	00 00 00 00 
ffffffff8010075e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100765:	00 00 00 00 
ffffffff80100769:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100770:	00 00 00 00 
ffffffff80100774:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010077b:	00 00 00 00 
ffffffff8010077f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100786:	00 00 00 00 
ffffffff8010078a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100791:	00 00 00 00 
ffffffff80100795:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010079c:	00 00 00 00 
ffffffff801007a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007a7:	00 00 00 00 
ffffffff801007ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007b2:	00 00 00 00 
ffffffff801007b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007bd:	00 00 00 00 
ffffffff801007c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007c8:	00 00 00 00 
ffffffff801007cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007d3:	00 00 00 00 
ffffffff801007d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007de:	00 00 00 00 
ffffffff801007e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007e9:	00 00 00 00 
ffffffff801007ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007f4:	00 00 00 00 
ffffffff801007f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007ff:	00 00 00 00 
ffffffff80100803:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010080a:	00 00 00 00 
ffffffff8010080e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100815:	00 00 00 00 
ffffffff80100819:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100820:	00 00 00 00 
ffffffff80100824:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010082b:	00 00 00 00 
ffffffff8010082f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100836:	00 00 00 00 
ffffffff8010083a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100841:	00 00 00 00 
ffffffff80100845:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010084c:	00 00 00 00 
ffffffff80100850:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100857:	00 00 00 00 
ffffffff8010085b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100862:	00 00 00 00 
ffffffff80100866:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010086d:	00 00 00 00 
ffffffff80100871:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100878:	00 00 00 00 
ffffffff8010087c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100883:	00 00 00 00 
ffffffff80100887:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010088e:	00 00 00 00 
ffffffff80100892:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100899:	00 00 00 00 
ffffffff8010089d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008a4:	00 00 00 00 
ffffffff801008a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008af:	00 00 00 00 
ffffffff801008b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008ba:	00 00 00 00 
ffffffff801008be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008c5:	00 00 00 00 
ffffffff801008c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008d0:	00 00 00 00 
ffffffff801008d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008db:	00 00 00 00 
ffffffff801008df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008e6:	00 00 00 00 
ffffffff801008ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008f1:	00 00 00 00 
ffffffff801008f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008fc:	00 00 00 00 
ffffffff80100900:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100907:	00 00 00 00 
ffffffff8010090b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100912:	00 00 00 00 
ffffffff80100916:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010091d:	00 00 00 00 
ffffffff80100921:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100928:	00 00 00 00 
ffffffff8010092c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100933:	00 00 00 00 
ffffffff80100937:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010093e:	00 00 00 00 
ffffffff80100942:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100949:	00 00 00 00 
ffffffff8010094d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100954:	00 00 00 00 
ffffffff80100958:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010095f:	00 00 00 00 
ffffffff80100963:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010096a:	00 00 00 00 
ffffffff8010096e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100975:	00 00 00 00 
ffffffff80100979:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100980:	00 00 00 00 
ffffffff80100984:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010098b:	00 00 00 00 
ffffffff8010098f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100996:	00 00 00 00 
ffffffff8010099a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009a1:	00 00 00 00 
ffffffff801009a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ac:	00 00 00 00 
ffffffff801009b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009b7:	00 00 00 00 
ffffffff801009bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009c2:	00 00 00 00 
ffffffff801009c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009cd:	00 00 00 00 
ffffffff801009d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009d8:	00 00 00 00 
ffffffff801009dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009e3:	00 00 00 00 
ffffffff801009e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ee:	00 00 00 00 
ffffffff801009f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009f9:	00 00 00 00 
ffffffff801009fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a04:	00 00 00 00 
ffffffff80100a08:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a0f:	00 00 00 00 
ffffffff80100a13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a1a:	00 00 00 00 
ffffffff80100a1e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a25:	00 00 00 00 
ffffffff80100a29:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a30:	00 00 00 00 
ffffffff80100a34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a3b:	00 00 00 00 
ffffffff80100a3f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a46:	00 00 00 00 
ffffffff80100a4a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a51:	00 00 00 00 
ffffffff80100a55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a5c:	00 00 00 00 
ffffffff80100a60:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a67:	00 00 00 00 
ffffffff80100a6b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a72:	00 00 00 00 
ffffffff80100a76:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a7d:	00 00 00 00 
ffffffff80100a81:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a88:	00 00 00 00 
ffffffff80100a8c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a93:	00 00 00 00 
ffffffff80100a97:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a9e:	00 00 00 00 
ffffffff80100aa2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aa9:	00 00 00 00 
ffffffff80100aad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ab4:	00 00 00 00 
ffffffff80100ab8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100abf:	00 00 00 00 
ffffffff80100ac3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aca:	00 00 00 00 
ffffffff80100ace:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ad5:	00 00 00 00 
ffffffff80100ad9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ae0:	00 00 00 00 
ffffffff80100ae4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aeb:	00 00 00 00 
ffffffff80100aef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100af6:	00 00 00 00 
ffffffff80100afa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b01:	00 00 00 00 
ffffffff80100b05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b0c:	00 00 00 00 
ffffffff80100b10:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b17:	00 00 00 00 
ffffffff80100b1b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b22:	00 00 00 00 
ffffffff80100b26:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b2d:	00 00 00 00 
ffffffff80100b31:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b38:	00 00 00 00 
ffffffff80100b3c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b43:	00 00 00 00 
ffffffff80100b47:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b4e:	00 00 00 00 
ffffffff80100b52:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b59:	00 00 00 00 
ffffffff80100b5d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b64:	00 00 00 00 
ffffffff80100b68:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b6f:	00 00 00 00 
ffffffff80100b73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b7a:	00 00 00 00 
ffffffff80100b7e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b85:	00 00 00 00 
ffffffff80100b89:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b90:	00 00 00 00 
ffffffff80100b94:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b9b:	00 00 00 00 
ffffffff80100b9f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ba6:	00 00 00 00 
ffffffff80100baa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bb1:	00 00 00 00 
ffffffff80100bb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bbc:	00 00 00 00 
ffffffff80100bc0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bc7:	00 00 00 00 
ffffffff80100bcb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bd2:	00 00 00 00 
ffffffff80100bd6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bdd:	00 00 00 00 
ffffffff80100be1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100be8:	00 00 00 00 
ffffffff80100bec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bf3:	00 00 00 00 
ffffffff80100bf7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bfe:	00 00 00 00 
ffffffff80100c02:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c09:	00 00 00 00 
ffffffff80100c0d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c14:	00 00 00 00 
ffffffff80100c18:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c1f:	00 00 00 00 
ffffffff80100c23:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c2a:	00 00 00 00 
ffffffff80100c2e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c35:	00 00 00 00 
ffffffff80100c39:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c40:	00 00 00 00 
ffffffff80100c44:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c4b:	00 00 00 00 
ffffffff80100c4f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c56:	00 00 00 00 
ffffffff80100c5a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c61:	00 00 00 00 
ffffffff80100c65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c6c:	00 00 00 00 
ffffffff80100c70:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c77:	00 00 00 00 
ffffffff80100c7b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c82:	00 00 00 00 
ffffffff80100c86:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c8d:	00 00 00 00 
ffffffff80100c91:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c98:	00 00 00 00 
ffffffff80100c9c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ca3:	00 00 00 00 
ffffffff80100ca7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cae:	00 00 00 00 
ffffffff80100cb2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cb9:	00 00 00 00 
ffffffff80100cbd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cc4:	00 00 00 00 
ffffffff80100cc8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ccf:	00 00 00 00 
ffffffff80100cd3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cda:	00 00 00 00 
ffffffff80100cde:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ce5:	00 00 00 00 
ffffffff80100ce9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cf0:	00 00 00 00 
ffffffff80100cf4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cfb:	00 00 00 00 
ffffffff80100cff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d06:	00 00 00 00 
ffffffff80100d0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d11:	00 00 00 00 
ffffffff80100d15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d1c:	00 00 00 00 
ffffffff80100d20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d27:	00 00 00 00 
ffffffff80100d2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d32:	00 00 00 00 
ffffffff80100d36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d3d:	00 00 00 00 
ffffffff80100d41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d48:	00 00 00 00 
ffffffff80100d4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d53:	00 00 00 00 
ffffffff80100d57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d5e:	00 00 00 00 
ffffffff80100d62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d69:	00 00 00 00 
ffffffff80100d6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d74:	00 00 00 00 
ffffffff80100d78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d7f:	00 00 00 00 
ffffffff80100d83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d8a:	00 00 00 00 
ffffffff80100d8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d95:	00 00 00 00 
ffffffff80100d99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100da0:	00 00 00 00 
ffffffff80100da4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dab:	00 00 00 00 
ffffffff80100daf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100db6:	00 00 00 00 
ffffffff80100dba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dc1:	00 00 00 00 
ffffffff80100dc5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dcc:	00 00 00 00 
ffffffff80100dd0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dd7:	00 00 00 00 
ffffffff80100ddb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100de2:	00 00 00 00 
ffffffff80100de6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ded:	00 00 00 00 
ffffffff80100df1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100df8:	00 00 00 00 
ffffffff80100dfc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e03:	00 00 00 00 
ffffffff80100e07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e0e:	00 00 00 00 
ffffffff80100e12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e19:	00 00 00 00 
ffffffff80100e1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e24:	00 00 00 00 
ffffffff80100e28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e2f:	00 00 00 00 
ffffffff80100e33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e3a:	00 00 00 00 
ffffffff80100e3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e45:	00 00 00 00 
ffffffff80100e49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e50:	00 00 00 00 
ffffffff80100e54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e5b:	00 00 00 00 
ffffffff80100e5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e66:	00 00 00 00 
ffffffff80100e6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e71:	00 00 00 00 
ffffffff80100e75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e7c:	00 00 00 00 
ffffffff80100e80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e87:	00 00 00 00 
ffffffff80100e8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e92:	00 00 00 00 
ffffffff80100e96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e9d:	00 00 00 00 
ffffffff80100ea1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ea8:	00 00 00 00 
ffffffff80100eac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eb3:	00 00 00 00 
ffffffff80100eb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ebe:	00 00 00 00 
ffffffff80100ec2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ec9:	00 00 00 00 
ffffffff80100ecd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ed4:	00 00 00 00 
ffffffff80100ed8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100edf:	00 00 00 00 
ffffffff80100ee3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eea:	00 00 00 00 
ffffffff80100eee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ef5:	00 00 00 00 
ffffffff80100ef9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f00:	00 00 00 00 
ffffffff80100f04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f0b:	00 00 00 00 
ffffffff80100f0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f16:	00 00 00 00 
ffffffff80100f1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f21:	00 00 00 00 
ffffffff80100f25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f2c:	00 00 00 00 
ffffffff80100f30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f37:	00 00 00 00 
ffffffff80100f3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f42:	00 00 00 00 
ffffffff80100f46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f4d:	00 00 00 00 
ffffffff80100f51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f58:	00 00 00 00 
ffffffff80100f5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f63:	00 00 00 00 
ffffffff80100f67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f6e:	00 00 00 00 
ffffffff80100f72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f79:	00 00 00 00 
ffffffff80100f7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f84:	00 00 00 00 
ffffffff80100f88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f8f:	00 00 00 00 
ffffffff80100f93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f9a:	00 00 00 00 
ffffffff80100f9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fa5:	00 00 00 00 
ffffffff80100fa9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fb0:	00 00 00 00 
ffffffff80100fb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fbb:	00 00 00 00 
ffffffff80100fbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fc6:	00 00 00 00 
ffffffff80100fca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fd1:	00 00 00 00 
ffffffff80100fd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fdc:	00 00 00 00 
ffffffff80100fe0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fe7:	00 00 00 00 
ffffffff80100feb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ff2:	00 00 00 00 
ffffffff80100ff6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80100ffd:	00 00 00 
	...

ffffffff80108000 <__RME_X64_Mboot_Entry>:
/* The entry point after the bootloader finishes *****************************/
    .code32
    .align              16
__RME_X64_Mboot_Entry:
     /* EBX contains Multiboot data structure, let's relocate it to some other places */
     MOV                %EBX,%ESI
ffffffff80108000:	89 de                	mov    %ebx,%esi
     /* Zero 7 pages for our bootstrap page tables, PML4 @ 0x101000 */
     CLD
ffffffff80108002:	fc                   	cld
     XOR                %EAX,%EAX
ffffffff80108003:	31 c0                	xor    %eax,%eax
     MOV                $0x101000,%EDI
ffffffff80108005:	bf 00 10 10 00       	mov    $0x101000,%edi
     MOV                $0x7000,%ECX
ffffffff8010800a:	b9 00 70 00 00       	mov    $0x7000,%ecx
     REP STOSB
ffffffff8010800f:	f3 aa                	rep stos %al,%es:(%rdi)
     /* PML4[0] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff80108011:	b8 03 20 10 00       	mov    $0x102003,%eax
     MOV                %EAX,0x101000
ffffffff80108016:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff8010801d:	20 10 
     /* PML4[256] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010801f:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
     MOV                %EAX,0x101800
     /* PML4[511] -> PDP-B @ 0x103000 */
     MOV                $(0x103000|3),%EAX
ffffffff80108025:	b8 03 30 10 00       	mov    $0x103003,%eax
     MOV                %EAX,0x101FF8
ffffffff8010802a:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff80108031:	40 10 
     /* PDP-A[0] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff80108033:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
     MOV                %EAX,0x102000
     /* PDP-A[1] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108039:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x102008
ffffffff8010803e:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80108045:	60 10 
     /* PDP-A[2] -> PDE-C @ 0x106000 */
     MOV                $(0x106000|3),%EAX
ffffffff80108047:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
     MOV                %EAX,0x102010
     /* PDP-A[3] -> PDE-D @ 0x107000 unbufferable uncacheable */
     MOV                $(0x107000|3|0x18),%EAX
ffffffff8010804d:	b8 1b 70 10 00       	mov    $0x10701b,%eax
     MOV                %EAX,0x102018
ffffffff80108052:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80108059:	40 10 
     /* PDP-B[510] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff8010805b:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
     MOV                %EAX,0x103FF0
     /* PDP-B[511] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108061:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x103FF8
ffffffff80108066:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff8010806d:	00 00 
     /* PDE-A/B/C/D [0..511/0...511/0..511/0..511] -> 0..4094MB */
     MOV                $(0x83),%EAX
ffffffff8010806f:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
     MOV                $0x104000,%EBX
     MOV                $(512*4),%ECX
ffffffff80108075:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff8010807a <PDE_Loop>:
PDE_Loop:
     MOV                %EAX,(%EBX)
ffffffff8010807a:	89 03                	mov    %eax,(%rbx)
     ADD                $0x200000,%EAX
ffffffff8010807c:	05 00 00 20 00       	add    $0x200000,%eax
     ADD                $0x8,%EBX
ffffffff80108081:	83 c3 08             	add    $0x8,%ebx
     DEC                %ECX
ffffffff80108084:	49 75 f3             	rex.WB jne ffffffff8010807a <PDE_Loop>
     JNZ                PDE_Loop
	 /* Clear ebx for initial processor boot.
      * When secondary processors boot, they'll call through
      * __RME_X64_SMP_Boot, but with a nonzero ebx.
      * We'll reuse these bootstrap pagetables and GDT. */
     XOR                %EBX,%EBX
ffffffff80108087:	31 db                	xor    %ebx,%ebx

ffffffff80108089 <__RME_X64_SMP_Boot_32>:
     /* SMP boot will run directly from here */
__RME_X64_SMP_Boot_32:
     /* CR3 -> PML4 @ 0x101000 */
     MOV                $0x101000,%EAX
ffffffff80108089:	b8 00 10 10 00       	mov    $0x101000,%eax
     MOV                %EAX,%CR3
ffffffff8010808e:	0f 22 d8             	mov    %rax,%cr3
     /* Load GDT */
     LGDT               (Boot_GDT_Desc-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff80108091:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802101c0 <_RME_Pgt_Boot_Con+0x191>
     /* Enable PAE - CR4.PAE=1 */
     MOV                %CR4,%EAX
ffffffff80108098:	0f 20 e0             	mov    %cr4,%rax
     BTS                $5,%EAX
ffffffff8010809b:	0f ba e8 05          	bts    $0x5,%eax
     MOV                %EAX,%CR4
ffffffff8010809f:	0f 22 e0             	mov    %rax,%cr4
     /* Enable long mode and no execute bit - EFER.LME=1, EFER.NXE=1 */
     MOV                $0xC0000080,%ECX
ffffffff801080a2:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
     RDMSR
ffffffff801080a7:	0f 32                	rdmsr
     BTS                $8,%EAX
ffffffff801080a9:	0f ba e8 08          	bts    $0x8,%eax
     BTS                $11,%EAX
ffffffff801080ad:	0f ba e8 0b          	bts    $0xb,%eax
     WRMSR
ffffffff801080b1:	0f 30                	wrmsr
     /* Enable paging */
     MOV                %CR0,%EAX
ffffffff801080b3:	0f 20 c0             	mov    %cr0,%rax
     BTS                $31,%EAX
ffffffff801080b6:	0f ba e8 1f          	bts    $0x1f,%eax
     MOV                %EAX,%CR0
ffffffff801080ba:	0f 22 c0             	mov    %rax,%cr0
     /* Enable PCID - CR4.PCIDE=1 FIXME: this made things slower - due to extra logic for PCID processing *//*
     MOV                %CR4,%EAX
     BTS                $17,%EAX
     MOV                %EAX,%CR4 */
     /* shift to 64bit segment */
     LJMP               $8,$(Boot_Low_64-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff801080bd:	ea                   	(bad)
ffffffff801080be:	d0 80 10 00 08 00    	rolb   $1,0x80010(%rax)
ffffffff801080c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801080cb:	00 00 00 00 
ffffffff801080cf:	90                   	nop

ffffffff801080d0 <Boot_Low_64>:

/* Now we are in 64-bit mode *************************************************/
    .align              16
    .code64
Boot_Low_64:
    movq                $Boot_High_64,%RAX
ffffffff801080d0:	48 c7 c0 d9 80 10 80 	mov    $0xffffffff801080d9,%rax
    jmp                 *%RAX
ffffffff801080d7:	ff e0                	jmp    *%rax

ffffffff801080d9 <_start>:
_start:
Boot_High_64:
    /* ensure data segment registers are sane - zero out all of them */
    XOR                 %RAX,%RAX
ffffffff801080d9:	48 31 c0             	xor    %rax,%rax
    /* Below are all 16-bit moves */
    MOV                 %AX,%SS
ffffffff801080dc:	8e d0                	mov    %eax,%ss
    MOV                 %AX,%DS
ffffffff801080de:	8e d8                	mov    %eax,%ds
    MOV                 %AX,%ES
ffffffff801080e0:	8e c0                	mov    %eax,%es
    MOV                 %AX,%FS
ffffffff801080e2:	8e e0                	mov    %eax,%fs
    MOV                 %AX,%GS
ffffffff801080e4:	8e e8                	mov    %eax,%gs
    /* Check to see if we're booting a secondary core */
    TEST                %EBX,%EBX
ffffffff801080e6:	85 db                	test   %ebx,%ebx
    JNZ                 Boot_SMP_64
ffffffff801080e8:	75 14                	jne    ffffffff801080fe <Boot_SMP_64>
    /* Setup initial stack - this is hard-coded at low memory */
    MOV                 $__RME_X64_Kern_Boot_Stack,%RAX
ffffffff801080ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
    MOV                 %RAX,%RSP
ffffffff801080f1:	48 89 c4             	mov    %rax,%rsp
    /* Pass the physical address of RSI to it */
    MOV                 %RSI,%RDI
ffffffff801080f4:	48 89 f7             	mov    %rsi,%rdi
    JMP                 main
ffffffff801080f7:	e9 d3 2f 11 00       	jmp    ffffffff8021b0cf <main>
    JMP                 .
ffffffff801080fc:	eb fe                	jmp    ffffffff801080fc <_start+0x23>

ffffffff801080fe <Boot_SMP_64>:
Boot_SMP_64:
    MOV                 $0x7000,%RAX
ffffffff801080fe:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
    MOV                 -16(%RAX),%RSP
ffffffff80108105:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
    JMP                 __RME_SMP_Low_Level_Init
ffffffff80108109:	e9 6f d2 11 00       	jmp    ffffffff8022537d <__RME_SMP_Low_Level_Init>
    JMP                 .
ffffffff8010810e:	eb fe                	jmp    ffffffff8010810e <Boot_SMP_64+0x10>

ffffffff80108110 <Boot_GDT>:
	...
ffffffff8010811c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80108122:	00 00                	add    %al,(%rax)
ffffffff80108124:	00                   	.byte 0
ffffffff80108125:	90                   	nop
	...

ffffffff80108128 <Boot_GDT_Desc>:
ffffffff80108128:	17                   	(bad)
ffffffff80108129:	00 10                	add    %dl,(%rax)
ffffffff8010812b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80108131:	00 90 66 66 2e 0f    	add    %dl,0xf2e6666(%rax)
ffffffff80108137:	1f                   	(bad)
ffffffff80108138:	84 00                	test   %al,(%rax)
ffffffff8010813a:	00 00                	add    %al,(%rax)
ffffffff8010813c:	00 00                	add    %al,(%rax)
ffffffff8010813e:	66 90                	xchg   %ax,%ax
ffffffff80108140:	90                   	nop
ffffffff80108141:	e9 ba 0e 00 00       	jmp    ffffffff80109000 <RME_X64_Kpgt>
ffffffff80108146:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010814d:	00 00 00 00 
ffffffff80108151:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108158:	00 00 00 00 
ffffffff8010815c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108163:	00 00 00 00 
ffffffff80108167:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010816e:	00 00 00 00 
ffffffff80108172:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108179:	00 00 00 00 
ffffffff8010817d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108184:	00 00 00 00 
ffffffff80108188:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010818f:	00 00 00 00 
ffffffff80108193:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010819a:	00 00 00 00 
ffffffff8010819e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081a5:	00 00 00 00 
ffffffff801081a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081b0:	00 00 00 00 
ffffffff801081b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081bb:	00 00 00 00 
ffffffff801081bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081c6:	00 00 00 00 
ffffffff801081ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081d1:	00 00 00 00 
ffffffff801081d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081dc:	00 00 00 00 
ffffffff801081e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081e7:	00 00 00 00 
ffffffff801081eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081f2:	00 00 00 00 
ffffffff801081f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081fd:	00 00 00 00 
ffffffff80108201:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108208:	00 00 00 00 
ffffffff8010820c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108213:	00 00 00 00 
ffffffff80108217:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010821e:	00 00 00 00 
ffffffff80108222:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108229:	00 00 00 00 
ffffffff8010822d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108234:	00 00 00 00 
ffffffff80108238:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010823f:	00 00 00 00 
ffffffff80108243:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010824a:	00 00 00 00 
ffffffff8010824e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108255:	00 00 00 00 
ffffffff80108259:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108260:	00 00 00 00 
ffffffff80108264:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010826b:	00 00 00 00 
ffffffff8010826f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108276:	00 00 00 00 
ffffffff8010827a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108281:	00 00 00 00 
ffffffff80108285:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010828c:	00 00 00 00 
ffffffff80108290:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108297:	00 00 00 00 
ffffffff8010829b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082a2:	00 00 00 00 
ffffffff801082a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ad:	00 00 00 00 
ffffffff801082b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082b8:	00 00 00 00 
ffffffff801082bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082c3:	00 00 00 00 
ffffffff801082c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ce:	00 00 00 00 
ffffffff801082d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082d9:	00 00 00 00 
ffffffff801082dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082e4:	00 00 00 00 
ffffffff801082e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ef:	00 00 00 00 
ffffffff801082f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082fa:	00 00 00 00 
ffffffff801082fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108305:	00 00 00 00 
ffffffff80108309:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108310:	00 00 00 00 
ffffffff80108314:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010831b:	00 00 00 00 
ffffffff8010831f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108326:	00 00 00 00 
ffffffff8010832a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108331:	00 00 00 00 
ffffffff80108335:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010833c:	00 00 00 00 
ffffffff80108340:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108347:	00 00 00 00 
ffffffff8010834b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108352:	00 00 00 00 
ffffffff80108356:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010835d:	00 00 00 00 
ffffffff80108361:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108368:	00 00 00 00 
ffffffff8010836c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108373:	00 00 00 00 
ffffffff80108377:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010837e:	00 00 00 00 
ffffffff80108382:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108389:	00 00 00 00 
ffffffff8010838d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108394:	00 00 00 00 
ffffffff80108398:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010839f:	00 00 00 00 
ffffffff801083a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083aa:	00 00 00 00 
ffffffff801083ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083b5:	00 00 00 00 
ffffffff801083b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083c0:	00 00 00 00 
ffffffff801083c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083cb:	00 00 00 00 
ffffffff801083cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083d6:	00 00 00 00 
ffffffff801083da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083e1:	00 00 00 00 
ffffffff801083e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083ec:	00 00 00 00 
ffffffff801083f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083f7:	00 00 00 00 
ffffffff801083fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108402:	00 00 00 00 
ffffffff80108406:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010840d:	00 00 00 00 
ffffffff80108411:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108418:	00 00 00 00 
ffffffff8010841c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108423:	00 00 00 00 
ffffffff80108427:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010842e:	00 00 00 00 
ffffffff80108432:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108439:	00 00 00 00 
ffffffff8010843d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108444:	00 00 00 00 
ffffffff80108448:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010844f:	00 00 00 00 
ffffffff80108453:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010845a:	00 00 00 00 
ffffffff8010845e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108465:	00 00 00 00 
ffffffff80108469:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108470:	00 00 00 00 
ffffffff80108474:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010847b:	00 00 00 00 
ffffffff8010847f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108486:	00 00 00 00 
ffffffff8010848a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108491:	00 00 00 00 
ffffffff80108495:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010849c:	00 00 00 00 
ffffffff801084a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084a7:	00 00 00 00 
ffffffff801084ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084b2:	00 00 00 00 
ffffffff801084b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084bd:	00 00 00 00 
ffffffff801084c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084c8:	00 00 00 00 
ffffffff801084cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084d3:	00 00 00 00 
ffffffff801084d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084de:	00 00 00 00 
ffffffff801084e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084e9:	00 00 00 00 
ffffffff801084ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084f4:	00 00 00 00 
ffffffff801084f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084ff:	00 00 00 00 
ffffffff80108503:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010850a:	00 00 00 00 
ffffffff8010850e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108515:	00 00 00 00 
ffffffff80108519:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108520:	00 00 00 00 
ffffffff80108524:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010852b:	00 00 00 00 
ffffffff8010852f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108536:	00 00 00 00 
ffffffff8010853a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108541:	00 00 00 00 
ffffffff80108545:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010854c:	00 00 00 00 
ffffffff80108550:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108557:	00 00 00 00 
ffffffff8010855b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108562:	00 00 00 00 
ffffffff80108566:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010856d:	00 00 00 00 
ffffffff80108571:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108578:	00 00 00 00 
ffffffff8010857c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108583:	00 00 00 00 
ffffffff80108587:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010858e:	00 00 00 00 
ffffffff80108592:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108599:	00 00 00 00 
ffffffff8010859d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085a4:	00 00 00 00 
ffffffff801085a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085af:	00 00 00 00 
ffffffff801085b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085ba:	00 00 00 00 
ffffffff801085be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085c5:	00 00 00 00 
ffffffff801085c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085d0:	00 00 00 00 
ffffffff801085d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085db:	00 00 00 00 
ffffffff801085df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085e6:	00 00 00 00 
ffffffff801085ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085f1:	00 00 00 00 
ffffffff801085f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085fc:	00 00 00 00 
ffffffff80108600:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108607:	00 00 00 00 
ffffffff8010860b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108612:	00 00 00 00 
ffffffff80108616:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010861d:	00 00 00 00 
ffffffff80108621:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108628:	00 00 00 00 
ffffffff8010862c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108633:	00 00 00 00 
ffffffff80108637:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010863e:	00 00 00 00 
ffffffff80108642:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108649:	00 00 00 00 
ffffffff8010864d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108654:	00 00 00 00 
ffffffff80108658:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010865f:	00 00 00 00 
ffffffff80108663:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010866a:	00 00 00 00 
ffffffff8010866e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108675:	00 00 00 00 
ffffffff80108679:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108680:	00 00 00 00 
ffffffff80108684:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010868b:	00 00 00 00 
ffffffff8010868f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108696:	00 00 00 00 
ffffffff8010869a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086a1:	00 00 00 00 
ffffffff801086a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ac:	00 00 00 00 
ffffffff801086b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086b7:	00 00 00 00 
ffffffff801086bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086c2:	00 00 00 00 
ffffffff801086c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086cd:	00 00 00 00 
ffffffff801086d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086d8:	00 00 00 00 
ffffffff801086dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086e3:	00 00 00 00 
ffffffff801086e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ee:	00 00 00 00 
ffffffff801086f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086f9:	00 00 00 00 
ffffffff801086fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108704:	00 00 00 00 
ffffffff80108708:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010870f:	00 00 00 00 
ffffffff80108713:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010871a:	00 00 00 00 
ffffffff8010871e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108725:	00 00 00 00 
ffffffff80108729:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108730:	00 00 00 00 
ffffffff80108734:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010873b:	00 00 00 00 
ffffffff8010873f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108746:	00 00 00 00 
ffffffff8010874a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108751:	00 00 00 00 
ffffffff80108755:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010875c:	00 00 00 00 
ffffffff80108760:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108767:	00 00 00 00 
ffffffff8010876b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108772:	00 00 00 00 
ffffffff80108776:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010877d:	00 00 00 00 
ffffffff80108781:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108788:	00 00 00 00 
ffffffff8010878c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108793:	00 00 00 00 
ffffffff80108797:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010879e:	00 00 00 00 
ffffffff801087a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087a9:	00 00 00 00 
ffffffff801087ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087b4:	00 00 00 00 
ffffffff801087b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087bf:	00 00 00 00 
ffffffff801087c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087ca:	00 00 00 00 
ffffffff801087ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087d5:	00 00 00 00 
ffffffff801087d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087e0:	00 00 00 00 
ffffffff801087e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087eb:	00 00 00 00 
ffffffff801087ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087f6:	00 00 00 00 
ffffffff801087fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108801:	00 00 00 00 
ffffffff80108805:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010880c:	00 00 00 00 
ffffffff80108810:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108817:	00 00 00 00 
ffffffff8010881b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108822:	00 00 00 00 
ffffffff80108826:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010882d:	00 00 00 00 
ffffffff80108831:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108838:	00 00 00 00 
ffffffff8010883c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108843:	00 00 00 00 
ffffffff80108847:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010884e:	00 00 00 00 
ffffffff80108852:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108859:	00 00 00 00 
ffffffff8010885d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108864:	00 00 00 00 
ffffffff80108868:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010886f:	00 00 00 00 
ffffffff80108873:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010887a:	00 00 00 00 
ffffffff8010887e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108885:	00 00 00 00 
ffffffff80108889:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108890:	00 00 00 00 
ffffffff80108894:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010889b:	00 00 00 00 
ffffffff8010889f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088a6:	00 00 00 00 
ffffffff801088aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088b1:	00 00 00 00 
ffffffff801088b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088bc:	00 00 00 00 
ffffffff801088c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088c7:	00 00 00 00 
ffffffff801088cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088d2:	00 00 00 00 
ffffffff801088d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088dd:	00 00 00 00 
ffffffff801088e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088e8:	00 00 00 00 
ffffffff801088ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088f3:	00 00 00 00 
ffffffff801088f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088fe:	00 00 00 00 
ffffffff80108902:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108909:	00 00 00 00 
ffffffff8010890d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108914:	00 00 00 00 
ffffffff80108918:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010891f:	00 00 00 00 
ffffffff80108923:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010892a:	00 00 00 00 
ffffffff8010892e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108935:	00 00 00 00 
ffffffff80108939:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108940:	00 00 00 00 
ffffffff80108944:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010894b:	00 00 00 00 
ffffffff8010894f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108956:	00 00 00 00 
ffffffff8010895a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108961:	00 00 00 00 
ffffffff80108965:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010896c:	00 00 00 00 
ffffffff80108970:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108977:	00 00 00 00 
ffffffff8010897b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108982:	00 00 00 00 
ffffffff80108986:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010898d:	00 00 00 00 
ffffffff80108991:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108998:	00 00 00 00 
ffffffff8010899c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089a3:	00 00 00 00 
ffffffff801089a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ae:	00 00 00 00 
ffffffff801089b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089b9:	00 00 00 00 
ffffffff801089bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089c4:	00 00 00 00 
ffffffff801089c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089cf:	00 00 00 00 
ffffffff801089d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089da:	00 00 00 00 
ffffffff801089de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089e5:	00 00 00 00 
ffffffff801089e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089f0:	00 00 00 00 
ffffffff801089f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089fb:	00 00 00 00 
ffffffff801089ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a06:	00 00 00 00 
ffffffff80108a0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a11:	00 00 00 00 
ffffffff80108a15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a1c:	00 00 00 00 
ffffffff80108a20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a27:	00 00 00 00 
ffffffff80108a2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a32:	00 00 00 00 
ffffffff80108a36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a3d:	00 00 00 00 
ffffffff80108a41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a48:	00 00 00 00 
ffffffff80108a4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a53:	00 00 00 00 
ffffffff80108a57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a5e:	00 00 00 00 
ffffffff80108a62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a69:	00 00 00 00 
ffffffff80108a6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a74:	00 00 00 00 
ffffffff80108a78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a7f:	00 00 00 00 
ffffffff80108a83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a8a:	00 00 00 00 
ffffffff80108a8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a95:	00 00 00 00 
ffffffff80108a99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aa0:	00 00 00 00 
ffffffff80108aa4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aab:	00 00 00 00 
ffffffff80108aaf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ab6:	00 00 00 00 
ffffffff80108aba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ac1:	00 00 00 00 
ffffffff80108ac5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108acc:	00 00 00 00 
ffffffff80108ad0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ad7:	00 00 00 00 
ffffffff80108adb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ae2:	00 00 00 00 
ffffffff80108ae6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aed:	00 00 00 00 
ffffffff80108af1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108af8:	00 00 00 00 
ffffffff80108afc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b03:	00 00 00 00 
ffffffff80108b07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b0e:	00 00 00 00 
ffffffff80108b12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b19:	00 00 00 00 
ffffffff80108b1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b24:	00 00 00 00 
ffffffff80108b28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b2f:	00 00 00 00 
ffffffff80108b33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b3a:	00 00 00 00 
ffffffff80108b3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b45:	00 00 00 00 
ffffffff80108b49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b50:	00 00 00 00 
ffffffff80108b54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b5b:	00 00 00 00 
ffffffff80108b5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b66:	00 00 00 00 
ffffffff80108b6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b71:	00 00 00 00 
ffffffff80108b75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b7c:	00 00 00 00 
ffffffff80108b80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b87:	00 00 00 00 
ffffffff80108b8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b92:	00 00 00 00 
ffffffff80108b96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b9d:	00 00 00 00 
ffffffff80108ba1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ba8:	00 00 00 00 
ffffffff80108bac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bb3:	00 00 00 00 
ffffffff80108bb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bbe:	00 00 00 00 
ffffffff80108bc2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bc9:	00 00 00 00 
ffffffff80108bcd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bd4:	00 00 00 00 
ffffffff80108bd8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bdf:	00 00 00 00 
ffffffff80108be3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bea:	00 00 00 00 
ffffffff80108bee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bf5:	00 00 00 00 
ffffffff80108bf9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c00:	00 00 00 00 
ffffffff80108c04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c0b:	00 00 00 00 
ffffffff80108c0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c16:	00 00 00 00 
ffffffff80108c1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c21:	00 00 00 00 
ffffffff80108c25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c2c:	00 00 00 00 
ffffffff80108c30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c37:	00 00 00 00 
ffffffff80108c3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c42:	00 00 00 00 
ffffffff80108c46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c4d:	00 00 00 00 
ffffffff80108c51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c58:	00 00 00 00 
ffffffff80108c5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c63:	00 00 00 00 
ffffffff80108c67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c6e:	00 00 00 00 
ffffffff80108c72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c79:	00 00 00 00 
ffffffff80108c7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c84:	00 00 00 00 
ffffffff80108c88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c8f:	00 00 00 00 
ffffffff80108c93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c9a:	00 00 00 00 
ffffffff80108c9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ca5:	00 00 00 00 
ffffffff80108ca9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cb0:	00 00 00 00 
ffffffff80108cb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cbb:	00 00 00 00 
ffffffff80108cbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cc6:	00 00 00 00 
ffffffff80108cca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cd1:	00 00 00 00 
ffffffff80108cd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cdc:	00 00 00 00 
ffffffff80108ce0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ce7:	00 00 00 00 
ffffffff80108ceb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cf2:	00 00 00 00 
ffffffff80108cf6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cfd:	00 00 00 00 
ffffffff80108d01:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d08:	00 00 00 00 
ffffffff80108d0c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d13:	00 00 00 00 
ffffffff80108d17:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d1e:	00 00 00 00 
ffffffff80108d22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d29:	00 00 00 00 
ffffffff80108d2d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d34:	00 00 00 00 
ffffffff80108d38:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d3f:	00 00 00 00 
ffffffff80108d43:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d4a:	00 00 00 00 
ffffffff80108d4e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d55:	00 00 00 00 
ffffffff80108d59:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d60:	00 00 00 00 
ffffffff80108d64:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d6b:	00 00 00 00 
ffffffff80108d6f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d76:	00 00 00 00 
ffffffff80108d7a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d81:	00 00 00 00 
ffffffff80108d85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d8c:	00 00 00 00 
ffffffff80108d90:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d97:	00 00 00 00 
ffffffff80108d9b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108da2:	00 00 00 00 
ffffffff80108da6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dad:	00 00 00 00 
ffffffff80108db1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108db8:	00 00 00 00 
ffffffff80108dbc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dc3:	00 00 00 00 
ffffffff80108dc7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dce:	00 00 00 00 
ffffffff80108dd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dd9:	00 00 00 00 
ffffffff80108ddd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108de4:	00 00 00 00 
ffffffff80108de8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108def:	00 00 00 00 
ffffffff80108df3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dfa:	00 00 00 00 
ffffffff80108dfe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e05:	00 00 00 00 
ffffffff80108e09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e10:	00 00 00 00 
ffffffff80108e14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e1b:	00 00 00 00 
ffffffff80108e1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e26:	00 00 00 00 
ffffffff80108e2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e31:	00 00 00 00 
ffffffff80108e35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e3c:	00 00 00 00 
ffffffff80108e40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e47:	00 00 00 00 
ffffffff80108e4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e52:	00 00 00 00 
ffffffff80108e56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e5d:	00 00 00 00 
ffffffff80108e61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e68:	00 00 00 00 
ffffffff80108e6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e73:	00 00 00 00 
ffffffff80108e77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e7e:	00 00 00 00 
ffffffff80108e82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e89:	00 00 00 00 
ffffffff80108e8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e94:	00 00 00 00 
ffffffff80108e98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e9f:	00 00 00 00 
ffffffff80108ea3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eaa:	00 00 00 00 
ffffffff80108eae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eb5:	00 00 00 00 
ffffffff80108eb9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ec0:	00 00 00 00 
ffffffff80108ec4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ecb:	00 00 00 00 
ffffffff80108ecf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ed6:	00 00 00 00 
ffffffff80108eda:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ee1:	00 00 00 00 
ffffffff80108ee5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eec:	00 00 00 00 
ffffffff80108ef0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ef7:	00 00 00 00 
ffffffff80108efb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f02:	00 00 00 00 
ffffffff80108f06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f0d:	00 00 00 00 
ffffffff80108f11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f18:	00 00 00 00 
ffffffff80108f1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f23:	00 00 00 00 
ffffffff80108f27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f2e:	00 00 00 00 
ffffffff80108f32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f39:	00 00 00 00 
ffffffff80108f3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f44:	00 00 00 00 
ffffffff80108f48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f4f:	00 00 00 00 
ffffffff80108f53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f5a:	00 00 00 00 
ffffffff80108f5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f65:	00 00 00 00 
ffffffff80108f69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f70:	00 00 00 00 
ffffffff80108f74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f7b:	00 00 00 00 
ffffffff80108f7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f86:	00 00 00 00 
ffffffff80108f8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f91:	00 00 00 00 
ffffffff80108f95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f9c:	00 00 00 00 
ffffffff80108fa0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fa7:	00 00 00 00 
ffffffff80108fab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fb2:	00 00 00 00 
ffffffff80108fb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fbd:	00 00 00 00 
ffffffff80108fc1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fc8:	00 00 00 00 
ffffffff80108fcc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fd3:	00 00 00 00 
ffffffff80108fd7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fde:	00 00 00 00 
ffffffff80108fe2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fe9:	00 00 00 00 
ffffffff80108fed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ff4:	00 00 00 00 
ffffffff80108ff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80108fff:	00 

ffffffff80109000 <RME_X64_Kpgt>:
	...

ffffffff8020b800 <__RME_X64_In>:
Input       : ptr_t Port - The port to output to.
Output      : None.
Return      : ptr_t - The data received from that port.
******************************************************************************/
__RME_X64_In:
    PUSHQ               %RDX
ffffffff8020b800:	52                   	push   %rdx
    MOVQ                %RDI,%RDX
ffffffff8020b801:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RAX,%RAX
ffffffff8020b804:	48 89 c0             	mov    %rax,%rax
    INB                 (%DX),%AL
ffffffff8020b807:	ec                   	in     (%dx),%al
    POPQ                %RDX
ffffffff8020b808:	5a                   	pop    %rdx
    RETQ
ffffffff8020b809:	c3                   	ret

ffffffff8020b80a <__RME_X64_Out>:
                 ptr_t Data - The data to send to that port.
Output         : None.
Return         : None.
******************************************************************************/
__RME_X64_Out:
    PUSHQ               %RDX
ffffffff8020b80a:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b80b:	50                   	push   %rax
    MOVQ                %RDI,%RDX
ffffffff8020b80c:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RSI,%RAX
ffffffff8020b80f:	48 89 f0             	mov    %rsi,%rax
    OUTB                %AL,(%DX)
ffffffff8020b812:	ee                   	out    %al,(%dx)
    POPQ                %RAX
ffffffff8020b813:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b814:	5a                   	pop    %rdx
    RETQ
ffffffff8020b815:	c3                   	ret

ffffffff8020b816 <__RME_X64_Read_MSR>:
Input       : ptr_t MSR - The MSR to read.
Output      : None.
Return      : ptr_t - The content of the MSR.
******************************************************************************/
__RME_X64_Read_MSR:
    PUSHQ               %RCX
ffffffff8020b816:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b817:	52                   	push   %rdx
    MOVQ                %RDI,%RCX
ffffffff8020b818:	48 89 f9             	mov    %rdi,%rcx
    XORQ                %RAX,%RAX
ffffffff8020b81b:	48 31 c0             	xor    %rax,%rax
    RDMSR
ffffffff8020b81e:	0f 32                	rdmsr
    SHLQ                $32,%RDX
ffffffff8020b820:	48 c1 e2 20          	shl    $0x20,%rdx
    ADDQ                %RDX,%RAX
ffffffff8020b824:	48 01 d0             	add    %rdx,%rax
    POPQ                %RDX
ffffffff8020b827:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b828:	59                   	pop    %rcx
    RETQ
ffffffff8020b829:	c3                   	ret

ffffffff8020b82a <__RME_X64_Write_MSR>:
              ptr_t Value - The value to write to it.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_MSR:
    PUSHQ               %RCX
ffffffff8020b82a:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b82b:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b82c:	50                   	push   %rax
    MOVQ                %RDI,%RCX
ffffffff8020b82d:	48 89 f9             	mov    %rdi,%rcx
    MOVL                %ESI,%EAX
ffffffff8020b830:	89 f0                	mov    %esi,%eax
    MOVQ                %RSI,%RDX
ffffffff8020b832:	48 89 f2             	mov    %rsi,%rdx
    SHR                 $32,%RDX
ffffffff8020b835:	48 c1 ea 20          	shr    $0x20,%rdx
    WRMSR
ffffffff8020b839:	0f 30                	wrmsr
    POPQ                %RAX
ffffffff8020b83b:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b83c:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b83d:	59                   	pop    %rcx
    RETQ
ffffffff8020b83e:	c3                   	ret

ffffffff8020b83f <__RME_X64_CPU_Local_Get>:
Input       : None.
Output      : None.
Return      : struct RME_CPU_Local* - The CPU-local data structures.
******************************************************************************/
__RME_X64_CPU_Local_Get:
    MOVQ                %GS:(8192-8*3),%RAX
ffffffff8020b83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020b846:	00 00 
    RETQ
ffffffff8020b848:	c3                   	ret

ffffffff8020b849 <__RME_X64_CPUID_Get>:
              ptr_t* ECX - The ECX info.
              ptr_t* EDX - The EDX info.
Return      : ptr_t - The maximum number for CPUID instruction.
******************************************************************************/
__RME_X64_CPUID_Get:
    PUSHQ               %R8
ffffffff8020b849:	41 50                	push   %r8
    PUSHQ               %R9
ffffffff8020b84b:	41 51                	push   %r9
    PUSHQ               %RBX
ffffffff8020b84d:	53                   	push   %rbx
    PUSHQ               %RCX
ffffffff8020b84e:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b84f:	52                   	push   %rdx

    MOVQ                %RDI,%RAX
ffffffff8020b850:	48 89 f8             	mov    %rdi,%rax
    MOVQ                %RDX,%R8
ffffffff8020b853:	49 89 d0             	mov    %rdx,%r8
    MOVQ                %RCX,%R9
ffffffff8020b856:	49 89 c9             	mov    %rcx,%r9

    MOVQ                (%RSI),%RBX
ffffffff8020b859:	48 8b 1e             	mov    (%rsi),%rbx
    MOVQ                (%R8),%RCX
ffffffff8020b85c:	49 8b 08             	mov    (%r8),%rcx
    MOVQ                (%R9),%RDX
ffffffff8020b85f:	49 8b 11             	mov    (%r9),%rdx
    CPUID
ffffffff8020b862:	0f a2                	cpuid
    MOVQ                %RBX,(%RSI)
ffffffff8020b864:	48 89 1e             	mov    %rbx,(%rsi)
    MOVQ                %RCX,(%R8)
ffffffff8020b867:	49 89 08             	mov    %rcx,(%r8)
    MOVQ                %RDX,(%R9)
ffffffff8020b86a:	49 89 11             	mov    %rdx,(%r9)

    POPQ                %RDX
ffffffff8020b86d:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b86e:	59                   	pop    %rcx
    POPQ                %RBX
ffffffff8020b86f:	5b                   	pop    %rbx
    POPQ                %R9
ffffffff8020b870:	41 59                	pop    %r9
    POPQ                %R8
ffffffff8020b872:	41 58                	pop    %r8
    RETQ
ffffffff8020b874:	c3                   	ret

ffffffff8020b875 <__RME_X64_GDT_Load>:
Input       : ptr_t* GDTR - The pointer to the GDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_GDT_Load:
    LGDT                (%RDI)
ffffffff8020b875:	0f 01 17             	lgdt   (%rdi)
    RETQ
ffffffff8020b878:	c3                   	ret

ffffffff8020b879 <__RME_X64_IDT_Load>:
Input       : ptr_t* IDTR - The pointer to the IDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_IDT_Load:
    LIDT                (%RDI)
ffffffff8020b879:	0f 01 1f             	lidt   (%rdi)
    RETQ
ffffffff8020b87c:	c3                   	ret

ffffffff8020b87d <__RME_X64_TSS_Load>:
Input       : ptr_t TSS - The TSS's position in GDT.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_TSS_Load:
    LTR                 %DI
ffffffff8020b87d:	0f 00 df             	ltr    %edi
    RETQ
ffffffff8020b880:	c3                   	ret

ffffffff8020b881 <__RME_X64_Comp_Swap>:
              ptr_t New - The new value.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - If successful, 1; else 0.
******************************************************************************/
__RME_X64_Comp_Swap:
    MOVQ                %RSI,%RAX
ffffffff8020b881:	48 89 f0             	mov    %rsi,%rax
    XOR                 %RSI,%RSI
ffffffff8020b884:	48 31 f6             	xor    %rsi,%rsi
    /* In x86, locked instructions act as a fence */
    LOCK CMPXCHGQ       %RDX,(%RDI)
ffffffff8020b887:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
    /* Set the bit if ZF is set */
    SETZ                %SIL
ffffffff8020b88c:	40 0f 94 c6          	sete   %sil
    MOVQ                %RSI,%RAX
ffffffff8020b890:	48 89 f0             	mov    %rsi,%rax
    RETQ
ffffffff8020b893:	c3                   	ret

ffffffff8020b894 <__RME_X64_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_X64_Fetch_Add:
    MOVQ                %RSI,%RAX
ffffffff8020b894:	48 89 f0             	mov    %rsi,%rax
    /* In x86, locked instructions act as a fence */
    LOCK XADDQ          %RAX,(%RDI)
ffffffff8020b897:	f0 48 0f c1 07       	lock xadd %rax,(%rdi)
    RETQ
ffffffff8020b89c:	c3                   	ret

ffffffff8020b89d <__RME_X64_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_X64_Fetch_And:
    MOVQ                (%RDI),%RAX
ffffffff8020b89d:	48 8b 07             	mov    (%rdi),%rax
    /* In x86, locked instructions act as a fence */
    LOCK ANDQ           %RSI,(%RDI)
ffffffff8020b8a0:	f0 48 21 37          	lock and %rsi,(%rdi)
    RETQ
ffffffff8020b8a4:	c3                   	ret

ffffffff8020b8a5 <__RME_X64_Write_Release>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_Release:
    MFENCE
ffffffff8020b8a5:	0f ae f0             	mfence
    RETQ
ffffffff8020b8a8:	c3                   	ret

ffffffff8020b8a9 <__RME_X64_Pgt_Set>:
Input       : ptr_t Pgt - The physical address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Pgt_Set:
    MOV                 %RDI,%CR3
ffffffff8020b8a9:	0f 22 df             	mov    %rdi,%cr3
    RETQ
ffffffff8020b8ac:	c3                   	ret

ffffffff8020b8ad <__RME_Disable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Disable_Int:
    /* Disable all interrupts */
    CLI
ffffffff8020b8ad:	fa                   	cli
    RETQ
ffffffff8020b8ae:	c3                   	ret

ffffffff8020b8af <__RME_Enable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enable_Int:
    /* Enable all interrupts */
    STI
ffffffff8020b8af:	fb                   	sti
    RETQ
ffffffff8020b8b0:	c3                   	ret

ffffffff8020b8b1 <__RME_X64_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Halt:
    /* Wait for interrupt */
    HLT
ffffffff8020b8b1:	f4                   	hlt
    RETQ
ffffffff8020b8b2:	c3                   	ret

ffffffff8020b8b3 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOVQ                %RDI,%RSP
ffffffff8020b8b3:	48 89 fc             	mov    %rdi,%rsp
    JMP                 RME_Kmain
ffffffff8020b8b6:	e9 c4 16 00 00       	jmp    ffffffff8020cf7f <RME_Kmain>

ffffffff8020b8bb <__RME_X64_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_X64_MSB_Get:
    BSRQ                %RDI,%RAX
ffffffff8020b8bb:	48 0f bd c7          	bsr    %rdi,%rax
    RETQ
ffffffff8020b8bf:	c3                   	ret

ffffffff8020b8c0 <__RME_Enter_User_Mode>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enter_User_Mode:
    MOVQ                %RDI,%RCX           /* Entry */
ffffffff8020b8c0:	48 89 f9             	mov    %rdi,%rcx
    MOVQ                %RSI,%RSP           /* Stack */
ffffffff8020b8c3:	48 89 f4             	mov    %rsi,%rsp
    MOVQ                $0x3200,%R11        /* Flags - IOPL 3, IF */
ffffffff8020b8c6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
    MOVQ                %RDX,%RDI           /* CPUID */
ffffffff8020b8cd:	48 89 d7             	mov    %rdx,%rdi
    SYSRETQ
ffffffff8020b8d0:	48 0f 07             	sysretq

ffffffff8020b8d3 <__RME_X64_FAULT_DE_Handler>:
    PUSHQ               $\REASON
    JMP                 Fault_Handler
.endm

/* Fault handlers */
FAULT_HANDLER NAME=__RME_X64_FAULT_DE_Handler ERRCODE=0 REASON=0
ffffffff8020b8d3:	0f 01 f8             	swapgs
ffffffff8020b8d6:	6a 00                	push   $0x0
ffffffff8020b8d8:	6a 00                	push   $0x0
ffffffff8020b8da:	e9 a6 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8df <__RME_X64_TRAP_DB_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_DB_Handler ERRCODE=0 REASON=1
ffffffff8020b8df:	0f 01 f8             	swapgs
ffffffff8020b8e2:	6a 00                	push   $0x0
ffffffff8020b8e4:	6a 01                	push   $0x1
ffffffff8020b8e6:	e9 9a 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8eb <__RME_X64_INT_NMI_Handler>:
FAULT_HANDLER NAME=__RME_X64_INT_NMI_Handler ERRCODE=0 REASON=2
ffffffff8020b8eb:	0f 01 f8             	swapgs
ffffffff8020b8ee:	6a 00                	push   $0x0
ffffffff8020b8f0:	6a 02                	push   $0x2
ffffffff8020b8f2:	e9 8e 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8f7 <__RME_X64_TRAP_BP_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_BP_Handler ERRCODE=0 REASON=3
ffffffff8020b8f7:	0f 01 f8             	swapgs
ffffffff8020b8fa:	6a 00                	push   $0x0
ffffffff8020b8fc:	6a 03                	push   $0x3
ffffffff8020b8fe:	e9 82 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b903 <__RME_X64_TRAP_OF_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_OF_Handler ERRCODE=0 REASON=4
ffffffff8020b903:	0f 01 f8             	swapgs
ffffffff8020b906:	6a 00                	push   $0x0
ffffffff8020b908:	6a 04                	push   $0x4
ffffffff8020b90a:	eb 79                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b90c <__RME_X64_FAULT_BR_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_BR_Handler ERRCODE=0 REASON=5
ffffffff8020b90c:	0f 01 f8             	swapgs
ffffffff8020b90f:	6a 00                	push   $0x0
ffffffff8020b911:	6a 05                	push   $0x5
ffffffff8020b913:	eb 70                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b915 <__RME_X64_FAULT_UD_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_UD_Handler ERRCODE=0 REASON=6
ffffffff8020b915:	0f 01 f8             	swapgs
ffffffff8020b918:	6a 00                	push   $0x0
ffffffff8020b91a:	6a 06                	push   $0x6
ffffffff8020b91c:	eb 67                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b91e <__RME_X64_FAULT_NM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NM_Handler ERRCODE=0 REASON=7
ffffffff8020b91e:	0f 01 f8             	swapgs
ffffffff8020b921:	6a 00                	push   $0x0
ffffffff8020b923:	6a 07                	push   $0x7
ffffffff8020b925:	eb 5e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b927 <__RME_X64_ABORT_DF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_DF_Handler ERRCODE=1 REASON=8
ffffffff8020b927:	0f 01 f8             	swapgs
ffffffff8020b92a:	6a 08                	push   $0x8
ffffffff8020b92c:	eb 57                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b92e <__RME_X64_ABORT_OLD_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_OLD_MF_Handler ERRCODE=0 REASON=9
ffffffff8020b92e:	0f 01 f8             	swapgs
ffffffff8020b931:	6a 00                	push   $0x0
ffffffff8020b933:	6a 09                	push   $0x9
ffffffff8020b935:	eb 4e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b937 <__RME_X64_FAULT_TS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_TS_Handler ERRCODE=1 REASON=10
ffffffff8020b937:	0f 01 f8             	swapgs
ffffffff8020b93a:	6a 0a                	push   $0xa
ffffffff8020b93c:	eb 47                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b93e <__RME_X64_FAULT_NP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NP_Handler ERRCODE=1 REASON=11
ffffffff8020b93e:	0f 01 f8             	swapgs
ffffffff8020b941:	6a 0b                	push   $0xb
ffffffff8020b943:	eb 40                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b945 <__RME_X64_FAULT_SS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_SS_Handler ERRCODE=1 REASON=12
ffffffff8020b945:	0f 01 f8             	swapgs
ffffffff8020b948:	6a 0c                	push   $0xc
ffffffff8020b94a:	eb 39                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b94c <__RME_X64_FAULT_GP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_GP_Handler ERRCODE=1 REASON=13
ffffffff8020b94c:	0f 01 f8             	swapgs
ffffffff8020b94f:	6a 0d                	push   $0xd
ffffffff8020b951:	eb 32                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b953 <__RME_X64_FAULT_PF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_PF_Handler ERRCODE=1 REASON=14
ffffffff8020b953:	0f 01 f8             	swapgs
ffffffff8020b956:	6a 0e                	push   $0xe
ffffffff8020b958:	eb 2b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b95a <__RME_X64_FAULT_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_MF_Handler ERRCODE=0 REASON=16
ffffffff8020b95a:	0f 01 f8             	swapgs
ffffffff8020b95d:	6a 00                	push   $0x0
ffffffff8020b95f:	6a 10                	push   $0x10
ffffffff8020b961:	eb 22                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b963 <__RME_X64_FAULT_AC_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_AC_Handler ERRCODE=1 REASON=17
ffffffff8020b963:	0f 01 f8             	swapgs
ffffffff8020b966:	6a 11                	push   $0x11
ffffffff8020b968:	eb 1b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b96a <__RME_X64_ABORT_MC_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_MC_Handler ERRCODE=0 REASON=18
ffffffff8020b96a:	0f 01 f8             	swapgs
ffffffff8020b96d:	6a 00                	push   $0x0
ffffffff8020b96f:	6a 12                	push   $0x12
ffffffff8020b971:	eb 12                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b973 <__RME_X64_FAULT_XM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_XM_Handler ERRCODE=0 REASON=19
ffffffff8020b973:	0f 01 f8             	swapgs
ffffffff8020b976:	6a 00                	push   $0x0
ffffffff8020b978:	6a 13                	push   $0x13
ffffffff8020b97a:	eb 09                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b97c <__RME_X64_FAULT_VE_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_VE_Handler ERRCODE=0 REASON=20
ffffffff8020b97c:	0f 01 f8             	swapgs
ffffffff8020b97f:	6a 00                	push   $0x0
ffffffff8020b981:	6a 14                	push   $0x14
ffffffff8020b983:	eb 00                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b985 <Fault_Handler>:
/* Common function body for fault handlers - reduce I-Cache usage */
Fault_Handler:
    SAVE_GP_REGS
ffffffff8020b985:	41 57                	push   %r15
ffffffff8020b987:	41 56                	push   %r14
ffffffff8020b989:	41 55                	push   %r13
ffffffff8020b98b:	41 54                	push   %r12
ffffffff8020b98d:	41 53                	push   %r11
ffffffff8020b98f:	41 52                	push   %r10
ffffffff8020b991:	41 51                	push   %r9
ffffffff8020b993:	41 50                	push   %r8
ffffffff8020b995:	55                   	push   %rbp
ffffffff8020b996:	57                   	push   %rdi
ffffffff8020b997:	56                   	push   %rsi
ffffffff8020b998:	52                   	push   %rdx
ffffffff8020b999:	51                   	push   %rcx
ffffffff8020b99a:	53                   	push   %rbx
ffffffff8020b99b:	50                   	push   %rax
ffffffff8020b99c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020b9a0:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020b9a2:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020b9a5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Fault_Handler
ffffffff8020b9aa:	e8 cc a9 01 00       	call   ffffffff8022637b <__RME_X64_Fault_Handler>

    RESTORE_GP_REGS
ffffffff8020b9af:	0f 01 f8             	swapgs
ffffffff8020b9b2:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020b9b6:	8e d8                	mov    %eax,%ds
ffffffff8020b9b8:	58                   	pop    %rax
ffffffff8020b9b9:	5b                   	pop    %rbx
ffffffff8020b9ba:	59                   	pop    %rcx
ffffffff8020b9bb:	5a                   	pop    %rdx
ffffffff8020b9bc:	5e                   	pop    %rsi
ffffffff8020b9bd:	5f                   	pop    %rdi
ffffffff8020b9be:	5d                   	pop    %rbp
ffffffff8020b9bf:	41 58                	pop    %r8
ffffffff8020b9c1:	41 59                	pop    %r9
ffffffff8020b9c3:	41 5a                	pop    %r10
ffffffff8020b9c5:	41 5b                	pop    %r11
ffffffff8020b9c7:	41 5c                	pop    %r12
ffffffff8020b9c9:	41 5d                	pop    %r13
ffffffff8020b9cb:	41 5e                	pop    %r14
ffffffff8020b9cd:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020b9cf:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020b9d3:	48 cf                	iretq

ffffffff8020b9d5 <__RME_X64_USER32_Handler>:
    PUSHQ               $0                  /* Make a dummy error code */
    PUSHQ               $\VECTNUM           /* Interrupt number */
    JMP                 User_Handler
.endm
/* User handlers */
USER_HANDLER NAME=__RME_X64_USER32_Handler VECTNUM=32
ffffffff8020b9d5:	0f 01 f8             	swapgs
ffffffff8020b9d8:	6a 00                	push   $0x0
ffffffff8020b9da:	6a 20                	push   $0x20
ffffffff8020b9dc:	e9 d3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9e1 <__RME_X64_USER33_Handler>:
USER_HANDLER NAME=__RME_X64_USER33_Handler VECTNUM=33
ffffffff8020b9e1:	0f 01 f8             	swapgs
ffffffff8020b9e4:	6a 00                	push   $0x0
ffffffff8020b9e6:	6a 21                	push   $0x21
ffffffff8020b9e8:	e9 c7 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9ed <__RME_X64_USER34_Handler>:
USER_HANDLER NAME=__RME_X64_USER34_Handler VECTNUM=34
ffffffff8020b9ed:	0f 01 f8             	swapgs
ffffffff8020b9f0:	6a 00                	push   $0x0
ffffffff8020b9f2:	6a 22                	push   $0x22
ffffffff8020b9f4:	e9 bb 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9f9 <__RME_X64_USER35_Handler>:
USER_HANDLER NAME=__RME_X64_USER35_Handler VECTNUM=35
ffffffff8020b9f9:	0f 01 f8             	swapgs
ffffffff8020b9fc:	6a 00                	push   $0x0
ffffffff8020b9fe:	6a 23                	push   $0x23
ffffffff8020ba00:	e9 af 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba05 <__RME_X64_USER36_Handler>:
USER_HANDLER NAME=__RME_X64_USER36_Handler VECTNUM=36
ffffffff8020ba05:	0f 01 f8             	swapgs
ffffffff8020ba08:	6a 00                	push   $0x0
ffffffff8020ba0a:	6a 24                	push   $0x24
ffffffff8020ba0c:	e9 a3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba11 <__RME_X64_USER37_Handler>:
USER_HANDLER NAME=__RME_X64_USER37_Handler VECTNUM=37
ffffffff8020ba11:	0f 01 f8             	swapgs
ffffffff8020ba14:	6a 00                	push   $0x0
ffffffff8020ba16:	6a 25                	push   $0x25
ffffffff8020ba18:	e9 97 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba1d <__RME_X64_USER38_Handler>:
USER_HANDLER NAME=__RME_X64_USER38_Handler VECTNUM=38
ffffffff8020ba1d:	0f 01 f8             	swapgs
ffffffff8020ba20:	6a 00                	push   $0x0
ffffffff8020ba22:	6a 26                	push   $0x26
ffffffff8020ba24:	e9 8b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba29 <__RME_X64_USER39_Handler>:
USER_HANDLER NAME=__RME_X64_USER39_Handler VECTNUM=39
ffffffff8020ba29:	0f 01 f8             	swapgs
ffffffff8020ba2c:	6a 00                	push   $0x0
ffffffff8020ba2e:	6a 27                	push   $0x27
ffffffff8020ba30:	e9 7f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba35 <__RME_X64_USER40_Handler>:

USER_HANDLER NAME=__RME_X64_USER40_Handler VECTNUM=40
ffffffff8020ba35:	0f 01 f8             	swapgs
ffffffff8020ba38:	6a 00                	push   $0x0
ffffffff8020ba3a:	6a 28                	push   $0x28
ffffffff8020ba3c:	e9 73 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba41 <__RME_X64_USER41_Handler>:
USER_HANDLER NAME=__RME_X64_USER41_Handler VECTNUM=41
ffffffff8020ba41:	0f 01 f8             	swapgs
ffffffff8020ba44:	6a 00                	push   $0x0
ffffffff8020ba46:	6a 29                	push   $0x29
ffffffff8020ba48:	e9 67 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba4d <__RME_X64_USER42_Handler>:
USER_HANDLER NAME=__RME_X64_USER42_Handler VECTNUM=42
ffffffff8020ba4d:	0f 01 f8             	swapgs
ffffffff8020ba50:	6a 00                	push   $0x0
ffffffff8020ba52:	6a 2a                	push   $0x2a
ffffffff8020ba54:	e9 5b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba59 <__RME_X64_USER43_Handler>:
USER_HANDLER NAME=__RME_X64_USER43_Handler VECTNUM=43
ffffffff8020ba59:	0f 01 f8             	swapgs
ffffffff8020ba5c:	6a 00                	push   $0x0
ffffffff8020ba5e:	6a 2b                	push   $0x2b
ffffffff8020ba60:	e9 4f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba65 <__RME_X64_USER44_Handler>:
USER_HANDLER NAME=__RME_X64_USER44_Handler VECTNUM=44
ffffffff8020ba65:	0f 01 f8             	swapgs
ffffffff8020ba68:	6a 00                	push   $0x0
ffffffff8020ba6a:	6a 2c                	push   $0x2c
ffffffff8020ba6c:	e9 43 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba71 <__RME_X64_USER45_Handler>:
USER_HANDLER NAME=__RME_X64_USER45_Handler VECTNUM=45
ffffffff8020ba71:	0f 01 f8             	swapgs
ffffffff8020ba74:	6a 00                	push   $0x0
ffffffff8020ba76:	6a 2d                	push   $0x2d
ffffffff8020ba78:	e9 37 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba7d <__RME_X64_USER46_Handler>:
USER_HANDLER NAME=__RME_X64_USER46_Handler VECTNUM=46
ffffffff8020ba7d:	0f 01 f8             	swapgs
ffffffff8020ba80:	6a 00                	push   $0x0
ffffffff8020ba82:	6a 2e                	push   $0x2e
ffffffff8020ba84:	e9 2b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba89 <__RME_X64_USER47_Handler>:
USER_HANDLER NAME=__RME_X64_USER47_Handler VECTNUM=47
ffffffff8020ba89:	0f 01 f8             	swapgs
ffffffff8020ba8c:	6a 00                	push   $0x0
ffffffff8020ba8e:	6a 2f                	push   $0x2f
ffffffff8020ba90:	e9 1f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba95 <__RME_X64_USER48_Handler>:
USER_HANDLER NAME=__RME_X64_USER48_Handler VECTNUM=48
ffffffff8020ba95:	0f 01 f8             	swapgs
ffffffff8020ba98:	6a 00                	push   $0x0
ffffffff8020ba9a:	6a 30                	push   $0x30
ffffffff8020ba9c:	e9 13 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baa1 <__RME_X64_USER49_Handler>:
USER_HANDLER NAME=__RME_X64_USER49_Handler VECTNUM=49
ffffffff8020baa1:	0f 01 f8             	swapgs
ffffffff8020baa4:	6a 00                	push   $0x0
ffffffff8020baa6:	6a 31                	push   $0x31
ffffffff8020baa8:	e9 07 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baad <__RME_X64_USER50_Handler>:

USER_HANDLER NAME=__RME_X64_USER50_Handler VECTNUM=50
ffffffff8020baad:	0f 01 f8             	swapgs
ffffffff8020bab0:	6a 00                	push   $0x0
ffffffff8020bab2:	6a 32                	push   $0x32
ffffffff8020bab4:	e9 fb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bab9 <__RME_X64_USER51_Handler>:
USER_HANDLER NAME=__RME_X64_USER51_Handler VECTNUM=51
ffffffff8020bab9:	0f 01 f8             	swapgs
ffffffff8020babc:	6a 00                	push   $0x0
ffffffff8020babe:	6a 33                	push   $0x33
ffffffff8020bac0:	e9 ef 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bac5 <__RME_X64_USER52_Handler>:
USER_HANDLER NAME=__RME_X64_USER52_Handler VECTNUM=52
ffffffff8020bac5:	0f 01 f8             	swapgs
ffffffff8020bac8:	6a 00                	push   $0x0
ffffffff8020baca:	6a 34                	push   $0x34
ffffffff8020bacc:	e9 e3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bad1 <__RME_X64_USER53_Handler>:
USER_HANDLER NAME=__RME_X64_USER53_Handler VECTNUM=53
ffffffff8020bad1:	0f 01 f8             	swapgs
ffffffff8020bad4:	6a 00                	push   $0x0
ffffffff8020bad6:	6a 35                	push   $0x35
ffffffff8020bad8:	e9 d7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020badd <__RME_X64_USER54_Handler>:
USER_HANDLER NAME=__RME_X64_USER54_Handler VECTNUM=54
ffffffff8020badd:	0f 01 f8             	swapgs
ffffffff8020bae0:	6a 00                	push   $0x0
ffffffff8020bae2:	6a 36                	push   $0x36
ffffffff8020bae4:	e9 cb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bae9 <__RME_X64_USER55_Handler>:
USER_HANDLER NAME=__RME_X64_USER55_Handler VECTNUM=55
ffffffff8020bae9:	0f 01 f8             	swapgs
ffffffff8020baec:	6a 00                	push   $0x0
ffffffff8020baee:	6a 37                	push   $0x37
ffffffff8020baf0:	e9 bf 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baf5 <__RME_X64_USER56_Handler>:
USER_HANDLER NAME=__RME_X64_USER56_Handler VECTNUM=56
ffffffff8020baf5:	0f 01 f8             	swapgs
ffffffff8020baf8:	6a 00                	push   $0x0
ffffffff8020bafa:	6a 38                	push   $0x38
ffffffff8020bafc:	e9 b3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb01 <__RME_X64_USER57_Handler>:
USER_HANDLER NAME=__RME_X64_USER57_Handler VECTNUM=57
ffffffff8020bb01:	0f 01 f8             	swapgs
ffffffff8020bb04:	6a 00                	push   $0x0
ffffffff8020bb06:	6a 39                	push   $0x39
ffffffff8020bb08:	e9 a7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb0d <__RME_X64_USER58_Handler>:
USER_HANDLER NAME=__RME_X64_USER58_Handler VECTNUM=58
ffffffff8020bb0d:	0f 01 f8             	swapgs
ffffffff8020bb10:	6a 00                	push   $0x0
ffffffff8020bb12:	6a 3a                	push   $0x3a
ffffffff8020bb14:	e9 9b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb19 <__RME_X64_USER59_Handler>:
USER_HANDLER NAME=__RME_X64_USER59_Handler VECTNUM=59
ffffffff8020bb19:	0f 01 f8             	swapgs
ffffffff8020bb1c:	6a 00                	push   $0x0
ffffffff8020bb1e:	6a 3b                	push   $0x3b
ffffffff8020bb20:	e9 8f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb25 <__RME_X64_USER60_Handler>:

USER_HANDLER NAME=__RME_X64_USER60_Handler VECTNUM=60
ffffffff8020bb25:	0f 01 f8             	swapgs
ffffffff8020bb28:	6a 00                	push   $0x0
ffffffff8020bb2a:	6a 3c                	push   $0x3c
ffffffff8020bb2c:	e9 83 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb31 <__RME_X64_USER61_Handler>:
USER_HANDLER NAME=__RME_X64_USER61_Handler VECTNUM=61
ffffffff8020bb31:	0f 01 f8             	swapgs
ffffffff8020bb34:	6a 00                	push   $0x0
ffffffff8020bb36:	6a 3d                	push   $0x3d
ffffffff8020bb38:	e9 77 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb3d <__RME_X64_USER62_Handler>:
USER_HANDLER NAME=__RME_X64_USER62_Handler VECTNUM=62
ffffffff8020bb3d:	0f 01 f8             	swapgs
ffffffff8020bb40:	6a 00                	push   $0x0
ffffffff8020bb42:	6a 3e                	push   $0x3e
ffffffff8020bb44:	e9 6b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb49 <__RME_X64_USER63_Handler>:
USER_HANDLER NAME=__RME_X64_USER63_Handler VECTNUM=63
ffffffff8020bb49:	0f 01 f8             	swapgs
ffffffff8020bb4c:	6a 00                	push   $0x0
ffffffff8020bb4e:	6a 3f                	push   $0x3f
ffffffff8020bb50:	e9 5f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb55 <__RME_X64_USER64_Handler>:
USER_HANDLER NAME=__RME_X64_USER64_Handler VECTNUM=64
ffffffff8020bb55:	0f 01 f8             	swapgs
ffffffff8020bb58:	6a 00                	push   $0x0
ffffffff8020bb5a:	6a 40                	push   $0x40
ffffffff8020bb5c:	e9 53 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb61 <__RME_X64_USER65_Handler>:
USER_HANDLER NAME=__RME_X64_USER65_Handler VECTNUM=65
ffffffff8020bb61:	0f 01 f8             	swapgs
ffffffff8020bb64:	6a 00                	push   $0x0
ffffffff8020bb66:	6a 41                	push   $0x41
ffffffff8020bb68:	e9 47 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb6d <__RME_X64_USER66_Handler>:
USER_HANDLER NAME=__RME_X64_USER66_Handler VECTNUM=66
ffffffff8020bb6d:	0f 01 f8             	swapgs
ffffffff8020bb70:	6a 00                	push   $0x0
ffffffff8020bb72:	6a 42                	push   $0x42
ffffffff8020bb74:	e9 3b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb79 <__RME_X64_USER67_Handler>:
USER_HANDLER NAME=__RME_X64_USER67_Handler VECTNUM=67
ffffffff8020bb79:	0f 01 f8             	swapgs
ffffffff8020bb7c:	6a 00                	push   $0x0
ffffffff8020bb7e:	6a 43                	push   $0x43
ffffffff8020bb80:	e9 2f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb85 <__RME_X64_USER68_Handler>:
USER_HANDLER NAME=__RME_X64_USER68_Handler VECTNUM=68
ffffffff8020bb85:	0f 01 f8             	swapgs
ffffffff8020bb88:	6a 00                	push   $0x0
ffffffff8020bb8a:	6a 44                	push   $0x44
ffffffff8020bb8c:	e9 23 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb91 <__RME_X64_USER69_Handler>:
USER_HANDLER NAME=__RME_X64_USER69_Handler VECTNUM=69
ffffffff8020bb91:	0f 01 f8             	swapgs
ffffffff8020bb94:	6a 00                	push   $0x0
ffffffff8020bb96:	6a 45                	push   $0x45
ffffffff8020bb98:	e9 17 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb9d <__RME_X64_USER70_Handler>:

USER_HANDLER NAME=__RME_X64_USER70_Handler VECTNUM=70
ffffffff8020bb9d:	0f 01 f8             	swapgs
ffffffff8020bba0:	6a 00                	push   $0x0
ffffffff8020bba2:	6a 46                	push   $0x46
ffffffff8020bba4:	e9 0b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bba9 <__RME_X64_USER71_Handler>:
USER_HANDLER NAME=__RME_X64_USER71_Handler VECTNUM=71
ffffffff8020bba9:	0f 01 f8             	swapgs
ffffffff8020bbac:	6a 00                	push   $0x0
ffffffff8020bbae:	6a 47                	push   $0x47
ffffffff8020bbb0:	e9 ff 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbb5 <__RME_X64_USER72_Handler>:
USER_HANDLER NAME=__RME_X64_USER72_Handler VECTNUM=72
ffffffff8020bbb5:	0f 01 f8             	swapgs
ffffffff8020bbb8:	6a 00                	push   $0x0
ffffffff8020bbba:	6a 48                	push   $0x48
ffffffff8020bbbc:	e9 f3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbc1 <__RME_X64_USER73_Handler>:
USER_HANDLER NAME=__RME_X64_USER73_Handler VECTNUM=73
ffffffff8020bbc1:	0f 01 f8             	swapgs
ffffffff8020bbc4:	6a 00                	push   $0x0
ffffffff8020bbc6:	6a 49                	push   $0x49
ffffffff8020bbc8:	e9 e7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbcd <__RME_X64_USER74_Handler>:
USER_HANDLER NAME=__RME_X64_USER74_Handler VECTNUM=74
ffffffff8020bbcd:	0f 01 f8             	swapgs
ffffffff8020bbd0:	6a 00                	push   $0x0
ffffffff8020bbd2:	6a 4a                	push   $0x4a
ffffffff8020bbd4:	e9 db 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbd9 <__RME_X64_USER75_Handler>:
USER_HANDLER NAME=__RME_X64_USER75_Handler VECTNUM=75
ffffffff8020bbd9:	0f 01 f8             	swapgs
ffffffff8020bbdc:	6a 00                	push   $0x0
ffffffff8020bbde:	6a 4b                	push   $0x4b
ffffffff8020bbe0:	e9 cf 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbe5 <__RME_X64_USER76_Handler>:
USER_HANDLER NAME=__RME_X64_USER76_Handler VECTNUM=76
ffffffff8020bbe5:	0f 01 f8             	swapgs
ffffffff8020bbe8:	6a 00                	push   $0x0
ffffffff8020bbea:	6a 4c                	push   $0x4c
ffffffff8020bbec:	e9 c3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbf1 <__RME_X64_USER77_Handler>:
USER_HANDLER NAME=__RME_X64_USER77_Handler VECTNUM=77
ffffffff8020bbf1:	0f 01 f8             	swapgs
ffffffff8020bbf4:	6a 00                	push   $0x0
ffffffff8020bbf6:	6a 4d                	push   $0x4d
ffffffff8020bbf8:	e9 b7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbfd <__RME_X64_USER78_Handler>:
USER_HANDLER NAME=__RME_X64_USER78_Handler VECTNUM=78
ffffffff8020bbfd:	0f 01 f8             	swapgs
ffffffff8020bc00:	6a 00                	push   $0x0
ffffffff8020bc02:	6a 4e                	push   $0x4e
ffffffff8020bc04:	e9 ab 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc09 <__RME_X64_USER79_Handler>:
USER_HANDLER NAME=__RME_X64_USER79_Handler VECTNUM=79
ffffffff8020bc09:	0f 01 f8             	swapgs
ffffffff8020bc0c:	6a 00                	push   $0x0
ffffffff8020bc0e:	6a 4f                	push   $0x4f
ffffffff8020bc10:	e9 9f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc15 <__RME_X64_USER80_Handler>:

USER_HANDLER NAME=__RME_X64_USER80_Handler VECTNUM=80
ffffffff8020bc15:	0f 01 f8             	swapgs
ffffffff8020bc18:	6a 00                	push   $0x0
ffffffff8020bc1a:	6a 50                	push   $0x50
ffffffff8020bc1c:	e9 93 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc21 <__RME_X64_USER81_Handler>:
USER_HANDLER NAME=__RME_X64_USER81_Handler VECTNUM=81
ffffffff8020bc21:	0f 01 f8             	swapgs
ffffffff8020bc24:	6a 00                	push   $0x0
ffffffff8020bc26:	6a 51                	push   $0x51
ffffffff8020bc28:	e9 87 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc2d <__RME_X64_USER82_Handler>:
USER_HANDLER NAME=__RME_X64_USER82_Handler VECTNUM=82
ffffffff8020bc2d:	0f 01 f8             	swapgs
ffffffff8020bc30:	6a 00                	push   $0x0
ffffffff8020bc32:	6a 52                	push   $0x52
ffffffff8020bc34:	e9 7b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc39 <__RME_X64_USER83_Handler>:
USER_HANDLER NAME=__RME_X64_USER83_Handler VECTNUM=83
ffffffff8020bc39:	0f 01 f8             	swapgs
ffffffff8020bc3c:	6a 00                	push   $0x0
ffffffff8020bc3e:	6a 53                	push   $0x53
ffffffff8020bc40:	e9 6f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc45 <__RME_X64_USER84_Handler>:
USER_HANDLER NAME=__RME_X64_USER84_Handler VECTNUM=84
ffffffff8020bc45:	0f 01 f8             	swapgs
ffffffff8020bc48:	6a 00                	push   $0x0
ffffffff8020bc4a:	6a 54                	push   $0x54
ffffffff8020bc4c:	e9 63 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc51 <__RME_X64_USER85_Handler>:
USER_HANDLER NAME=__RME_X64_USER85_Handler VECTNUM=85
ffffffff8020bc51:	0f 01 f8             	swapgs
ffffffff8020bc54:	6a 00                	push   $0x0
ffffffff8020bc56:	6a 55                	push   $0x55
ffffffff8020bc58:	e9 57 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc5d <__RME_X64_USER86_Handler>:
USER_HANDLER NAME=__RME_X64_USER86_Handler VECTNUM=86
ffffffff8020bc5d:	0f 01 f8             	swapgs
ffffffff8020bc60:	6a 00                	push   $0x0
ffffffff8020bc62:	6a 56                	push   $0x56
ffffffff8020bc64:	e9 4b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc69 <__RME_X64_USER87_Handler>:
USER_HANDLER NAME=__RME_X64_USER87_Handler VECTNUM=87
ffffffff8020bc69:	0f 01 f8             	swapgs
ffffffff8020bc6c:	6a 00                	push   $0x0
ffffffff8020bc6e:	6a 57                	push   $0x57
ffffffff8020bc70:	e9 3f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc75 <__RME_X64_USER88_Handler>:
USER_HANDLER NAME=__RME_X64_USER88_Handler VECTNUM=88
ffffffff8020bc75:	0f 01 f8             	swapgs
ffffffff8020bc78:	6a 00                	push   $0x0
ffffffff8020bc7a:	6a 58                	push   $0x58
ffffffff8020bc7c:	e9 33 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc81 <__RME_X64_USER89_Handler>:
USER_HANDLER NAME=__RME_X64_USER89_Handler VECTNUM=89
ffffffff8020bc81:	0f 01 f8             	swapgs
ffffffff8020bc84:	6a 00                	push   $0x0
ffffffff8020bc86:	6a 59                	push   $0x59
ffffffff8020bc88:	e9 27 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc8d <__RME_X64_USER90_Handler>:

USER_HANDLER NAME=__RME_X64_USER90_Handler VECTNUM=90
ffffffff8020bc8d:	0f 01 f8             	swapgs
ffffffff8020bc90:	6a 00                	push   $0x0
ffffffff8020bc92:	6a 5a                	push   $0x5a
ffffffff8020bc94:	e9 1b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc99 <__RME_X64_USER91_Handler>:
USER_HANDLER NAME=__RME_X64_USER91_Handler VECTNUM=91
ffffffff8020bc99:	0f 01 f8             	swapgs
ffffffff8020bc9c:	6a 00                	push   $0x0
ffffffff8020bc9e:	6a 5b                	push   $0x5b
ffffffff8020bca0:	e9 0f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bca5 <__RME_X64_USER92_Handler>:
USER_HANDLER NAME=__RME_X64_USER92_Handler VECTNUM=92
ffffffff8020bca5:	0f 01 f8             	swapgs
ffffffff8020bca8:	6a 00                	push   $0x0
ffffffff8020bcaa:	6a 5c                	push   $0x5c
ffffffff8020bcac:	e9 03 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcb1 <__RME_X64_USER93_Handler>:
USER_HANDLER NAME=__RME_X64_USER93_Handler VECTNUM=93
ffffffff8020bcb1:	0f 01 f8             	swapgs
ffffffff8020bcb4:	6a 00                	push   $0x0
ffffffff8020bcb6:	6a 5d                	push   $0x5d
ffffffff8020bcb8:	e9 f7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcbd <__RME_X64_USER94_Handler>:
USER_HANDLER NAME=__RME_X64_USER94_Handler VECTNUM=94
ffffffff8020bcbd:	0f 01 f8             	swapgs
ffffffff8020bcc0:	6a 00                	push   $0x0
ffffffff8020bcc2:	6a 5e                	push   $0x5e
ffffffff8020bcc4:	e9 eb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcc9 <__RME_X64_USER95_Handler>:
USER_HANDLER NAME=__RME_X64_USER95_Handler VECTNUM=95
ffffffff8020bcc9:	0f 01 f8             	swapgs
ffffffff8020bccc:	6a 00                	push   $0x0
ffffffff8020bcce:	6a 5f                	push   $0x5f
ffffffff8020bcd0:	e9 df 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcd5 <__RME_X64_USER96_Handler>:
USER_HANDLER NAME=__RME_X64_USER96_Handler VECTNUM=96
ffffffff8020bcd5:	0f 01 f8             	swapgs
ffffffff8020bcd8:	6a 00                	push   $0x0
ffffffff8020bcda:	6a 60                	push   $0x60
ffffffff8020bcdc:	e9 d3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bce1 <__RME_X64_USER97_Handler>:
USER_HANDLER NAME=__RME_X64_USER97_Handler VECTNUM=97
ffffffff8020bce1:	0f 01 f8             	swapgs
ffffffff8020bce4:	6a 00                	push   $0x0
ffffffff8020bce6:	6a 61                	push   $0x61
ffffffff8020bce8:	e9 c7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bced <__RME_X64_USER98_Handler>:
USER_HANDLER NAME=__RME_X64_USER98_Handler VECTNUM=98
ffffffff8020bced:	0f 01 f8             	swapgs
ffffffff8020bcf0:	6a 00                	push   $0x0
ffffffff8020bcf2:	6a 62                	push   $0x62
ffffffff8020bcf4:	e9 bb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcf9 <__RME_X64_USER99_Handler>:
USER_HANDLER NAME=__RME_X64_USER99_Handler VECTNUM=99
ffffffff8020bcf9:	0f 01 f8             	swapgs
ffffffff8020bcfc:	6a 00                	push   $0x0
ffffffff8020bcfe:	6a 63                	push   $0x63
ffffffff8020bd00:	e9 af 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd05 <__RME_X64_USER100_Handler>:

USER_HANDLER NAME=__RME_X64_USER100_Handler VECTNUM=100
ffffffff8020bd05:	0f 01 f8             	swapgs
ffffffff8020bd08:	6a 00                	push   $0x0
ffffffff8020bd0a:	6a 64                	push   $0x64
ffffffff8020bd0c:	e9 a3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd11 <__RME_X64_USER101_Handler>:
USER_HANDLER NAME=__RME_X64_USER101_Handler VECTNUM=101
ffffffff8020bd11:	0f 01 f8             	swapgs
ffffffff8020bd14:	6a 00                	push   $0x0
ffffffff8020bd16:	6a 65                	push   $0x65
ffffffff8020bd18:	e9 97 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd1d <__RME_X64_USER102_Handler>:
USER_HANDLER NAME=__RME_X64_USER102_Handler VECTNUM=102
ffffffff8020bd1d:	0f 01 f8             	swapgs
ffffffff8020bd20:	6a 00                	push   $0x0
ffffffff8020bd22:	6a 66                	push   $0x66
ffffffff8020bd24:	e9 8b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd29 <__RME_X64_USER103_Handler>:
USER_HANDLER NAME=__RME_X64_USER103_Handler VECTNUM=103
ffffffff8020bd29:	0f 01 f8             	swapgs
ffffffff8020bd2c:	6a 00                	push   $0x0
ffffffff8020bd2e:	6a 67                	push   $0x67
ffffffff8020bd30:	e9 7f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd35 <__RME_X64_USER104_Handler>:
USER_HANDLER NAME=__RME_X64_USER104_Handler VECTNUM=104
ffffffff8020bd35:	0f 01 f8             	swapgs
ffffffff8020bd38:	6a 00                	push   $0x0
ffffffff8020bd3a:	6a 68                	push   $0x68
ffffffff8020bd3c:	e9 73 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd41 <__RME_X64_USER105_Handler>:
USER_HANDLER NAME=__RME_X64_USER105_Handler VECTNUM=105
ffffffff8020bd41:	0f 01 f8             	swapgs
ffffffff8020bd44:	6a 00                	push   $0x0
ffffffff8020bd46:	6a 69                	push   $0x69
ffffffff8020bd48:	e9 67 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd4d <__RME_X64_USER106_Handler>:
USER_HANDLER NAME=__RME_X64_USER106_Handler VECTNUM=106
ffffffff8020bd4d:	0f 01 f8             	swapgs
ffffffff8020bd50:	6a 00                	push   $0x0
ffffffff8020bd52:	6a 6a                	push   $0x6a
ffffffff8020bd54:	e9 5b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd59 <__RME_X64_USER107_Handler>:
USER_HANDLER NAME=__RME_X64_USER107_Handler VECTNUM=107
ffffffff8020bd59:	0f 01 f8             	swapgs
ffffffff8020bd5c:	6a 00                	push   $0x0
ffffffff8020bd5e:	6a 6b                	push   $0x6b
ffffffff8020bd60:	e9 4f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd65 <__RME_X64_USER108_Handler>:
USER_HANDLER NAME=__RME_X64_USER108_Handler VECTNUM=108
ffffffff8020bd65:	0f 01 f8             	swapgs
ffffffff8020bd68:	6a 00                	push   $0x0
ffffffff8020bd6a:	6a 6c                	push   $0x6c
ffffffff8020bd6c:	e9 43 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd71 <__RME_X64_USER109_Handler>:
USER_HANDLER NAME=__RME_X64_USER109_Handler VECTNUM=109
ffffffff8020bd71:	0f 01 f8             	swapgs
ffffffff8020bd74:	6a 00                	push   $0x0
ffffffff8020bd76:	6a 6d                	push   $0x6d
ffffffff8020bd78:	e9 37 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd7d <__RME_X64_USER110_Handler>:

USER_HANDLER NAME=__RME_X64_USER110_Handler VECTNUM=110
ffffffff8020bd7d:	0f 01 f8             	swapgs
ffffffff8020bd80:	6a 00                	push   $0x0
ffffffff8020bd82:	6a 6e                	push   $0x6e
ffffffff8020bd84:	e9 2b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd89 <__RME_X64_USER111_Handler>:
USER_HANDLER NAME=__RME_X64_USER111_Handler VECTNUM=111
ffffffff8020bd89:	0f 01 f8             	swapgs
ffffffff8020bd8c:	6a 00                	push   $0x0
ffffffff8020bd8e:	6a 6f                	push   $0x6f
ffffffff8020bd90:	e9 1f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd95 <__RME_X64_USER112_Handler>:
USER_HANDLER NAME=__RME_X64_USER112_Handler VECTNUM=112
ffffffff8020bd95:	0f 01 f8             	swapgs
ffffffff8020bd98:	6a 00                	push   $0x0
ffffffff8020bd9a:	6a 70                	push   $0x70
ffffffff8020bd9c:	e9 13 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bda1 <__RME_X64_USER113_Handler>:
USER_HANDLER NAME=__RME_X64_USER113_Handler VECTNUM=113
ffffffff8020bda1:	0f 01 f8             	swapgs
ffffffff8020bda4:	6a 00                	push   $0x0
ffffffff8020bda6:	6a 71                	push   $0x71
ffffffff8020bda8:	e9 07 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdad <__RME_X64_USER114_Handler>:
USER_HANDLER NAME=__RME_X64_USER114_Handler VECTNUM=114
ffffffff8020bdad:	0f 01 f8             	swapgs
ffffffff8020bdb0:	6a 00                	push   $0x0
ffffffff8020bdb2:	6a 72                	push   $0x72
ffffffff8020bdb4:	e9 fb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdb9 <__RME_X64_USER115_Handler>:
USER_HANDLER NAME=__RME_X64_USER115_Handler VECTNUM=115
ffffffff8020bdb9:	0f 01 f8             	swapgs
ffffffff8020bdbc:	6a 00                	push   $0x0
ffffffff8020bdbe:	6a 73                	push   $0x73
ffffffff8020bdc0:	e9 ef 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdc5 <__RME_X64_USER116_Handler>:
USER_HANDLER NAME=__RME_X64_USER116_Handler VECTNUM=116
ffffffff8020bdc5:	0f 01 f8             	swapgs
ffffffff8020bdc8:	6a 00                	push   $0x0
ffffffff8020bdca:	6a 74                	push   $0x74
ffffffff8020bdcc:	e9 e3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdd1 <__RME_X64_USER117_Handler>:
USER_HANDLER NAME=__RME_X64_USER117_Handler VECTNUM=117
ffffffff8020bdd1:	0f 01 f8             	swapgs
ffffffff8020bdd4:	6a 00                	push   $0x0
ffffffff8020bdd6:	6a 75                	push   $0x75
ffffffff8020bdd8:	e9 d7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bddd <__RME_X64_USER118_Handler>:
USER_HANDLER NAME=__RME_X64_USER118_Handler VECTNUM=118
ffffffff8020bddd:	0f 01 f8             	swapgs
ffffffff8020bde0:	6a 00                	push   $0x0
ffffffff8020bde2:	6a 76                	push   $0x76
ffffffff8020bde4:	e9 cb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bde9 <__RME_X64_USER119_Handler>:
USER_HANDLER NAME=__RME_X64_USER119_Handler VECTNUM=119
ffffffff8020bde9:	0f 01 f8             	swapgs
ffffffff8020bdec:	6a 00                	push   $0x0
ffffffff8020bdee:	6a 77                	push   $0x77
ffffffff8020bdf0:	e9 bf 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdf5 <__RME_X64_USER120_Handler>:

USER_HANDLER NAME=__RME_X64_USER120_Handler VECTNUM=120
ffffffff8020bdf5:	0f 01 f8             	swapgs
ffffffff8020bdf8:	6a 00                	push   $0x0
ffffffff8020bdfa:	6a 78                	push   $0x78
ffffffff8020bdfc:	e9 b3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be01 <__RME_X64_USER121_Handler>:
USER_HANDLER NAME=__RME_X64_USER121_Handler VECTNUM=121
ffffffff8020be01:	0f 01 f8             	swapgs
ffffffff8020be04:	6a 00                	push   $0x0
ffffffff8020be06:	6a 79                	push   $0x79
ffffffff8020be08:	e9 a7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be0d <__RME_X64_USER122_Handler>:
USER_HANDLER NAME=__RME_X64_USER122_Handler VECTNUM=122
ffffffff8020be0d:	0f 01 f8             	swapgs
ffffffff8020be10:	6a 00                	push   $0x0
ffffffff8020be12:	6a 7a                	push   $0x7a
ffffffff8020be14:	e9 9b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be19 <__RME_X64_USER123_Handler>:
USER_HANDLER NAME=__RME_X64_USER123_Handler VECTNUM=123
ffffffff8020be19:	0f 01 f8             	swapgs
ffffffff8020be1c:	6a 00                	push   $0x0
ffffffff8020be1e:	6a 7b                	push   $0x7b
ffffffff8020be20:	e9 8f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be25 <__RME_X64_USER124_Handler>:
USER_HANDLER NAME=__RME_X64_USER124_Handler VECTNUM=124
ffffffff8020be25:	0f 01 f8             	swapgs
ffffffff8020be28:	6a 00                	push   $0x0
ffffffff8020be2a:	6a 7c                	push   $0x7c
ffffffff8020be2c:	e9 83 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be31 <__RME_X64_USER125_Handler>:
USER_HANDLER NAME=__RME_X64_USER125_Handler VECTNUM=125
ffffffff8020be31:	0f 01 f8             	swapgs
ffffffff8020be34:	6a 00                	push   $0x0
ffffffff8020be36:	6a 7d                	push   $0x7d
ffffffff8020be38:	e9 77 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be3d <__RME_X64_USER126_Handler>:
USER_HANDLER NAME=__RME_X64_USER126_Handler VECTNUM=126
ffffffff8020be3d:	0f 01 f8             	swapgs
ffffffff8020be40:	6a 00                	push   $0x0
ffffffff8020be42:	6a 7e                	push   $0x7e
ffffffff8020be44:	e9 6b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be49 <__RME_X64_USER127_Handler>:
USER_HANDLER NAME=__RME_X64_USER127_Handler VECTNUM=127
ffffffff8020be49:	0f 01 f8             	swapgs
ffffffff8020be4c:	6a 00                	push   $0x0
ffffffff8020be4e:	6a 7f                	push   $0x7f
ffffffff8020be50:	e9 5f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be55 <__RME_X64_USER128_Handler>:
USER_HANDLER NAME=__RME_X64_USER128_Handler VECTNUM=128
ffffffff8020be55:	0f 01 f8             	swapgs
ffffffff8020be58:	6a 00                	push   $0x0
ffffffff8020be5a:	68 80 00 00 00       	push   $0x80
ffffffff8020be5f:	e9 50 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be64 <__RME_X64_USER129_Handler>:
USER_HANDLER NAME=__RME_X64_USER129_Handler VECTNUM=129
ffffffff8020be64:	0f 01 f8             	swapgs
ffffffff8020be67:	6a 00                	push   $0x0
ffffffff8020be69:	68 81 00 00 00       	push   $0x81
ffffffff8020be6e:	e9 41 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be73 <__RME_X64_USER130_Handler>:

USER_HANDLER NAME=__RME_X64_USER130_Handler VECTNUM=130
ffffffff8020be73:	0f 01 f8             	swapgs
ffffffff8020be76:	6a 00                	push   $0x0
ffffffff8020be78:	68 82 00 00 00       	push   $0x82
ffffffff8020be7d:	e9 32 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be82 <__RME_X64_USER131_Handler>:
USER_HANDLER NAME=__RME_X64_USER131_Handler VECTNUM=131
ffffffff8020be82:	0f 01 f8             	swapgs
ffffffff8020be85:	6a 00                	push   $0x0
ffffffff8020be87:	68 83 00 00 00       	push   $0x83
ffffffff8020be8c:	e9 23 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be91 <__RME_X64_USER132_Handler>:
USER_HANDLER NAME=__RME_X64_USER132_Handler VECTNUM=132
ffffffff8020be91:	0f 01 f8             	swapgs
ffffffff8020be94:	6a 00                	push   $0x0
ffffffff8020be96:	68 84 00 00 00       	push   $0x84
ffffffff8020be9b:	e9 14 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bea0 <__RME_X64_USER133_Handler>:
USER_HANDLER NAME=__RME_X64_USER133_Handler VECTNUM=133
ffffffff8020bea0:	0f 01 f8             	swapgs
ffffffff8020bea3:	6a 00                	push   $0x0
ffffffff8020bea5:	68 85 00 00 00       	push   $0x85
ffffffff8020beaa:	e9 05 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beaf <__RME_X64_USER134_Handler>:
USER_HANDLER NAME=__RME_X64_USER134_Handler VECTNUM=134
ffffffff8020beaf:	0f 01 f8             	swapgs
ffffffff8020beb2:	6a 00                	push   $0x0
ffffffff8020beb4:	68 86 00 00 00       	push   $0x86
ffffffff8020beb9:	e9 f6 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bebe <__RME_X64_USER135_Handler>:
USER_HANDLER NAME=__RME_X64_USER135_Handler VECTNUM=135
ffffffff8020bebe:	0f 01 f8             	swapgs
ffffffff8020bec1:	6a 00                	push   $0x0
ffffffff8020bec3:	68 87 00 00 00       	push   $0x87
ffffffff8020bec8:	e9 e7 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020becd <__RME_X64_USER136_Handler>:
USER_HANDLER NAME=__RME_X64_USER136_Handler VECTNUM=136
ffffffff8020becd:	0f 01 f8             	swapgs
ffffffff8020bed0:	6a 00                	push   $0x0
ffffffff8020bed2:	68 88 00 00 00       	push   $0x88
ffffffff8020bed7:	e9 d8 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bedc <__RME_X64_USER137_Handler>:
USER_HANDLER NAME=__RME_X64_USER137_Handler VECTNUM=137
ffffffff8020bedc:	0f 01 f8             	swapgs
ffffffff8020bedf:	6a 00                	push   $0x0
ffffffff8020bee1:	68 89 00 00 00       	push   $0x89
ffffffff8020bee6:	e9 c9 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beeb <__RME_X64_USER138_Handler>:
USER_HANDLER NAME=__RME_X64_USER138_Handler VECTNUM=138
ffffffff8020beeb:	0f 01 f8             	swapgs
ffffffff8020beee:	6a 00                	push   $0x0
ffffffff8020bef0:	68 8a 00 00 00       	push   $0x8a
ffffffff8020bef5:	e9 ba 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020befa <__RME_X64_USER139_Handler>:
USER_HANDLER NAME=__RME_X64_USER139_Handler VECTNUM=139
ffffffff8020befa:	0f 01 f8             	swapgs
ffffffff8020befd:	6a 00                	push   $0x0
ffffffff8020beff:	68 8b 00 00 00       	push   $0x8b
ffffffff8020bf04:	e9 ab 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf09 <__RME_X64_USER140_Handler>:

USER_HANDLER NAME=__RME_X64_USER140_Handler VECTNUM=140
ffffffff8020bf09:	0f 01 f8             	swapgs
ffffffff8020bf0c:	6a 00                	push   $0x0
ffffffff8020bf0e:	68 8c 00 00 00       	push   $0x8c
ffffffff8020bf13:	e9 9c 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf18 <__RME_X64_USER141_Handler>:
USER_HANDLER NAME=__RME_X64_USER141_Handler VECTNUM=141
ffffffff8020bf18:	0f 01 f8             	swapgs
ffffffff8020bf1b:	6a 00                	push   $0x0
ffffffff8020bf1d:	68 8d 00 00 00       	push   $0x8d
ffffffff8020bf22:	e9 8d 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf27 <__RME_X64_USER142_Handler>:
USER_HANDLER NAME=__RME_X64_USER142_Handler VECTNUM=142
ffffffff8020bf27:	0f 01 f8             	swapgs
ffffffff8020bf2a:	6a 00                	push   $0x0
ffffffff8020bf2c:	68 8e 00 00 00       	push   $0x8e
ffffffff8020bf31:	e9 7e 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf36 <__RME_X64_USER143_Handler>:
USER_HANDLER NAME=__RME_X64_USER143_Handler VECTNUM=143
ffffffff8020bf36:	0f 01 f8             	swapgs
ffffffff8020bf39:	6a 00                	push   $0x0
ffffffff8020bf3b:	68 8f 00 00 00       	push   $0x8f
ffffffff8020bf40:	e9 6f 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf45 <__RME_X64_USER144_Handler>:
USER_HANDLER NAME=__RME_X64_USER144_Handler VECTNUM=144
ffffffff8020bf45:	0f 01 f8             	swapgs
ffffffff8020bf48:	6a 00                	push   $0x0
ffffffff8020bf4a:	68 90 00 00 00       	push   $0x90
ffffffff8020bf4f:	e9 60 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf54 <__RME_X64_USER145_Handler>:
USER_HANDLER NAME=__RME_X64_USER145_Handler VECTNUM=145
ffffffff8020bf54:	0f 01 f8             	swapgs
ffffffff8020bf57:	6a 00                	push   $0x0
ffffffff8020bf59:	68 91 00 00 00       	push   $0x91
ffffffff8020bf5e:	e9 51 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf63 <__RME_X64_USER146_Handler>:
USER_HANDLER NAME=__RME_X64_USER146_Handler VECTNUM=146
ffffffff8020bf63:	0f 01 f8             	swapgs
ffffffff8020bf66:	6a 00                	push   $0x0
ffffffff8020bf68:	68 92 00 00 00       	push   $0x92
ffffffff8020bf6d:	e9 42 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf72 <__RME_X64_USER147_Handler>:
USER_HANDLER NAME=__RME_X64_USER147_Handler VECTNUM=147
ffffffff8020bf72:	0f 01 f8             	swapgs
ffffffff8020bf75:	6a 00                	push   $0x0
ffffffff8020bf77:	68 93 00 00 00       	push   $0x93
ffffffff8020bf7c:	e9 33 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf81 <__RME_X64_USER148_Handler>:
USER_HANDLER NAME=__RME_X64_USER148_Handler VECTNUM=148
ffffffff8020bf81:	0f 01 f8             	swapgs
ffffffff8020bf84:	6a 00                	push   $0x0
ffffffff8020bf86:	68 94 00 00 00       	push   $0x94
ffffffff8020bf8b:	e9 24 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf90 <__RME_X64_USER149_Handler>:
USER_HANDLER NAME=__RME_X64_USER149_Handler VECTNUM=149
ffffffff8020bf90:	0f 01 f8             	swapgs
ffffffff8020bf93:	6a 00                	push   $0x0
ffffffff8020bf95:	68 95 00 00 00       	push   $0x95
ffffffff8020bf9a:	e9 15 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf9f <__RME_X64_USER150_Handler>:

USER_HANDLER NAME=__RME_X64_USER150_Handler VECTNUM=150
ffffffff8020bf9f:	0f 01 f8             	swapgs
ffffffff8020bfa2:	6a 00                	push   $0x0
ffffffff8020bfa4:	68 96 00 00 00       	push   $0x96
ffffffff8020bfa9:	e9 06 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfae <__RME_X64_USER151_Handler>:
USER_HANDLER NAME=__RME_X64_USER151_Handler VECTNUM=151
ffffffff8020bfae:	0f 01 f8             	swapgs
ffffffff8020bfb1:	6a 00                	push   $0x0
ffffffff8020bfb3:	68 97 00 00 00       	push   $0x97
ffffffff8020bfb8:	e9 f7 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfbd <__RME_X64_USER152_Handler>:
USER_HANDLER NAME=__RME_X64_USER152_Handler VECTNUM=152
ffffffff8020bfbd:	0f 01 f8             	swapgs
ffffffff8020bfc0:	6a 00                	push   $0x0
ffffffff8020bfc2:	68 98 00 00 00       	push   $0x98
ffffffff8020bfc7:	e9 e8 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfcc <__RME_X64_USER153_Handler>:
USER_HANDLER NAME=__RME_X64_USER153_Handler VECTNUM=153
ffffffff8020bfcc:	0f 01 f8             	swapgs
ffffffff8020bfcf:	6a 00                	push   $0x0
ffffffff8020bfd1:	68 99 00 00 00       	push   $0x99
ffffffff8020bfd6:	e9 d9 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfdb <__RME_X64_USER154_Handler>:
USER_HANDLER NAME=__RME_X64_USER154_Handler VECTNUM=154
ffffffff8020bfdb:	0f 01 f8             	swapgs
ffffffff8020bfde:	6a 00                	push   $0x0
ffffffff8020bfe0:	68 9a 00 00 00       	push   $0x9a
ffffffff8020bfe5:	e9 ca 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfea <__RME_X64_USER155_Handler>:
USER_HANDLER NAME=__RME_X64_USER155_Handler VECTNUM=155
ffffffff8020bfea:	0f 01 f8             	swapgs
ffffffff8020bfed:	6a 00                	push   $0x0
ffffffff8020bfef:	68 9b 00 00 00       	push   $0x9b
ffffffff8020bff4:	e9 bb 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bff9 <__RME_X64_USER156_Handler>:
USER_HANDLER NAME=__RME_X64_USER156_Handler VECTNUM=156
ffffffff8020bff9:	0f 01 f8             	swapgs
ffffffff8020bffc:	6a 00                	push   $0x0
ffffffff8020bffe:	68 9c 00 00 00       	push   $0x9c
ffffffff8020c003:	e9 ac 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c008 <__RME_X64_USER157_Handler>:
USER_HANDLER NAME=__RME_X64_USER157_Handler VECTNUM=157
ffffffff8020c008:	0f 01 f8             	swapgs
ffffffff8020c00b:	6a 00                	push   $0x0
ffffffff8020c00d:	68 9d 00 00 00       	push   $0x9d
ffffffff8020c012:	e9 9d 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c017 <__RME_X64_USER158_Handler>:
USER_HANDLER NAME=__RME_X64_USER158_Handler VECTNUM=158
ffffffff8020c017:	0f 01 f8             	swapgs
ffffffff8020c01a:	6a 00                	push   $0x0
ffffffff8020c01c:	68 9e 00 00 00       	push   $0x9e
ffffffff8020c021:	e9 8e 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c026 <__RME_X64_USER159_Handler>:
USER_HANDLER NAME=__RME_X64_USER159_Handler VECTNUM=159
ffffffff8020c026:	0f 01 f8             	swapgs
ffffffff8020c029:	6a 00                	push   $0x0
ffffffff8020c02b:	68 9f 00 00 00       	push   $0x9f
ffffffff8020c030:	e9 7f 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c035 <__RME_X64_USER160_Handler>:

USER_HANDLER NAME=__RME_X64_USER160_Handler VECTNUM=160
ffffffff8020c035:	0f 01 f8             	swapgs
ffffffff8020c038:	6a 00                	push   $0x0
ffffffff8020c03a:	68 a0 00 00 00       	push   $0xa0
ffffffff8020c03f:	e9 70 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c044 <__RME_X64_USER161_Handler>:
USER_HANDLER NAME=__RME_X64_USER161_Handler VECTNUM=161
ffffffff8020c044:	0f 01 f8             	swapgs
ffffffff8020c047:	6a 00                	push   $0x0
ffffffff8020c049:	68 a1 00 00 00       	push   $0xa1
ffffffff8020c04e:	e9 61 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c053 <__RME_X64_USER162_Handler>:
USER_HANDLER NAME=__RME_X64_USER162_Handler VECTNUM=162
ffffffff8020c053:	0f 01 f8             	swapgs
ffffffff8020c056:	6a 00                	push   $0x0
ffffffff8020c058:	68 a2 00 00 00       	push   $0xa2
ffffffff8020c05d:	e9 52 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c062 <__RME_X64_USER163_Handler>:
USER_HANDLER NAME=__RME_X64_USER163_Handler VECTNUM=163
ffffffff8020c062:	0f 01 f8             	swapgs
ffffffff8020c065:	6a 00                	push   $0x0
ffffffff8020c067:	68 a3 00 00 00       	push   $0xa3
ffffffff8020c06c:	e9 43 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c071 <__RME_X64_USER164_Handler>:
USER_HANDLER NAME=__RME_X64_USER164_Handler VECTNUM=164
ffffffff8020c071:	0f 01 f8             	swapgs
ffffffff8020c074:	6a 00                	push   $0x0
ffffffff8020c076:	68 a4 00 00 00       	push   $0xa4
ffffffff8020c07b:	e9 34 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c080 <__RME_X64_USER165_Handler>:
USER_HANDLER NAME=__RME_X64_USER165_Handler VECTNUM=165
ffffffff8020c080:	0f 01 f8             	swapgs
ffffffff8020c083:	6a 00                	push   $0x0
ffffffff8020c085:	68 a5 00 00 00       	push   $0xa5
ffffffff8020c08a:	e9 25 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c08f <__RME_X64_USER166_Handler>:
USER_HANDLER NAME=__RME_X64_USER166_Handler VECTNUM=166
ffffffff8020c08f:	0f 01 f8             	swapgs
ffffffff8020c092:	6a 00                	push   $0x0
ffffffff8020c094:	68 a6 00 00 00       	push   $0xa6
ffffffff8020c099:	e9 16 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c09e <__RME_X64_USER167_Handler>:
USER_HANDLER NAME=__RME_X64_USER167_Handler VECTNUM=167
ffffffff8020c09e:	0f 01 f8             	swapgs
ffffffff8020c0a1:	6a 00                	push   $0x0
ffffffff8020c0a3:	68 a7 00 00 00       	push   $0xa7
ffffffff8020c0a8:	e9 07 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0ad <__RME_X64_USER168_Handler>:
USER_HANDLER NAME=__RME_X64_USER168_Handler VECTNUM=168
ffffffff8020c0ad:	0f 01 f8             	swapgs
ffffffff8020c0b0:	6a 00                	push   $0x0
ffffffff8020c0b2:	68 a8 00 00 00       	push   $0xa8
ffffffff8020c0b7:	e9 f8 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0bc <__RME_X64_USER169_Handler>:
USER_HANDLER NAME=__RME_X64_USER169_Handler VECTNUM=169
ffffffff8020c0bc:	0f 01 f8             	swapgs
ffffffff8020c0bf:	6a 00                	push   $0x0
ffffffff8020c0c1:	68 a9 00 00 00       	push   $0xa9
ffffffff8020c0c6:	e9 e9 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0cb <__RME_X64_USER170_Handler>:

USER_HANDLER NAME=__RME_X64_USER170_Handler VECTNUM=170
ffffffff8020c0cb:	0f 01 f8             	swapgs
ffffffff8020c0ce:	6a 00                	push   $0x0
ffffffff8020c0d0:	68 aa 00 00 00       	push   $0xaa
ffffffff8020c0d5:	e9 da 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0da <__RME_X64_USER171_Handler>:
USER_HANDLER NAME=__RME_X64_USER171_Handler VECTNUM=171
ffffffff8020c0da:	0f 01 f8             	swapgs
ffffffff8020c0dd:	6a 00                	push   $0x0
ffffffff8020c0df:	68 ab 00 00 00       	push   $0xab
ffffffff8020c0e4:	e9 cb 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0e9 <__RME_X64_USER172_Handler>:
USER_HANDLER NAME=__RME_X64_USER172_Handler VECTNUM=172
ffffffff8020c0e9:	0f 01 f8             	swapgs
ffffffff8020c0ec:	6a 00                	push   $0x0
ffffffff8020c0ee:	68 ac 00 00 00       	push   $0xac
ffffffff8020c0f3:	e9 bc 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0f8 <__RME_X64_USER173_Handler>:
USER_HANDLER NAME=__RME_X64_USER173_Handler VECTNUM=173
ffffffff8020c0f8:	0f 01 f8             	swapgs
ffffffff8020c0fb:	6a 00                	push   $0x0
ffffffff8020c0fd:	68 ad 00 00 00       	push   $0xad
ffffffff8020c102:	e9 ad 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c107 <__RME_X64_USER174_Handler>:
USER_HANDLER NAME=__RME_X64_USER174_Handler VECTNUM=174
ffffffff8020c107:	0f 01 f8             	swapgs
ffffffff8020c10a:	6a 00                	push   $0x0
ffffffff8020c10c:	68 ae 00 00 00       	push   $0xae
ffffffff8020c111:	e9 9e 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c116 <__RME_X64_USER175_Handler>:
USER_HANDLER NAME=__RME_X64_USER175_Handler VECTNUM=175
ffffffff8020c116:	0f 01 f8             	swapgs
ffffffff8020c119:	6a 00                	push   $0x0
ffffffff8020c11b:	68 af 00 00 00       	push   $0xaf
ffffffff8020c120:	e9 8f 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c125 <__RME_X64_USER176_Handler>:
USER_HANDLER NAME=__RME_X64_USER176_Handler VECTNUM=176
ffffffff8020c125:	0f 01 f8             	swapgs
ffffffff8020c128:	6a 00                	push   $0x0
ffffffff8020c12a:	68 b0 00 00 00       	push   $0xb0
ffffffff8020c12f:	e9 80 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c134 <__RME_X64_USER177_Handler>:
USER_HANDLER NAME=__RME_X64_USER177_Handler VECTNUM=177
ffffffff8020c134:	0f 01 f8             	swapgs
ffffffff8020c137:	6a 00                	push   $0x0
ffffffff8020c139:	68 b1 00 00 00       	push   $0xb1
ffffffff8020c13e:	e9 71 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c143 <__RME_X64_USER178_Handler>:
USER_HANDLER NAME=__RME_X64_USER178_Handler VECTNUM=178
ffffffff8020c143:	0f 01 f8             	swapgs
ffffffff8020c146:	6a 00                	push   $0x0
ffffffff8020c148:	68 b2 00 00 00       	push   $0xb2
ffffffff8020c14d:	e9 62 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c152 <__RME_X64_USER179_Handler>:
USER_HANDLER NAME=__RME_X64_USER179_Handler VECTNUM=179
ffffffff8020c152:	0f 01 f8             	swapgs
ffffffff8020c155:	6a 00                	push   $0x0
ffffffff8020c157:	68 b3 00 00 00       	push   $0xb3
ffffffff8020c15c:	e9 53 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c161 <__RME_X64_USER180_Handler>:

USER_HANDLER NAME=__RME_X64_USER180_Handler VECTNUM=180
ffffffff8020c161:	0f 01 f8             	swapgs
ffffffff8020c164:	6a 00                	push   $0x0
ffffffff8020c166:	68 b4 00 00 00       	push   $0xb4
ffffffff8020c16b:	e9 44 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c170 <__RME_X64_USER181_Handler>:
USER_HANDLER NAME=__RME_X64_USER181_Handler VECTNUM=181
ffffffff8020c170:	0f 01 f8             	swapgs
ffffffff8020c173:	6a 00                	push   $0x0
ffffffff8020c175:	68 b5 00 00 00       	push   $0xb5
ffffffff8020c17a:	e9 35 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c17f <__RME_X64_USER182_Handler>:
USER_HANDLER NAME=__RME_X64_USER182_Handler VECTNUM=182
ffffffff8020c17f:	0f 01 f8             	swapgs
ffffffff8020c182:	6a 00                	push   $0x0
ffffffff8020c184:	68 b6 00 00 00       	push   $0xb6
ffffffff8020c189:	e9 26 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c18e <__RME_X64_USER183_Handler>:
USER_HANDLER NAME=__RME_X64_USER183_Handler VECTNUM=183
ffffffff8020c18e:	0f 01 f8             	swapgs
ffffffff8020c191:	6a 00                	push   $0x0
ffffffff8020c193:	68 b7 00 00 00       	push   $0xb7
ffffffff8020c198:	e9 17 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c19d <__RME_X64_USER184_Handler>:
USER_HANDLER NAME=__RME_X64_USER184_Handler VECTNUM=184
ffffffff8020c19d:	0f 01 f8             	swapgs
ffffffff8020c1a0:	6a 00                	push   $0x0
ffffffff8020c1a2:	68 b8 00 00 00       	push   $0xb8
ffffffff8020c1a7:	e9 08 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ac <__RME_X64_USER185_Handler>:
USER_HANDLER NAME=__RME_X64_USER185_Handler VECTNUM=185
ffffffff8020c1ac:	0f 01 f8             	swapgs
ffffffff8020c1af:	6a 00                	push   $0x0
ffffffff8020c1b1:	68 b9 00 00 00       	push   $0xb9
ffffffff8020c1b6:	e9 f9 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1bb <__RME_X64_USER186_Handler>:
USER_HANDLER NAME=__RME_X64_USER186_Handler VECTNUM=186
ffffffff8020c1bb:	0f 01 f8             	swapgs
ffffffff8020c1be:	6a 00                	push   $0x0
ffffffff8020c1c0:	68 ba 00 00 00       	push   $0xba
ffffffff8020c1c5:	e9 ea 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ca <__RME_X64_USER187_Handler>:
USER_HANDLER NAME=__RME_X64_USER187_Handler VECTNUM=187
ffffffff8020c1ca:	0f 01 f8             	swapgs
ffffffff8020c1cd:	6a 00                	push   $0x0
ffffffff8020c1cf:	68 bb 00 00 00       	push   $0xbb
ffffffff8020c1d4:	e9 db 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1d9 <__RME_X64_USER188_Handler>:
USER_HANDLER NAME=__RME_X64_USER188_Handler VECTNUM=188
ffffffff8020c1d9:	0f 01 f8             	swapgs
ffffffff8020c1dc:	6a 00                	push   $0x0
ffffffff8020c1de:	68 bc 00 00 00       	push   $0xbc
ffffffff8020c1e3:	e9 cc 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1e8 <__RME_X64_USER189_Handler>:
USER_HANDLER NAME=__RME_X64_USER189_Handler VECTNUM=189
ffffffff8020c1e8:	0f 01 f8             	swapgs
ffffffff8020c1eb:	6a 00                	push   $0x0
ffffffff8020c1ed:	68 bd 00 00 00       	push   $0xbd
ffffffff8020c1f2:	e9 bd 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1f7 <__RME_X64_USER190_Handler>:

USER_HANDLER NAME=__RME_X64_USER190_Handler VECTNUM=190
ffffffff8020c1f7:	0f 01 f8             	swapgs
ffffffff8020c1fa:	6a 00                	push   $0x0
ffffffff8020c1fc:	68 be 00 00 00       	push   $0xbe
ffffffff8020c201:	e9 ae 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c206 <__RME_X64_USER191_Handler>:
USER_HANDLER NAME=__RME_X64_USER191_Handler VECTNUM=191
ffffffff8020c206:	0f 01 f8             	swapgs
ffffffff8020c209:	6a 00                	push   $0x0
ffffffff8020c20b:	68 bf 00 00 00       	push   $0xbf
ffffffff8020c210:	e9 9f 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c215 <__RME_X64_USER192_Handler>:
USER_HANDLER NAME=__RME_X64_USER192_Handler VECTNUM=192
ffffffff8020c215:	0f 01 f8             	swapgs
ffffffff8020c218:	6a 00                	push   $0x0
ffffffff8020c21a:	68 c0 00 00 00       	push   $0xc0
ffffffff8020c21f:	e9 90 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c224 <__RME_X64_USER193_Handler>:
USER_HANDLER NAME=__RME_X64_USER193_Handler VECTNUM=193
ffffffff8020c224:	0f 01 f8             	swapgs
ffffffff8020c227:	6a 00                	push   $0x0
ffffffff8020c229:	68 c1 00 00 00       	push   $0xc1
ffffffff8020c22e:	e9 81 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c233 <__RME_X64_USER194_Handler>:
USER_HANDLER NAME=__RME_X64_USER194_Handler VECTNUM=194
ffffffff8020c233:	0f 01 f8             	swapgs
ffffffff8020c236:	6a 00                	push   $0x0
ffffffff8020c238:	68 c2 00 00 00       	push   $0xc2
ffffffff8020c23d:	e9 72 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c242 <__RME_X64_USER195_Handler>:
USER_HANDLER NAME=__RME_X64_USER195_Handler VECTNUM=195
ffffffff8020c242:	0f 01 f8             	swapgs
ffffffff8020c245:	6a 00                	push   $0x0
ffffffff8020c247:	68 c3 00 00 00       	push   $0xc3
ffffffff8020c24c:	e9 63 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c251 <__RME_X64_USER196_Handler>:
USER_HANDLER NAME=__RME_X64_USER196_Handler VECTNUM=196
ffffffff8020c251:	0f 01 f8             	swapgs
ffffffff8020c254:	6a 00                	push   $0x0
ffffffff8020c256:	68 c4 00 00 00       	push   $0xc4
ffffffff8020c25b:	e9 54 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c260 <__RME_X64_USER197_Handler>:
USER_HANDLER NAME=__RME_X64_USER197_Handler VECTNUM=197
ffffffff8020c260:	0f 01 f8             	swapgs
ffffffff8020c263:	6a 00                	push   $0x0
ffffffff8020c265:	68 c5 00 00 00       	push   $0xc5
ffffffff8020c26a:	e9 45 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c26f <__RME_X64_USER198_Handler>:
USER_HANDLER NAME=__RME_X64_USER198_Handler VECTNUM=198
ffffffff8020c26f:	0f 01 f8             	swapgs
ffffffff8020c272:	6a 00                	push   $0x0
ffffffff8020c274:	68 c6 00 00 00       	push   $0xc6
ffffffff8020c279:	e9 36 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c27e <__RME_X64_USER199_Handler>:
USER_HANDLER NAME=__RME_X64_USER199_Handler VECTNUM=199
ffffffff8020c27e:	0f 01 f8             	swapgs
ffffffff8020c281:	6a 00                	push   $0x0
ffffffff8020c283:	68 c7 00 00 00       	push   $0xc7
ffffffff8020c288:	e9 27 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c28d <__RME_X64_USER200_Handler>:

USER_HANDLER NAME=__RME_X64_USER200_Handler VECTNUM=200
ffffffff8020c28d:	0f 01 f8             	swapgs
ffffffff8020c290:	6a 00                	push   $0x0
ffffffff8020c292:	68 c8 00 00 00       	push   $0xc8
ffffffff8020c297:	e9 18 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c29c <__RME_X64_USER201_Handler>:
USER_HANDLER NAME=__RME_X64_USER201_Handler VECTNUM=201
ffffffff8020c29c:	0f 01 f8             	swapgs
ffffffff8020c29f:	6a 00                	push   $0x0
ffffffff8020c2a1:	68 c9 00 00 00       	push   $0xc9
ffffffff8020c2a6:	e9 09 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ab <__RME_X64_USER202_Handler>:
USER_HANDLER NAME=__RME_X64_USER202_Handler VECTNUM=202
ffffffff8020c2ab:	0f 01 f8             	swapgs
ffffffff8020c2ae:	6a 00                	push   $0x0
ffffffff8020c2b0:	68 ca 00 00 00       	push   $0xca
ffffffff8020c2b5:	e9 fa 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ba <__RME_X64_USER203_Handler>:
USER_HANDLER NAME=__RME_X64_USER203_Handler VECTNUM=203
ffffffff8020c2ba:	0f 01 f8             	swapgs
ffffffff8020c2bd:	6a 00                	push   $0x0
ffffffff8020c2bf:	68 cb 00 00 00       	push   $0xcb
ffffffff8020c2c4:	e9 eb 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2c9 <__RME_X64_USER204_Handler>:
USER_HANDLER NAME=__RME_X64_USER204_Handler VECTNUM=204
ffffffff8020c2c9:	0f 01 f8             	swapgs
ffffffff8020c2cc:	6a 00                	push   $0x0
ffffffff8020c2ce:	68 cc 00 00 00       	push   $0xcc
ffffffff8020c2d3:	e9 dc 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2d8 <__RME_X64_USER205_Handler>:
USER_HANDLER NAME=__RME_X64_USER205_Handler VECTNUM=205
ffffffff8020c2d8:	0f 01 f8             	swapgs
ffffffff8020c2db:	6a 00                	push   $0x0
ffffffff8020c2dd:	68 cd 00 00 00       	push   $0xcd
ffffffff8020c2e2:	e9 cd 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2e7 <__RME_X64_USER206_Handler>:
USER_HANDLER NAME=__RME_X64_USER206_Handler VECTNUM=206
ffffffff8020c2e7:	0f 01 f8             	swapgs
ffffffff8020c2ea:	6a 00                	push   $0x0
ffffffff8020c2ec:	68 ce 00 00 00       	push   $0xce
ffffffff8020c2f1:	e9 be 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2f6 <__RME_X64_USER207_Handler>:
USER_HANDLER NAME=__RME_X64_USER207_Handler VECTNUM=207
ffffffff8020c2f6:	0f 01 f8             	swapgs
ffffffff8020c2f9:	6a 00                	push   $0x0
ffffffff8020c2fb:	68 cf 00 00 00       	push   $0xcf
ffffffff8020c300:	e9 af 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c305 <__RME_X64_USER208_Handler>:
USER_HANDLER NAME=__RME_X64_USER208_Handler VECTNUM=208
ffffffff8020c305:	0f 01 f8             	swapgs
ffffffff8020c308:	6a 00                	push   $0x0
ffffffff8020c30a:	68 d0 00 00 00       	push   $0xd0
ffffffff8020c30f:	e9 a0 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c314 <__RME_X64_USER209_Handler>:
USER_HANDLER NAME=__RME_X64_USER209_Handler VECTNUM=209
ffffffff8020c314:	0f 01 f8             	swapgs
ffffffff8020c317:	6a 00                	push   $0x0
ffffffff8020c319:	68 d1 00 00 00       	push   $0xd1
ffffffff8020c31e:	e9 91 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c323 <__RME_X64_USER210_Handler>:

USER_HANDLER NAME=__RME_X64_USER210_Handler VECTNUM=210
ffffffff8020c323:	0f 01 f8             	swapgs
ffffffff8020c326:	6a 00                	push   $0x0
ffffffff8020c328:	68 d2 00 00 00       	push   $0xd2
ffffffff8020c32d:	e9 82 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c332 <__RME_X64_USER211_Handler>:
USER_HANDLER NAME=__RME_X64_USER211_Handler VECTNUM=211
ffffffff8020c332:	0f 01 f8             	swapgs
ffffffff8020c335:	6a 00                	push   $0x0
ffffffff8020c337:	68 d3 00 00 00       	push   $0xd3
ffffffff8020c33c:	e9 73 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c341 <__RME_X64_USER212_Handler>:
USER_HANDLER NAME=__RME_X64_USER212_Handler VECTNUM=212
ffffffff8020c341:	0f 01 f8             	swapgs
ffffffff8020c344:	6a 00                	push   $0x0
ffffffff8020c346:	68 d4 00 00 00       	push   $0xd4
ffffffff8020c34b:	e9 64 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c350 <__RME_X64_USER213_Handler>:
USER_HANDLER NAME=__RME_X64_USER213_Handler VECTNUM=213
ffffffff8020c350:	0f 01 f8             	swapgs
ffffffff8020c353:	6a 00                	push   $0x0
ffffffff8020c355:	68 d5 00 00 00       	push   $0xd5
ffffffff8020c35a:	e9 55 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c35f <__RME_X64_USER214_Handler>:
USER_HANDLER NAME=__RME_X64_USER214_Handler VECTNUM=214
ffffffff8020c35f:	0f 01 f8             	swapgs
ffffffff8020c362:	6a 00                	push   $0x0
ffffffff8020c364:	68 d6 00 00 00       	push   $0xd6
ffffffff8020c369:	e9 46 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c36e <__RME_X64_USER215_Handler>:
USER_HANDLER NAME=__RME_X64_USER215_Handler VECTNUM=215
ffffffff8020c36e:	0f 01 f8             	swapgs
ffffffff8020c371:	6a 00                	push   $0x0
ffffffff8020c373:	68 d7 00 00 00       	push   $0xd7
ffffffff8020c378:	e9 37 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c37d <__RME_X64_USER216_Handler>:
USER_HANDLER NAME=__RME_X64_USER216_Handler VECTNUM=216
ffffffff8020c37d:	0f 01 f8             	swapgs
ffffffff8020c380:	6a 00                	push   $0x0
ffffffff8020c382:	68 d8 00 00 00       	push   $0xd8
ffffffff8020c387:	e9 28 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c38c <__RME_X64_USER217_Handler>:
USER_HANDLER NAME=__RME_X64_USER217_Handler VECTNUM=217
ffffffff8020c38c:	0f 01 f8             	swapgs
ffffffff8020c38f:	6a 00                	push   $0x0
ffffffff8020c391:	68 d9 00 00 00       	push   $0xd9
ffffffff8020c396:	e9 19 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c39b <__RME_X64_USER218_Handler>:
USER_HANDLER NAME=__RME_X64_USER218_Handler VECTNUM=218
ffffffff8020c39b:	0f 01 f8             	swapgs
ffffffff8020c39e:	6a 00                	push   $0x0
ffffffff8020c3a0:	68 da 00 00 00       	push   $0xda
ffffffff8020c3a5:	e9 0a 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3aa <__RME_X64_USER219_Handler>:
USER_HANDLER NAME=__RME_X64_USER219_Handler VECTNUM=219
ffffffff8020c3aa:	0f 01 f8             	swapgs
ffffffff8020c3ad:	6a 00                	push   $0x0
ffffffff8020c3af:	68 db 00 00 00       	push   $0xdb
ffffffff8020c3b4:	e9 fb 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3b9 <__RME_X64_USER220_Handler>:

USER_HANDLER NAME=__RME_X64_USER220_Handler VECTNUM=220
ffffffff8020c3b9:	0f 01 f8             	swapgs
ffffffff8020c3bc:	6a 00                	push   $0x0
ffffffff8020c3be:	68 dc 00 00 00       	push   $0xdc
ffffffff8020c3c3:	e9 ec 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3c8 <__RME_X64_USER221_Handler>:
USER_HANDLER NAME=__RME_X64_USER221_Handler VECTNUM=221
ffffffff8020c3c8:	0f 01 f8             	swapgs
ffffffff8020c3cb:	6a 00                	push   $0x0
ffffffff8020c3cd:	68 dd 00 00 00       	push   $0xdd
ffffffff8020c3d2:	e9 dd 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3d7 <__RME_X64_USER222_Handler>:
USER_HANDLER NAME=__RME_X64_USER222_Handler VECTNUM=222
ffffffff8020c3d7:	0f 01 f8             	swapgs
ffffffff8020c3da:	6a 00                	push   $0x0
ffffffff8020c3dc:	68 de 00 00 00       	push   $0xde
ffffffff8020c3e1:	e9 ce 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3e6 <__RME_X64_USER223_Handler>:
USER_HANDLER NAME=__RME_X64_USER223_Handler VECTNUM=223
ffffffff8020c3e6:	0f 01 f8             	swapgs
ffffffff8020c3e9:	6a 00                	push   $0x0
ffffffff8020c3eb:	68 df 00 00 00       	push   $0xdf
ffffffff8020c3f0:	e9 bf 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3f5 <__RME_X64_USER224_Handler>:
USER_HANDLER NAME=__RME_X64_USER224_Handler VECTNUM=224
ffffffff8020c3f5:	0f 01 f8             	swapgs
ffffffff8020c3f8:	6a 00                	push   $0x0
ffffffff8020c3fa:	68 e0 00 00 00       	push   $0xe0
ffffffff8020c3ff:	e9 b0 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c404 <__RME_X64_USER225_Handler>:
USER_HANDLER NAME=__RME_X64_USER225_Handler VECTNUM=225
ffffffff8020c404:	0f 01 f8             	swapgs
ffffffff8020c407:	6a 00                	push   $0x0
ffffffff8020c409:	68 e1 00 00 00       	push   $0xe1
ffffffff8020c40e:	e9 a1 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c413 <__RME_X64_USER226_Handler>:
USER_HANDLER NAME=__RME_X64_USER226_Handler VECTNUM=226
ffffffff8020c413:	0f 01 f8             	swapgs
ffffffff8020c416:	6a 00                	push   $0x0
ffffffff8020c418:	68 e2 00 00 00       	push   $0xe2
ffffffff8020c41d:	e9 92 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c422 <__RME_X64_USER227_Handler>:
USER_HANDLER NAME=__RME_X64_USER227_Handler VECTNUM=227
ffffffff8020c422:	0f 01 f8             	swapgs
ffffffff8020c425:	6a 00                	push   $0x0
ffffffff8020c427:	68 e3 00 00 00       	push   $0xe3
ffffffff8020c42c:	e9 83 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c431 <__RME_X64_USER228_Handler>:
USER_HANDLER NAME=__RME_X64_USER228_Handler VECTNUM=228
ffffffff8020c431:	0f 01 f8             	swapgs
ffffffff8020c434:	6a 00                	push   $0x0
ffffffff8020c436:	68 e4 00 00 00       	push   $0xe4
ffffffff8020c43b:	e9 74 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c440 <__RME_X64_USER229_Handler>:
USER_HANDLER NAME=__RME_X64_USER229_Handler VECTNUM=229
ffffffff8020c440:	0f 01 f8             	swapgs
ffffffff8020c443:	6a 00                	push   $0x0
ffffffff8020c445:	68 e5 00 00 00       	push   $0xe5
ffffffff8020c44a:	e9 65 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c44f <__RME_X64_USER230_Handler>:

USER_HANDLER NAME=__RME_X64_USER230_Handler VECTNUM=230
ffffffff8020c44f:	0f 01 f8             	swapgs
ffffffff8020c452:	6a 00                	push   $0x0
ffffffff8020c454:	68 e6 00 00 00       	push   $0xe6
ffffffff8020c459:	e9 56 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c45e <__RME_X64_USER231_Handler>:
USER_HANDLER NAME=__RME_X64_USER231_Handler VECTNUM=231
ffffffff8020c45e:	0f 01 f8             	swapgs
ffffffff8020c461:	6a 00                	push   $0x0
ffffffff8020c463:	68 e7 00 00 00       	push   $0xe7
ffffffff8020c468:	e9 47 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c46d <__RME_X64_USER232_Handler>:
USER_HANDLER NAME=__RME_X64_USER232_Handler VECTNUM=232
ffffffff8020c46d:	0f 01 f8             	swapgs
ffffffff8020c470:	6a 00                	push   $0x0
ffffffff8020c472:	68 e8 00 00 00       	push   $0xe8
ffffffff8020c477:	e9 38 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c47c <__RME_X64_USER233_Handler>:
USER_HANDLER NAME=__RME_X64_USER233_Handler VECTNUM=233
ffffffff8020c47c:	0f 01 f8             	swapgs
ffffffff8020c47f:	6a 00                	push   $0x0
ffffffff8020c481:	68 e9 00 00 00       	push   $0xe9
ffffffff8020c486:	e9 29 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c48b <__RME_X64_USER234_Handler>:
USER_HANDLER NAME=__RME_X64_USER234_Handler VECTNUM=234
ffffffff8020c48b:	0f 01 f8             	swapgs
ffffffff8020c48e:	6a 00                	push   $0x0
ffffffff8020c490:	68 ea 00 00 00       	push   $0xea
ffffffff8020c495:	e9 1a 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c49a <__RME_X64_USER235_Handler>:
USER_HANDLER NAME=__RME_X64_USER235_Handler VECTNUM=235
ffffffff8020c49a:	0f 01 f8             	swapgs
ffffffff8020c49d:	6a 00                	push   $0x0
ffffffff8020c49f:	68 eb 00 00 00       	push   $0xeb
ffffffff8020c4a4:	e9 0b 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4a9 <__RME_X64_USER236_Handler>:
USER_HANDLER NAME=__RME_X64_USER236_Handler VECTNUM=236
ffffffff8020c4a9:	0f 01 f8             	swapgs
ffffffff8020c4ac:	6a 00                	push   $0x0
ffffffff8020c4ae:	68 ec 00 00 00       	push   $0xec
ffffffff8020c4b3:	e9 fc 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4b8 <__RME_X64_USER237_Handler>:
USER_HANDLER NAME=__RME_X64_USER237_Handler VECTNUM=237
ffffffff8020c4b8:	0f 01 f8             	swapgs
ffffffff8020c4bb:	6a 00                	push   $0x0
ffffffff8020c4bd:	68 ed 00 00 00       	push   $0xed
ffffffff8020c4c2:	e9 ed 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4c7 <__RME_X64_USER238_Handler>:
USER_HANDLER NAME=__RME_X64_USER238_Handler VECTNUM=238
ffffffff8020c4c7:	0f 01 f8             	swapgs
ffffffff8020c4ca:	6a 00                	push   $0x0
ffffffff8020c4cc:	68 ee 00 00 00       	push   $0xee
ffffffff8020c4d1:	e9 de 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4d6 <__RME_X64_USER239_Handler>:
USER_HANDLER NAME=__RME_X64_USER239_Handler VECTNUM=239
ffffffff8020c4d6:	0f 01 f8             	swapgs
ffffffff8020c4d9:	6a 00                	push   $0x0
ffffffff8020c4db:	68 ef 00 00 00       	push   $0xef
ffffffff8020c4e0:	e9 cf 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4e5 <__RME_X64_USER240_Handler>:

USER_HANDLER NAME=__RME_X64_USER240_Handler VECTNUM=240
ffffffff8020c4e5:	0f 01 f8             	swapgs
ffffffff8020c4e8:	6a 00                	push   $0x0
ffffffff8020c4ea:	68 f0 00 00 00       	push   $0xf0
ffffffff8020c4ef:	e9 c0 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4f4 <__RME_X64_USER241_Handler>:
USER_HANDLER NAME=__RME_X64_USER241_Handler VECTNUM=241
ffffffff8020c4f4:	0f 01 f8             	swapgs
ffffffff8020c4f7:	6a 00                	push   $0x0
ffffffff8020c4f9:	68 f1 00 00 00       	push   $0xf1
ffffffff8020c4fe:	e9 b1 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c503 <__RME_X64_USER242_Handler>:
USER_HANDLER NAME=__RME_X64_USER242_Handler VECTNUM=242
ffffffff8020c503:	0f 01 f8             	swapgs
ffffffff8020c506:	6a 00                	push   $0x0
ffffffff8020c508:	68 f2 00 00 00       	push   $0xf2
ffffffff8020c50d:	e9 a2 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c512 <__RME_X64_USER243_Handler>:
USER_HANDLER NAME=__RME_X64_USER243_Handler VECTNUM=243
ffffffff8020c512:	0f 01 f8             	swapgs
ffffffff8020c515:	6a 00                	push   $0x0
ffffffff8020c517:	68 f3 00 00 00       	push   $0xf3
ffffffff8020c51c:	e9 93 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c521 <__RME_X64_USER244_Handler>:
USER_HANDLER NAME=__RME_X64_USER244_Handler VECTNUM=244
ffffffff8020c521:	0f 01 f8             	swapgs
ffffffff8020c524:	6a 00                	push   $0x0
ffffffff8020c526:	68 f4 00 00 00       	push   $0xf4
ffffffff8020c52b:	e9 84 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c530 <__RME_X64_USER245_Handler>:
USER_HANDLER NAME=__RME_X64_USER245_Handler VECTNUM=245
ffffffff8020c530:	0f 01 f8             	swapgs
ffffffff8020c533:	6a 00                	push   $0x0
ffffffff8020c535:	68 f5 00 00 00       	push   $0xf5
ffffffff8020c53a:	eb 78                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c53c <__RME_X64_USER246_Handler>:
USER_HANDLER NAME=__RME_X64_USER246_Handler VECTNUM=246
ffffffff8020c53c:	0f 01 f8             	swapgs
ffffffff8020c53f:	6a 00                	push   $0x0
ffffffff8020c541:	68 f6 00 00 00       	push   $0xf6
ffffffff8020c546:	eb 6c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c548 <__RME_X64_USER247_Handler>:
USER_HANDLER NAME=__RME_X64_USER247_Handler VECTNUM=247
ffffffff8020c548:	0f 01 f8             	swapgs
ffffffff8020c54b:	6a 00                	push   $0x0
ffffffff8020c54d:	68 f7 00 00 00       	push   $0xf7
ffffffff8020c552:	eb 60                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c554 <__RME_X64_USER248_Handler>:
USER_HANDLER NAME=__RME_X64_USER248_Handler VECTNUM=248
ffffffff8020c554:	0f 01 f8             	swapgs
ffffffff8020c557:	6a 00                	push   $0x0
ffffffff8020c559:	68 f8 00 00 00       	push   $0xf8
ffffffff8020c55e:	eb 54                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c560 <__RME_X64_USER249_Handler>:
USER_HANDLER NAME=__RME_X64_USER249_Handler VECTNUM=249
ffffffff8020c560:	0f 01 f8             	swapgs
ffffffff8020c563:	6a 00                	push   $0x0
ffffffff8020c565:	68 f9 00 00 00       	push   $0xf9
ffffffff8020c56a:	eb 48                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c56c <__RME_X64_USER250_Handler>:

USER_HANDLER NAME=__RME_X64_USER250_Handler VECTNUM=250
ffffffff8020c56c:	0f 01 f8             	swapgs
ffffffff8020c56f:	6a 00                	push   $0x0
ffffffff8020c571:	68 fa 00 00 00       	push   $0xfa
ffffffff8020c576:	eb 3c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c578 <__RME_X64_USER251_Handler>:
USER_HANDLER NAME=__RME_X64_USER251_Handler VECTNUM=251
ffffffff8020c578:	0f 01 f8             	swapgs
ffffffff8020c57b:	6a 00                	push   $0x0
ffffffff8020c57d:	68 fb 00 00 00       	push   $0xfb
ffffffff8020c582:	eb 30                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c584 <__RME_X64_USER252_Handler>:
USER_HANDLER NAME=__RME_X64_USER252_Handler VECTNUM=252
ffffffff8020c584:	0f 01 f8             	swapgs
ffffffff8020c587:	6a 00                	push   $0x0
ffffffff8020c589:	68 fc 00 00 00       	push   $0xfc
ffffffff8020c58e:	eb 24                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c590 <__RME_X64_USER253_Handler>:
USER_HANDLER NAME=__RME_X64_USER253_Handler VECTNUM=253
ffffffff8020c590:	0f 01 f8             	swapgs
ffffffff8020c593:	6a 00                	push   $0x0
ffffffff8020c595:	68 fd 00 00 00       	push   $0xfd
ffffffff8020c59a:	eb 18                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c59c <__RME_X64_USER254_Handler>:
USER_HANDLER NAME=__RME_X64_USER254_Handler VECTNUM=254
ffffffff8020c59c:	0f 01 f8             	swapgs
ffffffff8020c59f:	6a 00                	push   $0x0
ffffffff8020c5a1:	68 fe 00 00 00       	push   $0xfe
ffffffff8020c5a6:	eb 0c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5a8 <__RME_X64_USER255_Handler>:
USER_HANDLER NAME=__RME_X64_USER255_Handler VECTNUM=255
ffffffff8020c5a8:	0f 01 f8             	swapgs
ffffffff8020c5ab:	6a 00                	push   $0x0
ffffffff8020c5ad:	68 ff 00 00 00       	push   $0xff
ffffffff8020c5b2:	eb 00                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5b4 <User_Handler>:
/* Common function body for generic interrupt handlers - reduce I-Cache usage */
User_Handler:
    SAVE_GP_REGS
ffffffff8020c5b4:	41 57                	push   %r15
ffffffff8020c5b6:	41 56                	push   %r14
ffffffff8020c5b8:	41 55                	push   %r13
ffffffff8020c5ba:	41 54                	push   %r12
ffffffff8020c5bc:	41 53                	push   %r11
ffffffff8020c5be:	41 52                	push   %r10
ffffffff8020c5c0:	41 51                	push   %r9
ffffffff8020c5c2:	41 50                	push   %r8
ffffffff8020c5c4:	55                   	push   %rbp
ffffffff8020c5c5:	57                   	push   %rdi
ffffffff8020c5c6:	56                   	push   %rsi
ffffffff8020c5c7:	52                   	push   %rdx
ffffffff8020c5c8:	51                   	push   %rcx
ffffffff8020c5c9:	53                   	push   %rbx
ffffffff8020c5ca:	50                   	push   %rax
ffffffff8020c5cb:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c5cf:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c5d1:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020c5d4:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Generic_Handler
ffffffff8020c5d9:	e8 c2 a1 01 00       	call   ffffffff802267a0 <__RME_X64_Generic_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c5de:	e8 4d 7d 01 00       	call   ffffffff80224330 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c5e3:	0f 01 f8             	swapgs
ffffffff8020c5e6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c5ea:	8e d8                	mov    %eax,%ds
ffffffff8020c5ec:	58                   	pop    %rax
ffffffff8020c5ed:	5b                   	pop    %rbx
ffffffff8020c5ee:	59                   	pop    %rcx
ffffffff8020c5ef:	5a                   	pop    %rdx
ffffffff8020c5f0:	5e                   	pop    %rsi
ffffffff8020c5f1:	5f                   	pop    %rdi
ffffffff8020c5f2:	5d                   	pop    %rbp
ffffffff8020c5f3:	41 58                	pop    %r8
ffffffff8020c5f5:	41 59                	pop    %r9
ffffffff8020c5f7:	41 5a                	pop    %r10
ffffffff8020c5f9:	41 5b                	pop    %r11
ffffffff8020c5fb:	41 5c                	pop    %r12
ffffffff8020c5fd:	41 5d                	pop    %r13
ffffffff8020c5ff:	41 5e                	pop    %r14
ffffffff8020c601:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c603:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c607:	48 cf                	iretq

ffffffff8020c609 <SysTick_SMP_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_SMP_Handler:
    .global             SysTick_SMP_Handler
    SWAPGS
ffffffff8020c609:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c60c:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c60e:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c613:	41 57                	push   %r15
ffffffff8020c615:	41 56                	push   %r14
ffffffff8020c617:	41 55                	push   %r13
ffffffff8020c619:	41 54                	push   %r12
ffffffff8020c61b:	41 53                	push   %r11
ffffffff8020c61d:	41 52                	push   %r10
ffffffff8020c61f:	41 51                	push   %r9
ffffffff8020c621:	41 50                	push   %r8
ffffffff8020c623:	55                   	push   %rbp
ffffffff8020c624:	57                   	push   %rdi
ffffffff8020c625:	56                   	push   %rsi
ffffffff8020c626:	52                   	push   %rdx
ffffffff8020c627:	51                   	push   %rcx
ffffffff8020c628:	53                   	push   %rbx
ffffffff8020c629:	50                   	push   %rax
ffffffff8020c62a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c62e:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c630:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_SMP_Handler
ffffffff8020c633:	e8 26 01 00 00       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c638:	e8 f3 7c 01 00       	call   ffffffff80224330 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c63d:	0f 01 f8             	swapgs
ffffffff8020c640:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c644:	8e d8                	mov    %eax,%ds
ffffffff8020c646:	58                   	pop    %rax
ffffffff8020c647:	5b                   	pop    %rbx
ffffffff8020c648:	59                   	pop    %rcx
ffffffff8020c649:	5a                   	pop    %rdx
ffffffff8020c64a:	5e                   	pop    %rsi
ffffffff8020c64b:	5f                   	pop    %rdi
ffffffff8020c64c:	5d                   	pop    %rbp
ffffffff8020c64d:	41 58                	pop    %r8
ffffffff8020c64f:	41 59                	pop    %r9
ffffffff8020c651:	41 5a                	pop    %r10
ffffffff8020c653:	41 5b                	pop    %r11
ffffffff8020c655:	41 5c                	pop    %r12
ffffffff8020c657:	41 5d                	pop    %r13
ffffffff8020c659:	41 5e                	pop    %r14
ffffffff8020c65b:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c65d:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c661:	48 cf                	iretq

ffffffff8020c663 <SysTick_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_Handler:
    .global             SysTick_Handler
    SWAPGS
ffffffff8020c663:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c666:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c668:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c66d:	41 57                	push   %r15
ffffffff8020c66f:	41 56                	push   %r14
ffffffff8020c671:	41 55                	push   %r13
ffffffff8020c673:	41 54                	push   %r12
ffffffff8020c675:	41 53                	push   %r11
ffffffff8020c677:	41 52                	push   %r10
ffffffff8020c679:	41 51                	push   %r9
ffffffff8020c67b:	41 50                	push   %r8
ffffffff8020c67d:	55                   	push   %rbp
ffffffff8020c67e:	57                   	push   %rdi
ffffffff8020c67f:	56                   	push   %rsi
ffffffff8020c680:	52                   	push   %rdx
ffffffff8020c681:	51                   	push   %rcx
ffffffff8020c682:	53                   	push   %rbx
ffffffff8020c683:	50                   	push   %rax
ffffffff8020c684:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c688:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c68a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_Handler
ffffffff8020c68d:	e8 cc 00 00 00       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
    CALLQ               __RME_X64_SMP_Tick
ffffffff8020c692:	e8 fb 82 01 00       	call   ffffffff80224992 <__RME_X64_SMP_Tick>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c697:	e8 94 7c 01 00       	call   ffffffff80224330 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c69c:	0f 01 f8             	swapgs
ffffffff8020c69f:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c6a3:	8e d8                	mov    %eax,%ds
ffffffff8020c6a5:	58                   	pop    %rax
ffffffff8020c6a6:	5b                   	pop    %rbx
ffffffff8020c6a7:	59                   	pop    %rcx
ffffffff8020c6a8:	5a                   	pop    %rdx
ffffffff8020c6a9:	5e                   	pop    %rsi
ffffffff8020c6aa:	5f                   	pop    %rdi
ffffffff8020c6ab:	5d                   	pop    %rbp
ffffffff8020c6ac:	41 58                	pop    %r8
ffffffff8020c6ae:	41 59                	pop    %r9
ffffffff8020c6b0:	41 5a                	pop    %r10
ffffffff8020c6b2:	41 5b                	pop    %r11
ffffffff8020c6b4:	41 5c                	pop    %r12
ffffffff8020c6b6:	41 5d                	pop    %r13
ffffffff8020c6b8:	41 5e                	pop    %r14
ffffffff8020c6ba:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c6bc:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c6c0:	48 cf                	iretq

ffffffff8020c6c2 <SVC_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    .global             SVC_Handler
    SWAPGS
ffffffff8020c6c2:	0f 01 f8             	swapgs
    /* Swap the pointers with the per-core kernel RSP */
    MOVQ                %RSP,%GS:(8192-8)
ffffffff8020c6c5:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020c6cc:	00 00 
    MOVQ                %GS:(8192-16),%RSP
ffffffff8020c6ce:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020c6d5:	00 00 
    /* Simulate INT stack: High - [SS, RSP, RFLAGS, CS, RIP, ERRCODE] - Low */
    PUSHQ               $(USER_DATA)
ffffffff8020c6d7:	6a 23                	push   $0x23
    PUSHQ               %GS:(8192-8)
ffffffff8020c6d9:	65 ff 34 25 f8 1f 00 	push   %gs:0x1ff8
ffffffff8020c6e0:	00 
    PUSHQ               %R11
ffffffff8020c6e1:	41 53                	push   %r11
    PUSHQ               $(USER_CODE)
ffffffff8020c6e3:	6a 2b                	push   $0x2b
    PUSHQ               %RCX
ffffffff8020c6e5:	51                   	push   %rcx
    PUSHQ               $0
ffffffff8020c6e6:	6a 00                	push   $0x0
    /* We went into this from a SYSCALL - interrupt number 0x10000 */
    PUSHQ               $0x10000
ffffffff8020c6e8:	68 00 00 01 00       	push   $0x10000
    SAVE_GP_REGS
ffffffff8020c6ed:	41 57                	push   %r15
ffffffff8020c6ef:	41 56                	push   %r14
ffffffff8020c6f1:	41 55                	push   %r13
ffffffff8020c6f3:	41 54                	push   %r12
ffffffff8020c6f5:	41 53                	push   %r11
ffffffff8020c6f7:	41 52                	push   %r10
ffffffff8020c6f9:	41 51                	push   %r9
ffffffff8020c6fb:	41 50                	push   %r8
ffffffff8020c6fd:	55                   	push   %rbp
ffffffff8020c6fe:	57                   	push   %rdi
ffffffff8020c6ff:	56                   	push   %rsi
ffffffff8020c700:	52                   	push   %rdx
ffffffff8020c701:	51                   	push   %rcx
ffffffff8020c702:	53                   	push   %rbx
ffffffff8020c703:	50                   	push   %rax
ffffffff8020c704:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c708:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c70a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Svc_Handler
ffffffff8020c70d:	e8 b3 08 00 00       	call   ffffffff8020cfc5 <_RME_Svc_Handler>
    RESTORE_GP_REGS
ffffffff8020c712:	0f 01 f8             	swapgs
ffffffff8020c715:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c719:	8e d8                	mov    %eax,%ds
ffffffff8020c71b:	58                   	pop    %rax
ffffffff8020c71c:	5b                   	pop    %rbx
ffffffff8020c71d:	59                   	pop    %rcx
ffffffff8020c71e:	5a                   	pop    %rdx
ffffffff8020c71f:	5e                   	pop    %rsi
ffffffff8020c720:	5f                   	pop    %rdi
ffffffff8020c721:	5d                   	pop    %rbp
ffffffff8020c722:	41 58                	pop    %r8
ffffffff8020c724:	41 59                	pop    %r9
ffffffff8020c726:	41 5a                	pop    %r10
ffffffff8020c728:	41 5b                	pop    %r11
ffffffff8020c72a:	41 5c                	pop    %r12
ffffffff8020c72c:	41 5d                	pop    %r13
ffffffff8020c72e:	41 5e                	pop    %r14
ffffffff8020c730:	41 5f                	pop    %r15
    /* See if we are forced to use IRET */
    TESTQ               $0x10000,(%RSP)
ffffffff8020c732:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020c739:	00 
    JZ                  Use_IRET
ffffffff8020c73a:	74 1c                	je     ffffffff8020c758 <Use_IRET>
    /* Just move these into the registers desired */
    /* CVE-2012-0217, CVE-2014-4699: Force canonical address on RIP */
    MOVQ                $0x7FFFFFFFFFFF,%RCX
ffffffff8020c73c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020c743:	7f 00 00 
    ANDQ                16(%RSP),%RCX
ffffffff8020c746:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
    MOVQ                32(%RSP),%R11
ffffffff8020c74b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    MOVQ                40(%RSP),%RSP
ffffffff8020c750:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
    /* Return to user-level */
    SYSRETQ
ffffffff8020c755:	48 0f 07             	sysretq

ffffffff8020c758 <Use_IRET>:
Use_IRET:
    /* Flag is zero, We are forced to use IRET, because this is from INT */
    ADDQ                $16,%RSP
ffffffff8020c758:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c75c:	48 cf                	iretq

ffffffff8020c75e <_RME_X64_Comp_Swap>:
and asynchronous communication. Different from most operating systems, it employs
thread migration model for cross-boundary synchronous communication rather than
simple blockpoints. This invocation design have many benefits in many facets.

* Kernel Function *************************************************************
There's no perfect operating system for a particular hardware. A hardware may
ffffffff8020c75e:	55                   	push   %rbp
ffffffff8020c75f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c762:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8020c766:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020c76a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020c76e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
have its own idiosyncrasies that needs extra hacks. RME's kernel function utility
provides a disciplined way of making such hacks, in case you need to add new 
ffffffff8020c772:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020c776:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8020c77a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c77e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8020c782:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020c787:	0f 94 c0             	sete   %al
ffffffff8020c78a:	88 45 ff             	mov    %al,-0x1(%rbp)
system calls or directly manipulate hardware.

* The Use of 'volatile' *******************************************************
'volatile' is not needed in the kernel because the syscall interface acts as a
ffffffff8020c78d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
natural compiler barrier. We're safe to assume that, during one syscall, data
ffffffff8020c791:	c9                   	leave
ffffffff8020c792:	c3                   	ret

ffffffff8020c793 <_RME_X64_Fetch_Add>:
in memory remains unchanged. If anything changes, it has been dealt with the 
dedicated assembly atomics. If LTO has been enabled, there are three cases:
ffffffff8020c793:	55                   	push   %rbp
ffffffff8020c794:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c797:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8020c79b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020c79f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
(1) Uniprocessor with C-implemented "atomics" with no real atomic support.
ffffffff8020c7a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020c7a7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8020c7ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c7af:	f0 48 0f c1 02       	lock xadd %rax,(%rdx)
ffffffff8020c7b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    In this case, compiler barriers are not needed due to no kernel concurrency.
(2) Multiprocessor with assembly-implemented atomics, but the compiler LTO does
    not honor the assembly functions; instead it thinks that they are opaque.
    In this case, the opaque function call itself is a full compiler barrier.
ffffffff8020c7b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
(3) Multiprocessor with assembly-implemented atomics, and the compiler LTO does
ffffffff8020c7bc:	c9                   	leave
ffffffff8020c7bd:	c3                   	ret

ffffffff8020c7be <_RME_X64_Fetch_And>:
    honor the assembly functions.
    In this case, the compiler should be aware of the semantics of the assembly,
ffffffff8020c7be:	55                   	push   %rbp
ffffffff8020c7bf:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c7c2:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020c7c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020c7ca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    and produce correct code.
* Function Name Rules *********************************************************
ffffffff8020c7ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020c7d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c7d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020c7da:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020c7dd:	f0 48 21 02          	lock and %rax,(%rdx)
ffffffff8020c7e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
(1) No "_": OS entry function RME_Kmain and C entry "main".
(2) "_"   : Kernel functions that are be called by kernel.
(3) "__"  : HAL functions that are called by kernel.
(4) "___" : HAL functions that should only be called by HAL.
ffffffff8020c7e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
******************************************************************************/
ffffffff8020c7e9:	c9                   	leave
ffffffff8020c7ea:	c3                   	ret

ffffffff8020c7eb <_RME_X64_MSB_Get>:

/* Include *******************************************************************/
ffffffff8020c7eb:	55                   	push   %rbp
ffffffff8020c7ec:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c7ef:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020c7f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
#define __HDR_DEF__
#include "rme_platform.h"
ffffffff8020c7f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c7fb:	48 0f bd c0          	bsr    %rax,%rax
ffffffff8020c7ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#include "Kernel/rme_kernel.h"
#undef __HDR_DEF__

#define __HDR_STRUCT__
ffffffff8020c803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
#include "rme_platform.h"
ffffffff8020c807:	c9                   	leave
ffffffff8020c808:	c3                   	ret

ffffffff8020c809 <__RME_Int_Disable>:
#include "Kernel/rme_kernel.h"
#undef __HDR_STRUCT__

ffffffff8020c809:	55                   	push   %rbp
ffffffff8020c80a:	48 89 e5             	mov    %rsp,%rbp
/* Private include */
ffffffff8020c80d:	fa                   	cli
#include "Kernel/rme_kernel.h"

#define __HDR_PUBLIC__
ffffffff8020c80e:	90                   	nop
ffffffff8020c80f:	5d                   	pop    %rbp
ffffffff8020c810:	c3                   	ret

ffffffff8020c811 <RME_X64_RDTSC>:
Return      : None.
******************************************************************************/
void _RME_List_Del(volatile struct RME_List* Prev,
                   volatile struct RME_List* Next)
{
    Next->Prev=Prev;
ffffffff8020c811:	55                   	push   %rbp
ffffffff8020c812:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c815:	48 83 ec 10          	sub    $0x10,%rsp
    Prev->Next=Next;
}
ffffffff8020c819:	0f 31                	rdtsc
ffffffff8020c81b:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8020c81e:	89 55 f8             	mov    %edx,-0x8(%rbp)
/* End Function:_RME_List_Del ************************************************/

/* Function:_RME_List_Ins *****************************************************
Description : Insert a node to the doubly-linked list.
ffffffff8020c821:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8020c824:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020c828:	48 89 c2             	mov    %rax,%rdx
ffffffff8020c82b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8020c82e:	48 09 d0             	or     %rdx,%rax
Input       : struct RME_List* New - The new node to insert.
ffffffff8020c831:	c9                   	leave
ffffffff8020c832:	c3                   	ret

ffffffff8020c833 <RME_Int_Print>:
{
ffffffff8020c833:	f3 0f 1e fa          	endbr64
ffffffff8020c837:	55                   	push   %rbp
ffffffff8020c838:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c83b:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8020c83f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    if(Int==0)
ffffffff8020c843:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8020c848:	75 14                	jne    ffffffff8020c85e <RME_Int_Print+0x2b>
        __RME_Putchar('0');
ffffffff8020c84a:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020c84f:	e8 f0 e8 00 00       	call   ffffffff8021b144 <__RME_Putchar>
        return 1;
ffffffff8020c854:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c859:	e9 0b 01 00 00       	jmp    ffffffff8020c969 <RME_Int_Print+0x136>
    if(Int<0)
ffffffff8020c85e:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8020c863:	79 1f                	jns    ffffffff8020c884 <RME_Int_Print+0x51>
        __RME_Putchar('-');
ffffffff8020c865:	bf 2d 00 00 00       	mov    $0x2d,%edi
ffffffff8020c86a:	e8 d5 e8 00 00       	call   ffffffff8021b144 <__RME_Putchar>
        Abs=-Int;
ffffffff8020c86f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020c873:	48 f7 d8             	neg    %rax
ffffffff8020c876:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        Num=1;
ffffffff8020c87a:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8020c881:	00 
ffffffff8020c882:	eb 10                	jmp    ffffffff8020c894 <RME_Int_Print+0x61>
        Abs=Int;
ffffffff8020c884:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020c888:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        Num=0;
ffffffff8020c88c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020c893:	00 
    Count=0;
ffffffff8020c894:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8020c89b:	00 
    Div=1;
ffffffff8020c89c:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
ffffffff8020c8a3:	00 
    Iter=Abs;
ffffffff8020c8a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c8a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Iter/=10;
ffffffff8020c8ac:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020c8b0:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
ffffffff8020c8b7:	66 66 66 
ffffffff8020c8ba:	48 89 c8             	mov    %rcx,%rax
ffffffff8020c8bd:	48 f7 ea             	imul   %rdx
ffffffff8020c8c0:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8c3:	48 c1 f8 02          	sar    $0x2,%rax
ffffffff8020c8c7:	48 c1 f9 3f          	sar    $0x3f,%rcx
ffffffff8020c8cb:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c8ce:	48 29 d0             	sub    %rdx,%rax
ffffffff8020c8d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Count++;
ffffffff8020c8d5:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        if(Iter!=0)
ffffffff8020c8da:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8020c8df:	74 17                	je     ffffffff8020c8f8 <RME_Int_Print+0xc5>
            Div*=10;
ffffffff8020c8e1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020c8e5:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8e8:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8020c8ec:	48 01 d0             	add    %rdx,%rax
ffffffff8020c8ef:	48 01 c0             	add    %rax,%rax
ffffffff8020c8f2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        Iter/=10;
ffffffff8020c8f6:	eb b4                	jmp    ffffffff8020c8ac <RME_Int_Print+0x79>
            break;
ffffffff8020c8f8:	90                   	nop
    Num+=Count;
ffffffff8020c8f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c8fd:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    Iter=Abs;
ffffffff8020c901:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c905:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(Count>0)
ffffffff8020c909:	eb 53                	jmp    ffffffff8020c95e <RME_Int_Print+0x12b>
        Count--;
ffffffff8020c90b:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020c910:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c914:	48 99                	cqto
ffffffff8020c916:	48 f7 7d d8          	idivq  -0x28(%rbp)
ffffffff8020c91a:	83 c0 30             	add    $0x30,%eax
ffffffff8020c91d:	0f be c0             	movsbl %al,%eax
ffffffff8020c920:	89 c7                	mov    %eax,%edi
ffffffff8020c922:	e8 1d e8 00 00       	call   ffffffff8021b144 <__RME_Putchar>
        Iter=Iter%Div;
ffffffff8020c927:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c92b:	48 99                	cqto
ffffffff8020c92d:	48 f7 7d d8          	idivq  -0x28(%rbp)
ffffffff8020c931:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        Div/=10;
ffffffff8020c935:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8020c939:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
ffffffff8020c940:	66 66 66 
ffffffff8020c943:	48 89 c8             	mov    %rcx,%rax
ffffffff8020c946:	48 f7 ea             	imul   %rdx
ffffffff8020c949:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c94c:	48 c1 f8 02          	sar    $0x2,%rax
ffffffff8020c950:	48 c1 f9 3f          	sar    $0x3f,%rcx
ffffffff8020c954:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c957:	48 29 d0             	sub    %rdx,%rax
ffffffff8020c95a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Count>0)
ffffffff8020c95e:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8020c963:	7f a6                	jg     ffffffff8020c90b <RME_Int_Print+0xd8>
    return Num;
ffffffff8020c965:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020c969:	c9                   	leave
ffffffff8020c96a:	c3                   	ret

ffffffff8020c96b <RME_Hex_Print>:
{
ffffffff8020c96b:	f3 0f 1e fa          	endbr64
ffffffff8020c96f:	55                   	push   %rbp
ffffffff8020c970:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c973:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8020c977:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    if(Uint==0U)
ffffffff8020c97b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020c980:	75 14                	jne    ffffffff8020c996 <RME_Hex_Print+0x2b>
        __RME_Putchar('0');
ffffffff8020c982:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020c987:	e8 b8 e7 00 00       	call   ffffffff8021b144 <__RME_Putchar>
        return 1;
ffffffff8020c98c:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c991:	e9 95 00 00 00       	jmp    ffffffff8020ca2b <RME_Hex_Print+0xc0>
    Count=0U;
ffffffff8020c996:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8020c99d:	00 
    Iter=Uint;
ffffffff8020c99e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020c9a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020c9a6:	eb 0a                	jmp    ffffffff8020c9b2 <RME_Hex_Print+0x47>
        Iter<<=4;
ffffffff8020c9a8:	48 c1 65 f8 04       	shlq   $0x4,-0x8(%rbp)
        Count++;
ffffffff8020c9ad:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020c9b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020c9b6:	48 c1 e8 3c          	shr    $0x3c,%rax
ffffffff8020c9ba:	48 85 c0             	test   %rax,%rax
ffffffff8020c9bd:	74 e9                	je     ffffffff8020c9a8 <RME_Hex_Print+0x3d>
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020c9bf:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff8020c9c4:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff8020c9c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Num=Count;
ffffffff8020c9cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c9d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(Count>0U)
ffffffff8020c9d4:	eb 4a                	jmp    ffffffff8020ca20 <RME_Hex_Print+0xb5>
        Count--;
ffffffff8020c9d6:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
        Iter=(Uint>>(Count<<2U))&0x0FU;
ffffffff8020c9db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c9df:	c1 e0 02             	shl    $0x2,%eax
ffffffff8020c9e2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020c9e6:	89 c1                	mov    %eax,%ecx
ffffffff8020c9e8:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020c9eb:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c9ee:	83 e0 0f             	and    $0xf,%eax
ffffffff8020c9f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if(Iter<10U)
ffffffff8020c9f5:	48 83 7d f8 09       	cmpq   $0x9,-0x8(%rbp)
ffffffff8020c9fa:	77 13                	ja     ffffffff8020ca0f <RME_Hex_Print+0xa4>
            __RME_Putchar((rme_s8_t)Iter+'0');
ffffffff8020c9fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca00:	83 c0 30             	add    $0x30,%eax
ffffffff8020ca03:	0f be c0             	movsbl %al,%eax
ffffffff8020ca06:	89 c7                	mov    %eax,%edi
ffffffff8020ca08:	e8 37 e7 00 00       	call   ffffffff8021b144 <__RME_Putchar>
ffffffff8020ca0d:	eb 11                	jmp    ffffffff8020ca20 <RME_Hex_Print+0xb5>
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
ffffffff8020ca0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca13:	83 c0 37             	add    $0x37,%eax
ffffffff8020ca16:	0f be c0             	movsbl %al,%eax
ffffffff8020ca19:	89 c7                	mov    %eax,%edi
ffffffff8020ca1b:	e8 24 e7 00 00       	call   ffffffff8021b144 <__RME_Putchar>
    while(Count>0U)
ffffffff8020ca20:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8020ca25:	75 af                	jne    ffffffff8020c9d6 <RME_Hex_Print+0x6b>
    return (rme_cnt_t)Num;
ffffffff8020ca27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff8020ca2b:	c9                   	leave
ffffffff8020ca2c:	c3                   	ret

ffffffff8020ca2d <RME_Str_Print>:
{
ffffffff8020ca2d:	f3 0f 1e fa          	endbr64
ffffffff8020ca31:	55                   	push   %rbp
ffffffff8020ca32:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ca35:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ca39:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ca3d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ca44:	00 
ffffffff8020ca45:	eb 2f                	jmp    ffffffff8020ca76 <RME_Str_Print+0x49>
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020ca47:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ca4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca4f:	48 01 d0             	add    %rdx,%rax
ffffffff8020ca52:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ca55:	84 c0                	test   %al,%al
ffffffff8020ca57:	74 29                	je     ffffffff8020ca82 <RME_Str_Print+0x55>
        __RME_Putchar(String[Count]);
ffffffff8020ca59:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ca5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca61:	48 01 d0             	add    %rdx,%rax
ffffffff8020ca64:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ca67:	0f be c0             	movsbl %al,%eax
ffffffff8020ca6a:	89 c7                	mov    %eax,%edi
ffffffff8020ca6c:	e8 d3 e6 00 00       	call   ffffffff8021b144 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ca71:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ca76:	48 81 7d f8 fe 00 00 	cmpq   $0xfe,-0x8(%rbp)
ffffffff8020ca7d:	00 
ffffffff8020ca7e:	76 c7                	jbe    ffffffff8020ca47 <RME_Str_Print+0x1a>
ffffffff8020ca80:	eb 01                	jmp    ffffffff8020ca83 <RME_Str_Print+0x56>
            break;
ffffffff8020ca82:	90                   	nop
    return (rme_cnt_t)Count;
ffffffff8020ca83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020ca87:	c9                   	leave
ffffffff8020ca88:	c3                   	ret

ffffffff8020ca89 <RME_Log>:
{
ffffffff8020ca89:	f3 0f 1e fa          	endbr64
ffffffff8020ca8d:	55                   	push   %rbp
ffffffff8020ca8e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ca91:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ca95:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020ca99:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020ca9d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8020caa1:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    RME_DBG_S("\r\n***\r\nKernel panic - not syncing :\r\n"); \
ffffffff8020caa5:	48 c7 c7 e0 71 22 80 	mov    $0xffffffff802271e0,%rdi
ffffffff8020caac:	e8 7c ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(File); \
ffffffff8020cab1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cab5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cab8:	e8 70 ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(" , Line "); \
ffffffff8020cabd:	48 c7 c7 06 72 22 80 	mov    $0xffffffff80227206,%rdi
ffffffff8020cac4:	e8 64 ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(Line); \
ffffffff8020cac9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cacd:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cad0:	e8 5e fd ff ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020cad5:	48 c7 c7 0f 72 22 80 	mov    $0xffffffff8022720f,%rdi
ffffffff8020cadc:	e8 4c ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Date); \
ffffffff8020cae1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cae5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cae8:	e8 40 ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(" , "); \
ffffffff8020caed:	48 c7 c7 12 72 22 80 	mov    $0xffffffff80227212,%rdi
ffffffff8020caf4:	e8 34 ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Time); \
ffffffff8020caf9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cafd:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cb00:	e8 28 ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020cb05:	48 c7 c7 0f 72 22 80 	mov    $0xffffffff8022720f,%rdi
ffffffff8020cb0c:	e8 1c ff ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
}
ffffffff8020cb11:	90                   	nop
ffffffff8020cb12:	c9                   	leave
ffffffff8020cb13:	c3                   	ret

ffffffff8020cb14 <_RME_MSB_Generic>:
{
ffffffff8020cb14:	f3 0f 1e fa          	endbr64
ffffffff8020cb18:	55                   	push   %rbp
ffffffff8020cb19:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cb1c:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cb20:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if(Value>=RME_POW2(32U))
ffffffff8020cb24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
ffffffff8020cb29:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb2d:	73 58                	jae    ffffffff8020cb87 <_RME_MSB_Generic+0x73>
        if(Value>=RME_POW2(48U))
ffffffff8020cb2f:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffff,%rax
ffffffff8020cb36:	ff 00 00 
ffffffff8020cb39:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb3d:	73 24                	jae    ffffffff8020cb63 <_RME_MSB_Generic+0x4f>
            if(Value>=RME_POW2(56U))
ffffffff8020cb3f:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
ffffffff8020cb46:	ff ff 00 
ffffffff8020cb49:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb4d:	73 0a                	jae    ffffffff8020cb59 <_RME_MSB_Generic+0x45>
                Bit=56U;
ffffffff8020cb4f:	48 c7 45 f8 38 00 00 	movq   $0x38,-0x8(%rbp)
ffffffff8020cb56:	00 
ffffffff8020cb57:	eb 72                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
                Bit=48U;
ffffffff8020cb59:	48 c7 45 f8 30 00 00 	movq   $0x30,-0x8(%rbp)
ffffffff8020cb60:	00 
ffffffff8020cb61:	eb 68                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
            if(Value>=RME_POW2(40U))
ffffffff8020cb63:	48 b8 ff ff ff ff ff 	movabs $0xffffffffff,%rax
ffffffff8020cb6a:	00 00 00 
ffffffff8020cb6d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb71:	73 0a                	jae    ffffffff8020cb7d <_RME_MSB_Generic+0x69>
                Bit=40U;
ffffffff8020cb73:	48 c7 45 f8 28 00 00 	movq   $0x28,-0x8(%rbp)
ffffffff8020cb7a:	00 
ffffffff8020cb7b:	eb 4e                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
                Bit=32U;
ffffffff8020cb7d:	48 c7 45 f8 20 00 00 	movq   $0x20,-0x8(%rbp)
ffffffff8020cb84:	00 
ffffffff8020cb85:	eb 44                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
        if(Value>=RME_POW2(16U))
ffffffff8020cb87:	48 81 7d e8 ff ff 00 	cmpq   $0xffff,-0x18(%rbp)
ffffffff8020cb8e:	00 
ffffffff8020cb8f:	76 1e                	jbe    ffffffff8020cbaf <_RME_MSB_Generic+0x9b>
            if(Value>=RME_POW2(24U))
ffffffff8020cb91:	48 81 7d e8 ff ff ff 	cmpq   $0xffffff,-0x18(%rbp)
ffffffff8020cb98:	00 
ffffffff8020cb99:	76 0a                	jbe    ffffffff8020cba5 <_RME_MSB_Generic+0x91>
                Bit=24U;
ffffffff8020cb9b:	48 c7 45 f8 18 00 00 	movq   $0x18,-0x8(%rbp)
ffffffff8020cba2:	00 
ffffffff8020cba3:	eb 26                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
                Bit=16U;
ffffffff8020cba5:	48 c7 45 f8 10 00 00 	movq   $0x10,-0x8(%rbp)
ffffffff8020cbac:	00 
ffffffff8020cbad:	eb 1c                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
            if(Value>=RME_POW2(8U))
ffffffff8020cbaf:	48 81 7d e8 ff 00 00 	cmpq   $0xff,-0x18(%rbp)
ffffffff8020cbb6:	00 
ffffffff8020cbb7:	76 0a                	jbe    ffffffff8020cbc3 <_RME_MSB_Generic+0xaf>
                Bit=8U;
ffffffff8020cbb9:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8020cbc0:	00 
ffffffff8020cbc1:	eb 08                	jmp    ffffffff8020cbcb <_RME_MSB_Generic+0xb7>
                Bit=0U;
ffffffff8020cbc3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cbca:	00 
    return Table[Value>>Bit]+Bit;
ffffffff8020cbcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cbcf:	89 c2                	mov    %eax,%edx
ffffffff8020cbd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbd5:	89 d1                	mov    %edx,%ecx
ffffffff8020cbd7:	48 d3 e8             	shr    %cl,%rax
ffffffff8020cbda:	0f b6 80 60 73 22 80 	movzbl -0x7fdd8ca0(%rax),%eax
ffffffff8020cbe1:	0f b6 d0             	movzbl %al,%edx
ffffffff8020cbe4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cbe8:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020cbeb:	c9                   	leave
ffffffff8020cbec:	c3                   	ret

ffffffff8020cbed <_RME_LSB_Generic>:
{
ffffffff8020cbed:	f3 0f 1e fa          	endbr64
ffffffff8020cbf1:	55                   	push   %rbp
ffffffff8020cbf2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cbf5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cbf9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    if((Value<<32U)==0U)
ffffffff8020cbfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc01:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020cc05:	48 85 c0             	test   %rax,%rax
ffffffff8020cc08:	75 4f                	jne    ffffffff8020cc59 <_RME_LSB_Generic+0x6c>
        if((Value<<16U)==0U)
ffffffff8020cc0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc0e:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff8020cc12:	48 85 c0             	test   %rax,%rax
ffffffff8020cc15:	75 21                	jne    ffffffff8020cc38 <_RME_LSB_Generic+0x4b>
            if((Value<<8U)==0U)
ffffffff8020cc17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc1b:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8020cc1f:	48 85 c0             	test   %rax,%rax
ffffffff8020cc22:	75 0a                	jne    ffffffff8020cc2e <_RME_LSB_Generic+0x41>
                Bit=56U;
ffffffff8020cc24:	48 c7 45 f8 38 00 00 	movq   $0x38,-0x8(%rbp)
ffffffff8020cc2b:	00 
ffffffff8020cc2c:	eb 78                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
                Bit=48U;
ffffffff8020cc2e:	48 c7 45 f8 30 00 00 	movq   $0x30,-0x8(%rbp)
ffffffff8020cc35:	00 
ffffffff8020cc36:	eb 6e                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
            if((Value<<24U)==0U)
ffffffff8020cc38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc3c:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff8020cc40:	48 85 c0             	test   %rax,%rax
ffffffff8020cc43:	75 0a                	jne    ffffffff8020cc4f <_RME_LSB_Generic+0x62>
                Bit=40U;
ffffffff8020cc45:	48 c7 45 f8 28 00 00 	movq   $0x28,-0x8(%rbp)
ffffffff8020cc4c:	00 
ffffffff8020cc4d:	eb 57                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
                Bit=32U;
ffffffff8020cc4f:	48 c7 45 f8 20 00 00 	movq   $0x20,-0x8(%rbp)
ffffffff8020cc56:	00 
ffffffff8020cc57:	eb 4d                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
        if((Value<<48U)==0U)
ffffffff8020cc59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc5d:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8020cc61:	48 85 c0             	test   %rax,%rax
ffffffff8020cc64:	75 21                	jne    ffffffff8020cc87 <_RME_LSB_Generic+0x9a>
            if((Value<<40U)==0U)
ffffffff8020cc66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc6a:	48 c1 e0 28          	shl    $0x28,%rax
ffffffff8020cc6e:	48 85 c0             	test   %rax,%rax
ffffffff8020cc71:	75 0a                	jne    ffffffff8020cc7d <_RME_LSB_Generic+0x90>
                Bit=24U;
ffffffff8020cc73:	48 c7 45 f8 18 00 00 	movq   $0x18,-0x8(%rbp)
ffffffff8020cc7a:	00 
ffffffff8020cc7b:	eb 29                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
                Bit=16U;
ffffffff8020cc7d:	48 c7 45 f8 10 00 00 	movq   $0x10,-0x8(%rbp)
ffffffff8020cc84:	00 
ffffffff8020cc85:	eb 1f                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
            if((Value<<56U)==0U)
ffffffff8020cc87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc8b:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8020cc8f:	48 85 c0             	test   %rax,%rax
ffffffff8020cc92:	75 0a                	jne    ffffffff8020cc9e <_RME_LSB_Generic+0xb1>
                Bit=8U;
ffffffff8020cc94:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8020cc9b:	00 
ffffffff8020cc9c:	eb 08                	jmp    ffffffff8020cca6 <_RME_LSB_Generic+0xb9>
                Bit=0U;
ffffffff8020cc9e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cca5:	00 
    return Table[(rme_u8_t)(Value>>Bit)]+Bit;
ffffffff8020cca6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccaa:	89 c2                	mov    %eax,%edx
ffffffff8020ccac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ccb0:	89 d1                	mov    %edx,%ecx
ffffffff8020ccb2:	48 d3 e8             	shr    %cl,%rax
ffffffff8020ccb5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ccb8:	48 98                	cltq
ffffffff8020ccba:	0f b6 80 60 74 22 80 	movzbl -0x7fdd8ba0(%rax),%eax
ffffffff8020ccc1:	0f b6 d0             	movzbl %al,%edx
ffffffff8020ccc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccc8:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020cccb:	c9                   	leave
ffffffff8020cccc:	c3                   	ret

ffffffff8020cccd <_RME_Comp_Swap_Single>:
{
ffffffff8020cccd:	f3 0f 1e fa          	endbr64
ffffffff8020ccd1:	55                   	push   %rbp
ffffffff8020ccd2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ccd5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020ccd9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020ccdd:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020cce1:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if(*Ptr==Old)
ffffffff8020cce5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cce9:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ccec:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8020ccf0:	75 12                	jne    ffffffff8020cd04 <_RME_Comp_Swap_Single+0x37>
        *Ptr=New;
ffffffff8020ccf2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccf6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ccfa:	48 89 10             	mov    %rdx,(%rax)
        return 1U;
ffffffff8020ccfd:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020cd02:	eb 05                	jmp    ffffffff8020cd09 <_RME_Comp_Swap_Single+0x3c>
    return 0U;
ffffffff8020cd04:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cd09:	c9                   	leave
ffffffff8020cd0a:	c3                   	ret

ffffffff8020cd0b <_RME_Fetch_Add_Single>:
{
ffffffff8020cd0b:	f3 0f 1e fa          	endbr64
ffffffff8020cd0f:	55                   	push   %rbp
ffffffff8020cd10:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd13:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cd17:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cd1b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    Old=(rme_cnt_t)(*Ptr);
ffffffff8020cd1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd23:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cd26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *Ptr=(rme_ptr_t)(Old+Addend);
ffffffff8020cd2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cd32:	48 01 d0             	add    %rdx,%rax
ffffffff8020cd35:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd3c:	48 89 10             	mov    %rdx,(%rax)
    return (rme_ptr_t)Old;
ffffffff8020cd3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020cd43:	c9                   	leave
ffffffff8020cd44:	c3                   	ret

ffffffff8020cd45 <_RME_Fetch_And_Single>:
{
ffffffff8020cd45:	f3 0f 1e fa          	endbr64
ffffffff8020cd49:	55                   	push   %rbp
ffffffff8020cd4a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd4d:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cd51:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cd55:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    Old=*Ptr;
ffffffff8020cd59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd5d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cd60:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *Ptr=Old&Operand;
ffffffff8020cd64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd68:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff8020cd6c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd73:	48 89 10             	mov    %rdx,(%rax)
    return Old;
ffffffff8020cd76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020cd7a:	c9                   	leave
ffffffff8020cd7b:	c3                   	ret

ffffffff8020cd7c <_RME_List_Crt>:
{
ffffffff8020cd7c:	f3 0f 1e fa          	endbr64
ffffffff8020cd80:	55                   	push   %rbp
ffffffff8020cd81:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd84:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020cd88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    Head->Prev=Head;
ffffffff8020cd8c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd90:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd94:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Head->Next=Head;
ffffffff8020cd98:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cda0:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cda3:	90                   	nop
ffffffff8020cda4:	c9                   	leave
ffffffff8020cda5:	c3                   	ret

ffffffff8020cda6 <_RME_List_Del>:
{
ffffffff8020cda6:	f3 0f 1e fa          	endbr64
ffffffff8020cdaa:	55                   	push   %rbp
ffffffff8020cdab:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cdae:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8020cdb2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020cdb6:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Next->Prev=Prev;
ffffffff8020cdba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cdbe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cdc2:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=Next;
ffffffff8020cdc6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cdca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020cdce:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cdd1:	90                   	nop
ffffffff8020cdd2:	c9                   	leave
ffffffff8020cdd3:	c3                   	ret

ffffffff8020cdd4 <_RME_List_Ins>:
Return      : None.
******************************************************************************/
void _RME_List_Ins(volatile struct RME_List* New,
                   volatile struct RME_List* Prev,
                   volatile struct RME_List* Next)
{
ffffffff8020cdd4:	f3 0f 1e fa          	endbr64
ffffffff8020cdd8:	55                   	push   %rbp
ffffffff8020cdd9:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cddc:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cde0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020cde4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020cde8:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    Next->Prev=New;
ffffffff8020cdec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cdf0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cdf4:	48 89 50 08          	mov    %rdx,0x8(%rax)
    New->Next=Next;
ffffffff8020cdf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cdfc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ce00:	48 89 10             	mov    %rdx,(%rax)
    New->Prev=Prev;
ffffffff8020ce03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce07:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ce0b:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=New;
ffffffff8020ce0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ce13:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020ce17:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020ce1a:	90                   	nop
ffffffff8020ce1b:	c9                   	leave
ffffffff8020ce1c:	c3                   	ret

ffffffff8020ce1d <_RME_Clear>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Clear(void* Addr,
                rme_ptr_t Size)
{
ffffffff8020ce1d:	f3 0f 1e fa          	endbr64
ffffffff8020ce21:	55                   	push   %rbp
ffffffff8020ce22:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ce25:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ce29:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020ce2d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Count;

    for(Count=0U;Count<Size;Count++)
ffffffff8020ce31:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ce38:	00 
ffffffff8020ce39:	eb 13                	jmp    ffffffff8020ce4e <_RME_Clear+0x31>
    {
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ce3b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ce3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce43:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce46:	c6 00 00             	movb   $0x0,(%rax)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ce49:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ce4e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce52:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff8020ce56:	72 e3                	jb     ffffffff8020ce3b <_RME_Clear+0x1e>
    }
}
ffffffff8020ce58:	90                   	nop
ffffffff8020ce59:	90                   	nop
ffffffff8020ce5a:	c9                   	leave
ffffffff8020ce5b:	c3                   	ret

ffffffff8020ce5c <_RME_Memcmp>:
                          value. If Ptr1==Ptr2, then return 0;
******************************************************************************/
rme_ret_t _RME_Memcmp(const void* Ptr1,
                      const void* Ptr2,
                      rme_ptr_t Num)
{
ffffffff8020ce5c:	f3 0f 1e fa          	endbr64
ffffffff8020ce60:	55                   	push   %rbp
ffffffff8020ce61:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ce64:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8020ce68:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020ce6c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020ce70:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    const rme_s8_t* Dst;
    const rme_s8_t* Src;
    rme_ptr_t Count;

    Dst=(const rme_s8_t*)Ptr1;
ffffffff8020ce74:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ce78:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Src=(const rme_s8_t*)Ptr2;
ffffffff8020ce7c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ce80:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    for(Count=0U;Count<Num;Count++)
ffffffff8020ce84:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ce8b:	00 
ffffffff8020ce8c:	eb 4e                	jmp    ffffffff8020cedc <_RME_Memcmp+0x80>
    {
        if(Dst[Count]!=Src[Count])
ffffffff8020ce8e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ce92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce96:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce99:	0f b6 10             	movzbl (%rax),%edx
ffffffff8020ce9c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cea0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cea4:	48 01 c8             	add    %rcx,%rax
ffffffff8020cea7:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ceaa:	38 c2                	cmp    %al,%dl
ffffffff8020ceac:	74 29                	je     ffffffff8020ced7 <_RME_Memcmp+0x7b>
        {
            RME_COV_MARKER();
            
            return Dst[Count]-Src[Count];
ffffffff8020ceae:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ceb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ceb6:	48 01 d0             	add    %rdx,%rax
ffffffff8020ceb9:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020cebc:	0f be d0             	movsbl %al,%edx
ffffffff8020cebf:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cec3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cec7:	48 01 c8             	add    %rcx,%rax
ffffffff8020ceca:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020cecd:	0f be c0             	movsbl %al,%eax
ffffffff8020ced0:	29 c2                	sub    %eax,%edx
ffffffff8020ced2:	48 63 c2             	movslq %edx,%rax
ffffffff8020ced5:	eb 14                	jmp    ffffffff8020ceeb <_RME_Memcmp+0x8f>
    for(Count=0U;Count<Num;Count++)
ffffffff8020ced7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020cedc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cee0:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff8020cee4:	72 a8                	jb     ffffffff8020ce8e <_RME_Memcmp+0x32>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff8020cee6:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020ceeb:	c9                   	leave
ffffffff8020ceec:	c3                   	ret

ffffffff8020ceed <_RME_Memcpy>:
Return      : None.
******************************************************************************/
void _RME_Memcpy(void* Dst,
                 void* Src,
                 rme_ptr_t Num)
{
ffffffff8020ceed:	f3 0f 1e fa          	endbr64
ffffffff8020cef1:	55                   	push   %rbp
ffffffff8020cef2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cef5:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8020cef9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cefd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020cf01:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    rme_ptr_t Count;

    for(Count=0U;Count<Num;Count++)
ffffffff8020cf05:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cf0c:	00 
ffffffff8020cf0d:	eb 20                	jmp    ffffffff8020cf2f <_RME_Memcpy+0x42>
    {
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020cf0f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020cf13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf17:	48 01 d0             	add    %rdx,%rax
ffffffff8020cf1a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cf1e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cf22:	48 01 ca             	add    %rcx,%rdx
ffffffff8020cf25:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020cf28:	88 02                	mov    %al,(%rdx)
    for(Count=0U;Count<Num;Count++)
ffffffff8020cf2a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020cf2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf33:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020cf37:	72 d6                	jb     ffffffff8020cf0f <_RME_Memcpy+0x22>
    }
}
ffffffff8020cf39:	90                   	nop
ffffffff8020cf3a:	90                   	nop
ffffffff8020cf3b:	c9                   	leave
ffffffff8020cf3c:	c3                   	ret

ffffffff8020cf3d <_RME_Diff>:
Output      : None.
Return      : rme_ptr_t - The distance.
******************************************************************************/
rme_ptr_t _RME_Diff(rme_ptr_t Num1,
                    rme_ptr_t Num2)
{
ffffffff8020cf3d:	f3 0f 1e fa          	endbr64
ffffffff8020cf41:	55                   	push   %rbp
ffffffff8020cf42:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cf45:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cf49:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cf4d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Diff1;
    rme_ptr_t Diff2;
    
    Diff1=Num1-Num2;
ffffffff8020cf51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cf55:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
ffffffff8020cf59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Diff2=Num2-Num1;
ffffffff8020cf5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cf61:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff8020cf65:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    if(Diff1>Diff2)
ffffffff8020cf69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf6d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8020cf71:	73 06                	jae    ffffffff8020cf79 <_RME_Diff+0x3c>
    {
        RME_COV_MARKER();
        
        return Diff2;
ffffffff8020cf73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cf77:	eb 04                	jmp    ffffffff8020cf7d <_RME_Diff+0x40>
    }
    else
    {
        RME_COV_MARKER();
        
        return Diff1;
ffffffff8020cf79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
}
ffffffff8020cf7d:	c9                   	leave
ffffffff8020cf7e:	c3                   	ret

ffffffff8020cf7f <RME_Kmain>:
Input       : None.
Output      : None.
Return      : rme_ret_t - This function never returns.
******************************************************************************/
rme_ret_t RME_Kmain(void)
{
ffffffff8020cf7f:	f3 0f 1e fa          	endbr64
ffffffff8020cf83:	55                   	push   %rbp
ffffffff8020cf84:	48 89 e5             	mov    %rsp,%rbp
    /* Disable all interrupts first */
    __RME_Int_Disable();
ffffffff8020cf87:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020cf8c:	e8 78 f8 ff ff       	call   ffffffff8020c809 <__RME_Int_Disable>
    /* Some low-level kernel assertions */
    _RME_Lowlvl_Check();
ffffffff8020cf91:	e8 20 00 00 00       	call   ffffffff8020cfb6 <_RME_Lowlvl_Check>
    /* Hardware low-level init */
    __RME_Lowlvl_Init();
ffffffff8020cf96:	e8 7b 7a 01 00       	call   ffffffff80224a16 <__RME_Lowlvl_Init>
    /* Initialize the kernel page tables or memory mappings */
    __RME_Pgt_Kom_Init();
ffffffff8020cf9b:	e8 b7 7a 01 00       	call   ffffffff80224a57 <__RME_Pgt_Kom_Init>
    /* Initialize the kernel object allocation table - default init */
    _RME_Kot_Init(RME_KOT_WORD_NUM);
ffffffff8020cfa0:	bf 04 00 00 00       	mov    $0x4,%edi
ffffffff8020cfa5:	e8 38 53 00 00       	call   ffffffff802122e2 <_RME_Kot_Init>
    /* Boot into the first process */
    __RME_Boot();
ffffffff8020cfaa:	e8 68 84 01 00       	call   ffffffff80225417 <__RME_Boot>
    /* Should never reach here */
    return 0;
ffffffff8020cfaf:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cfb4:	5d                   	pop    %rbp
ffffffff8020cfb5:	c3                   	ret

ffffffff8020cfb6 <_RME_Lowlvl_Check>:
Input       : None.
Output      : None.
Return      : rme_ret_t - Always 0.
******************************************************************************/
static rme_ret_t _RME_Lowlvl_Check(void)
{
ffffffff8020cfb6:	f3 0f 1e fa          	endbr64
ffffffff8020cfba:	55                   	push   %rbp
ffffffff8020cfbb:	48 89 e5             	mov    %rsp,%rbp
    /* Kernel memory allocation minimal size aligned to word boundary */
    RME_ASSERT(RME_KOM_SLOT_ORDER>=RME_WORD_ORDER-3U);
    /* Make sure the number of priorities do not exceed half-word boundary */
    RME_ASSERT(RME_PREEMPT_PRIO_NUM<=RME_POW2(RME_WORD_BIT>>1));
    
    return 0;
ffffffff8020cfbe:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cfc3:	5d                   	pop    %rbp
ffffffff8020cfc4:	c3                   	ret

ffffffff8020cfc5 <_RME_Svc_Handler>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Svc_Handler(struct RME_Reg_Struct* Reg)
{
ffffffff8020cfc5:	f3 0f 1e fa          	endbr64
ffffffff8020cfc9:	55                   	push   %rbp
ffffffff8020cfca:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cfcd:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020cfd1:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    struct RME_Inv_Struct* Inv_Top;
    struct RME_Cap_Cpt* Cpt;

    /* Get the system call parameters from the system call */
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
ffffffff8020cfd5:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
ffffffff8020cfd9:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
ffffffff8020cfdd:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
ffffffff8020cfe1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020cfe5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cfe8:	e8 7a a0 01 00       	call   ffffffff80227067 <__RME_Svc_Param_Get>
    /* System call number takes [5:0] bits */
    Svc_Num=Svc&RME_MASK_END(5U);
ffffffff8020cfed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020cff1:	83 e0 3f             	and    $0x3f,%eax
ffffffff8020cff4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* Ultra-fast path - synchronous invocation returning */
    if(Svc_Num==RME_SVC_INV_RET)
ffffffff8020cff8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8020cffd:	75 48                	jne    ffffffff8020d047 <_RME_Svc_Handler+0x82>
    {
        RME_COV_MARKER();
        
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
ffffffff8020cfff:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8020d003:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d007:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020d00c:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d00f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d012:	e8 90 d9 00 00       	call   ffffffff8021a9a7 <_RME_Inv_Ret>
ffffffff8020d017:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                            Param[0],                                       /* rme_ptr_t Retval */
                            0U);                                            /* rme_ptr_t Is_Exc */
        RME_SWITCH_RETURN(Reg, Retval);
ffffffff8020d01b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d01f:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d023:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d026:	48 85 c0             	test   %rax,%rax
ffffffff8020d029:	0f 84 18 09 00 00    	je     ffffffff8020d947 <_RME_Svc_Handler+0x982>
ffffffff8020d02f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d033:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d037:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d03a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d03d:	e8 a0 a0 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8020d042:	e9 00 09 00 00       	jmp    ffffffff8020d947 <_RME_Svc_Handler+0x982>
        /* No action required */
    }
    
    /* Get our current capability table. No need to check whether it is frozen
     * because it can't be deleted anyway */
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020d047:	e8 f3 e7 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d04c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d050:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff8020d054:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d058:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8020d05f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d063:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8020d069:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d06c:	74 0d                	je     ffffffff8020d07b <_RME_Svc_Handler+0xb6>
ffffffff8020d06e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d072:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8020d079:	eb 05                	jmp    ffffffff8020d080 <_RME_Svc_Handler+0xbb>
ffffffff8020d07b:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020d080:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d084:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020d089:	75 12                	jne    ffffffff8020d09d <_RME_Svc_Handler+0xd8>
    {
        RME_COV_MARKER();
        
        Cpt=Thd_Cur->Sched.Prc->Cpt;
ffffffff8020d08b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d08f:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8020d093:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020d097:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020d09b:	eb 10                	jmp    ffffffff8020d0ad <_RME_Svc_Handler+0xe8>
    }
    else
    {
        RME_COV_MARKER();
        
        Cpt=Inv_Top->Prc->Cpt;
ffffffff8020d09d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020d0a1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d0a5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020d0a9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }

    /* Fast path - synchronous invocation activation */
    if(Svc_Num==RME_SVC_INV_ACT)
ffffffff8020d0ad:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
ffffffff8020d0b2:	75 51                	jne    ffffffff8020d105 <_RME_Svc_Handler+0x140>
    {
        RME_COV_MARKER();
        
        Retval=_RME_Inv_Act(Cpt,
ffffffff8020d0b4:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                            Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
                            (rme_cid_t)Param[0],                            /* rme_cid_t Cap_Inv */
ffffffff8020d0b8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
        Retval=_RME_Inv_Act(Cpt,
ffffffff8020d0bc:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0bf:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d0c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d0c7:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d0ca:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d0cd:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0d0:	e8 82 d5 00 00       	call   ffffffff8021a657 <_RME_Inv_Act>
ffffffff8020d0d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                            Param[1]);                                      /* rme_ptr_t Param */
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d0d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d0dd:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d0e1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d0e4:	48 85 c0             	test   %rax,%rax
ffffffff8020d0e7:	0f 84 5a 08 00 00    	je     ffffffff8020d947 <_RME_Svc_Handler+0x982>
ffffffff8020d0ed:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d0f1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d0f5:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d0f8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0fb:	e8 e2 9f 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8020d100:	e9 42 08 00 00       	jmp    ffffffff8020d947 <_RME_Svc_Handler+0x982>
     * of these functions shall be: If the function is successful, they shall
     * perform the return value saving on proper register stacks by themselves;
     * if the function fails, it should not conduct such return value saving.
     * These paths are less optimized than synchronous invocation, but are still
     * optimized anyway. */
    switch(Svc_Num)
ffffffff8020d105:	48 83 7d e8 09       	cmpq   $0x9,-0x18(%rbp)
ffffffff8020d10a:	0f 87 03 03 00 00    	ja     ffffffff8020d413 <_RME_Svc_Handler+0x44e>
ffffffff8020d110:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d114:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020d118:	48 05 18 72 22 80    	add    $0xffffffff80227218,%rax
ffffffff8020d11e:	48 8b 00             	mov    (%rax),%rax
ffffffff8020d121:	3e ff e0             	notrack jmp *%rax
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Snd(Cpt,
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d124:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Snd(Cpt,
ffffffff8020d128:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d12b:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8020d12f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d133:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d136:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d139:	e8 75 be 00 00       	call   ffffffff80218fb3 <_RME_Sig_Snd>
ffffffff8020d13e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d142:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d146:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d14a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d14d:	48 85 c0             	test   %rax,%rax
ffffffff8020d150:	0f 84 f1 07 00 00    	je     ffffffff8020d947 <_RME_Svc_Handler+0x982>
ffffffff8020d156:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d15a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d15e:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d161:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d164:	e8 79 9f 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8020d169:	e9 d9 07 00 00       	jmp    ffffffff8020d947 <_RME_Svc_Handler+0x982>
        /* Receive from a signal endpoint */
        case RME_SVC_SIG_RCV:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff8020d16e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Sig */
ffffffff8020d172:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff8020d176:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d179:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d17d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d181:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d184:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d187:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d18a:	e8 a1 c1 00 00       	call   ffffffff80219330 <_RME_Sig_Rcv>
ffffffff8020d18f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Option */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d193:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d197:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d19b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d19e:	48 85 c0             	test   %rax,%rax
ffffffff8020d1a1:	0f 84 a0 07 00 00    	je     ffffffff8020d947 <_RME_Svc_Handler+0x982>
ffffffff8020d1a7:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d1ab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d1af:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d1b2:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d1b5:	e8 28 9f 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8020d1ba:	e9 88 07 00 00       	jmp    ffffffff8020d947 <_RME_Svc_Handler+0x982>
        /* Call kernel functions */
        case RME_SVC_KFN:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d1bf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020d1c3:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Kfn */
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
                                RME_PARAM_D1(Param[0]),                     /* rme_ptr_t Sub_ID */
ffffffff8020d1c7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d1cb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d1cf:	48 89 c7             	mov    %rax,%rdi
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
ffffffff8020d1d2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d1d6:	41 89 c3             	mov    %eax,%r11d
ffffffff8020d1d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d1dd:	49 89 c2             	mov    %rax,%r10
ffffffff8020d1e0:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d1e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d1e8:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d1ec:	52                   	push   %rdx
ffffffff8020d1ed:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d1f0:	49 89 f8             	mov    %rdi,%r8
ffffffff8020d1f3:	4c 89 d9             	mov    %r11,%rcx
ffffffff8020d1f6:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d1f9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d1fc:	e8 3e dc 00 00       	call   ffffffff8021ae3f <_RME_Kfn_Act>
ffffffff8020d201:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d205:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1],                                   /* rme_ptr_t Param1 */
                                Param[2]);                                  /* rme_ptr_t Param2 */
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff8020d209:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d20d:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d211:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d214:	48 85 c0             	test   %rax,%rax
ffffffff8020d217:	0f 84 2a 07 00 00    	je     ffffffff8020d947 <_RME_Svc_Handler+0x982>
ffffffff8020d21d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d221:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d225:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d228:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d22b:	e8 b2 9e 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8020d230:	e9 12 07 00 00       	jmp    ffffffff8020d947 <_RME_Svc_Handler+0x982>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Free(Cpt,
                                       Reg,                                 /* volatile struct RME_Reg_Struct* Reg */
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
ffffffff8020d235:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Free(Cpt,
ffffffff8020d239:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d23c:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8020d240:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d244:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d247:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d24a:	e8 01 98 00 00       	call   ffffffff80216a50 <_RME_Thd_Sched_Free>
ffffffff8020d24f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d253:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d257:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d25b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d25e:	48 85 c0             	test   %rax,%rax
ffffffff8020d261:	0f 84 e0 06 00 00    	je     ffffffff8020d947 <_RME_Svc_Handler+0x982>
ffffffff8020d267:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d26b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d26f:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d272:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d275:	e8 68 9e 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8020d27a:	e9 c8 06 00 00       	jmp    ffffffff8020d947 <_RME_Svc_Handler+0x982>
        /* Changing thread execution context */
        case RME_SVC_THD_EXEC_SET:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Exec_Set(Cpt,
ffffffff8020d27f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8020d283:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8020d287:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020d28b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d28f:	49 89 c2             	mov    %rax,%r10
ffffffff8020d292:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d296:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d29a:	49 89 f9             	mov    %rdi,%r9
ffffffff8020d29d:	49 89 c8             	mov    %rcx,%r8
ffffffff8020d2a0:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d2a3:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d2a6:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d2a9:	e8 84 9b 00 00       	call   ffffffff80216e32 <_RME_Thd_Exec_Set>
ffffffff8020d2ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                     Reg,                                   /* volatile struct RME_Reg_Struct* Reg */
                                     (rme_cid_t)Cid,                        /* rme_cid_t Cap_Thd */
                                     Param[0],                              /* rme_ptr_t Entry */
                                     Param[1],                              /* rme_ptr_t Stack */
                                     Param[2]);                             /* rme_ptr_t Param */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d2b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d2b6:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d2ba:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d2bd:	48 85 c0             	test   %rax,%rax
ffffffff8020d2c0:	0f 84 81 06 00 00    	je     ffffffff8020d947 <_RME_Svc_Handler+0x982>
ffffffff8020d2c6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d2ca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d2ce:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d2d1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d2d4:	e8 09 9e 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8020d2d9:	e9 69 06 00 00       	jmp    ffffffff8020d947 <_RME_Svc_Handler+0x982>
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
                                       (rme_cid_t)RME_PARAM_D0(Param[1]),   /* rme_cid_t Cap_Thd1 */
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff8020d2de:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2e2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2e6:	48 89 c7             	mov    %rax,%rdi
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
ffffffff8020d2e9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2ed:	41 89 c1             	mov    %eax,%r9d
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
ffffffff8020d2f0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2f4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2f8:	48 89 c1             	mov    %rax,%rcx
                                       (rme_cid_t)RME_PARAM_D0(Param[1]),   /* rme_cid_t Cap_Thd1 */
ffffffff8020d2fb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2ff:	41 89 c3             	mov    %eax,%r11d
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
ffffffff8020d302:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d306:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d30a:	49 89 c0             	mov    %rax,%r8
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
ffffffff8020d30d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d311:	41 89 c2             	mov    %eax,%r10d
ffffffff8020d314:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020d318:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d31c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d320:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d324:	57                   	push   %rdi
ffffffff8020d325:	41 51                	push   %r9
ffffffff8020d327:	51                   	push   %rcx
ffffffff8020d328:	4d 89 d9             	mov    %r11,%r9
ffffffff8020d32b:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d32e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d331:	e8 24 9e 00 00       	call   ffffffff8021715a <_RME_Thd_Sched_Prio>
ffffffff8020d336:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d33a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d33e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d342:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d346:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d349:	48 85 c0             	test   %rax,%rax
ffffffff8020d34c:	0f 84 f5 05 00 00    	je     ffffffff8020d947 <_RME_Svc_Handler+0x982>
ffffffff8020d352:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d356:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d35a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d35d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d360:	e8 7d 9d 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8020d365:	e9 dd 05 00 00       	jmp    ffffffff8020d947 <_RME_Svc_Handler+0x982>
        /* Transfer time to a thread */
        case RME_SVC_THD_TIME_XFER:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d36a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                      Reg,                                  /* volatile struct RME_Reg_Struct* Reg */
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
                                      (rme_cid_t)Param[1],                  /* rme_cid_t Cap_Thd_Src */
ffffffff8020d36e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d372:	48 89 c1             	mov    %rax,%rcx
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
ffffffff8020d375:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d379:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d37c:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d380:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d384:	49 89 d0             	mov    %rdx,%r8
ffffffff8020d387:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d38a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d38d:	e8 42 a5 00 00       	call   ffffffff802178d4 <_RME_Thd_Time_Xfer>
ffffffff8020d392:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                      Param[2]);                            /* rme_ptr_t Time */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d396:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d39a:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d39e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d3a1:	48 85 c0             	test   %rax,%rax
ffffffff8020d3a4:	0f 84 9d 05 00 00    	je     ffffffff8020d947 <_RME_Svc_Handler+0x982>
ffffffff8020d3aa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d3ae:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d3b2:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d3b5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3b8:	e8 25 9d 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8020d3bd:	e9 85 05 00 00       	jmp    ffffffff8020d947 <_RME_Svc_Handler+0x982>
        /* Switch to another thread */
        case RME_SVC_THD_SWT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Swt(Cpt,
ffffffff8020d3c2:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Thd */
ffffffff8020d3c6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Swt(Cpt,
ffffffff8020d3ca:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3cd:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d3d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d3d5:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d3d8:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d3db:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3de:	e8 62 ac 00 00       	call   ffffffff80218045 <_RME_Thd_Swt>
ffffffff8020d3e3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Full_Yield */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d3e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d3eb:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d3ef:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d3f2:	48 85 c0             	test   %rax,%rax
ffffffff8020d3f5:	0f 84 4c 05 00 00    	je     ffffffff8020d947 <_RME_Svc_Handler+0x982>
ffffffff8020d3fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d3ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d403:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d406:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d409:	e8 d4 9c 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8020d40e:	e9 34 05 00 00       	jmp    ffffffff8020d947 <_RME_Svc_Handler+0x982>
        }
        default:
        {
            RME_COV_MARKER();
            break;
ffffffff8020d413:	90                   	nop
        }
    } 

    /* It is guaranteed that these functions will never cause a context switch */
    switch(Svc_Num)
ffffffff8020d414:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d418:	48 83 e8 0a          	sub    $0xa,%rax
ffffffff8020d41c:	48 83 f8 17          	cmp    $0x17,%rax
ffffffff8020d420:	0f 87 05 05 00 00    	ja     ffffffff8020d92b <_RME_Svc_Handler+0x966>
ffffffff8020d426:	48 8b 04 c5 68 72 22 	mov    -0x7fdd8d98(,%rax,8),%rax
ffffffff8020d42d:	80 
ffffffff8020d42e:	3e ff e0             	notrack jmp *%rax
    {
        /* Capability table */
        case RME_SVC_CPT_CRT:
        {
            RME_COV_MARKER();
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d431:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020d435:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Crt */
ffffffff8020d439:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d43d:	41 89 c2             	mov    %eax,%r10d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d440:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d444:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d448:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d44b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d44f:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d452:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d456:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d459:	49 89 d0             	mov    %rdx,%r8
ffffffff8020d45c:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d45f:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d462:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d465:	e8 8c 0a 00 00       	call   ffffffff8020def6 <_RME_Cpt_Crt>
ffffffff8020d46a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1],                                   /* rme_ptr_t Raddr */
                                Param[2]);                                  /* rme_ptr_t Entry_Num */
            break;
ffffffff8020d46e:	e9 c1 04 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Del */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
ffffffff8020d473:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Del(Cpt,
ffffffff8020d477:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d47a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d47e:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d481:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d485:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d488:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d48b:	e8 b3 10 00 00       	call   ffffffff8020e543 <_RME_Cpt_Del>
ffffffff8020d490:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d494:	e9 9b 04 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Frz(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Frz */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
ffffffff8020d499:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Frz(Cpt,
ffffffff8020d49d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d4a0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d4a4:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d4a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d4ab:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d4ae:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d4b1:	e8 b4 14 00 00       	call   ffffffff8020e96a <_RME_Cpt_Frz>
ffffffff8020d4b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d4ba:	e9 75 04 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
                                Param[2],                                   /* rme_ptr_t Flag */
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff8020d4bf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d4c3:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020d4c7:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4ca:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d4ce:	48 09 c2             	or     %rax,%rdx
ffffffff8020d4d1:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
ffffffff8020d4d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4d9:	41 89 c0             	mov    %eax,%r8d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
ffffffff8020d4dc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d4e0:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4e4:	49 89 c2             	mov    %rax,%r10
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
ffffffff8020d4e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4eb:	89 c7                	mov    %eax,%edi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
ffffffff8020d4ed:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d4f1:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4f5:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d4f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d4fc:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d500:	52                   	push   %rdx
ffffffff8020d501:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d504:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d507:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d50a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d50d:	e8 9a 17 00 00       	call   ffffffff8020ecac <_RME_Cpt_Add>
ffffffff8020d512:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d516:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d51a:	e9 15 04 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Rem(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Rem */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
ffffffff8020d51f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Rem(Cpt,
ffffffff8020d523:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d526:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d52a:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d52d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d531:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d534:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d537:	e8 a9 20 00 00       	call   ffffffff8020f5e5 <_RME_Cpt_Rem>
ffffffff8020d53c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d540:	e9 ef 03 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
#if(RME_PGT_RAW_ENABLE==0U)
        case RME_SVC_PGT_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d545:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d549:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020d54d:	48 89 c7             	mov    %rax,%rdi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
                                Param[1],                                   /* rme_ptr_t Raddr */
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
                                RME_PARAM_Q0(Param[0]),                     /* rme_ptr_t Size_Order */
ffffffff8020d550:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d554:	0f b7 c8             	movzwl %ax,%ecx
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
ffffffff8020d557:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d55b:	83 e0 01             	and    $0x1,%eax
ffffffff8020d55e:	48 89 c6             	mov    %rax,%rsi
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
ffffffff8020d561:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d565:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
ffffffff8020d569:	49 89 c1             	mov    %rax,%r9
ffffffff8020d56c:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8020d570:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d574:	48 c1 e8 10          	shr    $0x10,%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d578:	0f b7 d0             	movzwl %ax,%edx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d57b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d57f:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d583:	49 89 c3             	mov    %rax,%r11
ffffffff8020d586:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d58a:	49 89 c2             	mov    %rax,%r10
ffffffff8020d58d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d591:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d595:	57                   	push   %rdi
ffffffff8020d596:	51                   	push   %rcx
ffffffff8020d597:	56                   	push   %rsi
ffffffff8020d598:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d59b:	4c 89 da             	mov    %r11,%rdx
ffffffff8020d59e:	4c 89 d6             	mov    %r10,%rsi
ffffffff8020d5a1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5a4:	e8 80 2f 00 00       	call   ffffffff80210529 <_RME_Pgt_Crt>
ffffffff8020d5a9:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d5ad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                RME_PARAM_PC(Svc));                         /* rme_ptr_t Num_Order */
            break;
ffffffff8020d5b1:	e9 7e 03 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d5b6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Del(Cpt,
ffffffff8020d5ba:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d5bd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d5c1:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d5c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d5c8:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d5cb:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5ce:	e8 2c 36 00 00       	call   ffffffff80210bff <_RME_Pgt_Del>
ffffffff8020d5d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d5d7:	e9 58 03 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_PGT_ADD:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5dc:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
                                Cid,                                        /* rme_ptr_t Flag_Dst */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Pos_Src */
ffffffff8020d5e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5e4:	41 89 c1             	mov    %eax,%r9d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
ffffffff8020d5e7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d5eb:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5ef:	49 89 c0             	mov    %rax,%r8
ffffffff8020d5f2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
ffffffff8020d5f6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5fa:	89 c7                	mov    %eax,%edi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
ffffffff8020d5fc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d600:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d604:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d607:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d60b:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d60f:	51                   	push   %rcx
ffffffff8020d610:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d613:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d616:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d619:	e8 d8 39 00 00       	call   ffffffff80210ff6 <_RME_Pgt_Add>
ffffffff8020d61e:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d622:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Index */
            break;
ffffffff8020d626:	e9 09 03 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_PGT_REM:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff8020d62b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
ffffffff8020d62f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff8020d633:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d636:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d63a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d63d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d640:	e8 74 3f 00 00       	call   ffffffff802115b9 <_RME_Pgt_Rem>
ffffffff8020d645:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Pos */
            break;
ffffffff8020d649:	e9 e6 02 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_PGT_CON:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d64e:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
                                Param[1],                                   /* rme_ptr_t Pos */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Pgt_Child */
ffffffff8020d652:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d656:	89 c7                	mov    %eax,%edi
ffffffff8020d658:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff8020d65c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d660:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d664:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d667:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d66b:	49 89 c8             	mov    %rcx,%r8
ffffffff8020d66e:	48 89 f9             	mov    %rdi,%rcx
ffffffff8020d671:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d674:	e8 d1 41 00 00       	call   ffffffff8021184a <_RME_Pgt_Con>
ffffffff8020d679:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Flag_Child */
            break;
ffffffff8020d67d:	e9 b2 02 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Des(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
                                Param[1],                                   /* rme_ptr_t Pos */
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt_Child */
ffffffff8020d682:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8020d686:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d689:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
ffffffff8020d68d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8020d691:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d694:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d698:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d69b:	e8 23 47 00 00       	call   ffffffff80211dc3 <_RME_Pgt_Des>
ffffffff8020d6a0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d6a4:	e9 8b 02 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
#if(RME_PGT_RAW_ENABLE==0U)
            Retval=_RME_Prc_Crt(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d6a9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d6ad:	48 89 c7             	mov    %rax,%rdi
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
ffffffff8020d6b0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d6b4:	48 89 c1             	mov    %rax,%rcx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d6b7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d6bb:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d6be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d6c2:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d6c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6c9:	49 89 f8             	mov    %rdi,%r8
ffffffff8020d6cc:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6cf:	e8 a6 61 00 00       	call   ffffffff8021387a <_RME_Prc_Crt>
ffffffff8020d6d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
                                (rme_ptr_t)Param[2]);                       /* rme_ptr_t Raw_Pgt */
#endif
            break;
ffffffff8020d6d8:	e9 57 02 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Prc_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
ffffffff8020d6dd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Del(Cpt,
ffffffff8020d6e1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d6e4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d6e8:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d6eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6ef:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d6f2:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6f5:	e8 12 69 00 00       	call   ffffffff8021400c <_RME_Prc_Del>
ffffffff8020d6fa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d6fe:	e9 31 02 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Prc_Cpt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
ffffffff8020d703:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Cpt(Cpt,
ffffffff8020d707:	48 89 c2             	mov    %rax,%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d70a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Cpt(Cpt,
ffffffff8020d70e:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d711:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d715:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d718:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d71b:	e8 af 6c 00 00       	call   ffffffff802143cf <_RME_Prc_Cpt>
ffffffff8020d720:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d724:	e9 0b 02 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
#if(RME_PGT_RAW_ENABLE==0U)
            Retval=_RME_Prc_Pgt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d729:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Pgt(Cpt,
ffffffff8020d72d:	48 89 c2             	mov    %rax,%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d730:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Pgt(Cpt,
ffffffff8020d734:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d737:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d73b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d73e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d741:	e8 49 71 00 00       	call   ffffffff8021488f <_RME_Prc_Pgt>
ffffffff8020d746:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#else
            Retval=_RME_Prc_Pgt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                Param[1]);                                  /* rme_ptr_t Raw_Pgt */
#endif
            break;
ffffffff8020d74a:	e9 e5 01 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        /* Thread */
        case RME_SVC_THD_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d74f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d753:	83 e0 40             	and    $0x40,%eax
ffffffff8020d756:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d759:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d75d:	48 c1 e8 07          	shr    $0x7,%rax
ffffffff8020d761:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d764:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Prio_Max */
ffffffff8020d768:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d76c:	41 89 c1             	mov    %eax,%r9d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
ffffffff8020d76f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d773:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d777:	49 89 c0             	mov    %rax,%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
ffffffff8020d77a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d77e:	41 89 c3             	mov    %eax,%r11d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d781:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d785:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d789:	49 89 c2             	mov    %rax,%r10
ffffffff8020d78c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d790:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d793:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d797:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d79b:	56                   	push   %rsi
ffffffff8020d79c:	51                   	push   %rcx
ffffffff8020d79d:	52                   	push   %rdx
ffffffff8020d79e:	4c 89 d9             	mov    %r11,%rcx
ffffffff8020d7a1:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d7a4:	48 89 fe             	mov    %rdi,%rsi
ffffffff8020d7a7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7aa:	e8 20 7c 00 00       	call   ffffffff802153cf <_RME_Thd_Crt>
ffffffff8020d7af:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d7b3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2],                                   /* rme_ptr_t Raddr */
                                Svc>>7,                                     /* rme_ptr_t Attr */
                                Svc&0x40U);                                 /* rme_ptr_t Is_Hyp */
            break;
ffffffff8020d7b7:	e9 78 01 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Thd */
ffffffff8020d7bc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Del(Cpt,
ffffffff8020d7c0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d7c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d7c7:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d7ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d7ce:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d7d1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7d4:	e8 66 85 00 00       	call   ffffffff80215d3f <_RME_Thd_Del>
ffffffff8020d7d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d7dd:	e9 52 01 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_THD_SCHED_BIND:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7e2:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                       (rme_cid_t)Cid,                      /* rme_cid_t Cap_Thd */
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
                                       RME_PARAM_D0(Param[1]),              /* rme_ptr_t Prio */
ffffffff8020d7e6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7ea:	41 89 c1             	mov    %eax,%r9d
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
ffffffff8020d7ed:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d7f1:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7f5:	49 89 c0             	mov    %rax,%r8
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
ffffffff8020d7f8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7fc:	89 c1                	mov    %eax,%ecx
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff8020d7fe:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d802:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d806:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d809:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d80d:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d810:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d814:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d818:	52                   	push   %rdx
ffffffff8020d819:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d81c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d81f:	e8 a0 89 00 00       	call   ffffffff802161c4 <_RME_Thd_Sched_Bind>
ffffffff8020d824:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d828:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                       Param[2]);                           /* rme_ptr_t Haddr */
            break;
ffffffff8020d82c:	e9 03 01 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        case RME_SVC_THD_SCHED_RCV:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Rcv(Cpt,
                                      (rme_cid_t)Param[0]);                 /* rme_cid_t Cap_Thd */
ffffffff8020d831:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Rcv(Cpt,
ffffffff8020d835:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d838:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d83c:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d83f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d842:	e8 72 9d 00 00       	call   ffffffff802175b9 <_RME_Thd_Sched_Rcv>
ffffffff8020d847:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d84b:	e9 e4 00 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Crt(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d850:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Crt(Cpt,
ffffffff8020d854:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d857:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d85b:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d85e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d862:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d865:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d868:	e8 fc ae 00 00       	call   ffffffff80218769 <_RME_Sig_Crt>
ffffffff8020d86d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d871:	e9 be 00 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d876:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Del(Cpt,
ffffffff8020d87a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d87d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d881:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d884:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d888:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d88b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d88e:	e8 d5 b1 00 00       	call   ffffffff80218a68 <_RME_Sig_Del>
ffffffff8020d893:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d897:	e9 98 00 00 00       	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        /* Invocation */
        case RME_SVC_INV_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d89c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Prc */
ffffffff8020d8a0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d8a4:	49 89 c0             	mov    %rax,%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff8020d8a7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d8ab:	89 c1                	mov    %eax,%ecx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d8ad:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d8b1:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d8b5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d8bc:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d8bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8c3:	49 89 d1             	mov    %rdx,%r9
ffffffff8020d8c6:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d8c9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8cc:	e8 fa be 00 00       	call   ffffffff802197cb <_RME_Inv_Crt>
ffffffff8020d8d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Raddr */
            break;
ffffffff8020d8d5:	eb 5d                	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Inv_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Inv */
ffffffff8020d8d7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Del(Cpt,
ffffffff8020d8db:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d8de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d8e2:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d8e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8e9:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d8ec:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8ef:	e8 14 c7 00 00       	call   ffffffff8021a008 <_RME_Inv_Del>
ffffffff8020d8f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d8f8:	eb 3a                	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
            
            Retval=_RME_Inv_Set(Cpt,
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
                                Param[1],                                   /* rme_ptr_t Entry */
                                Param[2],                                   /* rme_ptr_t Stack */
                                RME_PARAM_D1(Param[0]));                    /* rme_ptr_t Is_Exc_Ret */
ffffffff8020d8fa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff8020d8fe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d902:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d905:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020d909:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff8020d90d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff8020d911:	89 c7                	mov    %eax,%edi
ffffffff8020d913:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d917:	49 89 f0             	mov    %rsi,%r8
ffffffff8020d91a:	48 89 fe             	mov    %rdi,%rsi
ffffffff8020d91d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d920:	e8 d5 ca 00 00       	call   ffffffff8021a3fa <_RME_Inv_Set>
ffffffff8020d925:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d929:	eb 09                	jmp    ffffffff8020d934 <_RME_Svc_Handler+0x96f>
        /* This is an error */
        default: 
        {
            RME_COV_MARKER();
            
            Retval=RME_ERR_CPT_NULL;
ffffffff8020d92b:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
ffffffff8020d932:	ff 
            break;
ffffffff8020d933:	90                   	nop
        }
    }
    
    /* We set the registers and return */
    __RME_Svc_Retval_Set(Reg,Retval);
ffffffff8020d934:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d938:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d93c:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d93f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d942:	e8 9b 97 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
}
ffffffff8020d947:	c9                   	leave
ffffffff8020d948:	c3                   	ret

ffffffff8020d949 <_RME_Tim_Handler>:
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Tim_Handler(struct RME_Reg_Struct* Reg,
                      rme_ptr_t Slice)
{
ffffffff8020d949:	f3 0f 1e fa          	endbr64
ffffffff8020d94d:	55                   	push   %rbp
ffffffff8020d94e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020d951:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020d955:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020d959:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    
    Local=RME_CPU_LOCAL();
ffffffff8020d95d:	e8 dd de ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d962:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff8020d966:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d96a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d96e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020d972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d976:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d97a:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8020d981:	ff ff 7f 
ffffffff8020d984:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d987:	72 57                	jb     ffffffff8020d9e0 <_RME_Tim_Handler+0x97>
    {
        RME_COV_MARKER();

        /* Decrease timeslice count, and see if the timeslice is used up */
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff8020d989:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d98d:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d991:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8020d995:	73 19                	jae    ffffffff8020d9b0 <_RME_Tim_Handler+0x67>
        {
            RME_COV_MARKER();
            
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020d997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d99b:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d99f:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
ffffffff8020d9a3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d9a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9aa:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020d9ae:	eb 30                	jmp    ffffffff8020d9e0 <_RME_Tim_Handler+0x97>
        else
        {
            RME_COV_MARKER();

            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff8020d9b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9b4:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8020d9bb:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff8020d9bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9c0:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9c3:	e8 57 54 00 00       	call   ffffffff80212e1f <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8020d9c8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9cc:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8020d9d3:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff8020d9d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9d8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9db:	e8 8a 55 00 00       	call   ffffffff80212f6a <_RME_Run_Notif>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Send to the system tick timer endpoint. This endpoint is per-core */
    _RME_Kern_Snd(Local->Sig_Tim);
ffffffff8020d9e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d9e4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d9e8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9eb:	e8 b6 b4 00 00       	call   ffffffff80218ea6 <_RME_Kern_Snd>

    /* All kernel send complete, now pick the highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff8020d9f0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d9f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d9f8:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d9fb:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9fe:	e8 1c b4 00 00       	call   ffffffff80218e1f <_RME_Kern_High>
}
ffffffff8020da03:	90                   	nop
ffffffff8020da04:	c9                   	leave
ffffffff8020da05:	c3                   	ret

ffffffff8020da06 <_RME_Tim_Elapse>:
                                _RME_Tim_Elapse or _RME_Tim_Handler.
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Tim_Elapse(rme_ptr_t Slice)
{
ffffffff8020da06:	f3 0f 1e fa          	endbr64
ffffffff8020da0a:	55                   	push   %rbp
ffffffff8020da0b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020da0e:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020da12:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020da16:	e8 24 de ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020da1b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020da1f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    /* We don't want the slices less than 1 because we want to keep the kernel
     * SVC invariants - the current thread must still be running after this */
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020da23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da27:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da2b:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8020da32:	ff ff 7f 
ffffffff8020da35:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020da38:	72 33                	jb     ffffffff8020da6d <_RME_Tim_Elapse+0x67>
    {
        RME_COV_MARKER();

        /* Decrease timeslice count, but no less than 1, so the thread is
         * always running, which keeps the invariant of the kernel */
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff8020da3a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da3e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da42:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020da46:	73 19                	jae    ffffffff8020da61 <_RME_Tim_Elapse+0x5b>
        {
            RME_COV_MARKER();
            
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020da48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da4c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da50:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff8020da54:	48 89 c2             	mov    %rax,%rdx
ffffffff8020da57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da5b:	48 89 50 30          	mov    %rdx,0x30(%rax)
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff8020da5f:	eb 0c                	jmp    ffffffff8020da6d <_RME_Tim_Elapse+0x67>
            Thd_Cur->Sched.Slice=1U;
ffffffff8020da61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da65:	48 c7 40 30 01 00 00 	movq   $0x1,0x30(%rax)
ffffffff8020da6c:	00 
}
ffffffff8020da6d:	90                   	nop
ffffffff8020da6e:	c9                   	leave
ffffffff8020da6f:	c3                   	ret

ffffffff8020da70 <_RME_Tim_Future>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - How many slices to program until the next timeout.
******************************************************************************/
rme_ptr_t _RME_Tim_Future(void)
{
ffffffff8020da70:	f3 0f 1e fa          	endbr64
ffffffff8020da74:	55                   	push   %rbp
ffffffff8020da75:	48 89 e5             	mov    %rsp,%rbp
    /* If we're running an infinite thread, just program infinite time,
     * these values are very large so that's fine */
    return RME_CPU_LOCAL()->Thd_Cur->Sched.Slice;
ffffffff8020da78:	e8 c2 dd ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020da7d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020da81:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020da85:	5d                   	pop    %rbp
ffffffff8020da86:	c3                   	ret

ffffffff8020da87 <_RME_Cpt_Boot_Init>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Cpt_Boot_Init(rme_cid_t Cap_Cpt,
                             rme_ptr_t Vaddr,
                             rme_ptr_t Entry_Num)
{
ffffffff8020da87:	f3 0f 1e fa          	endbr64
ffffffff8020da8b:	55                   	push   %rbp
ffffffff8020da8c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020da8f:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8020da93:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020da97:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020da9b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    rme_ptr_t Count;
    struct RME_Cap_Cpt* Cpt;

    /* See if the entry number is too big */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020da9f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020daa4:	74 0a                	je     ffffffff8020dab0 <_RME_Cpt_Boot_Init+0x29>
ffffffff8020daa6:	48 81 7d d8 00 80 00 	cmpq   $0x8000,-0x28(%rbp)
ffffffff8020daad:	00 
ffffffff8020daae:	76 0c                	jbe    ffffffff8020dabc <_RME_Cpt_Boot_Init+0x35>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020dab0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dab7:	e9 b8 00 00 00       	jmp    ffffffff8020db74 <_RME_Cpt_Boot_Init+0xed>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020dabc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dac0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dac4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dac7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dacb:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020dace:	48 89 c7             	mov    %rax,%rdi
ffffffff8020dad1:	e8 6c 48 00 00       	call   ffffffff80212342 <_RME_Kot_Mark>
ffffffff8020dad6:	48 85 c0             	test   %rax,%rax
ffffffff8020dad9:	74 0c                	je     ffffffff8020dae7 <_RME_Cpt_Boot_Init+0x60>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_KOT;
ffffffff8020dadb:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020dae2:	e9 8d 00 00 00       	jmp    ffffffff8020db74 <_RME_Cpt_Boot_Init+0xed>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020dae7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020daee:	00 
ffffffff8020daef:	eb 1e                	jmp    ffffffff8020db0f <_RME_Cpt_Boot_Init+0x88>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020daf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020daf5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020daf9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dafc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020db00:	48 01 d0             	add    %rdx,%rax
ffffffff8020db03:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020db0a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020db0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020db13:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020db17:	72 d8                	jb     ffffffff8020daf1 <_RME_Cpt_Boot_Init+0x6a>
    }

    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020db19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020db1d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020db21:	48 89 c2             	mov    %rax,%rdx
ffffffff8020db24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020db28:	48 01 d0             	add    %rdx,%rax
ffffffff8020db2b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Header init */
    Cpt->Head.Root_Ref=1U;
ffffffff8020db2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db33:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8020db3a:	00 
    Cpt->Head.Object=Vaddr;
ffffffff8020db3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db3f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020db43:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020db47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db4b:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020db52:	00 
    
    /* Info init */
    Cpt->Entry_Num=Entry_Num;
ffffffff8020db53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db57:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020db5b:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* At last, write into slot the correct information, and set status to VALID */
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020db5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db63:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020db6a:	00 03 00 
ffffffff8020db6d:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return Cap_Cpt;
ffffffff8020db70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff8020db74:	c9                   	leave
ffffffff8020db75:	c3                   	ret

ffffffff8020db76 <_RME_Cpt_Boot_Crt>:
rme_ret_t _RME_Cpt_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt_Crt,
                            rme_cid_t Cap_Crt,
                            rme_ptr_t Vaddr,
                            rme_ptr_t Entry_Num)
{
ffffffff8020db76:	f3 0f 1e fa          	endbr64
ffffffff8020db7a:	55                   	push   %rbp
ffffffff8020db7b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020db7e:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020db82:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020db86:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020db8a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020db8e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020db92:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Cpt* Cpt_Crt;
    rme_ptr_t Type_Stat;
    
    /* See if the entry number is too big - this is not restricted by RME_CPT_ENTRY_MAX */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020db96:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff8020db9b:	74 0a                	je     ffffffff8020dba7 <_RME_Cpt_Boot_Crt+0x31>
ffffffff8020db9d:	48 81 7d b8 00 80 00 	cmpq   $0x8000,-0x48(%rbp)
ffffffff8020dba4:	00 
ffffffff8020dba5:	76 0c                	jbe    ffffffff8020dbb3 <_RME_Cpt_Boot_Crt+0x3d>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020dba7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dbae:	e9 41 03 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,
ffffffff8020dbb3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dbb7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020dbbc:	48 85 c0             	test   %rax,%rax
ffffffff8020dbbf:	0f 85 98 00 00 00    	jne    ffffffff8020dc5d <_RME_Cpt_Boot_Crt+0xe7>
ffffffff8020dbc5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dbc9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dbcd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020dbd1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dbd4:	0f 93 c0             	setae  %al
ffffffff8020dbd7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dbda:	48 85 c0             	test   %rax,%rax
ffffffff8020dbdd:	74 0c                	je     ffffffff8020dbeb <_RME_Cpt_Boot_Crt+0x75>
ffffffff8020dbdf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dbe6:	e9 09 03 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dbeb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dbef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dbf3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dbf6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dbfa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dbfe:	48 01 d0             	add    %rdx,%rax
ffffffff8020dc01:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dc05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dc09:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dc0c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dc10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dc14:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dc18:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dc1b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dc1f:	0f 94 c0             	sete   %al
ffffffff8020dc22:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc25:	48 85 c0             	test   %rax,%rax
ffffffff8020dc28:	74 0c                	je     ffffffff8020dc36 <_RME_Cpt_Boot_Crt+0xc0>
ffffffff8020dc2a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dc31:	e9 be 02 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dc36:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dc3a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dc3e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dc42:	0f 95 c0             	setne  %al
ffffffff8020dc45:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc48:	48 85 c0             	test   %rax,%rax
ffffffff8020dc4b:	0f 84 4c 01 00 00    	je     ffffffff8020dd9d <_RME_Cpt_Boot_Crt+0x227>
ffffffff8020dc51:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dc58:	e9 97 02 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dc5d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dc61:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dc65:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dc68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dc6c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dc70:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dc73:	0f 93 c0             	setae  %al
ffffffff8020dc76:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc79:	48 85 c0             	test   %rax,%rax
ffffffff8020dc7c:	74 0c                	je     ffffffff8020dc8a <_RME_Cpt_Boot_Crt+0x114>
ffffffff8020dc7e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dc85:	e9 6a 02 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dc8a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dc8e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dc92:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dc96:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dc99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dc9d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dca1:	48 01 d0             	add    %rdx,%rax
ffffffff8020dca4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dca8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dcac:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dcaf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dcb3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dcb7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dcbb:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dcbe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dcc2:	0f 94 c0             	sete   %al
ffffffff8020dcc5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dcc8:	48 85 c0             	test   %rax,%rax
ffffffff8020dccb:	74 0c                	je     ffffffff8020dcd9 <_RME_Cpt_Boot_Crt+0x163>
ffffffff8020dccd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dcd4:	e9 1b 02 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dcd9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dcdd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dce1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dce5:	0f 95 c0             	setne  %al
ffffffff8020dce8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dceb:	48 85 c0             	test   %rax,%rax
ffffffff8020dcee:	74 0c                	je     ffffffff8020dcfc <_RME_Cpt_Boot_Crt+0x186>
ffffffff8020dcf0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dcf7:	e9 f8 01 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dcfc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dd00:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dd05:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dd08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd0c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dd10:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dd13:	0f 93 c0             	setae  %al
ffffffff8020dd16:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd19:	48 85 c0             	test   %rax,%rax
ffffffff8020dd1c:	74 0c                	je     ffffffff8020dd2a <_RME_Cpt_Boot_Crt+0x1b4>
ffffffff8020dd1e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dd25:	e9 ca 01 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dd2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dd2e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dd33:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dd37:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dd3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd3e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dd42:	48 01 d0             	add    %rdx,%rax
ffffffff8020dd45:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dd49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd4d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dd50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dd54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dd58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dd5c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dd5f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dd63:	0f 94 c0             	sete   %al
ffffffff8020dd66:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd69:	48 85 c0             	test   %rax,%rax
ffffffff8020dd6c:	74 0c                	je     ffffffff8020dd7a <_RME_Cpt_Boot_Crt+0x204>
ffffffff8020dd6e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dd75:	e9 7a 01 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dd7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dd7e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dd82:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dd86:	0f 95 c0             	setne  %al
ffffffff8020dd89:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd8c:	48 85 c0             	test   %rax,%rax
ffffffff8020dd8f:	74 0c                	je     ffffffff8020dd9d <_RME_Cpt_Boot_Crt+0x227>
ffffffff8020dd91:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dd98:	e9 57 01 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
                   RME_CAP_TYPE_CPT,
                   struct RME_Cap_Cpt*,
                   Cpt_Op,
                   Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020dd9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dda1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020dda5:	83 e0 01             	and    $0x1,%eax
ffffffff8020dda8:	48 85 c0             	test   %rax,%rax
ffffffff8020ddab:	0f 94 c0             	sete   %al
ffffffff8020ddae:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ddb1:	48 85 c0             	test   %rax,%rax
ffffffff8020ddb4:	74 0c                	je     ffffffff8020ddc2 <_RME_Cpt_Boot_Crt+0x24c>
ffffffff8020ddb6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ddbd:	e9 32 01 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020ddc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ddc6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ddca:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020ddce:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ddd1:	0f 93 c0             	setae  %al
ffffffff8020ddd4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ddd7:	48 85 c0             	test   %rax,%rax
ffffffff8020ddda:	74 0c                	je     ffffffff8020dde8 <_RME_Cpt_Boot_Crt+0x272>
ffffffff8020dddc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dde3:	e9 0c 01 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020dde8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020ddec:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ddf0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ddf3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ddf7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ddfb:	48 01 d0             	add    %rdx,%rax
ffffffff8020ddfe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020de02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de06:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020de0d:	00 00 00 
ffffffff8020de10:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020de15:	48 89 c7             	mov    %rax,%rdi
ffffffff8020de18:	e8 41 e9 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020de1d:	48 85 c0             	test   %rax,%rax
ffffffff8020de20:	0f 94 c0             	sete   %al
ffffffff8020de23:	0f b6 c0             	movzbl %al,%eax
ffffffff8020de26:	48 85 c0             	test   %rax,%rax
ffffffff8020de29:	74 0c                	je     ffffffff8020de37 <_RME_Cpt_Boot_Crt+0x2c1>
ffffffff8020de2b:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020de32:	e9 bd 00 00 00       	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
ffffffff8020de37:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020de3c:	e8 d0 e9 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020de41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020de45:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Try to mark this area as populated */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020de49:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020de4d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020de51:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de54:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020de58:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020de5b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020de5e:	e8 df 44 00 00       	call   ffffffff80212342 <_RME_Kot_Mark>
ffffffff8020de63:	48 85 c0             	test   %rax,%rax
ffffffff8020de66:	74 14                	je     ffffffff8020de7c <_RME_Cpt_Boot_Crt+0x306>
    {
        RME_COV_MARKER();
        
        /* Abort the creation process */
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020de68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de6c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020de73:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020de7a:	eb 78                	jmp    ffffffff8020def4 <_RME_Cpt_Boot_Crt+0x37e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020de7c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020de83:	00 
ffffffff8020de84:	eb 1e                	jmp    ffffffff8020dea4 <_RME_Cpt_Boot_Crt+0x32e>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020de86:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020de8a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020de8e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de91:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020de95:	48 01 d0             	add    %rdx,%rax
ffffffff8020de98:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020de9f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020dea4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020dea8:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff8020deac:	72 d8                	jb     ffffffff8020de86 <_RME_Cpt_Boot_Crt+0x310>
    }

    /* Header init */
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020deae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020deb2:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020deb9:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020deba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020debe:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020dec2:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020dec6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020deca:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020ded1:	00 
    /* Info init */
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020ded2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020ded6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020deda:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020dede:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dee2:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020dee9:	00 03 00 
ffffffff8020deec:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020deef:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020def4:	c9                   	leave
ffffffff8020def5:	c3                   	ret

ffffffff8020def6 <_RME_Cpt_Crt>:
                              rme_cid_t Cap_Cpt_Crt,
                              rme_cid_t Cap_Kom,
                              rme_cid_t Cap_Crt,
                              rme_ptr_t Raddr,
                              rme_ptr_t Entry_Num)
{
ffffffff8020def6:	f3 0f 1e fa          	endbr64
ffffffff8020defa:	55                   	push   %rbp
ffffffff8020defb:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020defe:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020df02:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020df06:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020df0a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8020df0e:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff8020df12:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff8020df16:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    volatile struct RME_Cap_Cpt* Cpt_Crt;
    rme_ptr_t Type_Stat;
    rme_ptr_t Vaddr;

    /* See if the entry number is too big */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020df1a:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff8020df1f:	74 0a                	je     ffffffff8020df2b <_RME_Cpt_Crt+0x35>
ffffffff8020df21:	48 81 7d a0 00 80 00 	cmpq   $0x8000,-0x60(%rbp)
ffffffff8020df28:	00 
ffffffff8020df29:	76 0c                	jbe    ffffffff8020df37 <_RME_Cpt_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020df2b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020df32:	e9 0a 06 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
        /* No action required */
    }
#endif

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020df37:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df3b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020df40:	48 85 c0             	test   %rax,%rax
ffffffff8020df43:	0f 85 98 00 00 00    	jne    ffffffff8020dfe1 <_RME_Cpt_Crt+0xeb>
ffffffff8020df49:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020df4d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020df51:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020df55:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020df58:	0f 93 c0             	setae  %al
ffffffff8020df5b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020df5e:	48 85 c0             	test   %rax,%rax
ffffffff8020df61:	74 0c                	je     ffffffff8020df6f <_RME_Cpt_Crt+0x79>
ffffffff8020df63:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020df6a:	e9 d2 05 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020df6f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df73:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020df77:	48 89 c2             	mov    %rax,%rdx
ffffffff8020df7a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020df7e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020df82:	48 01 d0             	add    %rdx,%rax
ffffffff8020df85:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020df89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020df8d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020df90:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020df94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020df98:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020df9c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020df9f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dfa3:	0f 94 c0             	sete   %al
ffffffff8020dfa6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dfa9:	48 85 c0             	test   %rax,%rax
ffffffff8020dfac:	74 0c                	je     ffffffff8020dfba <_RME_Cpt_Crt+0xc4>
ffffffff8020dfae:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dfb5:	e9 87 05 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020dfba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dfbe:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dfc2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dfc6:	0f 95 c0             	setne  %al
ffffffff8020dfc9:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dfcc:	48 85 c0             	test   %rax,%rax
ffffffff8020dfcf:	0f 84 4c 01 00 00    	je     ffffffff8020e121 <_RME_Cpt_Crt+0x22b>
ffffffff8020dfd5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dfdc:	e9 60 05 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020dfe1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020dfe5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dfe9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dfec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020dff0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dff4:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dff7:	0f 93 c0             	setae  %al
ffffffff8020dffa:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dffd:	48 85 c0             	test   %rax,%rax
ffffffff8020e000:	74 0c                	je     ffffffff8020e00e <_RME_Cpt_Crt+0x118>
ffffffff8020e002:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e009:	e9 33 05 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e00e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e012:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e016:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e01a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e01d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e021:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e025:	48 01 d0             	add    %rdx,%rax
ffffffff8020e028:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e02c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e030:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e033:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e037:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e03b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e03f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e042:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e046:	0f 94 c0             	sete   %al
ffffffff8020e049:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e04c:	48 85 c0             	test   %rax,%rax
ffffffff8020e04f:	74 0c                	je     ffffffff8020e05d <_RME_Cpt_Crt+0x167>
ffffffff8020e051:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e058:	e9 e4 04 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e05d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e061:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e065:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e069:	0f 95 c0             	setne  %al
ffffffff8020e06c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e06f:	48 85 c0             	test   %rax,%rax
ffffffff8020e072:	74 0c                	je     ffffffff8020e080 <_RME_Cpt_Crt+0x18a>
ffffffff8020e074:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e07b:	e9 c1 04 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e080:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e084:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e089:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e08c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e090:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e094:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e097:	0f 93 c0             	setae  %al
ffffffff8020e09a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e09d:	48 85 c0             	test   %rax,%rax
ffffffff8020e0a0:	74 0c                	je     ffffffff8020e0ae <_RME_Cpt_Crt+0x1b8>
ffffffff8020e0a2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e0a9:	e9 93 04 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e0ae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e0b2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e0b7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e0bb:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e0be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e0c2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e0c6:	48 01 d0             	add    %rdx,%rax
ffffffff8020e0c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e0cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e0d1:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e0d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e0d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e0dc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e0e0:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e0e3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e0e7:	0f 94 c0             	sete   %al
ffffffff8020e0ea:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e0ed:	48 85 c0             	test   %rax,%rax
ffffffff8020e0f0:	74 0c                	je     ffffffff8020e0fe <_RME_Cpt_Crt+0x208>
ffffffff8020e0f2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e0f9:	e9 43 04 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e0fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e102:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e106:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e10a:	0f 95 c0             	setne  %al
ffffffff8020e10d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e110:	48 85 c0             	test   %rax,%rax
ffffffff8020e113:	74 0c                	je     ffffffff8020e121 <_RME_Cpt_Crt+0x22b>
ffffffff8020e115:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e11c:	e9 20 04 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020e121:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e125:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e12a:	48 85 c0             	test   %rax,%rax
ffffffff8020e12d:	0f 85 98 00 00 00    	jne    ffffffff8020e1cb <_RME_Cpt_Crt+0x2d5>
ffffffff8020e133:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e137:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e13b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020e13f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e142:	0f 93 c0             	setae  %al
ffffffff8020e145:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e148:	48 85 c0             	test   %rax,%rax
ffffffff8020e14b:	74 0c                	je     ffffffff8020e159 <_RME_Cpt_Crt+0x263>
ffffffff8020e14d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e154:	e9 e8 03 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e159:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e15d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e161:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e164:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e168:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e16c:	48 01 d0             	add    %rdx,%rax
ffffffff8020e16f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e173:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e177:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e17a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e17e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e182:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e186:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e189:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e18d:	0f 94 c0             	sete   %al
ffffffff8020e190:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e193:	48 85 c0             	test   %rax,%rax
ffffffff8020e196:	74 0c                	je     ffffffff8020e1a4 <_RME_Cpt_Crt+0x2ae>
ffffffff8020e198:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e19f:	e9 9d 03 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e1a4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e1a8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e1ac:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e1b0:	0f 95 c0             	setne  %al
ffffffff8020e1b3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e1b6:	48 85 c0             	test   %rax,%rax
ffffffff8020e1b9:	0f 84 4c 01 00 00    	je     ffffffff8020e30b <_RME_Cpt_Crt+0x415>
ffffffff8020e1bf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e1c6:	e9 76 03 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e1cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e1cf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e1d3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e1d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e1da:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e1de:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e1e1:	0f 93 c0             	setae  %al
ffffffff8020e1e4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e1e7:	48 85 c0             	test   %rax,%rax
ffffffff8020e1ea:	74 0c                	je     ffffffff8020e1f8 <_RME_Cpt_Crt+0x302>
ffffffff8020e1ec:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e1f3:	e9 49 03 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e1f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e1fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e200:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e204:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e207:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e20b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e20f:	48 01 d0             	add    %rdx,%rax
ffffffff8020e212:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e216:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e21a:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e21d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e221:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e225:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e229:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e22c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e230:	0f 94 c0             	sete   %al
ffffffff8020e233:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e236:	48 85 c0             	test   %rax,%rax
ffffffff8020e239:	74 0c                	je     ffffffff8020e247 <_RME_Cpt_Crt+0x351>
ffffffff8020e23b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e242:	e9 fa 02 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e247:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e24b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e24f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e253:	0f 95 c0             	setne  %al
ffffffff8020e256:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e259:	48 85 c0             	test   %rax,%rax
ffffffff8020e25c:	74 0c                	je     ffffffff8020e26a <_RME_Cpt_Crt+0x374>
ffffffff8020e25e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e265:	e9 d7 02 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e26a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e26e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e273:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e276:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e27a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e27e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e281:	0f 93 c0             	setae  %al
ffffffff8020e284:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e287:	48 85 c0             	test   %rax,%rax
ffffffff8020e28a:	74 0c                	je     ffffffff8020e298 <_RME_Cpt_Crt+0x3a2>
ffffffff8020e28c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e293:	e9 a9 02 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e298:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e29c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e2a1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e2a5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e2a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e2ac:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e2b0:	48 01 d0             	add    %rdx,%rax
ffffffff8020e2b3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e2b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e2bb:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e2be:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e2c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e2c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e2ca:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e2cd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e2d1:	0f 94 c0             	sete   %al
ffffffff8020e2d4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e2d7:	48 85 c0             	test   %rax,%rax
ffffffff8020e2da:	74 0c                	je     ffffffff8020e2e8 <_RME_Cpt_Crt+0x3f2>
ffffffff8020e2dc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e2e3:	e9 59 02 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e2e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e2ec:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e2f0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e2f4:	0f 95 c0             	setne  %al
ffffffff8020e2f7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e2fa:	48 85 c0             	test   %rax,%rax
ffffffff8020e2fd:	74 0c                	je     ffffffff8020e30b <_RME_Cpt_Crt+0x415>
ffffffff8020e2ff:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e306:	e9 36 02 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020e30b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e30f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e313:	83 e0 01             	and    $0x1,%eax
ffffffff8020e316:	48 85 c0             	test   %rax,%rax
ffffffff8020e319:	0f 94 c0             	sete   %al
ffffffff8020e31c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e31f:	48 85 c0             	test   %rax,%rax
ffffffff8020e322:	74 0c                	je     ffffffff8020e330 <_RME_Cpt_Crt+0x43a>
ffffffff8020e324:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e32b:	e9 11 02 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020e330:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e334:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e338:	83 e0 01             	and    $0x1,%eax
ffffffff8020e33b:	48 85 c0             	test   %rax,%rax
ffffffff8020e33e:	0f 94 c0             	sete   %al
ffffffff8020e341:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e344:	48 85 c0             	test   %rax,%rax
ffffffff8020e347:	74 0c                	je     ffffffff8020e355 <_RME_Cpt_Crt+0x45f>
ffffffff8020e349:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e350:	e9 ec 01 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e355:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e359:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e35d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e361:	48 01 d0             	add    %rdx,%rax
ffffffff8020e364:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8020e368:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e36c:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff8020e370:	0f 92 c0             	setb   %al
ffffffff8020e373:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e376:	48 85 c0             	test   %rax,%rax
ffffffff8020e379:	74 0c                	je     ffffffff8020e387 <_RME_Cpt_Crt+0x491>
ffffffff8020e37b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e382:	e9 ba 01 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e387:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e38b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e38f:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff8020e393:	0f 92 c0             	setb   %al
ffffffff8020e396:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e399:	48 85 c0             	test   %rax,%rax
ffffffff8020e39c:	74 0c                	je     ffffffff8020e3aa <_RME_Cpt_Crt+0x4b4>
ffffffff8020e39e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e3a5:	e9 97 01 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e3aa:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e3ae:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e3b2:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e3b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e3b9:	48 01 d0             	add    %rdx,%rax
ffffffff8020e3bc:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020e3c0:	0f 92 c0             	setb   %al
ffffffff8020e3c3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e3c6:	48 85 c0             	test   %rax,%rax
ffffffff8020e3c9:	74 0c                	je     ffffffff8020e3d7 <_RME_Cpt_Crt+0x4e1>
ffffffff8020e3cb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e3d2:	e9 6a 01 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e3d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e3db:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020e3df:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e3e3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e3e7:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e3ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e3ee:	48 01 c8             	add    %rcx,%rax
ffffffff8020e3f1:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8020e3f5:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e3f8:	0f 92 c0             	setb   %al
ffffffff8020e3fb:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e3fe:	48 85 c0             	test   %rax,%rax
ffffffff8020e401:	74 0c                	je     ffffffff8020e40f <_RME_Cpt_Crt+0x519>
ffffffff8020e403:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e40a:	e9 32 01 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020e40f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e413:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e417:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020e41b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e41e:	0f 93 c0             	setae  %al
ffffffff8020e421:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e424:	48 85 c0             	test   %rax,%rax
ffffffff8020e427:	74 0c                	je     ffffffff8020e435 <_RME_Cpt_Crt+0x53f>
ffffffff8020e429:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e430:	e9 0c 01 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e435:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e439:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e43d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e440:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e444:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e448:	48 01 d0             	add    %rdx,%rax
ffffffff8020e44b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020e44f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e453:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020e45a:	00 00 00 
ffffffff8020e45d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020e462:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e465:	e8 f4 e2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e46a:	48 85 c0             	test   %rax,%rax
ffffffff8020e46d:	0f 94 c0             	sete   %al
ffffffff8020e470:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e473:	48 85 c0             	test   %rax,%rax
ffffffff8020e476:	74 0c                	je     ffffffff8020e484 <_RME_Cpt_Crt+0x58e>
ffffffff8020e478:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e47f:	e9 bd 00 00 00       	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
ffffffff8020e484:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020e489:	e8 83 e3 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020e48e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020e492:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Try to mark this area as populated */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020e496:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e49a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e49e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e4a1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e4a5:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e4a8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e4ab:	e8 92 3e 00 00       	call   ffffffff80212342 <_RME_Kot_Mark>
ffffffff8020e4b0:	48 85 c0             	test   %rax,%rax
ffffffff8020e4b3:	79 14                	jns    ffffffff8020e4c9 <_RME_Cpt_Crt+0x5d3>
    {
        RME_COV_MARKER();
        
        /* Failure. Set the Type_Stat back to 0 and abort the creation process */
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020e4b5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4b9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020e4c0:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020e4c7:	eb 78                	jmp    ffffffff8020e541 <_RME_Cpt_Crt+0x64b>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e4c9:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020e4d0:	00 
ffffffff8020e4d1:	eb 1e                	jmp    ffffffff8020e4f1 <_RME_Cpt_Crt+0x5fb>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020e4d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e4d7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e4db:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e4de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e4e2:	48 01 d0             	add    %rdx,%rax
ffffffff8020e4e5:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e4ec:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020e4f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e4f5:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
ffffffff8020e4f9:	72 d8                	jb     ffffffff8020e4d3 <_RME_Cpt_Crt+0x5dd>
    }

    /* Header init */
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020e4fb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4ff:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020e506:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020e507:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e50b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020e50f:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020e513:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e517:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020e51e:	00 
    
    /* Info init */
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020e51f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e523:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8020e527:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020e52b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e52f:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020e536:	00 03 00 
ffffffff8020e539:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020e53c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020e541:	c9                   	leave
ffffffff8020e542:	c3                   	ret

ffffffff8020e543 <_RME_Cpt_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Del,
                              rme_cid_t Cap_Del)
{
ffffffff8020e543:	f3 0f 1e fa          	endbr64
ffffffff8020e547:	55                   	push   %rbp
ffffffff8020e548:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020e54b:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020e54f:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8020e553:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8020e557:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    /* These are used for deletion */
    rme_ptr_t Object;
    rme_ptr_t Size;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8020e55b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e55f:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e564:	48 85 c0             	test   %rax,%rax
ffffffff8020e567:	0f 85 98 00 00 00    	jne    ffffffff8020e605 <_RME_Cpt_Del+0xc2>
ffffffff8020e56d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e571:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e575:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020e579:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e57c:	0f 93 c0             	setae  %al
ffffffff8020e57f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e582:	48 85 c0             	test   %rax,%rax
ffffffff8020e585:	74 0c                	je     ffffffff8020e593 <_RME_Cpt_Del+0x50>
ffffffff8020e587:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e58e:	e9 d5 03 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e593:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e597:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e59b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e59e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e5a2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e5a6:	48 01 d0             	add    %rdx,%rax
ffffffff8020e5a9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e5ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e5b1:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e5b4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e5b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e5bc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e5c0:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e5c3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e5c7:	0f 94 c0             	sete   %al
ffffffff8020e5ca:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e5cd:	48 85 c0             	test   %rax,%rax
ffffffff8020e5d0:	74 0c                	je     ffffffff8020e5de <_RME_Cpt_Del+0x9b>
ffffffff8020e5d2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e5d9:	e9 8a 03 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e5de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e5e2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e5e6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e5ea:	0f 95 c0             	setne  %al
ffffffff8020e5ed:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e5f0:	48 85 c0             	test   %rax,%rax
ffffffff8020e5f3:	0f 84 4c 01 00 00    	je     ffffffff8020e745 <_RME_Cpt_Del+0x202>
ffffffff8020e5f9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e600:	e9 63 03 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e605:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e609:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e60d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e610:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e614:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e618:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e61b:	0f 93 c0             	setae  %al
ffffffff8020e61e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e621:	48 85 c0             	test   %rax,%rax
ffffffff8020e624:	74 0c                	je     ffffffff8020e632 <_RME_Cpt_Del+0xef>
ffffffff8020e626:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e62d:	e9 36 03 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e632:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e636:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e63a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e63e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e641:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e645:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e649:	48 01 d0             	add    %rdx,%rax
ffffffff8020e64c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e650:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e654:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e657:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e65b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e65f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e663:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e666:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e66a:	0f 94 c0             	sete   %al
ffffffff8020e66d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e670:	48 85 c0             	test   %rax,%rax
ffffffff8020e673:	74 0c                	je     ffffffff8020e681 <_RME_Cpt_Del+0x13e>
ffffffff8020e675:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e67c:	e9 e7 02 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e681:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e685:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e689:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e68d:	0f 95 c0             	setne  %al
ffffffff8020e690:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e693:	48 85 c0             	test   %rax,%rax
ffffffff8020e696:	74 0c                	je     ffffffff8020e6a4 <_RME_Cpt_Del+0x161>
ffffffff8020e698:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e69f:	e9 c4 02 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e6a4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e6a8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e6ad:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e6b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e6b4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e6b8:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e6bb:	0f 93 c0             	setae  %al
ffffffff8020e6be:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e6c1:	48 85 c0             	test   %rax,%rax
ffffffff8020e6c4:	74 0c                	je     ffffffff8020e6d2 <_RME_Cpt_Del+0x18f>
ffffffff8020e6c6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e6cd:	e9 96 02 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e6d2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e6d6:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e6db:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e6df:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e6e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e6e6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e6ea:	48 01 d0             	add    %rdx,%rax
ffffffff8020e6ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e6f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e6f5:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e6f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e6fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e700:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e704:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e707:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e70b:	0f 94 c0             	sete   %al
ffffffff8020e70e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e711:	48 85 c0             	test   %rax,%rax
ffffffff8020e714:	74 0c                	je     ffffffff8020e722 <_RME_Cpt_Del+0x1df>
ffffffff8020e716:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e71d:	e9 46 02 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e722:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e726:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e72a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e72e:	0f 95 c0             	setne  %al
ffffffff8020e731:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e734:	48 85 c0             	test   %rax,%rax
ffffffff8020e737:	74 0c                	je     ffffffff8020e745 <_RME_Cpt_Del+0x202>
ffffffff8020e739:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e740:	e9 23 02 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8020e745:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e749:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e74d:	83 e0 02             	and    $0x2,%eax
ffffffff8020e750:	48 85 c0             	test   %rax,%rax
ffffffff8020e753:	0f 94 c0             	sete   %al
ffffffff8020e756:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e759:	48 85 c0             	test   %rax,%rax
ffffffff8020e75c:	74 0c                	je     ffffffff8020e76a <_RME_Cpt_Del+0x227>
ffffffff8020e75e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e765:	e9 fe 01 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff8020e76a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e76e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e772:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8020e776:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e779:	0f 93 c0             	setae  %al
ffffffff8020e77c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e77f:	48 85 c0             	test   %rax,%rax
ffffffff8020e782:	74 0c                	je     ffffffff8020e790 <_RME_Cpt_Del+0x24d>
ffffffff8020e784:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e78b:	e9 d8 01 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e790:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e794:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e798:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e79b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e79f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e7a3:	48 01 d0             	add    %rdx,%rax
ffffffff8020e7a6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff8020e7aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e7ae:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e7b1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e7b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e7b9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e7bd:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e7c0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e7c4:	0f 95 c0             	setne  %al
ffffffff8020e7c7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e7ca:	48 85 c0             	test   %rax,%rax
ffffffff8020e7cd:	74 0c                	je     ffffffff8020e7db <_RME_Cpt_Del+0x298>
ffffffff8020e7cf:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e7d6:	e9 8d 01 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e7db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e7df:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e7e3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e7e7:	0f 95 c0             	setne  %al
ffffffff8020e7ea:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e7ed:	48 85 c0             	test   %rax,%rax
ffffffff8020e7f0:	74 0c                	je     ffffffff8020e7fe <_RME_Cpt_Del+0x2bb>
ffffffff8020e7f2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e7f9:	e9 6a 01 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e7fe:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020e803:	e8 09 e0 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020e808:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e80b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e80f:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020e813:	48 29 c2             	sub    %rax,%rdx
ffffffff8020e816:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020e81a:	0f 96 c0             	setbe  %al
ffffffff8020e81d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e820:	48 98                	cltq
ffffffff8020e822:	48 85 c0             	test   %rax,%rax
ffffffff8020e825:	74 0c                	je     ffffffff8020e833 <_RME_Cpt_Del+0x2f0>
ffffffff8020e827:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020e82e:	e9 35 01 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
ffffffff8020e833:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e837:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020e83b:	48 85 c0             	test   %rax,%rax
ffffffff8020e83e:	0f 95 c0             	setne  %al
ffffffff8020e841:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e844:	48 85 c0             	test   %rax,%rax
ffffffff8020e847:	74 44                	je     ffffffff8020e88d <_RME_Cpt_Del+0x34a>
ffffffff8020e849:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e84d:	89 c0                	mov    %eax,%eax
ffffffff8020e84f:	48 85 c0             	test   %rax,%rax
ffffffff8020e852:	0f 94 c0             	sete   %al
ffffffff8020e855:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e858:	48 85 c0             	test   %rax,%rax
ffffffff8020e85b:	74 24                	je     ffffffff8020e881 <_RME_Cpt_Del+0x33e>
ffffffff8020e85d:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020e864:	00 ff ff 
ffffffff8020e867:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8020e86b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e86e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e872:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e876:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e879:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e87c:	e8 dd de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e881:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020e888:	e9 db 00 00 00       	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
    /* Is there any capability in this capability table? If yes, we cannot destroy it.
     * We will check every slot to make sure nothing is there. This is surely,
     * predictable but not so perfect. So, if the time of such operations is to be 
     * bounded, the user must control the maximum number of entries in the table
     * by configuring RME_CPT_ENTRY_MAX to a non-zero value. */
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
ffffffff8020e88d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e891:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e895:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Entry_Num=Cpt_Del->Entry_Num;
ffffffff8020e899:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e89d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e8a1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e8a5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020e8ac:	00 
ffffffff8020e8ad:	eb 4c                	jmp    ffffffff8020e8fb <_RME_Cpt_Del+0x3b8>
    {
        if(Table[Count].Head.Type_Stat!=0U)
ffffffff8020e8af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e8b3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e8b7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e8ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e8be:	48 01 d0             	add    %rdx,%rax
ffffffff8020e8c1:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e8c4:	48 85 c0             	test   %rax,%rax
ffffffff8020e8c7:	74 2d                	je     ffffffff8020e8f6 <_RME_Cpt_Del+0x3b3>
        {
            RME_COV_MARKER();
            
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
ffffffff8020e8c9:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020e8d0:	00 ff ff 
ffffffff8020e8d3:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8020e8d7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e8da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e8de:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e8e2:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e8e5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e8e8:	e8 71 de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
            return RME_ERR_CPT_EXIST;
ffffffff8020e8ed:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e8f4:	eb 72                	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e8f6:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020e8fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e8ff:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8020e903:	72 aa                	jb     ffffffff8020e8af <_RME_Cpt_Del+0x36c>
            /* No action required */
        }
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
ffffffff8020e905:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e909:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e90d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
ffffffff8020e911:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e915:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e919:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e91d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff8020e921:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e925:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e929:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020e92e:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e931:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e934:	e8 25 de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e939:	48 85 c0             	test   %rax,%rax
ffffffff8020e93c:	0f 94 c0             	sete   %al
ffffffff8020e93f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e942:	48 85 c0             	test   %rax,%rax
ffffffff8020e945:	74 09                	je     ffffffff8020e950 <_RME_Cpt_Del+0x40d>
ffffffff8020e947:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020e94e:	eb 18                	jmp    ffffffff8020e968 <_RME_Cpt_Del+0x425>

    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
ffffffff8020e950:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020e954:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e958:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e95b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e95e:	e8 26 3d 00 00       	call   ffffffff80212689 <_RME_Kot_Erase>
    
    return 0;
ffffffff8020e963:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020e968:	c9                   	leave
ffffffff8020e969:	c3                   	ret

ffffffff8020e96a <_RME_Cpt_Frz>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Frz(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Frz,
                              rme_cid_t Cap_Frz)
{
ffffffff8020e96a:	f3 0f 1e fa          	endbr64
ffffffff8020e96e:	55                   	push   %rbp
ffffffff8020e96f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020e972:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8020e976:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020e97a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020e97e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Struct* Capobj_Frz;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff8020e982:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e986:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e98b:	48 85 c0             	test   %rax,%rax
ffffffff8020e98e:	0f 85 98 00 00 00    	jne    ffffffff8020ea2c <_RME_Cpt_Frz+0xc2>
ffffffff8020e994:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e998:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e99c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020e9a0:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e9a3:	0f 93 c0             	setae  %al
ffffffff8020e9a6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e9a9:	48 85 c0             	test   %rax,%rax
ffffffff8020e9ac:	74 0c                	je     ffffffff8020e9ba <_RME_Cpt_Frz+0x50>
ffffffff8020e9ae:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e9b5:	e9 f0 02 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
ffffffff8020e9ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e9be:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e9c2:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e9c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e9c9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e9cd:	48 01 d0             	add    %rdx,%rax
ffffffff8020e9d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020e9d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e9d8:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e9db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e9df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e9e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e9e7:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e9ea:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e9ee:	0f 94 c0             	sete   %al
ffffffff8020e9f1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e9f4:	48 85 c0             	test   %rax,%rax
ffffffff8020e9f7:	74 0c                	je     ffffffff8020ea05 <_RME_Cpt_Frz+0x9b>
ffffffff8020e9f9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ea00:	e9 a5 02 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
ffffffff8020ea05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ea09:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ea0d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ea11:	0f 95 c0             	setne  %al
ffffffff8020ea14:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea17:	48 85 c0             	test   %rax,%rax
ffffffff8020ea1a:	0f 84 4c 01 00 00    	je     ffffffff8020eb6c <_RME_Cpt_Frz+0x202>
ffffffff8020ea20:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ea27:	e9 7e 02 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
ffffffff8020ea2c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ea30:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ea34:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea37:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ea3b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ea3f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ea42:	0f 93 c0             	setae  %al
ffffffff8020ea45:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea48:	48 85 c0             	test   %rax,%rax
ffffffff8020ea4b:	74 0c                	je     ffffffff8020ea59 <_RME_Cpt_Frz+0xef>
ffffffff8020ea4d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ea54:	e9 51 02 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
ffffffff8020ea59:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ea5d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ea61:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ea65:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ea6c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ea70:	48 01 d0             	add    %rdx,%rax
ffffffff8020ea73:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ea77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ea7b:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ea7e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ea82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ea86:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ea8a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ea8d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ea91:	0f 94 c0             	sete   %al
ffffffff8020ea94:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea97:	48 85 c0             	test   %rax,%rax
ffffffff8020ea9a:	74 0c                	je     ffffffff8020eaa8 <_RME_Cpt_Frz+0x13e>
ffffffff8020ea9c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eaa3:	e9 02 02 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
ffffffff8020eaa8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eaac:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eab0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eab4:	0f 95 c0             	setne  %al
ffffffff8020eab7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eaba:	48 85 c0             	test   %rax,%rax
ffffffff8020eabd:	74 0c                	je     ffffffff8020eacb <_RME_Cpt_Frz+0x161>
ffffffff8020eabf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eac6:	e9 df 01 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
ffffffff8020eacb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eacf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ead4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ead7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eadb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020eadf:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020eae2:	0f 93 c0             	setae  %al
ffffffff8020eae5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eae8:	48 85 c0             	test   %rax,%rax
ffffffff8020eaeb:	74 0c                	je     ffffffff8020eaf9 <_RME_Cpt_Frz+0x18f>
ffffffff8020eaed:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020eaf4:	e9 b1 01 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
ffffffff8020eaf9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eafd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020eb02:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eb06:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eb09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb0d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020eb11:	48 01 d0             	add    %rdx,%rax
ffffffff8020eb14:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020eb18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb1c:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eb1f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020eb23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eb27:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eb2b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eb2e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eb32:	0f 94 c0             	sete   %al
ffffffff8020eb35:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb38:	48 85 c0             	test   %rax,%rax
ffffffff8020eb3b:	74 0c                	je     ffffffff8020eb49 <_RME_Cpt_Frz+0x1df>
ffffffff8020eb3d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eb44:	e9 61 01 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
ffffffff8020eb49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eb4d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eb51:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eb55:	0f 95 c0             	setne  %al
ffffffff8020eb58:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb5b:	48 85 c0             	test   %rax,%rax
ffffffff8020eb5e:	74 0c                	je     ffffffff8020eb6c <_RME_Cpt_Frz+0x202>
ffffffff8020eb60:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eb67:	e9 3e 01 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff8020eb6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb70:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020eb74:	83 e0 04             	and    $0x4,%eax
ffffffff8020eb77:	48 85 c0             	test   %rax,%rax
ffffffff8020eb7a:	0f 94 c0             	sete   %al
ffffffff8020eb7d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb80:	48 85 c0             	test   %rax,%rax
ffffffff8020eb83:	74 0c                	je     ffffffff8020eb91 <_RME_Cpt_Frz+0x227>
ffffffff8020eb85:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020eb8c:	e9 19 01 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
ffffffff8020eb91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb95:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020eb99:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020eb9d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020eba0:	0f 93 c0             	setae  %al
ffffffff8020eba3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eba6:	48 85 c0             	test   %rax,%rax
ffffffff8020eba9:	74 0c                	je     ffffffff8020ebb7 <_RME_Cpt_Frz+0x24d>
ffffffff8020ebab:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ebb2:	e9 f3 00 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
ffffffff8020ebb7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020ebbb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ebbf:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ebc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ebc6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ebca:	48 01 d0             	add    %rdx,%rax
ffffffff8020ebcd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* Check if anything is there. If nothing there, the Type_Stat must be 0. 
     * Need a read acquire barrier here to avoid stale reads below. */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
ffffffff8020ebd1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ebd5:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ebd8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* See if there is a cap */
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
ffffffff8020ebdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ebe0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ebe4:	48 85 c0             	test   %rax,%rax
ffffffff8020ebe7:	75 0c                	jne    ffffffff8020ebf5 <_RME_Cpt_Frz+0x28b>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_NULL;
ffffffff8020ebe9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020ebf0:	e9 b5 00 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* If this is a root capability, check if the reference count allows freezing */
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
ffffffff8020ebf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ebf9:	89 c0                	mov    %eax,%eax
ffffffff8020ebfb:	48 85 c0             	test   %rax,%rax
ffffffff8020ebfe:	75 19                	jne    ffffffff8020ec19 <_RME_Cpt_Frz+0x2af>
    {
        if(Capobj_Frz->Head.Root_Ref!=0U)
ffffffff8020ec00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec04:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020ec08:	48 85 c0             	test   %rax,%rax
ffffffff8020ec0b:	74 0c                	je     ffffffff8020ec19 <_RME_Cpt_Frz+0x2af>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_REFCNT;
ffffffff8020ec0d:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020ec14:	e9 91 00 00 00       	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* The capability is already frozen - why do it again? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020ec19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ec1d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ec21:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ec24:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ec28:	75 09                	jne    ffffffff8020ec33 <_RME_Cpt_Frz+0x2c9>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_FROZEN;
ffffffff8020ec2a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ec31:	eb 77                	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the slot is quiescent */
    if(RME_UNLIKELY(RME_CAP_QUIE(Capobj_Frz->Head.Timestamp)==0U))
ffffffff8020ec33:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020ec38:	e8 d4 db ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020ec3d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ec40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec44:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020ec48:	48 29 c2             	sub    %rax,%rdx
ffffffff8020ec4b:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020ec4f:	0f 96 c0             	setbe  %al
ffffffff8020ec52:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ec55:	48 98                	cltq
ffffffff8020ec57:	48 85 c0             	test   %rax,%rax
ffffffff8020ec5a:	74 09                	je     ffffffff8020ec65 <_RME_Cpt_Frz+0x2fb>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_QUIE;
ffffffff8020ec5c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020ec63:	eb 45                	jmp    ffffffff8020ecaa <_RME_Cpt_Frz+0x340>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Update the timestamp */
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP();
ffffffff8020ec65:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020ec6a:	e8 a2 db ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020ec6f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ec73:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Finally, freeze it. We do not report error here because if we CASFAIL someone must have helped us */
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff8020ec77:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020ec7e:	00 ff ff 
ffffffff8020ec81:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8020ec85:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff8020ec8c:	00 00 00 
ffffffff8020ec8f:	48 09 c2             	or     %rax,%rdx
ffffffff8020ec92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec96:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020ec9a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020ec9d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020eca0:	e8 b9 da ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
                  RME_CAP_TYPE_STAT(RME_CAP_TYPE(Type_Stat),
                                    RME_CAP_STAT_FROZEN,
                                    RME_CAP_ATTR(Type_Stat)));

    return 0;
ffffffff8020eca5:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020ecaa:	c9                   	leave
ffffffff8020ecab:	c3                   	ret

ffffffff8020ecac <_RME_Cpt_Add>:
                              rme_cid_t Cap_Dst, 
                              rme_cid_t Cap_Cpt_Src,
                              rme_cid_t Cap_Src,
                              rme_ptr_t Flag,
                              rme_ptr_t Ext_Flag)
{
ffffffff8020ecac:	f3 0f 1e fa          	endbr64
ffffffff8020ecb0:	55                   	push   %rbp
ffffffff8020ecb1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ecb4:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff8020ecb8:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff8020ecbc:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff8020ecc0:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8020ecc4:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff8020ecc8:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff8020eccc:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Kom_Flag;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020ecd0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ecd4:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020ecd9:	48 85 c0             	test   %rax,%rax
ffffffff8020ecdc:	0f 85 98 00 00 00    	jne    ffffffff8020ed7a <_RME_Cpt_Add+0xce>
ffffffff8020ece2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ece6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ecea:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8020ecee:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ecf1:	0f 93 c0             	setae  %al
ffffffff8020ecf4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ecf7:	48 85 c0             	test   %rax,%rax
ffffffff8020ecfa:	74 0c                	je     ffffffff8020ed08 <_RME_Cpt_Add+0x5c>
ffffffff8020ecfc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ed03:	e9 db 08 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020ed08:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed0c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ed10:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed13:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ed17:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ed1b:	48 01 d0             	add    %rdx,%rax
ffffffff8020ed1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ed22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ed26:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ed29:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ed2d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ed31:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ed35:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ed38:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ed3c:	0f 94 c0             	sete   %al
ffffffff8020ed3f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed42:	48 85 c0             	test   %rax,%rax
ffffffff8020ed45:	74 0c                	je     ffffffff8020ed53 <_RME_Cpt_Add+0xa7>
ffffffff8020ed47:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ed4e:	e9 90 08 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020ed53:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ed57:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ed5b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ed5f:	0f 95 c0             	setne  %al
ffffffff8020ed62:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed65:	48 85 c0             	test   %rax,%rax
ffffffff8020ed68:	0f 84 4c 01 00 00    	je     ffffffff8020eeba <_RME_Cpt_Add+0x20e>
ffffffff8020ed6e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ed75:	e9 69 08 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020ed7a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed7e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ed82:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed85:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ed89:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ed8d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ed90:	0f 93 c0             	setae  %al
ffffffff8020ed93:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed96:	48 85 c0             	test   %rax,%rax
ffffffff8020ed99:	74 0c                	je     ffffffff8020eda7 <_RME_Cpt_Add+0xfb>
ffffffff8020ed9b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020eda2:	e9 3c 08 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020eda7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020edab:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020edaf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020edb3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020edb6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020edba:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020edbe:	48 01 d0             	add    %rdx,%rax
ffffffff8020edc1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020edc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020edc9:	48 8b 00             	mov    (%rax),%rax
ffffffff8020edcc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020edd0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020edd4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020edd8:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eddb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eddf:	0f 94 c0             	sete   %al
ffffffff8020ede2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ede5:	48 85 c0             	test   %rax,%rax
ffffffff8020ede8:	74 0c                	je     ffffffff8020edf6 <_RME_Cpt_Add+0x14a>
ffffffff8020edea:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020edf1:	e9 ed 07 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020edf6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020edfa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020edfe:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ee02:	0f 95 c0             	setne  %al
ffffffff8020ee05:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee08:	48 85 c0             	test   %rax,%rax
ffffffff8020ee0b:	74 0c                	je     ffffffff8020ee19 <_RME_Cpt_Add+0x16d>
ffffffff8020ee0d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ee14:	e9 ca 07 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020ee19:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ee1d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ee22:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee29:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ee2d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ee30:	0f 93 c0             	setae  %al
ffffffff8020ee33:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee36:	48 85 c0             	test   %rax,%rax
ffffffff8020ee39:	74 0c                	je     ffffffff8020ee47 <_RME_Cpt_Add+0x19b>
ffffffff8020ee3b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ee42:	e9 9c 07 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020ee47:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ee4b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ee50:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ee54:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee5b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ee5f:	48 01 d0             	add    %rdx,%rax
ffffffff8020ee62:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ee66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee6a:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ee6d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ee71:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ee75:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ee79:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ee7c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ee80:	0f 94 c0             	sete   %al
ffffffff8020ee83:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee86:	48 85 c0             	test   %rax,%rax
ffffffff8020ee89:	74 0c                	je     ffffffff8020ee97 <_RME_Cpt_Add+0x1eb>
ffffffff8020ee8b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ee92:	e9 4c 07 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020ee97:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ee9b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ee9f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eea3:	0f 95 c0             	setne  %al
ffffffff8020eea6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eea9:	48 85 c0             	test   %rax,%rax
ffffffff8020eeac:	74 0c                	je     ffffffff8020eeba <_RME_Cpt_Add+0x20e>
ffffffff8020eeae:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eeb5:	e9 29 07 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
                   struct RME_Cap_Cpt*,Cpt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020eeba:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020eebe:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020eec3:	48 85 c0             	test   %rax,%rax
ffffffff8020eec6:	0f 85 98 00 00 00    	jne    ffffffff8020ef64 <_RME_Cpt_Add+0x2b8>
ffffffff8020eecc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020eed0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020eed4:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff8020eed8:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020eedb:	0f 93 c0             	setae  %al
ffffffff8020eede:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eee1:	48 85 c0             	test   %rax,%rax
ffffffff8020eee4:	74 0c                	je     ffffffff8020eef2 <_RME_Cpt_Add+0x246>
ffffffff8020eee6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020eeed:	e9 f1 06 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020eef2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020eef6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eefa:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eefd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ef01:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ef05:	48 01 d0             	add    %rdx,%rax
ffffffff8020ef08:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ef0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ef10:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ef13:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ef17:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ef1b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ef1f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ef22:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ef26:	0f 94 c0             	sete   %al
ffffffff8020ef29:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef2c:	48 85 c0             	test   %rax,%rax
ffffffff8020ef2f:	74 0c                	je     ffffffff8020ef3d <_RME_Cpt_Add+0x291>
ffffffff8020ef31:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ef38:	e9 a6 06 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020ef3d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ef41:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ef45:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ef49:	0f 95 c0             	setne  %al
ffffffff8020ef4c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef4f:	48 85 c0             	test   %rax,%rax
ffffffff8020ef52:	0f 84 4c 01 00 00    	je     ffffffff8020f0a4 <_RME_Cpt_Add+0x3f8>
ffffffff8020ef58:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ef5f:	e9 7f 06 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020ef64:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ef68:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ef6c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ef6f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ef73:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ef77:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ef7a:	0f 93 c0             	setae  %al
ffffffff8020ef7d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef80:	48 85 c0             	test   %rax,%rax
ffffffff8020ef83:	74 0c                	je     ffffffff8020ef91 <_RME_Cpt_Add+0x2e5>
ffffffff8020ef85:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ef8c:	e9 52 06 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020ef91:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ef95:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ef99:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ef9d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020efa0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020efa4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020efa8:	48 01 d0             	add    %rdx,%rax
ffffffff8020efab:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020efaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020efb3:	48 8b 00             	mov    (%rax),%rax
ffffffff8020efb6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020efba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020efbe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020efc2:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020efc5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020efc9:	0f 94 c0             	sete   %al
ffffffff8020efcc:	0f b6 c0             	movzbl %al,%eax
ffffffff8020efcf:	48 85 c0             	test   %rax,%rax
ffffffff8020efd2:	74 0c                	je     ffffffff8020efe0 <_RME_Cpt_Add+0x334>
ffffffff8020efd4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020efdb:	e9 03 06 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020efe0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020efe4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020efe8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020efec:	0f 95 c0             	setne  %al
ffffffff8020efef:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eff2:	48 85 c0             	test   %rax,%rax
ffffffff8020eff5:	74 0c                	je     ffffffff8020f003 <_RME_Cpt_Add+0x357>
ffffffff8020eff7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020effe:	e9 e0 05 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020f003:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020f007:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f00c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f00f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f013:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f017:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f01a:	0f 93 c0             	setae  %al
ffffffff8020f01d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f020:	48 85 c0             	test   %rax,%rax
ffffffff8020f023:	74 0c                	je     ffffffff8020f031 <_RME_Cpt_Add+0x385>
ffffffff8020f025:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f02c:	e9 b2 05 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020f031:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020f035:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f03a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f03e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f041:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f045:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f049:	48 01 d0             	add    %rdx,%rax
ffffffff8020f04c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f050:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f054:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f057:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020f05b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f05f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f063:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f066:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f06a:	0f 94 c0             	sete   %al
ffffffff8020f06d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f070:	48 85 c0             	test   %rax,%rax
ffffffff8020f073:	74 0c                	je     ffffffff8020f081 <_RME_Cpt_Add+0x3d5>
ffffffff8020f075:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f07c:	e9 62 05 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020f081:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f085:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f089:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f08d:	0f 95 c0             	setne  %al
ffffffff8020f090:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f093:	48 85 c0             	test   %rax,%rax
ffffffff8020f096:	74 0c                	je     ffffffff8020f0a4 <_RME_Cpt_Add+0x3f8>
ffffffff8020f098:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f09f:	e9 3f 05 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
                   struct RME_Cap_Cpt*,Cpt_Src,Type_Stat);
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020f0a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f0a8:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f0ac:	83 e0 10             	and    $0x10,%eax
ffffffff8020f0af:	48 85 c0             	test   %rax,%rax
ffffffff8020f0b2:	0f 94 c0             	sete   %al
ffffffff8020f0b5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0b8:	48 85 c0             	test   %rax,%rax
ffffffff8020f0bb:	74 0c                	je     ffffffff8020f0c9 <_RME_Cpt_Add+0x41d>
ffffffff8020f0bd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f0c4:	e9 1a 05 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
ffffffff8020f0c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f0cd:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f0d1:	83 e0 08             	and    $0x8,%eax
ffffffff8020f0d4:	48 85 c0             	test   %rax,%rax
ffffffff8020f0d7:	0f 94 c0             	sete   %al
ffffffff8020f0da:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0dd:	48 85 c0             	test   %rax,%rax
ffffffff8020f0e0:	74 0c                	je     ffffffff8020f0ee <_RME_Cpt_Add+0x442>
ffffffff8020f0e2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f0e9:	e9 f5 04 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
    
    /* Get the cap slots */
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020f0ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f0f2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f0f6:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8020f0fa:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f0fd:	0f 93 c0             	setae  %al
ffffffff8020f100:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f103:	48 85 c0             	test   %rax,%rax
ffffffff8020f106:	74 0c                	je     ffffffff8020f114 <_RME_Cpt_Add+0x468>
ffffffff8020f108:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f10f:	e9 cf 04 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020f114:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8020f118:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f11c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f11f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f123:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f127:	48 01 d0             	add    %rdx,%rax
ffffffff8020f12a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020f12e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f132:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f136:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff8020f13a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f13d:	0f 93 c0             	setae  %al
ffffffff8020f140:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f143:	48 85 c0             	test   %rax,%rax
ffffffff8020f146:	74 0c                	je     ffffffff8020f154 <_RME_Cpt_Add+0x4a8>
ffffffff8020f148:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f14f:	e9 8f 04 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020f154:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8020f158:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f15c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f15f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f163:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f167:	48 01 d0             	add    %rdx,%rax
ffffffff8020f16a:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    
    /* Atomic read - Read barrier to avoid premature checking of the rest */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
ffffffff8020f16e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f172:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f175:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Is the source cap frozen? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020f179:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f17d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f181:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f184:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f188:	75 0c                	jne    ffffffff8020f196 <_RME_Cpt_Add+0x4ea>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_FROZEN;
ffffffff8020f18a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f191:	e9 4d 04 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Does the source cap exist at all? */
    if(Type_Stat==0U)
ffffffff8020f196:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8020f19b:	75 0c                	jne    ffffffff8020f1a9 <_RME_Cpt_Add+0x4fd>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_NULL;
ffffffff8020f19d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f1a4:	e9 3a 04 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Dewarn some compilers that complain about uninitialized variables */
    Kom_Begin=0U;
ffffffff8020f1a9:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8020f1b0:	00 
    Kom_End=0U;
ffffffff8020f1b1:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8020f1b8:	00 
    Kom_Flag=0U;
ffffffff8020f1b9:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8020f1c0:	00 
    
    /* Is there a flag conflict? - For page tables, we have different checking mechanisms */
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020f1c1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f1c5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f1c9:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    if(Src_Type==RME_CAP_TYPE_PGT)
ffffffff8020f1cd:	48 83 7d b8 04       	cmpq   $0x4,-0x48(%rbp)
ffffffff8020f1d2:	0f 85 c5 00 00 00    	jne    ffffffff8020f29d <_RME_Cpt_Add+0x5f1>
    {
        RME_COV_MARKER();
        
        /* Check the delegation range */
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020f1d8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f1dc:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f1e0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f1e3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f1e7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f1eb:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f1ef:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f1f2:	73 0c                	jae    ffffffff8020f200 <_RME_Cpt_Add+0x554>
        {
            RME_COV_MARKER();
        
            return RME_ERR_CPT_FLAG;
ffffffff8020f1f4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f1fb:	e9 e3 03 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020f200:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f204:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f208:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f20d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f210:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f214:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f218:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f21c:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f221:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f224:	73 0c                	jae    ffffffff8020f232 <_RME_Cpt_Add+0x586>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f226:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f22d:	e9 b1 03 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
ffffffff8020f232:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f236:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f23a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f23d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f241:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f245:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f24a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f24d:	73 0c                	jae    ffffffff8020f25b <_RME_Cpt_Add+0x5af>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f24f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f256:	e9 88 03 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the flags - if there are extra ones, or all zero */
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
ffffffff8020f25b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f25f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f262:	48 85 c0             	test   %rax,%rax
ffffffff8020f265:	75 0c                	jne    ffffffff8020f273 <_RME_Cpt_Add+0x5c7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f267:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f26e:	e9 70 03 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f273:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f277:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f27b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f27e:	48 f7 d0             	not    %rax
ffffffff8020f281:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f285:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f288:	48 85 c0             	test   %rax,%rax
ffffffff8020f28b:	0f 84 c2 01 00 00    	je     ffffffff8020f453 <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f291:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f298:	e9 46 03 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KFN)
ffffffff8020f29d:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
ffffffff8020f2a2:	75 6c                	jne    ffffffff8020f310 <_RME_Cpt_Add+0x664>
    {
        RME_COV_MARKER();
        
        /* Kernel funcrions only have ranges, no flags - check the delegation range */
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020f2a4:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f2a8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2ac:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f2af:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f2b3:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f2b7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2bb:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f2be:	73 0c                	jae    ffffffff8020f2cc <_RME_Cpt_Add+0x620>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f2c0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f2c7:	e9 17 03 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020f2cc:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f2d0:	89 c2                	mov    %eax,%edx
ffffffff8020f2d2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f2d6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f2da:	89 c0                	mov    %eax,%eax
ffffffff8020f2dc:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f2df:	73 0c                	jae    ffffffff8020f2ed <_RME_Cpt_Add+0x641>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f2e1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f2e8:	e9 f6 02 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
ffffffff8020f2ed:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f2f1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2f5:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8020f2f9:	89 d2                	mov    %edx,%edx
ffffffff8020f2fb:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f2fe:	0f 83 4f 01 00 00    	jae    ffffffff8020f453 <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f304:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f30b:	e9 d3 02 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020f310:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f315:	0f 85 05 01 00 00    	jne    ffffffff8020f420 <_RME_Cpt_Add+0x774>
    {
        RME_COV_MARKER();
        
        /* The Kom_End here is exclusive */
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020f31b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f31f:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020f323:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020f327:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff8020f32e:	ff ff ff 
ffffffff8020f331:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f335:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020f339:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020f33d:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
ffffffff8020f341:	48 09 d0             	or     %rdx,%rax
ffffffff8020f344:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        Kom_Flag=RME_KOM_FLAG_KOM(Ext_Flag);
ffffffff8020f348:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8020f34f:	00 
        /* Round start and end to the slot boundary, if we are using slots bigger than 64 bytes */
#if(RME_KOM_SLOT_ORDER>6U)
        Kom_End=RME_ROUND_DOWN(Kom_End,RME_KOM_SLOT_ORDER);
        Kom_Begin=RME_ROUND_UP(Kom_Begin,RME_KOM_SLOT_ORDER);
#endif
        if(Kom_End<=Kom_Begin)
ffffffff8020f350:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f354:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f358:	72 0c                	jb     ffffffff8020f366 <_RME_Cpt_Add+0x6ba>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f35a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f361:	e9 7d 02 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Convert relative addresses to absolute addresses and check for overflow */
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020f366:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f36a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f36e:	48 01 45 e8          	add    %rax,-0x18(%rbp)
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020f372:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f376:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f37a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f37e:	73 0c                	jae    ffffffff8020f38c <_RME_Cpt_Add+0x6e0>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f380:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f387:	e9 57 02 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020f38c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f390:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f394:	48 01 45 e0          	add    %rax,-0x20(%rbp)
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020f398:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f39c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3a0:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8020f3a4:	73 0c                	jae    ffffffff8020f3b2 <_RME_Cpt_Add+0x706>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3a6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3ad:	e9 31 02 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Check the ranges of kernel memory */
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020f3b2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3b6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3ba:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f3be:	73 0c                	jae    ffffffff8020f3cc <_RME_Cpt_Add+0x720>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3c0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3c7:	e9 17 02 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Internal encoding of 'end' is inclusive */
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
ffffffff8020f3cc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3d0:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f3d4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f3d8:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8020f3dc:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f3df:	73 0c                	jae    ffffffff8020f3ed <_RME_Cpt_Add+0x741>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3e1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3e8:	e9 f6 01 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Kom_Flag==0U)
ffffffff8020f3ed:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020f3f2:	75 0c                	jne    ffffffff8020f400 <_RME_Cpt_Add+0x754>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3f4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3fb:	e9 e3 01 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if((Kom_Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f400:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f404:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f408:	48 f7 d0             	not    %rax
ffffffff8020f40b:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff8020f40f:	48 85 c0             	test   %rax,%rax
ffffffff8020f412:	74 3f                	je     ffffffff8020f453 <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f414:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f41b:	e9 c3 01 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
    else
    {
        RME_COV_MARKER();
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Flag==0U)
ffffffff8020f420:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
ffffffff8020f425:	75 0c                	jne    ffffffff8020f433 <_RME_Cpt_Add+0x787>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f427:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f42e:	e9 b0 01 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        else
        {
            RME_COV_MARKER();
            /* No action required */
        }
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f433:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f437:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f43b:	48 f7 d0             	not    %rax
ffffffff8020f43e:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f442:	48 85 c0             	test   %rax,%rax
ffffffff8020f445:	74 0c                	je     ffffffff8020f453 <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f447:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f44e:	e9 90 01 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
            /* No action required */
        }
    }
    
    /* Is the destination slot unoccupied? */
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff8020f453:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f457:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f45a:	48 85 c0             	test   %rax,%rax
ffffffff8020f45d:	74 0c                	je     ffffffff8020f46b <_RME_Cpt_Add+0x7bf>
    {
        RME_COV_MARKER();
            
        return RME_ERR_CPT_EXIST;
ffffffff8020f45f:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f466:	e9 78 01 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Try to take the empty slot */
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020f46b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f46f:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f476:	00 00 00 
ffffffff8020f479:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020f47e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f481:	e8 d8 d2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f486:	48 85 c0             	test   %rax,%rax
ffffffff8020f489:	0f 94 c0             	sete   %al
ffffffff8020f48c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f48f:	48 85 c0             	test   %rax,%rax
ffffffff8020f492:	74 0c                	je     ffffffff8020f4a0 <_RME_Cpt_Add+0x7f4>
ffffffff8020f494:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f49b:	e9 43 01 00 00       	jmp    ffffffff8020f5e3 <_RME_Cpt_Add+0x937>
ffffffff8020f4a0:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020f4a5:	e8 67 d3 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020f4aa:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020f4ae:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* All done, we replicate the cap with flags */
    if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020f4b2:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f4b7:	75 6a                	jne    ffffffff8020f523 <_RME_Cpt_Add+0x877>
    {
        RME_COV_MARKER();
            
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Kom_Flag);
ffffffff8020f4b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4bd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020f4c1:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8020f4c5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4c9:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8020f4cd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4d1:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff8020f4d5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4d9:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f4dd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4e1:	48 89 50 28          	mov    %rdx,0x28(%rax)
ffffffff8020f4e5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4e9:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f4ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4f1:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f4f5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4f9:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff8020f4fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f501:	48 89 50 38          	mov    %rdx,0x38(%rax)
        /* Write absolute range information for kernel memory caps */
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->Begin=Kom_Begin;
ffffffff8020f505:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f509:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020f50d:	48 89 50 28          	mov    %rdx,0x28(%rax)
        /* The Kom_End encoded inclusively to avoid overflow at max address */
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->End=Kom_End-1U;
ffffffff8020f511:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f515:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8020f519:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f51d:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f521:	eb 4c                	jmp    ffffffff8020f56f <_RME_Cpt_Add+0x8c3>
    }
    else
    {
        RME_COV_MARKER();
        
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff8020f523:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f527:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8020f52b:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8020f52f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f533:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8020f537:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f53b:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff8020f53f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f543:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f547:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f54b:	48 89 50 28          	mov    %rdx,0x28(%rax)
ffffffff8020f54f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f553:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f557:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f55b:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f55f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f563:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff8020f567:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f56b:	48 89 50 38          	mov    %rdx,0x38(%rax)
     * their parent, nor will they update the parent's reference count. This
     * design decision comes from the fact that these two capability types are
     * always created on boot and delegated everywhere, and they don't actually
     * have an object. If we use refcnt on these, we may cause scalability 
     * issues. The parent cap can't be deleted anyway, so this is fine. */
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020f56f:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f574:	74 46                	je     ffffffff8020f5bc <_RME_Cpt_Add+0x910>
ffffffff8020f576:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
ffffffff8020f57b:	74 3f                	je     ffffffff8020f5bc <_RME_Cpt_Add+0x910>
    {
        RME_COV_MARKER();
        
        /* Register root */
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
ffffffff8020f57d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f581:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f584:	89 c0                	mov    %eax,%eax
ffffffff8020f586:	48 85 c0             	test   %rax,%rax
ffffffff8020f589:	74 0a                	je     ffffffff8020f595 <_RME_Cpt_Add+0x8e9>
ffffffff8020f58b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f58f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f593:	eb 04                	jmp    ffffffff8020f599 <_RME_Cpt_Add+0x8ed>
ffffffff8020f595:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f599:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020f59d:	48 89 42 08          	mov    %rax,0x8(%rdx)
    
        /* Increase the parent's refcnt - never overflows, guaranteed by field size */
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
ffffffff8020f5a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5a5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f5a9:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f5ad:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8020f5b2:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f5b5:	e8 d9 d1 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8020f5ba:	eb 0c                	jmp    ffffffff8020f5c8 <_RME_Cpt_Add+0x91c>
    else
    {
        RME_COV_MARKER();
        
        /* No root for KOM and KFN */
        Capobj_Dst->Head.Root_Ref=0U;
ffffffff8020f5bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5c0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020f5c7:	00 
    }

    /* Establish cap */
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020f5c8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f5cc:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8020f5d0:	48 83 c8 01          	or     $0x1,%rax
ffffffff8020f5d4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f5d7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5db:	48 89 10             	mov    %rdx,(%rax)
                      RME_CAP_TYPE_STAT(Src_Type,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_LEAF));

    return 0;
ffffffff8020f5de:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020f5e3:	c9                   	leave
ffffffff8020f5e4:	c3                   	ret

ffffffff8020f5e5 <_RME_Cpt_Rem>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Rem(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Rem,
                              rme_cid_t Cap_Rem)
{
ffffffff8020f5e5:	f3 0f 1e fa          	endbr64
ffffffff8020f5e9:	55                   	push   %rbp
ffffffff8020f5ea:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020f5ed:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8020f5f1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020f5f5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020f5f9:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    rme_ptr_t Rem_Type;
    /* This is used for removal */
    volatile struct RME_Cap_Struct* Capobj_Root;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8020f5fd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f601:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020f606:	48 85 c0             	test   %rax,%rax
ffffffff8020f609:	0f 85 98 00 00 00    	jne    ffffffff8020f6a7 <_RME_Cpt_Rem+0xc2>
ffffffff8020f60f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f613:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f617:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020f61b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f61e:	0f 93 c0             	setae  %al
ffffffff8020f621:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f624:	48 85 c0             	test   %rax,%rax
ffffffff8020f627:	74 0c                	je     ffffffff8020f635 <_RME_Cpt_Rem+0x50>
ffffffff8020f629:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f630:	e9 3f 03 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f635:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f639:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f63d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f640:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f644:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f648:	48 01 d0             	add    %rdx,%rax
ffffffff8020f64b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f64f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f653:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f656:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f65a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f65e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f662:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f665:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f669:	0f 94 c0             	sete   %al
ffffffff8020f66c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f66f:	48 85 c0             	test   %rax,%rax
ffffffff8020f672:	74 0c                	je     ffffffff8020f680 <_RME_Cpt_Rem+0x9b>
ffffffff8020f674:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f67b:	e9 f4 02 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f680:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f684:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f688:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f68c:	0f 95 c0             	setne  %al
ffffffff8020f68f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f692:	48 85 c0             	test   %rax,%rax
ffffffff8020f695:	0f 84 4c 01 00 00    	je     ffffffff8020f7e7 <_RME_Cpt_Rem+0x202>
ffffffff8020f69b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f6a2:	e9 cd 02 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f6a7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f6ab:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f6af:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f6b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f6b6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f6ba:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f6bd:	0f 93 c0             	setae  %al
ffffffff8020f6c0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f6c3:	48 85 c0             	test   %rax,%rax
ffffffff8020f6c6:	74 0c                	je     ffffffff8020f6d4 <_RME_Cpt_Rem+0xef>
ffffffff8020f6c8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f6cf:	e9 a0 02 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f6d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f6d8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f6dc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f6e0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f6e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f6e7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f6eb:	48 01 d0             	add    %rdx,%rax
ffffffff8020f6ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f6f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f6f6:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f6f9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f6fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f701:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f705:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f708:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f70c:	0f 94 c0             	sete   %al
ffffffff8020f70f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f712:	48 85 c0             	test   %rax,%rax
ffffffff8020f715:	74 0c                	je     ffffffff8020f723 <_RME_Cpt_Rem+0x13e>
ffffffff8020f717:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f71e:	e9 51 02 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f723:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f727:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f72b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f72f:	0f 95 c0             	setne  %al
ffffffff8020f732:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f735:	48 85 c0             	test   %rax,%rax
ffffffff8020f738:	74 0c                	je     ffffffff8020f746 <_RME_Cpt_Rem+0x161>
ffffffff8020f73a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f741:	e9 2e 02 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f746:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f74a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f74f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f752:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f756:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f75a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f75d:	0f 93 c0             	setae  %al
ffffffff8020f760:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f763:	48 85 c0             	test   %rax,%rax
ffffffff8020f766:	74 0c                	je     ffffffff8020f774 <_RME_Cpt_Rem+0x18f>
ffffffff8020f768:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f76f:	e9 00 02 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f774:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f778:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f77d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f781:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f788:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f78c:	48 01 d0             	add    %rdx,%rax
ffffffff8020f78f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f793:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f797:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f79a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f79e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f7a2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f7a6:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f7a9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f7ad:	0f 94 c0             	sete   %al
ffffffff8020f7b0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f7b3:	48 85 c0             	test   %rax,%rax
ffffffff8020f7b6:	74 0c                	je     ffffffff8020f7c4 <_RME_Cpt_Rem+0x1df>
ffffffff8020f7b8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f7bf:	e9 b0 01 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f7c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f7c8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f7cc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f7d0:	0f 95 c0             	setne  %al
ffffffff8020f7d3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f7d6:	48 85 c0             	test   %rax,%rax
ffffffff8020f7d9:	74 0c                	je     ffffffff8020f7e7 <_RME_Cpt_Rem+0x202>
ffffffff8020f7db:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f7e2:	e9 8d 01 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff8020f7e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f7eb:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f7ef:	83 e0 20             	and    $0x20,%eax
ffffffff8020f7f2:	48 85 c0             	test   %rax,%rax
ffffffff8020f7f5:	0f 94 c0             	sete   %al
ffffffff8020f7f8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f7fb:	48 85 c0             	test   %rax,%rax
ffffffff8020f7fe:	74 0c                	je     ffffffff8020f80c <_RME_Cpt_Rem+0x227>
ffffffff8020f800:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f807:	e9 68 01 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff8020f80c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f810:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f814:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020f818:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f81b:	0f 93 c0             	setae  %al
ffffffff8020f81e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f821:	48 85 c0             	test   %rax,%rax
ffffffff8020f824:	74 0c                	je     ffffffff8020f832 <_RME_Cpt_Rem+0x24d>
ffffffff8020f826:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f82d:	e9 42 01 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f832:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f836:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f83a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f83d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f841:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f845:	48 01 d0             	add    %rdx,%rax
ffffffff8020f848:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Removal check */
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff8020f84c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f850:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f853:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f857:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f85b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f85f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f862:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f866:	0f 95 c0             	setne  %al
ffffffff8020f869:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f86c:	48 85 c0             	test   %rax,%rax
ffffffff8020f86f:	74 0c                	je     ffffffff8020f87d <_RME_Cpt_Rem+0x298>
ffffffff8020f871:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f878:	e9 f7 00 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f87d:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020f882:	e8 8a cf ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020f887:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f88a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f88e:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020f892:	48 29 c2             	sub    %rax,%rdx
ffffffff8020f895:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020f899:	0f 96 c0             	setbe  %al
ffffffff8020f89c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f89f:	48 98                	cltq
ffffffff8020f8a1:	48 85 c0             	test   %rax,%rax
ffffffff8020f8a4:	74 0c                	je     ffffffff8020f8b2 <_RME_Cpt_Rem+0x2cd>
ffffffff8020f8a6:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020f8ad:	e9 c2 00 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
ffffffff8020f8b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f8b6:	89 c0                	mov    %eax,%eax
ffffffff8020f8b8:	48 85 c0             	test   %rax,%rax
ffffffff8020f8bb:	0f 94 c0             	sete   %al
ffffffff8020f8be:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f8c1:	48 85 c0             	test   %rax,%rax
ffffffff8020f8c4:	74 0c                	je     ffffffff8020f8d2 <_RME_Cpt_Rem+0x2ed>
ffffffff8020f8c6:	48 c7 c0 f6 ff ff ff 	mov    $0xfffffffffffffff6,%rax
ffffffff8020f8cd:	e9 a2 00 00 00       	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
    
    /* If we are KFN or KOM, we don't care about parent or refcnt */
    Rem_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020f8d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f8d6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f8da:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
ffffffff8020f8de:	48 83 7d e0 02       	cmpq   $0x2,-0x20(%rbp)
ffffffff8020f8e3:	74 5b                	je     ffffffff8020f940 <_RME_Cpt_Rem+0x35b>
ffffffff8020f8e5:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
ffffffff8020f8ea:	74 54                	je     ffffffff8020f940 <_RME_Cpt_Rem+0x35b>
    {
        RME_COV_MARKER();
        
        /* Remember this for refcnt operations */
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
ffffffff8020f8ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f8f0:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f8f4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8020f8f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f8fc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020f900:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020f905:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f908:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f90b:	e8 4e ce ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f910:	48 85 c0             	test   %rax,%rax
ffffffff8020f913:	0f 94 c0             	sete   %al
ffffffff8020f916:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f919:	48 85 c0             	test   %rax,%rax
ffffffff8020f91c:	74 09                	je     ffffffff8020f927 <_RME_Cpt_Rem+0x342>
ffffffff8020f91e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f925:	eb 4d                	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>

        /* Check done, decrease its parent's refcnt. This must be done at last */
        RME_FETCH_ADD(&(Capobj_Root->Head.Root_Ref),-1);
ffffffff8020f927:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f92b:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f92f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8020f936:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f939:	e8 55 ce ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8020f93e:	eb 2f                	jmp    ffffffff8020f96f <_RME_Cpt_Rem+0x38a>
    else
    {
        RME_COV_MARKER();

        /* Helping also applies here */
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8020f940:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f944:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020f948:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020f94d:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f950:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f953:	e8 06 ce ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f958:	48 85 c0             	test   %rax,%rax
ffffffff8020f95b:	0f 94 c0             	sete   %al
ffffffff8020f95e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f961:	48 85 c0             	test   %rax,%rax
ffffffff8020f964:	74 09                	je     ffffffff8020f96f <_RME_Cpt_Rem+0x38a>
ffffffff8020f966:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f96d:	eb 05                	jmp    ffffffff8020f974 <_RME_Cpt_Rem+0x38f>
    }
    
    return 0;
ffffffff8020f96f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020f974:	c9                   	leave
ffffffff8020f975:	c3                   	ret

ffffffff8020f976 <_RME_Pgt_Boot_Crt>:
                            rme_ptr_t Vaddr,
                            rme_ptr_t Base,
                            rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order,
                            rme_ptr_t Num_Order)
{
ffffffff8020f976:	f3 0f 1e fa          	endbr64
ffffffff8020f97a:	55                   	push   %rbp
ffffffff8020f97b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020f97e:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020f982:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020f986:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020f98a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020f98e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020f992:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
ffffffff8020f996:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Table_Size;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020f99a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020f99e:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020f9a2:	48 01 d0             	add    %rdx,%rax
ffffffff8020f9a5:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff8020f9a9:	76 0c                	jbe    ffffffff8020f9b7 <_RME_Pgt_Boot_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8020f9ab:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020f9b2:	e9 e9 03 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f9b7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f9bb:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020f9c0:	48 85 c0             	test   %rax,%rax
ffffffff8020f9c3:	0f 85 98 00 00 00    	jne    ffffffff8020fa61 <_RME_Pgt_Boot_Crt+0xeb>
ffffffff8020f9c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f9cd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f9d1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020f9d5:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f9d8:	0f 93 c0             	setae  %al
ffffffff8020f9db:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f9de:	48 85 c0             	test   %rax,%rax
ffffffff8020f9e1:	74 0c                	je     ffffffff8020f9ef <_RME_Pgt_Boot_Crt+0x79>
ffffffff8020f9e3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f9ea:	e9 b1 03 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020f9ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f9f3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f9f7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f9fa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f9fe:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fa02:	48 01 d0             	add    %rdx,%rax
ffffffff8020fa05:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fa09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fa0d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fa10:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fa14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fa18:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fa1c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fa1f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fa23:	0f 94 c0             	sete   %al
ffffffff8020fa26:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa29:	48 85 c0             	test   %rax,%rax
ffffffff8020fa2c:	74 0c                	je     ffffffff8020fa3a <_RME_Pgt_Boot_Crt+0xc4>
ffffffff8020fa2e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fa35:	e9 66 03 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fa3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fa3e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fa42:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fa46:	0f 95 c0             	setne  %al
ffffffff8020fa49:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa4c:	48 85 c0             	test   %rax,%rax
ffffffff8020fa4f:	0f 84 4c 01 00 00    	je     ffffffff8020fba1 <_RME_Pgt_Boot_Crt+0x22b>
ffffffff8020fa55:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fa5c:	e9 3f 03 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fa61:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa65:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fa69:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fa6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fa70:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fa74:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fa77:	0f 93 c0             	setae  %al
ffffffff8020fa7a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa7d:	48 85 c0             	test   %rax,%rax
ffffffff8020fa80:	74 0c                	je     ffffffff8020fa8e <_RME_Pgt_Boot_Crt+0x118>
ffffffff8020fa82:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fa89:	e9 12 03 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fa8e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa92:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fa96:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fa9a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fa9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020faa1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020faa5:	48 01 d0             	add    %rdx,%rax
ffffffff8020faa8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020faac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fab0:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fab3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fab7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fabb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fabf:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fac2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fac6:	0f 94 c0             	sete   %al
ffffffff8020fac9:	0f b6 c0             	movzbl %al,%eax
ffffffff8020facc:	48 85 c0             	test   %rax,%rax
ffffffff8020facf:	74 0c                	je     ffffffff8020fadd <_RME_Pgt_Boot_Crt+0x167>
ffffffff8020fad1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fad8:	e9 c3 02 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fadd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fae1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fae5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fae9:	0f 95 c0             	setne  %al
ffffffff8020faec:	0f b6 c0             	movzbl %al,%eax
ffffffff8020faef:	48 85 c0             	test   %rax,%rax
ffffffff8020faf2:	74 0c                	je     ffffffff8020fb00 <_RME_Pgt_Boot_Crt+0x18a>
ffffffff8020faf4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fafb:	e9 a0 02 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fb00:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fb04:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fb09:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb10:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fb14:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fb17:	0f 93 c0             	setae  %al
ffffffff8020fb1a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb1d:	48 85 c0             	test   %rax,%rax
ffffffff8020fb20:	74 0c                	je     ffffffff8020fb2e <_RME_Pgt_Boot_Crt+0x1b8>
ffffffff8020fb22:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fb29:	e9 72 02 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fb2e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fb32:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fb37:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fb3b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb42:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fb46:	48 01 d0             	add    %rdx,%rax
ffffffff8020fb49:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fb4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb51:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fb54:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fb58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fb5c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fb60:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fb63:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fb67:	0f 94 c0             	sete   %al
ffffffff8020fb6a:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb6d:	48 85 c0             	test   %rax,%rax
ffffffff8020fb70:	74 0c                	je     ffffffff8020fb7e <_RME_Pgt_Boot_Crt+0x208>
ffffffff8020fb72:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fb79:	e9 22 02 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fb7e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fb82:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fb86:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fb8a:	0f 95 c0             	setne  %al
ffffffff8020fb8d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb90:	48 85 c0             	test   %rax,%rax
ffffffff8020fb93:	74 0c                	je     ffffffff8020fba1 <_RME_Pgt_Boot_Crt+0x22b>
ffffffff8020fb95:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fb9c:	e9 ff 01 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fba1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fba5:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020fba9:	83 e0 01             	and    $0x1,%eax
ffffffff8020fbac:	48 85 c0             	test   %rax,%rax
ffffffff8020fbaf:	0f 94 c0             	sete   %al
ffffffff8020fbb2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fbb5:	48 85 c0             	test   %rax,%rax
ffffffff8020fbb8:	74 0c                	je     ffffffff8020fbc6 <_RME_Pgt_Boot_Crt+0x250>
ffffffff8020fbba:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020fbc1:	e9 da 01 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
    
    /* Check if these parameters are feasible */
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)!=0)
ffffffff8020fbc6:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8020fbca:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff8020fbce:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020fbd2:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
ffffffff8020fbd6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020fbda:	49 89 f8             	mov    %rdi,%r8
ffffffff8020fbdd:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fbe0:	e8 17 6c 01 00       	call   ffffffff802267fc <__RME_Pgt_Check>
ffffffff8020fbe5:	48 85 c0             	test   %rax,%rax
ffffffff8020fbe8:	74 0c                	je     ffffffff8020fbf6 <_RME_Pgt_Boot_Crt+0x280>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8020fbea:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020fbf1:	e9 aa 01 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if the base address is properly aligned to the total order of the page table */
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020fbf6:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020fbfa:	89 c2                	mov    %eax,%edx
ffffffff8020fbfc:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fc00:	01 c2                	add    %eax,%edx
ffffffff8020fc02:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff8020fc07:	29 d0                	sub    %edx,%eax
ffffffff8020fc09:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8020fc10:	89 c1                	mov    %eax,%ecx
ffffffff8020fc12:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020fc15:	48 89 d0             	mov    %rdx,%rax
ffffffff8020fc18:	48 23 45 b8          	and    -0x48(%rbp),%rax
ffffffff8020fc1c:	48 85 c0             	test   %rax,%rax
ffffffff8020fc1f:	74 0c                	je     ffffffff8020fc2d <_RME_Pgt_Boot_Crt+0x2b7>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_HW;
ffffffff8020fc21:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020fc28:	e9 73 01 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020fc2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fc31:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fc35:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020fc39:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fc3c:	0f 93 c0             	setae  %al
ffffffff8020fc3f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fc42:	48 85 c0             	test   %rax,%rax
ffffffff8020fc45:	74 0c                	je     ffffffff8020fc53 <_RME_Pgt_Boot_Crt+0x2dd>
ffffffff8020fc47:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fc4e:	e9 4d 01 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fc53:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020fc57:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fc5b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fc5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fc62:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fc66:	48 01 d0             	add    %rdx,%rax
ffffffff8020fc69:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fc6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fc71:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fc78:	00 00 00 
ffffffff8020fc7b:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020fc80:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fc83:	e8 d6 ca ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020fc88:	48 85 c0             	test   %rax,%rax
ffffffff8020fc8b:	0f 94 c0             	sete   %al
ffffffff8020fc8e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fc91:	48 85 c0             	test   %rax,%rax
ffffffff8020fc94:	74 0c                	je     ffffffff8020fca2 <_RME_Pgt_Boot_Crt+0x32c>
ffffffff8020fc96:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020fc9d:	e9 fe 00 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
ffffffff8020fca2:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020fca7:	e8 65 cb ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8020fcac:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020fcb0:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Are we creating the top level? */
    if(Is_Top!=0U)
ffffffff8020fcb4:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8020fcb9:	74 1b                	je     ffffffff8020fcd6 <_RME_Pgt_Boot_Crt+0x360>
    {
        RME_COV_MARKER();
        
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fcbb:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fcbf:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020fcc4:	89 c1                	mov    %eax,%ecx
ffffffff8020fcc6:	d3 e2                	shl    %cl,%edx
ffffffff8020fcc8:	89 d0                	mov    %edx,%eax
ffffffff8020fcca:	48 98                	cltq
ffffffff8020fccc:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020fcd0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fcd4:	eb 19                	jmp    ffffffff8020fcef <_RME_Pgt_Boot_Crt+0x379>
    }
    else
    {
        RME_COV_MARKER();
        
        Table_Size=RME_PGT_SIZE_NOM(Num_Order);
ffffffff8020fcd6:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fcda:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020fcdf:	89 c1                	mov    %eax,%ecx
ffffffff8020fce1:	d3 e2                	shl    %cl,%edx
ffffffff8020fce3:	89 d0                	mov    %edx,%eax
ffffffff8020fce5:	48 98                	cltq
ffffffff8020fce7:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020fceb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020fcef:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020fcf3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020fcf7:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020fcfa:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fcfd:	e8 40 26 00 00       	call   ffffffff80212342 <_RME_Kot_Mark>
ffffffff8020fd02:	48 85 c0             	test   %rax,%rax
ffffffff8020fd05:	74 17                	je     ffffffff8020fd1e <_RME_Pgt_Boot_Crt+0x3a8>
    {
        RME_COV_MARKER();
    
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020fd07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd0b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020fd12:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020fd19:	e9 82 00 00 00       	jmp    ffffffff8020fda0 <_RME_Pgt_Boot_Crt+0x42a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Header init */
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020fd1e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd22:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020fd29:	00 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020fd2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd2e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020fd32:	48 89 50 18          	mov    %rdx,0x18(%rax)
    /* Set the property of the page table to only act as source and creating process */
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ADD_SRC|
ffffffff8020fd36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd3a:	48 be c1 00 00 00 f0 	movabs $0xfffffff0000000c1,%rsi
ffffffff8020fd41:	ff ff ff 
ffffffff8020fd44:	48 89 70 10          	mov    %rsi,0x10(%rax)
                       RME_PGT_FLAG_PRC_CRT|RME_PGT_FLAG_PRC_PGT;
    
    /* Info init */
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020fd48:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020fd4c:	48 0b 45 b0          	or     -0x50(%rbp),%rax
ffffffff8020fd50:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fd53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd57:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fd5b:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020fd5f:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020fd63:	48 0b 45 18          	or     0x18(%rbp),%rax
ffffffff8020fd67:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fd6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd6e:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Pgt_Crt->ASID=0U;
ffffffff8020fd72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd76:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8020fd7d:	00 

    /* Object init - need to add all kernel pages if they are top-level */
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020fd7e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd82:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fd85:	e8 04 6b 01 00       	call   ffffffff8022688e <__RME_Pgt_Init>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Establish cap */
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020fd8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd8e:	48 bf 00 00 00 00 00 	movabs $0x4000000000000,%rdi
ffffffff8020fd95:	00 04 00 
ffffffff8020fd98:	48 89 38             	mov    %rdi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PGT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020fd9b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020fda0:	c9                   	leave
ffffffff8020fda1:	c3                   	ret

ffffffff8020fda2 <_RME_Pgt_Boot_Add>:
rme_ret_t _RME_Pgt_Boot_Add(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Pgt, 
                            rme_ptr_t Paddr,
                            rme_ptr_t Pos,
                            rme_ptr_t Flag)
{
ffffffff8020fda2:	f3 0f 1e fa          	endbr64
ffffffff8020fda6:	55                   	push   %rbp
ffffffff8020fda7:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020fdaa:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020fdae:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020fdb2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020fdb6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020fdba:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020fdbe:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Pgt* Pgt_Op;
    rme_ptr_t Type_Stat;
    rme_ptr_t Szord;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020fdc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fdc6:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020fdcb:	48 85 c0             	test   %rax,%rax
ffffffff8020fdce:	0f 85 98 00 00 00    	jne    ffffffff8020fe6c <_RME_Pgt_Boot_Add+0xca>
ffffffff8020fdd4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fdd8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fddc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020fde0:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fde3:	0f 93 c0             	setae  %al
ffffffff8020fde6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fde9:	48 85 c0             	test   %rax,%rax
ffffffff8020fdec:	74 0c                	je     ffffffff8020fdfa <_RME_Pgt_Boot_Add+0x58>
ffffffff8020fdee:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fdf5:	e9 33 02 00 00       	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fdfa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fdfe:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fe02:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fe09:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fe0d:	48 01 d0             	add    %rdx,%rax
ffffffff8020fe10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fe14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fe18:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fe1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fe1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fe23:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fe27:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fe2a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fe2e:	0f 94 c0             	sete   %al
ffffffff8020fe31:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe34:	48 85 c0             	test   %rax,%rax
ffffffff8020fe37:	74 0c                	je     ffffffff8020fe45 <_RME_Pgt_Boot_Add+0xa3>
ffffffff8020fe39:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fe40:	e9 e8 01 00 00       	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fe49:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fe4d:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020fe51:	0f 95 c0             	setne  %al
ffffffff8020fe54:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe57:	48 85 c0             	test   %rax,%rax
ffffffff8020fe5a:	0f 84 4c 01 00 00    	je     ffffffff8020ffac <_RME_Pgt_Boot_Add+0x20a>
ffffffff8020fe60:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fe67:	e9 c1 01 00 00       	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe6c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fe70:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fe74:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fe7b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fe7f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fe82:	0f 93 c0             	setae  %al
ffffffff8020fe85:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe88:	48 85 c0             	test   %rax,%rax
ffffffff8020fe8b:	74 0c                	je     ffffffff8020fe99 <_RME_Pgt_Boot_Add+0xf7>
ffffffff8020fe8d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fe94:	e9 94 01 00 00       	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe99:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fe9d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fea1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fea5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fea8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020feac:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020feb0:	48 01 d0             	add    %rdx,%rax
ffffffff8020feb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020feb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020febb:	48 8b 00             	mov    (%rax),%rax
ffffffff8020febe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fec2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fec6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020feca:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fecd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fed1:	0f 94 c0             	sete   %al
ffffffff8020fed4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fed7:	48 85 c0             	test   %rax,%rax
ffffffff8020feda:	74 0c                	je     ffffffff8020fee8 <_RME_Pgt_Boot_Add+0x146>
ffffffff8020fedc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fee3:	e9 45 01 00 00       	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fee8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020feec:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fef0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fef4:	0f 95 c0             	setne  %al
ffffffff8020fef7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fefa:	48 85 c0             	test   %rax,%rax
ffffffff8020fefd:	74 0c                	je     ffffffff8020ff0b <_RME_Pgt_Boot_Add+0x169>
ffffffff8020feff:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ff06:	e9 22 01 00 00       	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ff0f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ff14:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff1b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ff1f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ff22:	0f 93 c0             	setae  %al
ffffffff8020ff25:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff28:	48 85 c0             	test   %rax,%rax
ffffffff8020ff2b:	74 0c                	je     ffffffff8020ff39 <_RME_Pgt_Boot_Add+0x197>
ffffffff8020ff2d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ff34:	e9 f4 00 00 00       	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff39:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ff3d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ff42:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ff46:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff4d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ff51:	48 01 d0             	add    %rdx,%rax
ffffffff8020ff54:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ff58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff5c:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ff5f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ff63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ff67:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ff6b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ff6e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ff72:	0f 94 c0             	sete   %al
ffffffff8020ff75:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff78:	48 85 c0             	test   %rax,%rax
ffffffff8020ff7b:	74 0c                	je     ffffffff8020ff89 <_RME_Pgt_Boot_Add+0x1e7>
ffffffff8020ff7d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ff84:	e9 a4 00 00 00       	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ff8d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ff91:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020ff95:	0f 95 c0             	setne  %al
ffffffff8020ff98:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff9b:	48 85 c0             	test   %rax,%rax
ffffffff8020ff9e:	74 0c                	je     ffffffff8020ffac <_RME_Pgt_Boot_Add+0x20a>
ffffffff8020ffa0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ffa7:	e9 81 00 00 00       	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen, but don't check their properties */
    RME_CAP_CHECK(Pgt_Op,0U);

    Szord=RME_PGT_SIZEORD(Pgt_Op->Order);
ffffffff8020ffac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ffb0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ffb4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ffb8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        /* No action required */
    }
#endif

    /* See if the mapping range and the granularity is allowed */
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020ffbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ffc0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ffc4:	89 c2                	mov    %eax,%edx
ffffffff8020ffc6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020ffca:	89 d1                	mov    %edx,%ecx
ffffffff8020ffcc:	48 d3 e8             	shr    %cl,%rax
ffffffff8020ffcf:	48 85 c0             	test   %rax,%rax
ffffffff8020ffd2:	75 25                	jne    ffffffff8020fff9 <_RME_Pgt_Boot_Add+0x257>
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020ffd4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ffd8:	89 c2                	mov    %eax,%edx
ffffffff8020ffda:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff8020ffdf:	29 d0                	sub    %edx,%eax
ffffffff8020ffe1:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8020ffe8:	89 c1                	mov    %eax,%ecx
ffffffff8020ffea:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020ffed:	48 89 d0             	mov    %rdx,%rax
ffffffff8020fff0:	48 23 45 c8          	and    -0x38(%rbp),%rax
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020fff4:	48 85 c0             	test   %rax,%rax
ffffffff8020fff7:	74 09                	je     ffffffff80210002 <_RME_Pgt_Boot_Add+0x260>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff8020fff9:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210000:	eb 2b                	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Map(Pgt_Op,Paddr,Pos,Flag)!=0)
ffffffff80210002:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff80210006:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021000a:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff8021000e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210012:	48 89 c7             	mov    %rax,%rdi
ffffffff80210015:	e8 5d 69 01 00       	call   ffffffff80226977 <__RME_Pgt_Page_Map>
ffffffff8021001a:	48 85 c0             	test   %rax,%rax
ffffffff8021001d:	74 09                	je     ffffffff80210028 <_RME_Pgt_Boot_Add+0x286>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_MAP;
ffffffff8021001f:	48 c7 c0 9a ff ff ff 	mov    $0xffffffffffffff9a,%rax
ffffffff80210026:	eb 05                	jmp    ffffffff8021002d <_RME_Pgt_Boot_Add+0x28b>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff80210028:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021002d:	c9                   	leave
ffffffff8021002e:	c3                   	ret

ffffffff8021002f <_RME_Pgt_Boot_Con>:
rme_ret_t _RME_Pgt_Boot_Con(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Pgt_Parent,
                            rme_ptr_t Pos,
                            rme_cid_t Cap_Pgt_Child,
                            rme_ptr_t Flag_Child)
{
ffffffff8021002f:	f3 0f 1e fa          	endbr64
ffffffff80210033:	55                   	push   %rbp
ffffffff80210034:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210037:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8021003b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021003f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80210043:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80210047:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff8021004b:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
    rme_ptr_t Begin_Parent;
    rme_ptr_t End_Parent;
#endif
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8021004f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210053:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210058:	48 85 c0             	test   %rax,%rax
ffffffff8021005b:	0f 85 98 00 00 00    	jne    ffffffff802100f9 <_RME_Pgt_Boot_Con+0xca>
ffffffff80210061:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210065:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210069:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021006d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210070:	0f 93 c0             	setae  %al
ffffffff80210073:	0f b6 c0             	movzbl %al,%eax
ffffffff80210076:	48 85 c0             	test   %rax,%rax
ffffffff80210079:	74 0c                	je     ffffffff80210087 <_RME_Pgt_Boot_Con+0x58>
ffffffff8021007b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210082:	e9 a0 04 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210087:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021008b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021008f:	48 89 c2             	mov    %rax,%rdx
ffffffff80210092:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210096:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021009a:	48 01 d0             	add    %rdx,%rax
ffffffff8021009d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802100a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802100a5:	48 8b 00             	mov    (%rax),%rax
ffffffff802100a8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802100ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802100b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802100b4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802100b7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802100bb:	0f 94 c0             	sete   %al
ffffffff802100be:	0f b6 c0             	movzbl %al,%eax
ffffffff802100c1:	48 85 c0             	test   %rax,%rax
ffffffff802100c4:	74 0c                	je     ffffffff802100d2 <_RME_Pgt_Boot_Con+0xa3>
ffffffff802100c6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802100cd:	e9 55 04 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802100d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802100d6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802100da:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802100de:	0f 95 c0             	setne  %al
ffffffff802100e1:	0f b6 c0             	movzbl %al,%eax
ffffffff802100e4:	48 85 c0             	test   %rax,%rax
ffffffff802100e7:	0f 84 4c 01 00 00    	je     ffffffff80210239 <_RME_Pgt_Boot_Con+0x20a>
ffffffff802100ed:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802100f4:	e9 2e 04 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802100f9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802100fd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210101:	48 89 c2             	mov    %rax,%rdx
ffffffff80210104:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210108:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021010c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021010f:	0f 93 c0             	setae  %al
ffffffff80210112:	0f b6 c0             	movzbl %al,%eax
ffffffff80210115:	48 85 c0             	test   %rax,%rax
ffffffff80210118:	74 0c                	je     ffffffff80210126 <_RME_Pgt_Boot_Con+0xf7>
ffffffff8021011a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210121:	e9 01 04 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210126:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021012a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021012e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210132:	48 89 c2             	mov    %rax,%rdx
ffffffff80210135:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210139:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021013d:	48 01 d0             	add    %rdx,%rax
ffffffff80210140:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210144:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210148:	48 8b 00             	mov    (%rax),%rax
ffffffff8021014b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021014f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210153:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210157:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021015a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021015e:	0f 94 c0             	sete   %al
ffffffff80210161:	0f b6 c0             	movzbl %al,%eax
ffffffff80210164:	48 85 c0             	test   %rax,%rax
ffffffff80210167:	74 0c                	je     ffffffff80210175 <_RME_Pgt_Boot_Con+0x146>
ffffffff80210169:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210170:	e9 b2 03 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210175:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210179:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021017d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210181:	0f 95 c0             	setne  %al
ffffffff80210184:	0f b6 c0             	movzbl %al,%eax
ffffffff80210187:	48 85 c0             	test   %rax,%rax
ffffffff8021018a:	74 0c                	je     ffffffff80210198 <_RME_Pgt_Boot_Con+0x169>
ffffffff8021018c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210193:	e9 8f 03 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210198:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021019c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802101a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802101a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802101a8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802101ac:	48 39 c2             	cmp    %rax,%rdx
ffffffff802101af:	0f 93 c0             	setae  %al
ffffffff802101b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802101b5:	48 85 c0             	test   %rax,%rax
ffffffff802101b8:	74 0c                	je     ffffffff802101c6 <_RME_Pgt_Boot_Con+0x197>
ffffffff802101ba:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802101c1:	e9 61 03 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802101c6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802101ca:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802101cf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802101d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802101d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802101da:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802101de:	48 01 d0             	add    %rdx,%rax
ffffffff802101e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802101e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802101e9:	48 8b 00             	mov    (%rax),%rax
ffffffff802101ec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802101f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802101f4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802101f8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802101fb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802101ff:	0f 94 c0             	sete   %al
ffffffff80210202:	0f b6 c0             	movzbl %al,%eax
ffffffff80210205:	48 85 c0             	test   %rax,%rax
ffffffff80210208:	74 0c                	je     ffffffff80210216 <_RME_Pgt_Boot_Con+0x1e7>
ffffffff8021020a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210211:	e9 11 03 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210216:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021021a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021021e:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210222:	0f 95 c0             	setne  %al
ffffffff80210225:	0f b6 c0             	movzbl %al,%eax
ffffffff80210228:	48 85 c0             	test   %rax,%rax
ffffffff8021022b:	74 0c                	je     ffffffff80210239 <_RME_Pgt_Boot_Con+0x20a>
ffffffff8021022d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210234:	e9 ee 02 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff80210239:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021023d:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210242:	48 85 c0             	test   %rax,%rax
ffffffff80210245:	0f 85 98 00 00 00    	jne    ffffffff802102e3 <_RME_Pgt_Boot_Con+0x2b4>
ffffffff8021024b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021024f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210253:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80210257:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021025a:	0f 93 c0             	setae  %al
ffffffff8021025d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210260:	48 85 c0             	test   %rax,%rax
ffffffff80210263:	74 0c                	je     ffffffff80210271 <_RME_Pgt_Boot_Con+0x242>
ffffffff80210265:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021026c:	e9 b6 02 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210271:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210275:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210279:	48 89 c2             	mov    %rax,%rdx
ffffffff8021027c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210280:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210284:	48 01 d0             	add    %rdx,%rax
ffffffff80210287:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021028b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021028f:	48 8b 00             	mov    (%rax),%rax
ffffffff80210292:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210296:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021029a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021029e:	0f b7 c0             	movzwl %ax,%eax
ffffffff802102a1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802102a5:	0f 94 c0             	sete   %al
ffffffff802102a8:	0f b6 c0             	movzbl %al,%eax
ffffffff802102ab:	48 85 c0             	test   %rax,%rax
ffffffff802102ae:	74 0c                	je     ffffffff802102bc <_RME_Pgt_Boot_Con+0x28d>
ffffffff802102b0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802102b7:	e9 6b 02 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802102bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802102c0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802102c4:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802102c8:	0f 95 c0             	setne  %al
ffffffff802102cb:	0f b6 c0             	movzbl %al,%eax
ffffffff802102ce:	48 85 c0             	test   %rax,%rax
ffffffff802102d1:	0f 84 4c 01 00 00    	je     ffffffff80210423 <_RME_Pgt_Boot_Con+0x3f4>
ffffffff802102d7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802102de:	e9 44 02 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802102e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802102e7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802102eb:	48 89 c2             	mov    %rax,%rdx
ffffffff802102ee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802102f2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802102f6:	48 39 c2             	cmp    %rax,%rdx
ffffffff802102f9:	0f 93 c0             	setae  %al
ffffffff802102fc:	0f b6 c0             	movzbl %al,%eax
ffffffff802102ff:	48 85 c0             	test   %rax,%rax
ffffffff80210302:	74 0c                	je     ffffffff80210310 <_RME_Pgt_Boot_Con+0x2e1>
ffffffff80210304:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021030b:	e9 17 02 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210310:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210314:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210318:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021031c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021031f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210323:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210327:	48 01 d0             	add    %rdx,%rax
ffffffff8021032a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021032e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210332:	48 8b 00             	mov    (%rax),%rax
ffffffff80210335:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210339:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021033d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210341:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210344:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210348:	0f 94 c0             	sete   %al
ffffffff8021034b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021034e:	48 85 c0             	test   %rax,%rax
ffffffff80210351:	74 0c                	je     ffffffff8021035f <_RME_Pgt_Boot_Con+0x330>
ffffffff80210353:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021035a:	e9 c8 01 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021035f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210363:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210367:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021036b:	0f 95 c0             	setne  %al
ffffffff8021036e:	0f b6 c0             	movzbl %al,%eax
ffffffff80210371:	48 85 c0             	test   %rax,%rax
ffffffff80210374:	74 0c                	je     ffffffff80210382 <_RME_Pgt_Boot_Con+0x353>
ffffffff80210376:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021037d:	e9 a5 01 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210382:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210386:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021038b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021038e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210392:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210396:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210399:	0f 93 c0             	setae  %al
ffffffff8021039c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021039f:	48 85 c0             	test   %rax,%rax
ffffffff802103a2:	74 0c                	je     ffffffff802103b0 <_RME_Pgt_Boot_Con+0x381>
ffffffff802103a4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802103ab:	e9 77 01 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802103b0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802103b4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802103b9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802103bd:	48 89 c2             	mov    %rax,%rdx
ffffffff802103c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103c4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802103c8:	48 01 d0             	add    %rdx,%rax
ffffffff802103cb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802103cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103d3:	48 8b 00             	mov    (%rax),%rax
ffffffff802103d6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802103da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802103de:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802103e2:	0f b7 c0             	movzwl %ax,%eax
ffffffff802103e5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802103e9:	0f 94 c0             	sete   %al
ffffffff802103ec:	0f b6 c0             	movzbl %al,%eax
ffffffff802103ef:	48 85 c0             	test   %rax,%rax
ffffffff802103f2:	74 0c                	je     ffffffff80210400 <_RME_Pgt_Boot_Con+0x3d1>
ffffffff802103f4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802103fb:	e9 27 01 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210400:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210404:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210408:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021040c:	0f 95 c0             	setne  %al
ffffffff8021040f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210412:	48 85 c0             	test   %rax,%rax
ffffffff80210415:	74 0c                	je     ffffffff80210423 <_RME_Pgt_Boot_Con+0x3f4>
ffffffff80210417:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021041e:	e9 04 01 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
    /* Check if both page table caps are not frozen but don't check flags */
    RME_CAP_CHECK(Pgt_Parent,0U);
    RME_CAP_CHECK(Pgt_Child,0U);
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff80210423:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210427:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021042b:	89 c2                	mov    %eax,%edx
ffffffff8021042d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210431:	89 d1                	mov    %edx,%ecx
ffffffff80210433:	48 d3 e8             	shr    %cl,%rax
ffffffff80210436:	48 85 c0             	test   %rax,%rax
ffffffff80210439:	74 0c                	je     ffffffff80210447 <_RME_Pgt_Boot_Con+0x418>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff8021043b:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210442:	e9 e0 00 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the child table falls within one slot of the parent table */
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff80210447:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021044b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021044f:	89 c2                	mov    %eax,%edx
ffffffff80210451:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210455:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210459:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021045d:	48 01 d0             	add    %rdx,%rax
ffffffff80210460:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff80210464:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210468:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021046c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210470:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Szord_Parent<Order_Child)
ffffffff80210474:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210478:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff8021047c:	73 0c                	jae    ffffffff8021048a <_RME_Pgt_Boot_Con+0x45b>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff8021047e:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210485:	e9 9d 00 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
        RME_COV_MARKER();
        /* No action required */
    }
#else
    /* Force no path compression when virtual mappings are enabled */
    if(Szord_Parent!=Order_Child)
ffffffff8021048a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021048e:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80210492:	74 0c                	je     ffffffff802104a0 <_RME_Pgt_Boot_Con+0x471>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80210494:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8021049b:	e9 87 00 00 00       	jmp    ffffffff80210527 <_RME_Pgt_Boot_Con+0x4f8>
    }
#endif

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff802104a0:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff802104a4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802104a8:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff802104ac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104b0:	48 89 c7             	mov    %rax,%rdi
ffffffff802104b3:	e8 a0 66 01 00       	call   ffffffff80226b58 <__RME_Pgt_Pgdir_Map>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff802104b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104bc:	48 8b 00             	mov    (%rax),%rax
ffffffff802104bf:	89 c0                	mov    %eax,%eax
ffffffff802104c1:	48 85 c0             	test   %rax,%rax
ffffffff802104c4:	74 0a                	je     ffffffff802104d0 <_RME_Pgt_Boot_Con+0x4a1>
ffffffff802104c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104ca:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802104ce:	eb 04                	jmp    ffffffff802104d4 <_RME_Pgt_Boot_Con+0x4a5>
ffffffff802104d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104d4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1U);
ffffffff802104d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802104dc:	48 83 c0 08          	add    $0x8,%rax
ffffffff802104e0:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802104e5:	48 89 c7             	mov    %rax,%rdi
ffffffff802104e8:	e8 a6 c2 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff802104ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802104f1:	48 8b 00             	mov    (%rax),%rax
ffffffff802104f4:	89 c0                	mov    %eax,%eax
ffffffff802104f6:	48 85 c0             	test   %rax,%rax
ffffffff802104f9:	74 0a                	je     ffffffff80210505 <_RME_Pgt_Boot_Con+0x4d6>
ffffffff802104fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802104ff:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80210503:	eb 04                	jmp    ffffffff80210509 <_RME_Pgt_Boot_Con+0x4da>
ffffffff80210505:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210509:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1U);
ffffffff8021050d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210511:	48 83 c0 08          	add    $0x8,%rax
ffffffff80210515:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021051a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021051d:	e8 71 c2 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80210522:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210527:	c9                   	leave
ffffffff80210528:	c3                   	ret

ffffffff80210529 <_RME_Pgt_Crt>:
                              rme_ptr_t Raddr,
                              rme_ptr_t Base,
                              rme_ptr_t Is_Top,
                              rme_ptr_t Size_Order,
                              rme_ptr_t Num_Order)
{
ffffffff80210529:	f3 0f 1e fa          	endbr64
ffffffff8021052d:	55                   	push   %rbp
ffffffff8021052e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210531:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80210535:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80210539:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021053d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80210541:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80210545:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80210549:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Vaddr;
    rme_ptr_t Table_Size;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8021054d:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80210551:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210555:	48 01 d0             	add    %rdx,%rax
ffffffff80210558:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff8021055c:	76 0c                	jbe    ffffffff8021056a <_RME_Pgt_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8021055e:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff80210565:	e9 93 06 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021056a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021056e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210573:	48 85 c0             	test   %rax,%rax
ffffffff80210576:	0f 85 98 00 00 00    	jne    ffffffff80210614 <_RME_Pgt_Crt+0xeb>
ffffffff8021057c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210580:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210584:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210588:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021058b:	0f 93 c0             	setae  %al
ffffffff8021058e:	0f b6 c0             	movzbl %al,%eax
ffffffff80210591:	48 85 c0             	test   %rax,%rax
ffffffff80210594:	74 0c                	je     ffffffff802105a2 <_RME_Pgt_Crt+0x79>
ffffffff80210596:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021059d:	e9 5b 06 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff802105a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802105a6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802105aa:	48 89 c2             	mov    %rax,%rdx
ffffffff802105ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802105b1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802105b5:	48 01 d0             	add    %rdx,%rax
ffffffff802105b8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802105bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802105c0:	48 8b 00             	mov    (%rax),%rax
ffffffff802105c3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802105c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802105cb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802105cf:	0f b7 c0             	movzwl %ax,%eax
ffffffff802105d2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802105d6:	0f 94 c0             	sete   %al
ffffffff802105d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802105dc:	48 85 c0             	test   %rax,%rax
ffffffff802105df:	74 0c                	je     ffffffff802105ed <_RME_Pgt_Crt+0xc4>
ffffffff802105e1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802105e8:	e9 10 06 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff802105ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802105f1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802105f5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802105f9:	0f 95 c0             	setne  %al
ffffffff802105fc:	0f b6 c0             	movzbl %al,%eax
ffffffff802105ff:	48 85 c0             	test   %rax,%rax
ffffffff80210602:	0f 84 4c 01 00 00    	je     ffffffff80210754 <_RME_Pgt_Crt+0x22b>
ffffffff80210608:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021060f:	e9 e9 05 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff80210614:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210618:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021061c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021061f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210623:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210627:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021062a:	0f 93 c0             	setae  %al
ffffffff8021062d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210630:	48 85 c0             	test   %rax,%rax
ffffffff80210633:	74 0c                	je     ffffffff80210641 <_RME_Pgt_Crt+0x118>
ffffffff80210635:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021063c:	e9 bc 05 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff80210641:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210645:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210649:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021064d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210650:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210654:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210658:	48 01 d0             	add    %rdx,%rax
ffffffff8021065b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021065f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210663:	48 8b 00             	mov    (%rax),%rax
ffffffff80210666:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021066a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021066e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210672:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210675:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210679:	0f 94 c0             	sete   %al
ffffffff8021067c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021067f:	48 85 c0             	test   %rax,%rax
ffffffff80210682:	74 0c                	je     ffffffff80210690 <_RME_Pgt_Crt+0x167>
ffffffff80210684:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021068b:	e9 6d 05 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff80210690:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210694:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210698:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021069c:	0f 95 c0             	setne  %al
ffffffff8021069f:	0f b6 c0             	movzbl %al,%eax
ffffffff802106a2:	48 85 c0             	test   %rax,%rax
ffffffff802106a5:	74 0c                	je     ffffffff802106b3 <_RME_Pgt_Crt+0x18a>
ffffffff802106a7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802106ae:	e9 4a 05 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff802106b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802106b7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802106bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802106bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802106c3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802106c7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802106ca:	0f 93 c0             	setae  %al
ffffffff802106cd:	0f b6 c0             	movzbl %al,%eax
ffffffff802106d0:	48 85 c0             	test   %rax,%rax
ffffffff802106d3:	74 0c                	je     ffffffff802106e1 <_RME_Pgt_Crt+0x1b8>
ffffffff802106d5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802106dc:	e9 1c 05 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff802106e1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802106e5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802106ea:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802106ee:	48 89 c2             	mov    %rax,%rdx
ffffffff802106f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802106f5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802106f9:	48 01 d0             	add    %rdx,%rax
ffffffff802106fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210700:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210704:	48 8b 00             	mov    (%rax),%rax
ffffffff80210707:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021070b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021070f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210713:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210716:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021071a:	0f 94 c0             	sete   %al
ffffffff8021071d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210720:	48 85 c0             	test   %rax,%rax
ffffffff80210723:	74 0c                	je     ffffffff80210731 <_RME_Pgt_Crt+0x208>
ffffffff80210725:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021072c:	e9 cc 04 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff80210731:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210735:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210739:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021073d:	0f 95 c0             	setne  %al
ffffffff80210740:	0f b6 c0             	movzbl %al,%eax
ffffffff80210743:	48 85 c0             	test   %rax,%rax
ffffffff80210746:	74 0c                	je     ffffffff80210754 <_RME_Pgt_Crt+0x22b>
ffffffff80210748:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021074f:	e9 a9 04 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80210754:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210758:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021075d:	48 85 c0             	test   %rax,%rax
ffffffff80210760:	0f 85 98 00 00 00    	jne    ffffffff802107fe <_RME_Pgt_Crt+0x2d5>
ffffffff80210766:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021076a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021076e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80210772:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210775:	0f 93 c0             	setae  %al
ffffffff80210778:	0f b6 c0             	movzbl %al,%eax
ffffffff8021077b:	48 85 c0             	test   %rax,%rax
ffffffff8021077e:	74 0c                	je     ffffffff8021078c <_RME_Pgt_Crt+0x263>
ffffffff80210780:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210787:	e9 71 04 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff8021078c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210790:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210794:	48 89 c2             	mov    %rax,%rdx
ffffffff80210797:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021079b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021079f:	48 01 d0             	add    %rdx,%rax
ffffffff802107a2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802107a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802107aa:	48 8b 00             	mov    (%rax),%rax
ffffffff802107ad:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802107b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802107b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802107b9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802107bc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802107c0:	0f 94 c0             	sete   %al
ffffffff802107c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802107c6:	48 85 c0             	test   %rax,%rax
ffffffff802107c9:	74 0c                	je     ffffffff802107d7 <_RME_Pgt_Crt+0x2ae>
ffffffff802107cb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802107d2:	e9 26 04 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff802107d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802107db:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802107df:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802107e3:	0f 95 c0             	setne  %al
ffffffff802107e6:	0f b6 c0             	movzbl %al,%eax
ffffffff802107e9:	48 85 c0             	test   %rax,%rax
ffffffff802107ec:	0f 84 4c 01 00 00    	je     ffffffff8021093e <_RME_Pgt_Crt+0x415>
ffffffff802107f2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802107f9:	e9 ff 03 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff802107fe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210802:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210806:	48 89 c2             	mov    %rax,%rdx
ffffffff80210809:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021080d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210811:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210814:	0f 93 c0             	setae  %al
ffffffff80210817:	0f b6 c0             	movzbl %al,%eax
ffffffff8021081a:	48 85 c0             	test   %rax,%rax
ffffffff8021081d:	74 0c                	je     ffffffff8021082b <_RME_Pgt_Crt+0x302>
ffffffff8021081f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210826:	e9 d2 03 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff8021082b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021082f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210833:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210837:	48 89 c2             	mov    %rax,%rdx
ffffffff8021083a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021083e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210842:	48 01 d0             	add    %rdx,%rax
ffffffff80210845:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210849:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021084d:	48 8b 00             	mov    (%rax),%rax
ffffffff80210850:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80210854:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210858:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021085c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021085f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210863:	0f 94 c0             	sete   %al
ffffffff80210866:	0f b6 c0             	movzbl %al,%eax
ffffffff80210869:	48 85 c0             	test   %rax,%rax
ffffffff8021086c:	74 0c                	je     ffffffff8021087a <_RME_Pgt_Crt+0x351>
ffffffff8021086e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210875:	e9 83 03 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff8021087a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021087e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210882:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210886:	0f 95 c0             	setne  %al
ffffffff80210889:	0f b6 c0             	movzbl %al,%eax
ffffffff8021088c:	48 85 c0             	test   %rax,%rax
ffffffff8021088f:	74 0c                	je     ffffffff8021089d <_RME_Pgt_Crt+0x374>
ffffffff80210891:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210898:	e9 60 03 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff8021089d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802108a1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802108a6:	48 89 c2             	mov    %rax,%rdx
ffffffff802108a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802108ad:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802108b1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802108b4:	0f 93 c0             	setae  %al
ffffffff802108b7:	0f b6 c0             	movzbl %al,%eax
ffffffff802108ba:	48 85 c0             	test   %rax,%rax
ffffffff802108bd:	74 0c                	je     ffffffff802108cb <_RME_Pgt_Crt+0x3a2>
ffffffff802108bf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802108c6:	e9 32 03 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff802108cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802108cf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802108d4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802108d8:	48 89 c2             	mov    %rax,%rdx
ffffffff802108db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802108df:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802108e3:	48 01 d0             	add    %rdx,%rax
ffffffff802108e6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802108ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802108ee:	48 8b 00             	mov    (%rax),%rax
ffffffff802108f1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802108f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802108f9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802108fd:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210900:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210904:	0f 94 c0             	sete   %al
ffffffff80210907:	0f b6 c0             	movzbl %al,%eax
ffffffff8021090a:	48 85 c0             	test   %rax,%rax
ffffffff8021090d:	74 0c                	je     ffffffff8021091b <_RME_Pgt_Crt+0x3f2>
ffffffff8021090f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210916:	e9 e2 02 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff8021091b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021091f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210923:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210927:	0f 95 c0             	setne  %al
ffffffff8021092a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021092d:	48 85 c0             	test   %rax,%rax
ffffffff80210930:	74 0c                	je     ffffffff8021093e <_RME_Pgt_Crt+0x415>
ffffffff80210932:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210939:	e9 bf 02 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff8021093e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210942:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210946:	83 e0 01             	and    $0x1,%eax
ffffffff80210949:	48 85 c0             	test   %rax,%rax
ffffffff8021094c:	0f 94 c0             	sete   %al
ffffffff8021094f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210952:	48 85 c0             	test   %rax,%rax
ffffffff80210955:	74 0c                	je     ffffffff80210963 <_RME_Pgt_Crt+0x43a>
ffffffff80210957:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021095e:	e9 9a 02 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
    
    /* Are we creating the top-level? */
    if(Is_Top!=0U)
ffffffff80210963:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff80210968:	74 1b                	je     ffffffff80210985 <_RME_Pgt_Crt+0x45c>
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8021096a:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff8021096e:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210973:	89 c1                	mov    %eax,%ecx
ffffffff80210975:	d3 e2                	shl    %cl,%edx
ffffffff80210977:	89 d0                	mov    %edx,%eax
ffffffff80210979:	48 98                	cltq
ffffffff8021097b:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8021097f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210983:	eb 19                	jmp    ffffffff8021099e <_RME_Pgt_Crt+0x475>
    }
    else
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_NOM(Num_Order);
ffffffff80210985:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210989:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021098e:	89 c1                	mov    %eax,%ecx
ffffffff80210990:	d3 e2                	shl    %cl,%edx
ffffffff80210992:	89 d0                	mov    %edx,%eax
ffffffff80210994:	48 98                	cltq
ffffffff80210996:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8021099a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    }
    
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff8021099e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802109a2:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802109a6:	83 e0 02             	and    $0x2,%eax
ffffffff802109a9:	48 85 c0             	test   %rax,%rax
ffffffff802109ac:	0f 94 c0             	sete   %al
ffffffff802109af:	0f b6 c0             	movzbl %al,%eax
ffffffff802109b2:	48 85 c0             	test   %rax,%rax
ffffffff802109b5:	74 0c                	je     ffffffff802109c3 <_RME_Pgt_Crt+0x49a>
ffffffff802109b7:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802109be:	e9 3a 02 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff802109c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802109c7:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802109cb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802109cf:	48 01 d0             	add    %rdx,%rax
ffffffff802109d2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802109d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802109da:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff802109de:	0f 92 c0             	setb   %al
ffffffff802109e1:	0f b6 c0             	movzbl %al,%eax
ffffffff802109e4:	48 85 c0             	test   %rax,%rax
ffffffff802109e7:	74 0c                	je     ffffffff802109f5 <_RME_Pgt_Crt+0x4cc>
ffffffff802109e9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802109f0:	e9 08 02 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff802109f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802109f9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802109fd:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80210a01:	0f 92 c0             	setb   %al
ffffffff80210a04:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a07:	48 85 c0             	test   %rax,%rax
ffffffff80210a0a:	74 0c                	je     ffffffff80210a18 <_RME_Pgt_Crt+0x4ef>
ffffffff80210a0c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a13:	e9 e5 01 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff80210a18:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80210a1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210a20:	48 01 d0             	add    %rdx,%rax
ffffffff80210a23:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80210a27:	0f 92 c0             	setb   %al
ffffffff80210a2a:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a2d:	48 85 c0             	test   %rax,%rax
ffffffff80210a30:	74 0c                	je     ffffffff80210a3e <_RME_Pgt_Crt+0x515>
ffffffff80210a32:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a39:	e9 bf 01 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff80210a3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210a42:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80210a46:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80210a4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210a4e:	48 01 c8             	add    %rcx,%rax
ffffffff80210a51:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80210a55:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210a58:	0f 92 c0             	setb   %al
ffffffff80210a5b:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a5e:	48 85 c0             	test   %rax,%rax
ffffffff80210a61:	74 0c                	je     ffffffff80210a6f <_RME_Pgt_Crt+0x546>
ffffffff80210a63:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a6a:	e9 8e 01 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>

    /* Check if these parameters are feasible */
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
ffffffff80210a6f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80210a73:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
ffffffff80210a77:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80210a7b:	48 8b 75 10          	mov    0x10(%rbp),%rsi
ffffffff80210a7f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80210a83:	49 89 f8             	mov    %rdi,%r8
ffffffff80210a86:	48 89 c7             	mov    %rax,%rdi
ffffffff80210a89:	e8 6e 5d 01 00       	call   ffffffff802267fc <__RME_Pgt_Check>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check if the start address is properly aligned to the total order of the page table */
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff80210a8e:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80210a92:	89 c2                	mov    %eax,%edx
ffffffff80210a94:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210a98:	01 c2                	add    %eax,%edx
ffffffff80210a9a:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff80210a9f:	29 d0                	sub    %edx,%eax
ffffffff80210aa1:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80210aa8:	89 c1                	mov    %eax,%ecx
ffffffff80210aaa:	48 d3 ea             	shr    %cl,%rdx
ffffffff80210aad:	48 89 d0             	mov    %rdx,%rax
ffffffff80210ab0:	48 23 45 a0          	and    -0x60(%rbp),%rax
ffffffff80210ab4:	48 85 c0             	test   %rax,%rax
ffffffff80210ab7:	74 0c                	je     ffffffff80210ac5 <_RME_Pgt_Crt+0x59c>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_HW;
ffffffff80210ab9:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff80210ac0:	e9 38 01 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff80210ac5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210ac9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210acd:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80210ad1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210ad4:	0f 93 c0             	setae  %al
ffffffff80210ad7:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ada:	48 85 c0             	test   %rax,%rax
ffffffff80210add:	74 0c                	je     ffffffff80210aeb <_RME_Pgt_Crt+0x5c2>
ffffffff80210adf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210ae6:	e9 12 01 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff80210aeb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210aef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210af3:	48 89 c2             	mov    %rax,%rdx
ffffffff80210af6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210afa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210afe:	48 01 d0             	add    %rdx,%rax
ffffffff80210b01:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff80210b05:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b09:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80210b10:	00 00 00 
ffffffff80210b13:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80210b18:	48 89 c7             	mov    %rax,%rdi
ffffffff80210b1b:	e8 3e bc ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210b20:	48 85 c0             	test   %rax,%rax
ffffffff80210b23:	0f 94 c0             	sete   %al
ffffffff80210b26:	0f b6 c0             	movzbl %al,%eax
ffffffff80210b29:	48 85 c0             	test   %rax,%rax
ffffffff80210b2c:	74 0c                	je     ffffffff80210b3a <_RME_Pgt_Crt+0x611>
ffffffff80210b2e:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80210b35:	e9 c3 00 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
ffffffff80210b3a:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80210b3f:	e8 cd bc ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80210b44:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80210b48:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff80210b4c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80210b50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210b54:	48 89 d6             	mov    %rdx,%rsi
ffffffff80210b57:	48 89 c7             	mov    %rax,%rdi
ffffffff80210b5a:	e8 e3 17 00 00       	call   ffffffff80212342 <_RME_Kot_Mark>
ffffffff80210b5f:	48 85 c0             	test   %rax,%rax
ffffffff80210b62:	74 17                	je     ffffffff80210b7b <_RME_Pgt_Crt+0x652>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff80210b64:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b68:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80210b6f:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80210b76:	e9 82 00 00 00       	jmp    ffffffff80210bfd <_RME_Pgt_Crt+0x6d4>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Header init */
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff80210b7b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b7f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80210b86:	00 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff80210b87:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b8b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80210b8f:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ALL;
ffffffff80210b93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b97:	48 be ff 00 00 00 f0 	movabs $0xfffffff0000000ff,%rsi
ffffffff80210b9e:	ff ff ff 
ffffffff80210ba1:	48 89 70 10          	mov    %rsi,0x10(%rax)
    
    /* Info init */
    Pgt_Crt->Base=Base|Is_Top;
ffffffff80210ba5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80210ba9:	48 0b 45 10          	or     0x10(%rbp),%rax
ffffffff80210bad:	48 89 c2             	mov    %rax,%rdx
ffffffff80210bb0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bb4:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff80210bb8:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80210bbc:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff80210bc0:	48 0b 45 20          	or     0x20(%rbp),%rax
ffffffff80210bc4:	48 89 c2             	mov    %rax,%rdx
ffffffff80210bc7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bcb:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Pgt_Crt->ASID=0U;
ffffffff80210bcf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bd3:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80210bda:	00 
    
    /* Object init - need to add all kernel pages if they are top-level */
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff80210bdb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bdf:	48 89 c7             	mov    %rax,%rdi
ffffffff80210be2:	e8 a7 5c 01 00       	call   ffffffff8022688e <__RME_Pgt_Init>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Creation complete */
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff80210be7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210beb:	48 bf 00 00 00 00 00 	movabs $0x4000000000000,%rdi
ffffffff80210bf2:	00 04 00 
ffffffff80210bf5:	48 89 38             	mov    %rdi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PGT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80210bf8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210bfd:	c9                   	leave
ffffffff80210bfe:	c3                   	ret

ffffffff80210bff <_RME_Pgt_Del>:
******************************************************************************/
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Pgt)
{
ffffffff80210bff:	f3 0f 1e fa          	endbr64
ffffffff80210c03:	55                   	push   %rbp
ffffffff80210c04:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210c07:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80210c0b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80210c0f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80210c13:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    /* These are used for deletion */
    rme_ptr_t Object;
    rme_ptr_t Table_Size;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210c17:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210c1b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210c20:	48 85 c0             	test   %rax,%rax
ffffffff80210c23:	0f 85 98 00 00 00    	jne    ffffffff80210cc1 <_RME_Pgt_Del+0xc2>
ffffffff80210c29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210c2d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210c31:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210c35:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210c38:	0f 93 c0             	setae  %al
ffffffff80210c3b:	0f b6 c0             	movzbl %al,%eax
ffffffff80210c3e:	48 85 c0             	test   %rax,%rax
ffffffff80210c41:	74 0c                	je     ffffffff80210c4f <_RME_Pgt_Del+0x50>
ffffffff80210c43:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210c4a:	e9 a5 03 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210c4f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210c53:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210c57:	48 89 c2             	mov    %rax,%rdx
ffffffff80210c5a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210c5e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210c62:	48 01 d0             	add    %rdx,%rax
ffffffff80210c65:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210c6d:	48 8b 00             	mov    (%rax),%rax
ffffffff80210c70:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210c74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210c78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210c7c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210c7f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210c83:	0f 94 c0             	sete   %al
ffffffff80210c86:	0f b6 c0             	movzbl %al,%eax
ffffffff80210c89:	48 85 c0             	test   %rax,%rax
ffffffff80210c8c:	74 0c                	je     ffffffff80210c9a <_RME_Pgt_Del+0x9b>
ffffffff80210c8e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210c95:	e9 5a 03 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210c9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210c9e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210ca2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210ca6:	0f 95 c0             	setne  %al
ffffffff80210ca9:	0f b6 c0             	movzbl %al,%eax
ffffffff80210cac:	48 85 c0             	test   %rax,%rax
ffffffff80210caf:	0f 84 4c 01 00 00    	je     ffffffff80210e01 <_RME_Pgt_Del+0x202>
ffffffff80210cb5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210cbc:	e9 33 03 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210cc1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210cc5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210cc9:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ccc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210cd0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210cd4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210cd7:	0f 93 c0             	setae  %al
ffffffff80210cda:	0f b6 c0             	movzbl %al,%eax
ffffffff80210cdd:	48 85 c0             	test   %rax,%rax
ffffffff80210ce0:	74 0c                	je     ffffffff80210cee <_RME_Pgt_Del+0xef>
ffffffff80210ce2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210ce9:	e9 06 03 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210cee:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210cf2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210cf6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210cfa:	48 89 c2             	mov    %rax,%rdx
ffffffff80210cfd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210d01:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210d05:	48 01 d0             	add    %rdx,%rax
ffffffff80210d08:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210d0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210d10:	48 8b 00             	mov    (%rax),%rax
ffffffff80210d13:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210d17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210d1b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210d1f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210d22:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210d26:	0f 94 c0             	sete   %al
ffffffff80210d29:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d2c:	48 85 c0             	test   %rax,%rax
ffffffff80210d2f:	74 0c                	je     ffffffff80210d3d <_RME_Pgt_Del+0x13e>
ffffffff80210d31:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210d38:	e9 b7 02 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210d3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210d41:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210d45:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210d49:	0f 95 c0             	setne  %al
ffffffff80210d4c:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d4f:	48 85 c0             	test   %rax,%rax
ffffffff80210d52:	74 0c                	je     ffffffff80210d60 <_RME_Pgt_Del+0x161>
ffffffff80210d54:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210d5b:	e9 94 02 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210d60:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210d64:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210d69:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210d70:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210d74:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210d77:	0f 93 c0             	setae  %al
ffffffff80210d7a:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d7d:	48 85 c0             	test   %rax,%rax
ffffffff80210d80:	74 0c                	je     ffffffff80210d8e <_RME_Pgt_Del+0x18f>
ffffffff80210d82:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210d89:	e9 66 02 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210d8e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210d92:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210d97:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210d9b:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210da2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210da6:	48 01 d0             	add    %rdx,%rax
ffffffff80210da9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210dad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210db1:	48 8b 00             	mov    (%rax),%rax
ffffffff80210db4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210db8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210dbc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210dc0:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210dc3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210dc7:	0f 94 c0             	sete   %al
ffffffff80210dca:	0f b6 c0             	movzbl %al,%eax
ffffffff80210dcd:	48 85 c0             	test   %rax,%rax
ffffffff80210dd0:	74 0c                	je     ffffffff80210dde <_RME_Pgt_Del+0x1df>
ffffffff80210dd2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210dd9:	e9 16 02 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210dde:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210de2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210de6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210dea:	0f 95 c0             	setne  %al
ffffffff80210ded:	0f b6 c0             	movzbl %al,%eax
ffffffff80210df0:	48 85 c0             	test   %rax,%rax
ffffffff80210df3:	74 0c                	je     ffffffff80210e01 <_RME_Pgt_Del+0x202>
ffffffff80210df5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210dfc:	e9 f3 01 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80210e01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e05:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210e09:	83 e0 02             	and    $0x2,%eax
ffffffff80210e0c:	48 85 c0             	test   %rax,%rax
ffffffff80210e0f:	0f 94 c0             	sete   %al
ffffffff80210e12:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e15:	48 85 c0             	test   %rax,%rax
ffffffff80210e18:	74 0c                	je     ffffffff80210e26 <_RME_Pgt_Del+0x227>
ffffffff80210e1a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210e21:	e9 ce 01 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80210e26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e2a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210e2e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80210e32:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210e35:	0f 93 c0             	setae  %al
ffffffff80210e38:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e3b:	48 85 c0             	test   %rax,%rax
ffffffff80210e3e:	74 0c                	je     ffffffff80210e4c <_RME_Pgt_Del+0x24d>
ffffffff80210e40:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210e47:	e9 a8 01 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210e4c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210e50:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210e54:	48 89 c2             	mov    %rax,%rdx
ffffffff80210e57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e5b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210e5f:	48 01 d0             	add    %rdx,%rax
ffffffff80210e62:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80210e66:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210e6a:	48 8b 00             	mov    (%rax),%rax
ffffffff80210e6d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210e71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210e75:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210e79:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210e7c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210e80:	0f 95 c0             	setne  %al
ffffffff80210e83:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e86:	48 85 c0             	test   %rax,%rax
ffffffff80210e89:	74 0c                	je     ffffffff80210e97 <_RME_Pgt_Del+0x298>
ffffffff80210e8b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210e92:	e9 5d 01 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210e97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210e9b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210e9f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210ea3:	0f 95 c0             	setne  %al
ffffffff80210ea6:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ea9:	48 85 c0             	test   %rax,%rax
ffffffff80210eac:	74 0c                	je     ffffffff80210eba <_RME_Pgt_Del+0x2bb>
ffffffff80210eae:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210eb5:	e9 3a 01 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210eba:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80210ebf:	e8 4d b9 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80210ec4:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ec7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210ecb:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80210ecf:	48 29 c2             	sub    %rax,%rdx
ffffffff80210ed2:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80210ed6:	0f 96 c0             	setbe  %al
ffffffff80210ed9:	0f b6 c0             	movzbl %al,%eax
ffffffff80210edc:	48 98                	cltq
ffffffff80210ede:	48 85 c0             	test   %rax,%rax
ffffffff80210ee1:	74 0c                	je     ffffffff80210eef <_RME_Pgt_Del+0x2f0>
ffffffff80210ee3:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80210eea:	e9 05 01 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
ffffffff80210eef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210ef3:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80210ef7:	48 85 c0             	test   %rax,%rax
ffffffff80210efa:	0f 95 c0             	setne  %al
ffffffff80210efd:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f00:	48 85 c0             	test   %rax,%rax
ffffffff80210f03:	74 44                	je     ffffffff80210f49 <_RME_Pgt_Del+0x34a>
ffffffff80210f05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210f09:	89 c0                	mov    %eax,%eax
ffffffff80210f0b:	48 85 c0             	test   %rax,%rax
ffffffff80210f0e:	0f 94 c0             	sete   %al
ffffffff80210f11:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f14:	48 85 c0             	test   %rax,%rax
ffffffff80210f17:	74 24                	je     ffffffff80210f3d <_RME_Pgt_Del+0x33e>
ffffffff80210f19:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80210f20:	00 ff ff 
ffffffff80210f23:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80210f27:	48 89 c2             	mov    %rax,%rdx
ffffffff80210f2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f2e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80210f32:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210f35:	48 89 c7             	mov    %rax,%rdi
ffffffff80210f38:	e8 21 b8 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210f3d:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80210f44:	e9 ab 00 00 00       	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>
    /* Hardware related deletion check passed down to the HAL. The driver should make
     * sure that it does not reference any lower level tables. If the driver layer does
     * not conform to this, the deletion of page table is not guaranteed to main kernel
     * consistency, and such consistency must be maintained by the user-level. It is 
     * recommended that the driver layer enforce such consistency. */
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
ffffffff80210f49:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f4d:	48 89 c7             	mov    %rax,%rdi
ffffffff80210f50:	e8 0b 5a 01 00       	call   ffffffff80226960 <__RME_Pgt_Del_Check>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
ffffffff80210f55:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f59:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210f5d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(((Pgt_Del->Base)&RME_PGT_TOP)!=0U)
ffffffff80210f61:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f65:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80210f69:	83 e0 01             	and    $0x1,%eax
ffffffff80210f6c:	48 85 c0             	test   %rax,%rax
ffffffff80210f6f:	74 1f                	je     ffffffff80210f90 <_RME_Pgt_Del+0x391>
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80210f71:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f75:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210f79:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210f7e:	89 c1                	mov    %eax,%ecx
ffffffff80210f80:	d3 e2                	shl    %cl,%edx
ffffffff80210f82:	89 d0                	mov    %edx,%eax
ffffffff80210f84:	48 98                	cltq
ffffffff80210f86:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80210f8a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210f8e:	eb 1d                	jmp    ffffffff80210fad <_RME_Pgt_Del+0x3ae>
    }
    else
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_NOM(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80210f90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f94:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210f98:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210f9d:	89 c1                	mov    %eax,%ecx
ffffffff80210f9f:	d3 e2                	shl    %cl,%edx
ffffffff80210fa1:	89 d0                	mov    %edx,%eax
ffffffff80210fa3:	48 98                	cltq
ffffffff80210fa5:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80210fa9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff80210fad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fb1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80210fb5:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80210fba:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210fbd:	48 89 c7             	mov    %rax,%rdi
ffffffff80210fc0:	e8 99 b7 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210fc5:	48 85 c0             	test   %rax,%rax
ffffffff80210fc8:	0f 94 c0             	sete   %al
ffffffff80210fcb:	0f b6 c0             	movzbl %al,%eax
ffffffff80210fce:	48 85 c0             	test   %rax,%rax
ffffffff80210fd1:	74 09                	je     ffffffff80210fdc <_RME_Pgt_Del+0x3dd>
ffffffff80210fd3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80210fda:	eb 18                	jmp    ffffffff80210ff4 <_RME_Pgt_Del+0x3f5>

    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kot_Erase(Object,Table_Size)==0);
ffffffff80210fdc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80210fe0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210fe4:	48 89 d6             	mov    %rdx,%rsi
ffffffff80210fe7:	48 89 c7             	mov    %rax,%rdi
ffffffff80210fea:	e8 9a 16 00 00       	call   ffffffff80212689 <_RME_Kot_Erase>

    return 0;
ffffffff80210fef:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210ff4:	c9                   	leave
ffffffff80210ff5:	c3                   	ret

ffffffff80210ff6 <_RME_Pgt_Add>:
                              rme_ptr_t Pos_Dst,
                              rme_ptr_t Flag_Dst,
                              rme_cid_t Cap_Pgt_Src,
                              rme_ptr_t Pos_Src,
                              rme_ptr_t Index)
{
ffffffff80210ff6:	f3 0f 1e fa          	endbr64
ffffffff80210ffa:	55                   	push   %rbp
ffffffff80210ffb:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210ffe:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff80211002:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80211006:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8021100a:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff8021100e:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80211012:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
ffffffff80211016:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Szord_Src;
    rme_ptr_t Szord_Dst;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff8021101a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021101e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211023:	48 85 c0             	test   %rax,%rax
ffffffff80211026:	0f 85 98 00 00 00    	jne    ffffffff802110c4 <_RME_Pgt_Add+0xce>
ffffffff8021102c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211030:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211034:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80211038:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021103b:	0f 93 c0             	setae  %al
ffffffff8021103e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211041:	48 85 c0             	test   %rax,%rax
ffffffff80211044:	74 0c                	je     ffffffff80211052 <_RME_Pgt_Add+0x5c>
ffffffff80211046:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021104d:	e9 65 05 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff80211052:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211056:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021105a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021105d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211061:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211065:	48 01 d0             	add    %rdx,%rax
ffffffff80211068:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021106c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211070:	48 8b 00             	mov    (%rax),%rax
ffffffff80211073:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211077:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021107b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021107f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211082:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211086:	0f 94 c0             	sete   %al
ffffffff80211089:	0f b6 c0             	movzbl %al,%eax
ffffffff8021108c:	48 85 c0             	test   %rax,%rax
ffffffff8021108f:	74 0c                	je     ffffffff8021109d <_RME_Pgt_Add+0xa7>
ffffffff80211091:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211098:	e9 1a 05 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff8021109d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802110a1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802110a5:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802110a9:	0f 95 c0             	setne  %al
ffffffff802110ac:	0f b6 c0             	movzbl %al,%eax
ffffffff802110af:	48 85 c0             	test   %rax,%rax
ffffffff802110b2:	0f 84 4c 01 00 00    	je     ffffffff80211204 <_RME_Pgt_Add+0x20e>
ffffffff802110b8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802110bf:	e9 f3 04 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff802110c4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802110c8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802110cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802110cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802110d3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802110d7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802110da:	0f 93 c0             	setae  %al
ffffffff802110dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802110e0:	48 85 c0             	test   %rax,%rax
ffffffff802110e3:	74 0c                	je     ffffffff802110f1 <_RME_Pgt_Add+0xfb>
ffffffff802110e5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802110ec:	e9 c6 04 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff802110f1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802110f5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802110f9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802110fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80211100:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211104:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211108:	48 01 d0             	add    %rdx,%rax
ffffffff8021110b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021110f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211113:	48 8b 00             	mov    (%rax),%rax
ffffffff80211116:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021111a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021111e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211122:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211125:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211129:	0f 94 c0             	sete   %al
ffffffff8021112c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021112f:	48 85 c0             	test   %rax,%rax
ffffffff80211132:	74 0c                	je     ffffffff80211140 <_RME_Pgt_Add+0x14a>
ffffffff80211134:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021113b:	e9 77 04 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff80211140:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211144:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211148:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021114c:	0f 95 c0             	setne  %al
ffffffff8021114f:	0f b6 c0             	movzbl %al,%eax
ffffffff80211152:	48 85 c0             	test   %rax,%rax
ffffffff80211155:	74 0c                	je     ffffffff80211163 <_RME_Pgt_Add+0x16d>
ffffffff80211157:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021115e:	e9 54 04 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff80211163:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211167:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021116c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021116f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211173:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211177:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021117a:	0f 93 c0             	setae  %al
ffffffff8021117d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211180:	48 85 c0             	test   %rax,%rax
ffffffff80211183:	74 0c                	je     ffffffff80211191 <_RME_Pgt_Add+0x19b>
ffffffff80211185:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021118c:	e9 26 04 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff80211191:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211195:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021119a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021119e:	48 89 c2             	mov    %rax,%rdx
ffffffff802111a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802111a5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802111a9:	48 01 d0             	add    %rdx,%rax
ffffffff802111ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802111b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802111b4:	48 8b 00             	mov    (%rax),%rax
ffffffff802111b7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802111bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802111bf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802111c3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802111c6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802111ca:	0f 94 c0             	sete   %al
ffffffff802111cd:	0f b6 c0             	movzbl %al,%eax
ffffffff802111d0:	48 85 c0             	test   %rax,%rax
ffffffff802111d3:	74 0c                	je     ffffffff802111e1 <_RME_Pgt_Add+0x1eb>
ffffffff802111d5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802111dc:	e9 d6 03 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff802111e1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802111e5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802111e9:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802111ed:	0f 95 c0             	setne  %al
ffffffff802111f0:	0f b6 c0             	movzbl %al,%eax
ffffffff802111f3:	48 85 c0             	test   %rax,%rax
ffffffff802111f6:	74 0c                	je     ffffffff80211204 <_RME_Pgt_Add+0x20e>
ffffffff802111f8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802111ff:	e9 b3 03 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
                   struct RME_Cap_Pgt*,Pgt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff80211204:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211208:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021120d:	48 85 c0             	test   %rax,%rax
ffffffff80211210:	0f 85 98 00 00 00    	jne    ffffffff802112ae <_RME_Pgt_Add+0x2b8>
ffffffff80211216:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021121a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021121e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80211222:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211225:	0f 93 c0             	setae  %al
ffffffff80211228:	0f b6 c0             	movzbl %al,%eax
ffffffff8021122b:	48 85 c0             	test   %rax,%rax
ffffffff8021122e:	74 0c                	je     ffffffff8021123c <_RME_Pgt_Add+0x246>
ffffffff80211230:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211237:	e9 7b 03 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff8021123c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211240:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211244:	48 89 c2             	mov    %rax,%rdx
ffffffff80211247:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021124b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021124f:	48 01 d0             	add    %rdx,%rax
ffffffff80211252:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211256:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021125a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021125d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211261:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211265:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211269:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021126c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211270:	0f 94 c0             	sete   %al
ffffffff80211273:	0f b6 c0             	movzbl %al,%eax
ffffffff80211276:	48 85 c0             	test   %rax,%rax
ffffffff80211279:	74 0c                	je     ffffffff80211287 <_RME_Pgt_Add+0x291>
ffffffff8021127b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211282:	e9 30 03 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff80211287:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021128b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021128f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211293:	0f 95 c0             	setne  %al
ffffffff80211296:	0f b6 c0             	movzbl %al,%eax
ffffffff80211299:	48 85 c0             	test   %rax,%rax
ffffffff8021129c:	0f 84 4c 01 00 00    	je     ffffffff802113ee <_RME_Pgt_Add+0x3f8>
ffffffff802112a2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802112a9:	e9 09 03 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff802112ae:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802112b2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802112b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802112b9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802112bd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802112c1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802112c4:	0f 93 c0             	setae  %al
ffffffff802112c7:	0f b6 c0             	movzbl %al,%eax
ffffffff802112ca:	48 85 c0             	test   %rax,%rax
ffffffff802112cd:	74 0c                	je     ffffffff802112db <_RME_Pgt_Add+0x2e5>
ffffffff802112cf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802112d6:	e9 dc 02 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff802112db:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802112df:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802112e3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802112e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802112ea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802112ee:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802112f2:	48 01 d0             	add    %rdx,%rax
ffffffff802112f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802112f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802112fd:	48 8b 00             	mov    (%rax),%rax
ffffffff80211300:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211304:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211308:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021130c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021130f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211313:	0f 94 c0             	sete   %al
ffffffff80211316:	0f b6 c0             	movzbl %al,%eax
ffffffff80211319:	48 85 c0             	test   %rax,%rax
ffffffff8021131c:	74 0c                	je     ffffffff8021132a <_RME_Pgt_Add+0x334>
ffffffff8021131e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211325:	e9 8d 02 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff8021132a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021132e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211332:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211336:	0f 95 c0             	setne  %al
ffffffff80211339:	0f b6 c0             	movzbl %al,%eax
ffffffff8021133c:	48 85 c0             	test   %rax,%rax
ffffffff8021133f:	74 0c                	je     ffffffff8021134d <_RME_Pgt_Add+0x357>
ffffffff80211341:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211348:	e9 6a 02 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff8021134d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211351:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211356:	48 89 c2             	mov    %rax,%rdx
ffffffff80211359:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021135d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211361:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211364:	0f 93 c0             	setae  %al
ffffffff80211367:	0f b6 c0             	movzbl %al,%eax
ffffffff8021136a:	48 85 c0             	test   %rax,%rax
ffffffff8021136d:	74 0c                	je     ffffffff8021137b <_RME_Pgt_Add+0x385>
ffffffff8021136f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211376:	e9 3c 02 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff8021137b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021137f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211384:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211388:	48 89 c2             	mov    %rax,%rdx
ffffffff8021138b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021138f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211393:	48 01 d0             	add    %rdx,%rax
ffffffff80211396:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021139a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021139e:	48 8b 00             	mov    (%rax),%rax
ffffffff802113a1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802113a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802113a9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802113ad:	0f b7 c0             	movzwl %ax,%eax
ffffffff802113b0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802113b4:	0f 94 c0             	sete   %al
ffffffff802113b7:	0f b6 c0             	movzbl %al,%eax
ffffffff802113ba:	48 85 c0             	test   %rax,%rax
ffffffff802113bd:	74 0c                	je     ffffffff802113cb <_RME_Pgt_Add+0x3d5>
ffffffff802113bf:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802113c6:	e9 ec 01 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
ffffffff802113cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802113cf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802113d3:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802113d7:	0f 95 c0             	setne  %al
ffffffff802113da:	0f b6 c0             	movzbl %al,%eax
ffffffff802113dd:	48 85 c0             	test   %rax,%rax
ffffffff802113e0:	74 0c                	je     ffffffff802113ee <_RME_Pgt_Add+0x3f8>
ffffffff802113e2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802113e9:	e9 c9 01 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
                   struct RME_Cap_Pgt*,Pgt_Src,Type_Stat);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff802113ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802113f2:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802113f6:	83 e0 02             	and    $0x2,%eax
ffffffff802113f9:	48 85 c0             	test   %rax,%rax
ffffffff802113fc:	0f 94 c0             	sete   %al
ffffffff802113ff:	0f b6 c0             	movzbl %al,%eax
ffffffff80211402:	48 85 c0             	test   %rax,%rax
ffffffff80211405:	74 0c                	je     ffffffff80211413 <_RME_Pgt_Add+0x41d>
ffffffff80211407:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021140e:	e9 a4 01 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
ffffffff80211413:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211417:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021141b:	83 e0 01             	and    $0x1,%eax
ffffffff8021141e:	48 85 c0             	test   %rax,%rax
ffffffff80211421:	0f 94 c0             	sete   %al
ffffffff80211424:	0f b6 c0             	movzbl %al,%eax
ffffffff80211427:	48 85 c0             	test   %rax,%rax
ffffffff8021142a:	74 0c                	je     ffffffff80211438 <_RME_Pgt_Add+0x442>
ffffffff8021142c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211433:	e9 7f 01 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
    /* Check the operation range - This is page table specific */
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff80211438:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021143c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211440:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80211444:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff80211448:	72 40                	jb     ffffffff8021148a <_RME_Pgt_Add+0x494>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff8021144a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021144e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211452:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211456:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff8021145b:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff8021145f:	72 29                	jb     ffffffff8021148a <_RME_Pgt_Add+0x494>
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff80211461:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211465:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211469:	48 c1 e8 24          	shr    $0x24,%rax
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff8021146d:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
ffffffff80211471:	72 17                	jb     ffffffff8021148a <_RME_Pgt_Add+0x494>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
ffffffff80211473:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211477:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021147b:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8021147f:	25 ff ff ff 0f       	and    $0xfffffff,%eax
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff80211484:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff80211488:	73 0c                	jae    ffffffff80211496 <_RME_Pgt_Add+0x4a0>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021148a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211491:	e9 21 01 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the size order relationship is correct */
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff80211496:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021149a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021149e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802114a2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff802114a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802114aa:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802114ae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802114b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Szord_Dst>Szord_Src)
ffffffff802114b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802114ba:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff802114be:	73 0c                	jae    ffffffff802114cc <_RME_Pgt_Add+0x4d6>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff802114c0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802114c7:	e9 eb 00 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the positions are out of range - NMORD is restricted, no UB */
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff802114cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802114d0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802114d4:	89 c2                	mov    %eax,%edx
ffffffff802114d6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802114da:	89 d1                	mov    %edx,%ecx
ffffffff802114dc:	48 d3 e8             	shr    %cl,%rax
ffffffff802114df:	48 85 c0             	test   %rax,%rax
ffffffff802114e2:	75 18                	jne    ffffffff802114fc <_RME_Pgt_Add+0x506>
       ((Pos_Src>>RME_PGT_NUMORD(Pgt_Src->Order))!=0U))
ffffffff802114e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802114e8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802114ec:	89 c2                	mov    %eax,%edx
ffffffff802114ee:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802114f2:	89 d1                	mov    %edx,%ecx
ffffffff802114f4:	48 d3 e8             	shr    %cl,%rax
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff802114f7:	48 85 c0             	test   %rax,%rax
ffffffff802114fa:	74 0c                	je     ffffffff80211508 <_RME_Pgt_Add+0x512>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff802114fc:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211503:	e9 af 00 00 00       	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the source subposition is out of range - avoid UB */
    if(Szord_Src<RME_WORD_BIT)
ffffffff80211508:	48 83 7d d0 3f       	cmpq   $0x3f,-0x30(%rbp)
ffffffff8021150d:	77 2c                	ja     ffffffff8021153b <_RME_Pgt_Add+0x545>
    {
        RME_COV_MARKER();
        
        /* No UB because Szord_Dst<=Szord_Src */
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
ffffffff8021150f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211513:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80211518:	89 c1                	mov    %eax,%ecx
ffffffff8021151a:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021151d:	48 89 d0             	mov    %rdx,%rax
ffffffff80211520:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80211524:	89 d1                	mov    %edx,%ecx
ffffffff80211526:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8021152a:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021152d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211530:	72 09                	jb     ffffffff8021153b <_RME_Pgt_Add+0x545>
        {
            RME_COV_MARKER();

            return RME_ERR_PGT_ADDR;
ffffffff80211532:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211539:	eb 7c                	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the physical address and RME standard flags of that source page */
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff8021153b:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
ffffffff8021153f:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
ffffffff80211543:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
ffffffff80211547:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021154b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021154e:	e8 f0 57 01 00       	call   ffffffff80226d43 <__RME_Pgt_Lookup>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Calculate the destination physical address - avoid UB */
    if(Szord_Dst<RME_WORD_BIT)
ffffffff80211553:	48 83 7d d8 3f       	cmpq   $0x3f,-0x28(%rbp)
ffffffff80211558:	77 1f                	ja     ffffffff80211579 <_RME_Pgt_Add+0x583>
    {
        RME_COV_MARKER();
        
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
ffffffff8021155a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021155e:	89 c2                	mov    %eax,%edx
ffffffff80211560:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80211564:	89 d1                	mov    %edx,%ecx
ffffffff80211566:	48 d3 e0             	shl    %cl,%rax
ffffffff80211569:	48 89 c2             	mov    %rax,%rdx
ffffffff8021156c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211570:	48 01 d0             	add    %rdx,%rax
ffffffff80211573:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211577:	eb 08                	jmp    ffffffff80211581 <_RME_Pgt_Add+0x58b>
    /* The destination is also full range */
    else
    {
        RME_COV_MARKER();
        
        Paddr_Dst=Paddr_Src;
ffffffff80211579:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021157d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        }
#endif
    }
    
    /* Analyze the flags - we do not allow expansion of access permissions */
    if(((Flag_Dst)&(~Flag_Src))!=0U)
ffffffff80211581:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211585:	48 f7 d0             	not    %rax
ffffffff80211588:	48 23 45 a0          	and    -0x60(%rbp),%rax
ffffffff8021158c:	48 85 c0             	test   %rax,%rax
ffffffff8021158f:	74 09                	je     ffffffff8021159a <_RME_Pgt_Add+0x5a4>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_PERM;
ffffffff80211591:	48 c7 c0 98 ff ff ff 	mov    $0xffffffffffffff98,%rax
ffffffff80211598:	eb 1d                	jmp    ffffffff802115b7 <_RME_Pgt_Add+0x5c1>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
ffffffff8021159a:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
ffffffff8021159e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff802115a2:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff802115a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802115aa:	48 89 c7             	mov    %rax,%rdi
ffffffff802115ad:	e8 c5 53 01 00       	call   ffffffff80226977 <__RME_Pgt_Page_Map>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff802115b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802115b7:	c9                   	leave
ffffffff802115b8:	c3                   	ret

ffffffff802115b9 <_RME_Pgt_Rem>:
******************************************************************************/
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Rem(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Pgt,
                              rme_ptr_t Pos)
{
ffffffff802115b9:	f3 0f 1e fa          	endbr64
ffffffff802115bd:	55                   	push   %rbp
ffffffff802115be:	48 89 e5             	mov    %rsp,%rbp
ffffffff802115c1:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff802115c5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff802115c9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff802115cd:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct RME_Cap_Pgt* Pgt_Rem;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff802115d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802115d5:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802115da:	48 85 c0             	test   %rax,%rax
ffffffff802115dd:	0f 85 98 00 00 00    	jne    ffffffff8021167b <_RME_Pgt_Rem+0xc2>
ffffffff802115e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802115e7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802115eb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802115ef:	48 39 c2             	cmp    %rax,%rdx
ffffffff802115f2:	0f 93 c0             	setae  %al
ffffffff802115f5:	0f b6 c0             	movzbl %al,%eax
ffffffff802115f8:	48 85 c0             	test   %rax,%rax
ffffffff802115fb:	74 0c                	je     ffffffff80211609 <_RME_Pgt_Rem+0x50>
ffffffff802115fd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211604:	e9 3f 02 00 00       	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
ffffffff80211609:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021160d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211611:	48 89 c2             	mov    %rax,%rdx
ffffffff80211614:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211618:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021161c:	48 01 d0             	add    %rdx,%rax
ffffffff8021161f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211623:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211627:	48 8b 00             	mov    (%rax),%rax
ffffffff8021162a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021162e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211632:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211636:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211639:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021163d:	0f 94 c0             	sete   %al
ffffffff80211640:	0f b6 c0             	movzbl %al,%eax
ffffffff80211643:	48 85 c0             	test   %rax,%rax
ffffffff80211646:	74 0c                	je     ffffffff80211654 <_RME_Pgt_Rem+0x9b>
ffffffff80211648:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021164f:	e9 f4 01 00 00       	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
ffffffff80211654:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211658:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021165c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211660:	0f 95 c0             	setne  %al
ffffffff80211663:	0f b6 c0             	movzbl %al,%eax
ffffffff80211666:	48 85 c0             	test   %rax,%rax
ffffffff80211669:	0f 84 4c 01 00 00    	je     ffffffff802117bb <_RME_Pgt_Rem+0x202>
ffffffff8021166f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211676:	e9 cd 01 00 00       	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
ffffffff8021167b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021167f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211683:	48 89 c2             	mov    %rax,%rdx
ffffffff80211686:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021168a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021168e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211691:	0f 93 c0             	setae  %al
ffffffff80211694:	0f b6 c0             	movzbl %al,%eax
ffffffff80211697:	48 85 c0             	test   %rax,%rax
ffffffff8021169a:	74 0c                	je     ffffffff802116a8 <_RME_Pgt_Rem+0xef>
ffffffff8021169c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802116a3:	e9 a0 01 00 00       	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
ffffffff802116a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802116ac:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802116b0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802116b4:	48 89 c2             	mov    %rax,%rdx
ffffffff802116b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802116bb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802116bf:	48 01 d0             	add    %rdx,%rax
ffffffff802116c2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802116c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802116ca:	48 8b 00             	mov    (%rax),%rax
ffffffff802116cd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802116d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802116d5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802116d9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802116dc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802116e0:	0f 94 c0             	sete   %al
ffffffff802116e3:	0f b6 c0             	movzbl %al,%eax
ffffffff802116e6:	48 85 c0             	test   %rax,%rax
ffffffff802116e9:	74 0c                	je     ffffffff802116f7 <_RME_Pgt_Rem+0x13e>
ffffffff802116eb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802116f2:	e9 51 01 00 00       	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
ffffffff802116f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802116fb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802116ff:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211703:	0f 95 c0             	setne  %al
ffffffff80211706:	0f b6 c0             	movzbl %al,%eax
ffffffff80211709:	48 85 c0             	test   %rax,%rax
ffffffff8021170c:	74 0c                	je     ffffffff8021171a <_RME_Pgt_Rem+0x161>
ffffffff8021170e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211715:	e9 2e 01 00 00       	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
ffffffff8021171a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021171e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211723:	48 89 c2             	mov    %rax,%rdx
ffffffff80211726:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021172a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021172e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211731:	0f 93 c0             	setae  %al
ffffffff80211734:	0f b6 c0             	movzbl %al,%eax
ffffffff80211737:	48 85 c0             	test   %rax,%rax
ffffffff8021173a:	74 0c                	je     ffffffff80211748 <_RME_Pgt_Rem+0x18f>
ffffffff8021173c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211743:	e9 00 01 00 00       	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
ffffffff80211748:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021174c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211751:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211755:	48 89 c2             	mov    %rax,%rdx
ffffffff80211758:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021175c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211760:	48 01 d0             	add    %rdx,%rax
ffffffff80211763:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211767:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021176b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021176e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211772:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211776:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021177a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021177d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211781:	0f 94 c0             	sete   %al
ffffffff80211784:	0f b6 c0             	movzbl %al,%eax
ffffffff80211787:	48 85 c0             	test   %rax,%rax
ffffffff8021178a:	74 0c                	je     ffffffff80211798 <_RME_Pgt_Rem+0x1df>
ffffffff8021178c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211793:	e9 b0 00 00 00       	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
ffffffff80211798:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021179c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802117a0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802117a4:	0f 95 c0             	setne  %al
ffffffff802117a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802117aa:	48 85 c0             	test   %rax,%rax
ffffffff802117ad:	74 0c                	je     ffffffff802117bb <_RME_Pgt_Rem+0x202>
ffffffff802117af:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802117b6:	e9 8d 00 00 00       	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
                   struct RME_Cap_Pgt*,Pgt_Rem,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff802117bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117bf:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802117c3:	83 e0 04             	and    $0x4,%eax
ffffffff802117c6:	48 85 c0             	test   %rax,%rax
ffffffff802117c9:	0f 94 c0             	sete   %al
ffffffff802117cc:	0f b6 c0             	movzbl %al,%eax
ffffffff802117cf:	48 85 c0             	test   %rax,%rax
ffffffff802117d2:	74 09                	je     ffffffff802117dd <_RME_Pgt_Rem+0x224>
ffffffff802117d4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802117db:	eb 6b                	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff802117dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117e1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802117e5:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff802117e9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff802117ed:	72 17                	jb     ffffffff80211806 <_RME_Pgt_Rem+0x24d>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
ffffffff802117ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117f3:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802117f7:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802117fb:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80211800:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80211804:	73 09                	jae    ffffffff8021180f <_RME_Pgt_Rem+0x256>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211806:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021180d:	eb 39                	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Rem->Order))!=0U)
ffffffff8021180f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211813:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211817:	89 c2                	mov    %eax,%edx
ffffffff80211819:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021181d:	89 d1                	mov    %edx,%ecx
ffffffff8021181f:	48 d3 e8             	shr    %cl,%rax
ffffffff80211822:	48 85 c0             	test   %rax,%rax
ffffffff80211825:	74 09                	je     ffffffff80211830 <_RME_Pgt_Rem+0x277>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211827:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8021182e:	eb 18                	jmp    ffffffff80211848 <_RME_Pgt_Rem+0x28f>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
ffffffff80211830:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80211834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211838:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021183b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021183e:	e8 3f 52 01 00       	call   ffffffff80226a82 <__RME_Pgt_Page_Unmap>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff80211843:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80211848:	c9                   	leave
ffffffff80211849:	c3                   	ret

ffffffff8021184a <_RME_Pgt_Con>:
static rme_ret_t _RME_Pgt_Con(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Pgt_Parent,
                              rme_ptr_t Pos,
                              rme_cid_t Cap_Pgt_Child,
                              rme_ptr_t Flag_Child)
{
ffffffff8021184a:	f3 0f 1e fa          	endbr64
ffffffff8021184e:	55                   	push   %rbp
ffffffff8021184f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80211852:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80211856:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021185a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021185e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80211862:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80211866:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
    rme_ptr_t End_Parent;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff8021186a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021186e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211873:	48 85 c0             	test   %rax,%rax
ffffffff80211876:	0f 85 98 00 00 00    	jne    ffffffff80211914 <_RME_Pgt_Con+0xca>
ffffffff8021187c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211880:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211884:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80211888:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021188b:	0f 93 c0             	setae  %al
ffffffff8021188e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211891:	48 85 c0             	test   %rax,%rax
ffffffff80211894:	74 0c                	je     ffffffff802118a2 <_RME_Pgt_Con+0x58>
ffffffff80211896:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021189d:	e9 1f 05 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff802118a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802118a6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802118aa:	48 89 c2             	mov    %rax,%rdx
ffffffff802118ad:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802118b1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802118b5:	48 01 d0             	add    %rdx,%rax
ffffffff802118b8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802118bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802118c0:	48 8b 00             	mov    (%rax),%rax
ffffffff802118c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802118c7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802118cb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802118cf:	0f b7 c0             	movzwl %ax,%eax
ffffffff802118d2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802118d6:	0f 94 c0             	sete   %al
ffffffff802118d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802118dc:	48 85 c0             	test   %rax,%rax
ffffffff802118df:	74 0c                	je     ffffffff802118ed <_RME_Pgt_Con+0xa3>
ffffffff802118e1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802118e8:	e9 d4 04 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff802118ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802118f1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802118f5:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802118f9:	0f 95 c0             	setne  %al
ffffffff802118fc:	0f b6 c0             	movzbl %al,%eax
ffffffff802118ff:	48 85 c0             	test   %rax,%rax
ffffffff80211902:	0f 84 4c 01 00 00    	je     ffffffff80211a54 <_RME_Pgt_Con+0x20a>
ffffffff80211908:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021190f:	e9 ad 04 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211914:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211918:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021191c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021191f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211923:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211927:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021192a:	0f 93 c0             	setae  %al
ffffffff8021192d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211930:	48 85 c0             	test   %rax,%rax
ffffffff80211933:	74 0c                	je     ffffffff80211941 <_RME_Pgt_Con+0xf7>
ffffffff80211935:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021193c:	e9 80 04 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211941:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211945:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211949:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021194d:	48 89 c2             	mov    %rax,%rdx
ffffffff80211950:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211954:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211958:	48 01 d0             	add    %rdx,%rax
ffffffff8021195b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021195f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211963:	48 8b 00             	mov    (%rax),%rax
ffffffff80211966:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021196a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021196e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211972:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211975:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211979:	0f 94 c0             	sete   %al
ffffffff8021197c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021197f:	48 85 c0             	test   %rax,%rax
ffffffff80211982:	74 0c                	je     ffffffff80211990 <_RME_Pgt_Con+0x146>
ffffffff80211984:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021198b:	e9 31 04 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211990:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211994:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211998:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021199c:	0f 95 c0             	setne  %al
ffffffff8021199f:	0f b6 c0             	movzbl %al,%eax
ffffffff802119a2:	48 85 c0             	test   %rax,%rax
ffffffff802119a5:	74 0c                	je     ffffffff802119b3 <_RME_Pgt_Con+0x169>
ffffffff802119a7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802119ae:	e9 0e 04 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff802119b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802119b7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802119bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802119bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802119c3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802119c7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802119ca:	0f 93 c0             	setae  %al
ffffffff802119cd:	0f b6 c0             	movzbl %al,%eax
ffffffff802119d0:	48 85 c0             	test   %rax,%rax
ffffffff802119d3:	74 0c                	je     ffffffff802119e1 <_RME_Pgt_Con+0x197>
ffffffff802119d5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802119dc:	e9 e0 03 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff802119e1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802119e5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802119ea:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802119ee:	48 89 c2             	mov    %rax,%rdx
ffffffff802119f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802119f5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802119f9:	48 01 d0             	add    %rdx,%rax
ffffffff802119fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211a00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211a04:	48 8b 00             	mov    (%rax),%rax
ffffffff80211a07:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211a0b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211a0f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211a13:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211a16:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211a1a:	0f 94 c0             	sete   %al
ffffffff80211a1d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a20:	48 85 c0             	test   %rax,%rax
ffffffff80211a23:	74 0c                	je     ffffffff80211a31 <_RME_Pgt_Con+0x1e7>
ffffffff80211a25:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211a2c:	e9 90 03 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211a31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211a35:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211a39:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211a3d:	0f 95 c0             	setne  %al
ffffffff80211a40:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a43:	48 85 c0             	test   %rax,%rax
ffffffff80211a46:	74 0c                	je     ffffffff80211a54 <_RME_Pgt_Con+0x20a>
ffffffff80211a48:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211a4f:	e9 6d 03 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff80211a54:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211a58:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211a5d:	48 85 c0             	test   %rax,%rax
ffffffff80211a60:	0f 85 98 00 00 00    	jne    ffffffff80211afe <_RME_Pgt_Con+0x2b4>
ffffffff80211a66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211a6a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211a6e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80211a72:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211a75:	0f 93 c0             	setae  %al
ffffffff80211a78:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a7b:	48 85 c0             	test   %rax,%rax
ffffffff80211a7e:	74 0c                	je     ffffffff80211a8c <_RME_Pgt_Con+0x242>
ffffffff80211a80:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211a87:	e9 35 03 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211a8c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211a90:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211a94:	48 89 c2             	mov    %rax,%rdx
ffffffff80211a97:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211a9b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211a9f:	48 01 d0             	add    %rdx,%rax
ffffffff80211aa2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211aa6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211aaa:	48 8b 00             	mov    (%rax),%rax
ffffffff80211aad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211ab1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211ab5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211ab9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211abc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211ac0:	0f 94 c0             	sete   %al
ffffffff80211ac3:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ac6:	48 85 c0             	test   %rax,%rax
ffffffff80211ac9:	74 0c                	je     ffffffff80211ad7 <_RME_Pgt_Con+0x28d>
ffffffff80211acb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211ad2:	e9 ea 02 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211ad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211adb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211adf:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211ae3:	0f 95 c0             	setne  %al
ffffffff80211ae6:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ae9:	48 85 c0             	test   %rax,%rax
ffffffff80211aec:	0f 84 4c 01 00 00    	je     ffffffff80211c3e <_RME_Pgt_Con+0x3f4>
ffffffff80211af2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211af9:	e9 c3 02 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211afe:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211b02:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211b06:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211b0d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211b11:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211b14:	0f 93 c0             	setae  %al
ffffffff80211b17:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b1a:	48 85 c0             	test   %rax,%rax
ffffffff80211b1d:	74 0c                	je     ffffffff80211b2b <_RME_Pgt_Con+0x2e1>
ffffffff80211b1f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211b26:	e9 96 02 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211b2b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211b2f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211b33:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211b37:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b3a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211b3e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211b42:	48 01 d0             	add    %rdx,%rax
ffffffff80211b45:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211b49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211b4d:	48 8b 00             	mov    (%rax),%rax
ffffffff80211b50:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211b54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211b58:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211b5c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211b5f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211b63:	0f 94 c0             	sete   %al
ffffffff80211b66:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b69:	48 85 c0             	test   %rax,%rax
ffffffff80211b6c:	74 0c                	je     ffffffff80211b7a <_RME_Pgt_Con+0x330>
ffffffff80211b6e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211b75:	e9 47 02 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211b7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211b7e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211b82:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211b86:	0f 95 c0             	setne  %al
ffffffff80211b89:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b8c:	48 85 c0             	test   %rax,%rax
ffffffff80211b8f:	74 0c                	je     ffffffff80211b9d <_RME_Pgt_Con+0x353>
ffffffff80211b91:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211b98:	e9 24 02 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211b9d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211ba1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211ba6:	48 89 c2             	mov    %rax,%rdx
ffffffff80211ba9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211bad:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211bb1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211bb4:	0f 93 c0             	setae  %al
ffffffff80211bb7:	0f b6 c0             	movzbl %al,%eax
ffffffff80211bba:	48 85 c0             	test   %rax,%rax
ffffffff80211bbd:	74 0c                	je     ffffffff80211bcb <_RME_Pgt_Con+0x381>
ffffffff80211bbf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211bc6:	e9 f6 01 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211bcb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211bcf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211bd4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211bd8:	48 89 c2             	mov    %rax,%rdx
ffffffff80211bdb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211bdf:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211be3:	48 01 d0             	add    %rdx,%rax
ffffffff80211be6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211bea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211bee:	48 8b 00             	mov    (%rax),%rax
ffffffff80211bf1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211bf5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211bf9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211bfd:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211c00:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211c04:	0f 94 c0             	sete   %al
ffffffff80211c07:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c0a:	48 85 c0             	test   %rax,%rax
ffffffff80211c0d:	74 0c                	je     ffffffff80211c1b <_RME_Pgt_Con+0x3d1>
ffffffff80211c0f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211c16:	e9 a6 01 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
ffffffff80211c1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211c1f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211c23:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211c27:	0f 95 c0             	setne  %al
ffffffff80211c2a:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c2d:	48 85 c0             	test   %rax,%rax
ffffffff80211c30:	74 0c                	je     ffffffff80211c3e <_RME_Pgt_Con+0x3f4>
ffffffff80211c32:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211c39:	e9 83 01 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
                   struct RME_Cap_Pgt*,Pgt_Child,Type_Stat);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff80211c3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211c42:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211c46:	83 e0 10             	and    $0x10,%eax
ffffffff80211c49:	48 85 c0             	test   %rax,%rax
ffffffff80211c4c:	0f 94 c0             	sete   %al
ffffffff80211c4f:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c52:	48 85 c0             	test   %rax,%rax
ffffffff80211c55:	74 0c                	je     ffffffff80211c63 <_RME_Pgt_Con+0x419>
ffffffff80211c57:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211c5e:	e9 5e 01 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff80211c63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211c67:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211c6b:	83 e0 08             	and    $0x8,%eax
ffffffff80211c6e:	48 85 c0             	test   %rax,%rax
ffffffff80211c71:	0f 94 c0             	sete   %al
ffffffff80211c74:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c77:	48 85 c0             	test   %rax,%rax
ffffffff80211c7a:	74 0c                	je     ffffffff80211c88 <_RME_Pgt_Con+0x43e>
ffffffff80211c7c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211c83:	e9 39 01 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211c88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211c8c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211c90:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80211c94:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff80211c98:	72 17                	jb     ffffffff80211cb1 <_RME_Pgt_Con+0x467>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80211c9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211c9e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211ca2:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211ca6:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211cab:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff80211caf:	73 0c                	jae    ffffffff80211cbd <_RME_Pgt_Con+0x473>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211cb1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211cb8:	e9 04 01 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff80211cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211cc1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211cc5:	89 c2                	mov    %eax,%edx
ffffffff80211cc7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211ccb:	89 d1                	mov    %edx,%ecx
ffffffff80211ccd:	48 d3 e8             	shr    %cl,%rax
ffffffff80211cd0:	48 85 c0             	test   %rax,%rax
ffffffff80211cd3:	74 0c                	je     ffffffff80211ce1 <_RME_Pgt_Con+0x497>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211cd5:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211cdc:	e9 e0 00 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the child table falls within one slot of the parent table */
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff80211ce1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211ce5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211ce9:	89 c2                	mov    %eax,%edx
ffffffff80211ceb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211cef:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211cf3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211cf7:	48 01 d0             	add    %rdx,%rax
ffffffff80211cfa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff80211cfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d02:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d06:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211d0a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Szord_Parent<Order_Child)
ffffffff80211d0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211d12:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80211d16:	73 0c                	jae    ffffffff80211d24 <_RME_Pgt_Con+0x4da>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff80211d18:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211d1f:	e9 9d 00 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
#else
    /* Force no path compression when virtual mappings are enabled */
    if(Szord_Parent!=Order_Child)
ffffffff80211d24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211d28:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80211d2c:	74 0c                	je     ffffffff80211d3a <_RME_Pgt_Con+0x4f0>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211d2e:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211d35:	e9 87 00 00 00       	jmp    ffffffff80211dc1 <_RME_Pgt_Con+0x577>
    }
#endif

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff80211d3a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff80211d3e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80211d42:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff80211d46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d4a:	48 89 c7             	mov    %rax,%rdi
ffffffff80211d4d:	e8 06 4e 01 00       	call   ffffffff80226b58 <__RME_Pgt_Pgdir_Map>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80211d52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d56:	48 8b 00             	mov    (%rax),%rax
ffffffff80211d59:	89 c0                	mov    %eax,%eax
ffffffff80211d5b:	48 85 c0             	test   %rax,%rax
ffffffff80211d5e:	74 0a                	je     ffffffff80211d6a <_RME_Pgt_Con+0x520>
ffffffff80211d60:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d64:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80211d68:	eb 04                	jmp    ffffffff80211d6e <_RME_Pgt_Con+0x524>
ffffffff80211d6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d6e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1);
ffffffff80211d72:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211d76:	48 83 c0 08          	add    $0x8,%rax
ffffffff80211d7a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211d7f:	48 89 c7             	mov    %rax,%rdi
ffffffff80211d82:	e8 0c aa ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff80211d87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d8b:	48 8b 00             	mov    (%rax),%rax
ffffffff80211d8e:	89 c0                	mov    %eax,%eax
ffffffff80211d90:	48 85 c0             	test   %rax,%rax
ffffffff80211d93:	74 0a                	je     ffffffff80211d9f <_RME_Pgt_Con+0x555>
ffffffff80211d95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d99:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80211d9d:	eb 04                	jmp    ffffffff80211da3 <_RME_Pgt_Con+0x559>
ffffffff80211d9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211da3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1);
ffffffff80211da7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211dab:	48 83 c0 08          	add    $0x8,%rax
ffffffff80211daf:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211db4:	48 89 c7             	mov    %rax,%rdi
ffffffff80211db7:	e8 d7 a9 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80211dbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80211dc1:	c9                   	leave
ffffffff80211dc2:	c3                   	ret

ffffffff80211dc3 <_RME_Pgt_Des>:
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Des(struct RME_Cap_Cpt* Cpt, 
                              rme_cid_t Cap_Pgt_Parent,
                              rme_ptr_t Pos,
                              rme_cid_t Cap_Pgt_Child)
{
ffffffff80211dc3:	f3 0f 1e fa          	endbr64
ffffffff80211dc7:	55                   	push   %rbp
ffffffff80211dc8:	48 89 e5             	mov    %rsp,%rbp
ffffffff80211dcb:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80211dcf:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80211dd3:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80211dd7:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80211ddb:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    struct RME_Cap_Pgt* Pgt_Child;
    struct RME_Cap_Pgt* Pgt_Root;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff80211ddf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211de3:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211de8:	48 85 c0             	test   %rax,%rax
ffffffff80211deb:	0f 85 98 00 00 00    	jne    ffffffff80211e89 <_RME_Pgt_Des+0xc6>
ffffffff80211df1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211df5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211df9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80211dfd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211e00:	0f 93 c0             	setae  %al
ffffffff80211e03:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e06:	48 85 c0             	test   %rax,%rax
ffffffff80211e09:	74 0c                	je     ffffffff80211e17 <_RME_Pgt_Des+0x54>
ffffffff80211e0b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211e12:	e9 c9 04 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80211e17:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e1b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211e1f:	48 89 c2             	mov    %rax,%rdx
ffffffff80211e22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211e26:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211e2a:	48 01 d0             	add    %rdx,%rax
ffffffff80211e2d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211e31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211e35:	48 8b 00             	mov    (%rax),%rax
ffffffff80211e38:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211e3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211e40:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211e44:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211e47:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211e4b:	0f 94 c0             	sete   %al
ffffffff80211e4e:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e51:	48 85 c0             	test   %rax,%rax
ffffffff80211e54:	74 0c                	je     ffffffff80211e62 <_RME_Pgt_Des+0x9f>
ffffffff80211e56:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211e5d:	e9 7e 04 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80211e62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211e66:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211e6a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211e6e:	0f 95 c0             	setne  %al
ffffffff80211e71:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e74:	48 85 c0             	test   %rax,%rax
ffffffff80211e77:	0f 84 4c 01 00 00    	je     ffffffff80211fc9 <_RME_Pgt_Des+0x206>
ffffffff80211e7d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211e84:	e9 57 04 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80211e89:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e8d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211e91:	48 89 c2             	mov    %rax,%rdx
ffffffff80211e94:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211e98:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211e9c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211e9f:	0f 93 c0             	setae  %al
ffffffff80211ea2:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ea5:	48 85 c0             	test   %rax,%rax
ffffffff80211ea8:	74 0c                	je     ffffffff80211eb6 <_RME_Pgt_Des+0xf3>
ffffffff80211eaa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211eb1:	e9 2a 04 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80211eb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211eba:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211ebe:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211ec2:	48 89 c2             	mov    %rax,%rdx
ffffffff80211ec5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211ec9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211ecd:	48 01 d0             	add    %rdx,%rax
ffffffff80211ed0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211ed4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211ed8:	48 8b 00             	mov    (%rax),%rax
ffffffff80211edb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211edf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211ee3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211ee7:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211eea:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211eee:	0f 94 c0             	sete   %al
ffffffff80211ef1:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ef4:	48 85 c0             	test   %rax,%rax
ffffffff80211ef7:	74 0c                	je     ffffffff80211f05 <_RME_Pgt_Des+0x142>
ffffffff80211ef9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211f00:	e9 db 03 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80211f05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211f09:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211f0d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211f11:	0f 95 c0             	setne  %al
ffffffff80211f14:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f17:	48 85 c0             	test   %rax,%rax
ffffffff80211f1a:	74 0c                	je     ffffffff80211f28 <_RME_Pgt_Des+0x165>
ffffffff80211f1c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211f23:	e9 b8 03 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80211f28:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211f2c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211f31:	48 89 c2             	mov    %rax,%rdx
ffffffff80211f34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211f38:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211f3c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211f3f:	0f 93 c0             	setae  %al
ffffffff80211f42:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f45:	48 85 c0             	test   %rax,%rax
ffffffff80211f48:	74 0c                	je     ffffffff80211f56 <_RME_Pgt_Des+0x193>
ffffffff80211f4a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211f51:	e9 8a 03 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80211f56:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211f5a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211f5f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f63:	48 89 c2             	mov    %rax,%rdx
ffffffff80211f66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211f6a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211f6e:	48 01 d0             	add    %rdx,%rax
ffffffff80211f71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211f75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211f79:	48 8b 00             	mov    (%rax),%rax
ffffffff80211f7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211f80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211f84:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211f88:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211f8b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211f8f:	0f 94 c0             	sete   %al
ffffffff80211f92:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f95:	48 85 c0             	test   %rax,%rax
ffffffff80211f98:	74 0c                	je     ffffffff80211fa6 <_RME_Pgt_Des+0x1e3>
ffffffff80211f9a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211fa1:	e9 3a 03 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80211fa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211faa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211fae:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211fb2:	0f 95 c0             	setne  %al
ffffffff80211fb5:	0f b6 c0             	movzbl %al,%eax
ffffffff80211fb8:	48 85 c0             	test   %rax,%rax
ffffffff80211fbb:	74 0c                	je     ffffffff80211fc9 <_RME_Pgt_Des+0x206>
ffffffff80211fbd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211fc4:	e9 17 03 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff80211fc9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211fcd:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211fd2:	48 85 c0             	test   %rax,%rax
ffffffff80211fd5:	0f 85 98 00 00 00    	jne    ffffffff80212073 <_RME_Pgt_Des+0x2b0>
ffffffff80211fdb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211fdf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211fe3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80211fe7:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211fea:	0f 93 c0             	setae  %al
ffffffff80211fed:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ff0:	48 85 c0             	test   %rax,%rax
ffffffff80211ff3:	74 0c                	je     ffffffff80212001 <_RME_Pgt_Des+0x23e>
ffffffff80211ff5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211ffc:	e9 df 02 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80212001:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212005:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212009:	48 89 c2             	mov    %rax,%rdx
ffffffff8021200c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212010:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212014:	48 01 d0             	add    %rdx,%rax
ffffffff80212017:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021201b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021201f:	48 8b 00             	mov    (%rax),%rax
ffffffff80212022:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80212026:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021202a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021202e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212031:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212035:	0f 94 c0             	sete   %al
ffffffff80212038:	0f b6 c0             	movzbl %al,%eax
ffffffff8021203b:	48 85 c0             	test   %rax,%rax
ffffffff8021203e:	74 0c                	je     ffffffff8021204c <_RME_Pgt_Des+0x289>
ffffffff80212040:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212047:	e9 94 02 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff8021204c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212050:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212054:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212058:	0f 95 c0             	setne  %al
ffffffff8021205b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021205e:	48 85 c0             	test   %rax,%rax
ffffffff80212061:	0f 84 4c 01 00 00    	je     ffffffff802121b3 <_RME_Pgt_Des+0x3f0>
ffffffff80212067:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021206e:	e9 6d 02 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80212073:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212077:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021207b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021207e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212082:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212086:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212089:	0f 93 c0             	setae  %al
ffffffff8021208c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021208f:	48 85 c0             	test   %rax,%rax
ffffffff80212092:	74 0c                	je     ffffffff802120a0 <_RME_Pgt_Des+0x2dd>
ffffffff80212094:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021209b:	e9 40 02 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff802120a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802120a4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802120a8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802120ac:	48 89 c2             	mov    %rax,%rdx
ffffffff802120af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802120b3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802120b7:	48 01 d0             	add    %rdx,%rax
ffffffff802120ba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802120be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802120c2:	48 8b 00             	mov    (%rax),%rax
ffffffff802120c5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802120c9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802120cd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802120d1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802120d4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802120d8:	0f 94 c0             	sete   %al
ffffffff802120db:	0f b6 c0             	movzbl %al,%eax
ffffffff802120de:	48 85 c0             	test   %rax,%rax
ffffffff802120e1:	74 0c                	je     ffffffff802120ef <_RME_Pgt_Des+0x32c>
ffffffff802120e3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802120ea:	e9 f1 01 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff802120ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802120f3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802120f7:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802120fb:	0f 95 c0             	setne  %al
ffffffff802120fe:	0f b6 c0             	movzbl %al,%eax
ffffffff80212101:	48 85 c0             	test   %rax,%rax
ffffffff80212104:	74 0c                	je     ffffffff80212112 <_RME_Pgt_Des+0x34f>
ffffffff80212106:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021210d:	e9 ce 01 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80212112:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212116:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021211b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021211e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212122:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212126:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212129:	0f 93 c0             	setae  %al
ffffffff8021212c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021212f:	48 85 c0             	test   %rax,%rax
ffffffff80212132:	74 0c                	je     ffffffff80212140 <_RME_Pgt_Des+0x37d>
ffffffff80212134:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021213b:	e9 a0 01 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80212140:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212144:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212149:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021214d:	48 89 c2             	mov    %rax,%rdx
ffffffff80212150:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212154:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212158:	48 01 d0             	add    %rdx,%rax
ffffffff8021215b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021215f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212163:	48 8b 00             	mov    (%rax),%rax
ffffffff80212166:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021216a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021216e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212172:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212175:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212179:	0f 94 c0             	sete   %al
ffffffff8021217c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021217f:	48 85 c0             	test   %rax,%rax
ffffffff80212182:	74 0c                	je     ffffffff80212190 <_RME_Pgt_Des+0x3cd>
ffffffff80212184:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021218b:	e9 50 01 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
ffffffff80212190:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212194:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212198:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021219c:	0f 95 c0             	setne  %al
ffffffff8021219f:	0f b6 c0             	movzbl %al,%eax
ffffffff802121a2:	48 85 c0             	test   %rax,%rax
ffffffff802121a5:	74 0c                	je     ffffffff802121b3 <_RME_Pgt_Des+0x3f0>
ffffffff802121a7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802121ae:	e9 2d 01 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
                   struct RME_Cap_Pgt*,Pgt_Child,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff802121b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802121b7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802121bb:	83 e0 20             	and    $0x20,%eax
ffffffff802121be:	48 85 c0             	test   %rax,%rax
ffffffff802121c1:	0f 94 c0             	sete   %al
ffffffff802121c4:	0f b6 c0             	movzbl %al,%eax
ffffffff802121c7:	48 85 c0             	test   %rax,%rax
ffffffff802121ca:	74 0c                	je     ffffffff802121d8 <_RME_Pgt_Des+0x415>
ffffffff802121cc:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802121d3:	e9 08 01 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff802121d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802121dc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802121e0:	83 e0 08             	and    $0x8,%eax
ffffffff802121e3:	48 85 c0             	test   %rax,%rax
ffffffff802121e6:	0f 94 c0             	sete   %al
ffffffff802121e9:	0f b6 c0             	movzbl %al,%eax
ffffffff802121ec:	48 85 c0             	test   %rax,%rax
ffffffff802121ef:	74 0c                	je     ffffffff802121fd <_RME_Pgt_Des+0x43a>
ffffffff802121f1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802121f8:	e9 e3 00 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff802121fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212201:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212205:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80212209:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff8021220d:	72 17                	jb     ffffffff80212226 <_RME_Pgt_Des+0x463>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff8021220f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212213:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212217:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8021221b:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212220:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff80212224:	73 0c                	jae    ffffffff80212232 <_RME_Pgt_Des+0x46f>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80212226:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021222d:	e9 ae 00 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff80212232:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212236:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021223a:	89 c2                	mov    %eax,%edx
ffffffff8021223c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212240:	89 d1                	mov    %edx,%ecx
ffffffff80212242:	48 d3 e8             	shr    %cl,%rax
ffffffff80212245:	48 85 c0             	test   %rax,%rax
ffffffff80212248:	74 0c                	je     ffffffff80212256 <_RME_Pgt_Des+0x493>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff8021224a:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80212251:	e9 8a 00 00 00       	jmp    ffffffff802122e0 <_RME_Pgt_Des+0x51d>

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict. Also,
     * the HAL needs to guarantee that the Child is actually mapped there,
     * and use that as the old value in CAS */
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
ffffffff80212256:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021225a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021225e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212262:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212265:	48 89 c7             	mov    %rax,%rdi
ffffffff80212268:	e8 d2 49 01 00       	call   ffffffff80226c3f <__RME_Pgt_Pgdir_Unmap>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Decrease refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff8021226d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212271:	48 8b 00             	mov    (%rax),%rax
ffffffff80212274:	89 c0                	mov    %eax,%eax
ffffffff80212276:	48 85 c0             	test   %rax,%rax
ffffffff80212279:	74 0a                	je     ffffffff80212285 <_RME_Pgt_Des+0x4c2>
ffffffff8021227b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021227f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212283:	eb 04                	jmp    ffffffff80212289 <_RME_Pgt_Des+0x4c6>
ffffffff80212285:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212289:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),-1);
ffffffff8021228d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212291:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212295:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021229c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021229f:	e8 ef a4 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff802122a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802122a8:	48 8b 00             	mov    (%rax),%rax
ffffffff802122ab:	89 c0                	mov    %eax,%eax
ffffffff802122ad:	48 85 c0             	test   %rax,%rax
ffffffff802122b0:	74 0a                	je     ffffffff802122bc <_RME_Pgt_Des+0x4f9>
ffffffff802122b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802122b6:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802122ba:	eb 04                	jmp    ffffffff802122c0 <_RME_Pgt_Des+0x4fd>
ffffffff802122bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802122c0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),-1);
ffffffff802122c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802122c8:	48 83 c0 08          	add    $0x8,%rax
ffffffff802122cc:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802122d3:	48 89 c7             	mov    %rax,%rdi
ffffffff802122d6:	e8 b8 a4 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff802122db:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802122e0:	c9                   	leave
ffffffff802122e1:	c3                   	ret

ffffffff802122e2 <_RME_Kot_Init>:
Output      : None.
Return      : rme_ret_t - If the number of words are is not sufficient to hold 
                          all kernel memory, -1; else 0.
******************************************************************************/
rme_ret_t _RME_Kot_Init(rme_ptr_t Word)
{
ffffffff802122e2:	f3 0f 1e fa          	endbr64
ffffffff802122e6:	55                   	push   %rbp
ffffffff802122e7:	48 89 e5             	mov    %rsp,%rbp
ffffffff802122ea:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff802122ee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Count;
    
    if(Word<RME_KOT_WORD_NUM)
ffffffff802122f2:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
ffffffff802122f7:	77 09                	ja     ffffffff80212302 <_RME_Kot_Init+0x20>
    {
        RME_COV_MARKER();

        return -1;
ffffffff802122f9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212300:	eb 3e                	jmp    ffffffff80212340 <_RME_Kot_Init+0x5e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Zero out the whole table */
    for(Count=0U;Count<Word;Count++)
ffffffff80212302:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212309:	00 
ffffffff8021230a:	eb 25                	jmp    ffffffff80212331 <_RME_Kot_Init+0x4f>
    {
        RME_KOT_VA_BASE[Count]=0U;
ffffffff8021230c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212310:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212317:	00 
ffffffff80212318:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021231f:	80 ff ff 
ffffffff80212322:	48 01 d0             	add    %rdx,%rax
ffffffff80212325:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff8021232c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212331:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212335:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80212339:	72 d1                	jb     ffffffff8021230c <_RME_Kot_Init+0x2a>
    }

    return 0;
ffffffff8021233b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212340:	c9                   	leave
ffffffff80212341:	c3                   	ret

ffffffff80212342 <_RME_Kot_Mark>:
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Kot_Mark(rme_ptr_t Kaddr,
                        rme_ptr_t Size)
{
ffffffff80212342:	f3 0f 1e fa          	endbr64
ffffffff80212346:	55                   	push   %rbp
ffffffff80212347:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021234a:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021234e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80212352:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    rme_ptr_t Mask_Begin;
    /* The mask at the end word */
    rme_ptr_t Mask_End;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff80212356:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021235a:	83 e0 0f             	and    $0xf,%eax
ffffffff8021235d:	48 85 c0             	test   %rax,%rax
ffffffff80212360:	74 0c                	je     ffffffff8021236e <_RME_Kot_Mark+0x2c>
    {
        RME_COV_MARKER();

        return RME_ERR_KOT_BMP;
ffffffff80212362:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212369:	e9 19 03 00 00       	jmp    ffffffff80212687 <_RME_Kot_Mark+0x345>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Round the marking to RME_KOM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8021236e:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80212375:	80 00 00 
ffffffff80212378:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021237c:	48 01 d0             	add    %rdx,%rax
ffffffff8021237f:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80212383:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80212387:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021238b:	83 e0 3f             	and    $0x3f,%eax
ffffffff8021238e:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212395:	89 c1                	mov    %eax,%ecx
ffffffff80212397:	48 d3 e2             	shl    %cl,%rdx
ffffffff8021239a:	48 89 d0             	mov    %rdx,%rax
ffffffff8021239d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Start=Start>>RME_WORD_ORDER;
ffffffff802123a1:	48 c1 6d e8 06       	shrq   $0x6,-0x18(%rbp)
    
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802123a6:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802123aa:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802123ae:	48 01 c2             	add    %rax,%rdx
ffffffff802123b1:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff802123b8:	7f 00 00 
ffffffff802123bb:	48 01 d0             	add    %rdx,%rax
ffffffff802123be:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff802123c2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff802123c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802123ca:	f7 d0                	not    %eax
ffffffff802123cc:	83 e0 3f             	and    $0x3f,%eax
ffffffff802123cf:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802123d6:	89 c1                	mov    %eax,%ecx
ffffffff802123d8:	48 d3 ea             	shr    %cl,%rdx
ffffffff802123db:	48 89 d0             	mov    %rdx,%rax
ffffffff802123de:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    End=End>>RME_WORD_ORDER;
ffffffff802123e2:	48 c1 6d d8 06       	shrq   $0x6,-0x28(%rbp)
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff802123e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802123eb:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff802123ef:	0f 85 89 00 00 00    	jne    ffffffff8021247e <_RME_Kot_Mark+0x13c>
    {
        RME_COV_MARKER();

        /* Someone already populated something here */
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff802123f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802123f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212400:	00 
ffffffff80212401:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212408:	80 ff ff 
ffffffff8021240b:	48 01 d0             	add    %rdx,%rax
ffffffff8021240e:	48 8b 00             	mov    (%rax),%rax
ffffffff80212411:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
ffffffff80212415:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212419:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff8021241d:	48 23 45 c8          	and    -0x38(%rbp),%rax
ffffffff80212421:	48 85 c0             	test   %rax,%rax
ffffffff80212424:	74 0c                	je     ffffffff80212432 <_RME_Kot_Mark+0xf0>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212426:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021242d:	e9 55 02 00 00       	jmp    ffffffff80212687 <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check done, do the marking with CAS */
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff80212432:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212436:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff8021243a:	48 0b 45 c8          	or     -0x38(%rbp),%rax
ffffffff8021243e:	48 89 c2             	mov    %rax,%rdx
ffffffff80212441:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212445:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff8021244c:	00 
ffffffff8021244d:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212454:	80 ff ff 
ffffffff80212457:	48 01 c1             	add    %rax,%rcx
ffffffff8021245a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021245e:	48 89 c6             	mov    %rax,%rsi
ffffffff80212461:	48 89 cf             	mov    %rcx,%rdi
ffffffff80212464:	e8 f5 a2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212469:	48 85 c0             	test   %rax,%rax
ffffffff8021246c:	0f 85 10 02 00 00    	jne    ffffffff80212682 <_RME_Kot_Mark+0x340>
                         Old_Val,
                         Old_Val|(Mask_Begin&Mask_End))==RME_CASFAIL)
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212472:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212479:	e9 09 02 00 00       	jmp    ffffffff80212687 <_RME_Kot_Mark+0x345>
    }
    else
    {
        RME_COV_MARKER();
        
        Undo=0U;
ffffffff8021247e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80212485:	00 
        /* Check&Mark the start */
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff80212486:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021248a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212491:	00 
ffffffff80212492:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212499:	80 ff ff 
ffffffff8021249c:	48 01 d0             	add    %rdx,%rax
ffffffff8021249f:	48 8b 00             	mov    (%rax),%rax
ffffffff802124a2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if((Old_Val&Mask_Begin)!=0U)
ffffffff802124a6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802124aa:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff802124ae:	48 85 c0             	test   %rax,%rax
ffffffff802124b1:	74 0c                	je     ffffffff802124bf <_RME_Kot_Mark+0x17d>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802124b3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802124ba:	e9 c8 01 00 00       	jmp    ffffffff80212687 <_RME_Kot_Mark+0x345>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff802124bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802124c3:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff802124c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802124ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802124ce:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff802124d5:	00 
ffffffff802124d6:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802124dd:	80 ff ff 
ffffffff802124e0:	48 01 c1             	add    %rax,%rcx
ffffffff802124e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802124e7:	48 89 c6             	mov    %rax,%rsi
ffffffff802124ea:	48 89 cf             	mov    %rcx,%rdi
ffffffff802124ed:	e8 6c a2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802124f2:	48 85 c0             	test   %rax,%rax
ffffffff802124f5:	75 0c                	jne    ffffffff80212503 <_RME_Kot_Mark+0x1c1>
                         Old_Val,
                         Old_Val|Mask_Begin)==RME_CASFAIL)
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802124f7:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802124fe:	e9 84 01 00 00       	jmp    ffffffff80212687 <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check&Mark the middle */
        for(Count=Start+1U;Count<End;Count++)
ffffffff80212503:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212507:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021250b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021250f:	eb 75                	jmp    ffffffff80212586 <_RME_Kot_Mark+0x244>
        {
            Old_Val=RME_KOT_VA_BASE[Count];
ffffffff80212511:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212515:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021251c:	00 
ffffffff8021251d:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212524:	80 ff ff 
ffffffff80212527:	48 01 d0             	add    %rdx,%rax
ffffffff8021252a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021252d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if(Old_Val!=0U)
ffffffff80212531:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff80212536:	74 0a                	je     ffffffff80212542 <_RME_Kot_Mark+0x200>
            {
                RME_COV_MARKER();

                Undo=1U;
ffffffff80212538:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8021253f:	00 
                break;
ffffffff80212540:	eb 4e                	jmp    ffffffff80212590 <_RME_Kot_Mark+0x24e>
            }
            else
            {
                RME_COV_MARKER();
                
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Count],
ffffffff80212542:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212546:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021254d:	00 
ffffffff8021254e:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212555:	80 ff ff 
ffffffff80212558:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff8021255c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212560:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212567:	48 89 c6             	mov    %rax,%rsi
ffffffff8021256a:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021256d:	e8 ec a1 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212572:	48 85 c0             	test   %rax,%rax
ffffffff80212575:	75 0a                	jne    ffffffff80212581 <_RME_Kot_Mark+0x23f>
                                 Old_Val,
                                 RME_MASK_FULL)==RME_CASFAIL)
                {
                    RME_COV_MARKER();
                    
                    Undo=1U;
ffffffff80212577:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8021257e:	00 
                    break;
ffffffff8021257f:	eb 0f                	jmp    ffffffff80212590 <_RME_Kot_Mark+0x24e>
        for(Count=Start+1U;Count<End;Count++)
ffffffff80212581:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212586:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021258a:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8021258e:	72 81                	jb     ffffffff80212511 <_RME_Kot_Mark+0x1cf>
                }
            }
        }
        
        /* See if the middle part failed. If yes, we skip the end marking */
        if(Undo==0U)
ffffffff80212590:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80212595:	75 77                	jne    ffffffff8021260e <_RME_Kot_Mark+0x2cc>
        {
            RME_COV_MARKER();

            /* Check&Mark the end */
            Old_Val=RME_KOT_VA_BASE[End];
ffffffff80212597:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021259b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802125a2:	00 
ffffffff802125a3:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802125aa:	80 ff ff 
ffffffff802125ad:	48 01 d0             	add    %rdx,%rax
ffffffff802125b0:	48 8b 00             	mov    (%rax),%rax
ffffffff802125b3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if((Old_Val&Mask_End)!=0U)
ffffffff802125b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802125bb:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff802125bf:	48 85 c0             	test   %rax,%rax
ffffffff802125c2:	74 0a                	je     ffffffff802125ce <_RME_Kot_Mark+0x28c>
            {
                RME_COV_MARKER();

                Undo=1U;
ffffffff802125c4:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff802125cb:	00 
ffffffff802125cc:	eb 40                	jmp    ffffffff8021260e <_RME_Kot_Mark+0x2cc>
            }
            else
            {
                RME_COV_MARKER();

                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
ffffffff802125ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802125d2:	48 0b 45 d0          	or     -0x30(%rbp),%rax
ffffffff802125d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802125d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802125dd:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff802125e4:	00 
ffffffff802125e5:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802125ec:	80 ff ff 
ffffffff802125ef:	48 01 c1             	add    %rax,%rcx
ffffffff802125f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802125f6:	48 89 c6             	mov    %rax,%rsi
ffffffff802125f9:	48 89 cf             	mov    %rcx,%rdi
ffffffff802125fc:	e8 5d a1 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212601:	48 85 c0             	test   %rax,%rax
ffffffff80212604:	75 08                	jne    ffffffff8021260e <_RME_Kot_Mark+0x2cc>
                                 Old_Val,
                                 Old_Val|Mask_End)==RME_CASFAIL)
                {
                    RME_COV_MARKER();

                    Undo=1U;
ffffffff80212606:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8021260d:	00 
        {
            RME_COV_MARKER();
        }
        
        /* See if we need to undo. If yes, proceed to unroll and return error */
        if(Undo!=0U)
ffffffff8021260e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80212613:	74 6d                	je     ffffffff80212682 <_RME_Kot_Mark+0x340>
        {
            RME_COV_MARKER();

            /* Undo the middle part - no CAS neeeded, write back is always atomic */
            for(Count--;Count>Start;Count--)
ffffffff80212615:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff8021261a:	eb 25                	jmp    ffffffff80212641 <_RME_Kot_Mark+0x2ff>
            {
                RME_KOT_VA_BASE[Count]=0U;
ffffffff8021261c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212620:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212627:	00 
ffffffff80212628:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021262f:	80 ff ff 
ffffffff80212632:	48 01 d0             	add    %rdx,%rax
ffffffff80212635:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            for(Count--;Count>Start;Count--)
ffffffff8021263c:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80212641:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212645:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80212649:	72 d1                	jb     ffffffff8021261c <_RME_Kot_Mark+0x2da>
            }
            /* Undo the first word - need atomic instructions */
            RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff8021264b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021264f:	48 f7 d0             	not    %rax
ffffffff80212652:	48 89 c1             	mov    %rax,%rcx
ffffffff80212655:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212659:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212660:	00 
ffffffff80212661:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212668:	80 ff ff 
ffffffff8021266b:	48 01 d0             	add    %rdx,%rax
ffffffff8021266e:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212671:	48 89 c7             	mov    %rax,%rdi
ffffffff80212674:	e8 45 a1 ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
            /* Return failure */
            return RME_ERR_KOT_BMP;
ffffffff80212679:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212680:	eb 05                	jmp    ffffffff80212687 <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff80212682:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212687:	c9                   	leave
ffffffff80212688:	c3                   	ret

ffffffff80212689 <_RME_Kot_Erase>:
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Kot_Erase(rme_ptr_t Kaddr,
                         rme_ptr_t Size)
{
ffffffff80212689:	f3 0f 1e fa          	endbr64
ffffffff8021268d:	55                   	push   %rbp
ffffffff8021268e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212691:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80212695:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80212699:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    /* The mask at the end word */
    rme_ptr_t Mask_End;
    rme_ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff8021269d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802126a1:	83 e0 0f             	and    $0xf,%eax
ffffffff802126a4:	48 85 c0             	test   %rax,%rax
ffffffff802126a7:	74 0c                	je     ffffffff802126b5 <_RME_Kot_Erase+0x2c>
    {
        RME_COV_MARKER();

        return RME_ERR_KOT_BMP;
ffffffff802126a9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802126b0:	e9 4f 02 00 00       	jmp    ffffffff80212904 <_RME_Kot_Erase+0x27b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Round the marking to RME_KOM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802126b5:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802126bc:	80 00 00 
ffffffff802126bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802126c3:	48 01 d0             	add    %rdx,%rax
ffffffff802126c6:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff802126ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff802126ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802126d2:	83 e0 3f             	and    $0x3f,%eax
ffffffff802126d5:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802126dc:	89 c1                	mov    %eax,%ecx
ffffffff802126de:	48 d3 e2             	shl    %cl,%rdx
ffffffff802126e1:	48 89 d0             	mov    %rdx,%rax
ffffffff802126e4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Start=Start>>RME_WORD_ORDER;
ffffffff802126e8:	48 c1 6d f0 06       	shrq   $0x6,-0x10(%rbp)
    
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802126ed:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802126f1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802126f5:	48 01 c2             	add    %rax,%rdx
ffffffff802126f8:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff802126ff:	7f 00 00 
ffffffff80212702:	48 01 d0             	add    %rdx,%rax
ffffffff80212705:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80212709:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8021270d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212711:	f7 d0                	not    %eax
ffffffff80212713:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212716:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8021271d:	89 c1                	mov    %eax,%ecx
ffffffff8021271f:	48 d3 ea             	shr    %cl,%rdx
ffffffff80212722:	48 89 d0             	mov    %rdx,%rax
ffffffff80212725:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    End=End>>RME_WORD_ORDER;
ffffffff80212729:	48 c1 6d e0 06       	shrq   $0x6,-0x20(%rbp)
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff8021272e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212732:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80212736:	75 77                	jne    ffffffff802127af <_RME_Kot_Erase+0x126>
    {
        RME_COV_MARKER();

        /* This address range is not fully populated */
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff80212738:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021273c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212743:	00 
ffffffff80212744:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021274b:	80 ff ff 
ffffffff8021274e:	48 01 d0             	add    %rdx,%rax
ffffffff80212751:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212754:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212758:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff8021275c:	48 21 c2             	and    %rax,%rdx
ffffffff8021275f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212763:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff80212767:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021276a:	74 0c                	je     ffffffff80212778 <_RME_Kot_Erase+0xef>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff8021276c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212773:	e9 8c 01 00 00       	jmp    ffffffff80212904 <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Check done, do the unmarking - need atomic operations */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~(Mask_Begin&Mask_End));
ffffffff80212778:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021277c:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff80212780:	48 f7 d0             	not    %rax
ffffffff80212783:	48 89 c1             	mov    %rax,%rcx
ffffffff80212786:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021278a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212791:	00 
ffffffff80212792:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212799:	80 ff ff 
ffffffff8021279c:	48 01 d0             	add    %rdx,%rax
ffffffff8021279f:	48 89 ce             	mov    %rcx,%rsi
ffffffff802127a2:	48 89 c7             	mov    %rax,%rdi
ffffffff802127a5:	e8 14 a0 ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
ffffffff802127aa:	e9 50 01 00 00       	jmp    ffffffff802128ff <_RME_Kot_Erase+0x276>
    else
    {
        RME_COV_MARKER();

        /* Check the start */
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
ffffffff802127af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802127b3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802127ba:	00 
ffffffff802127bb:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802127c2:	80 ff ff 
ffffffff802127c5:	48 01 d0             	add    %rdx,%rax
ffffffff802127c8:	48 8b 00             	mov    (%rax),%rax
ffffffff802127cb:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff802127cf:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff802127d3:	74 0c                	je     ffffffff802127e1 <_RME_Kot_Erase+0x158>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802127d5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802127dc:	e9 23 01 00 00       	jmp    ffffffff80212904 <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the middle */
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802127e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802127e5:	48 83 c0 01          	add    $0x1,%rax
ffffffff802127e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802127ed:	eb 33                	jmp    ffffffff80212822 <_RME_Kot_Erase+0x199>
        {
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
ffffffff802127ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802127f3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802127fa:	00 
ffffffff802127fb:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212802:	80 ff ff 
ffffffff80212805:	48 01 d0             	add    %rdx,%rax
ffffffff80212808:	48 8b 00             	mov    (%rax),%rax
ffffffff8021280b:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff8021280f:	74 0c                	je     ffffffff8021281d <_RME_Kot_Erase+0x194>
            {
                RME_COV_MARKER();

                return RME_ERR_KOT_BMP;
ffffffff80212811:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212818:	e9 e7 00 00 00       	jmp    ffffffff80212904 <_RME_Kot_Erase+0x27b>
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff8021281d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212822:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212826:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8021282a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff8021282e:	72 bf                	jb     ffffffff802127ef <_RME_Kot_Erase+0x166>
                /* No action required */
            }
        }

        /* Check the end */
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
ffffffff80212830:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212834:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021283b:	00 
ffffffff8021283c:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212843:	80 ff ff 
ffffffff80212846:	48 01 d0             	add    %rdx,%rax
ffffffff80212849:	48 8b 00             	mov    (%rax),%rax
ffffffff8021284c:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff80212850:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80212854:	74 0c                	je     ffffffff80212862 <_RME_Kot_Erase+0x1d9>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212856:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021285d:	e9 a2 00 00 00       	jmp    ffffffff80212904 <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Erase the start - make it atomic */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff80212862:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212866:	48 f7 d0             	not    %rax
ffffffff80212869:	48 89 c1             	mov    %rax,%rcx
ffffffff8021286c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212870:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212877:	00 
ffffffff80212878:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021287f:	80 ff ff 
ffffffff80212882:	48 01 d0             	add    %rdx,%rax
ffffffff80212885:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212888:	48 89 c7             	mov    %rax,%rdi
ffffffff8021288b:	e8 2e 9f ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
        /* Erase the middle - do not need atomics here */
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212890:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212894:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212898:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021289c:	eb 25                	jmp    ffffffff802128c3 <_RME_Kot_Erase+0x23a>
        {
            RME_KOT_VA_BASE[Count]=0U;
ffffffff8021289e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802128a2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802128a9:	00 
ffffffff802128aa:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802128b1:	80 ff ff 
ffffffff802128b4:	48 01 d0             	add    %rdx,%rax
ffffffff802128b7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff802128be:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802128c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802128c7:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802128cb:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff802128cf:	72 cd                	jb     ffffffff8021289e <_RME_Kot_Erase+0x215>
        }
        /* Erase the end - make it atomic */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[End]),~Mask_End);
ffffffff802128d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802128d5:	48 f7 d0             	not    %rax
ffffffff802128d8:	48 89 c1             	mov    %rax,%rcx
ffffffff802128db:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802128df:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802128e6:	00 
ffffffff802128e7:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802128ee:	80 ff ff 
ffffffff802128f1:	48 01 d0             	add    %rdx,%rax
ffffffff802128f4:	48 89 ce             	mov    %rcx,%rsi
ffffffff802128f7:	48 89 c7             	mov    %rax,%rdi
ffffffff802128fa:	e8 bf 9e ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
    }

    return 0;
ffffffff802128ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212904:	c9                   	leave
ffffffff80212905:	c3                   	ret

ffffffff80212906 <_RME_Kom_Boot_Crt>:
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Kom,
                            rme_ptr_t Begin,
                            rme_ptr_t End,
                            rme_ptr_t Flag)
{
ffffffff80212906:	f3 0f 1e fa          	endbr64
ffffffff8021290a:	55                   	push   %rbp
ffffffff8021290b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021290e:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80212912:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80212916:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021291a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021291e:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80212922:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80212926:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021292a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021292e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80212933:	48 85 c0             	test   %rax,%rax
ffffffff80212936:	0f 85 98 00 00 00    	jne    ffffffff802129d4 <_RME_Kom_Boot_Crt+0xce>
ffffffff8021293c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212940:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212944:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80212948:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021294b:	0f 93 c0             	setae  %al
ffffffff8021294e:	0f b6 c0             	movzbl %al,%eax
ffffffff80212951:	48 85 c0             	test   %rax,%rax
ffffffff80212954:	74 0c                	je     ffffffff80212962 <_RME_Kom_Boot_Crt+0x5c>
ffffffff80212956:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021295d:	e9 d4 02 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212962:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212966:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021296a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021296d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212971:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212975:	48 01 d0             	add    %rdx,%rax
ffffffff80212978:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021297c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212980:	48 8b 00             	mov    (%rax),%rax
ffffffff80212983:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212987:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021298b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021298f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212992:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212996:	0f 94 c0             	sete   %al
ffffffff80212999:	0f b6 c0             	movzbl %al,%eax
ffffffff8021299c:	48 85 c0             	test   %rax,%rax
ffffffff8021299f:	74 0c                	je     ffffffff802129ad <_RME_Kom_Boot_Crt+0xa7>
ffffffff802129a1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802129a8:	e9 89 02 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
ffffffff802129ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802129b1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802129b5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802129b9:	0f 95 c0             	setne  %al
ffffffff802129bc:	0f b6 c0             	movzbl %al,%eax
ffffffff802129bf:	48 85 c0             	test   %rax,%rax
ffffffff802129c2:	0f 84 4c 01 00 00    	je     ffffffff80212b14 <_RME_Kom_Boot_Crt+0x20e>
ffffffff802129c8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802129cf:	e9 62 02 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
ffffffff802129d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802129d8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802129dc:	48 89 c2             	mov    %rax,%rdx
ffffffff802129df:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802129e3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802129e7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802129ea:	0f 93 c0             	setae  %al
ffffffff802129ed:	0f b6 c0             	movzbl %al,%eax
ffffffff802129f0:	48 85 c0             	test   %rax,%rax
ffffffff802129f3:	74 0c                	je     ffffffff80212a01 <_RME_Kom_Boot_Crt+0xfb>
ffffffff802129f5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802129fc:	e9 35 02 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212a01:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212a05:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212a09:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212a0d:	48 89 c2             	mov    %rax,%rdx
ffffffff80212a10:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212a14:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212a18:	48 01 d0             	add    %rdx,%rax
ffffffff80212a1b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212a1f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212a23:	48 8b 00             	mov    (%rax),%rax
ffffffff80212a26:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212a2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212a2e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212a32:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212a35:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212a39:	0f 94 c0             	sete   %al
ffffffff80212a3c:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a3f:	48 85 c0             	test   %rax,%rax
ffffffff80212a42:	74 0c                	je     ffffffff80212a50 <_RME_Kom_Boot_Crt+0x14a>
ffffffff80212a44:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212a4b:	e9 e6 01 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212a50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212a54:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212a58:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212a5c:	0f 95 c0             	setne  %al
ffffffff80212a5f:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a62:	48 85 c0             	test   %rax,%rax
ffffffff80212a65:	74 0c                	je     ffffffff80212a73 <_RME_Kom_Boot_Crt+0x16d>
ffffffff80212a67:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212a6e:	e9 c3 01 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212a73:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212a77:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212a7c:	48 89 c2             	mov    %rax,%rdx
ffffffff80212a7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212a83:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212a87:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212a8a:	0f 93 c0             	setae  %al
ffffffff80212a8d:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a90:	48 85 c0             	test   %rax,%rax
ffffffff80212a93:	74 0c                	je     ffffffff80212aa1 <_RME_Kom_Boot_Crt+0x19b>
ffffffff80212a95:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212a9c:	e9 95 01 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212aa1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212aa5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212aaa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212aae:	48 89 c2             	mov    %rax,%rdx
ffffffff80212ab1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ab5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212ab9:	48 01 d0             	add    %rdx,%rax
ffffffff80212abc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212ac0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ac4:	48 8b 00             	mov    (%rax),%rax
ffffffff80212ac7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212acb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212acf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212ad3:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212ad6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212ada:	0f 94 c0             	sete   %al
ffffffff80212add:	0f b6 c0             	movzbl %al,%eax
ffffffff80212ae0:	48 85 c0             	test   %rax,%rax
ffffffff80212ae3:	74 0c                	je     ffffffff80212af1 <_RME_Kom_Boot_Crt+0x1eb>
ffffffff80212ae5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212aec:	e9 45 01 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212af1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212af5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212af9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212afd:	0f 95 c0             	setne  %al
ffffffff80212b00:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b03:	48 85 c0             	test   %rax,%rax
ffffffff80212b06:	74 0c                	je     ffffffff80212b14 <_RME_Kom_Boot_Crt+0x20e>
ffffffff80212b08:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212b0f:	e9 22 01 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80212b14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b18:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212b1c:	83 e0 01             	and    $0x1,%eax
ffffffff80212b1f:	48 85 c0             	test   %rax,%rax
ffffffff80212b22:	0f 94 c0             	sete   %al
ffffffff80212b25:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b28:	48 85 c0             	test   %rax,%rax
ffffffff80212b2b:	74 0c                	je     ffffffff80212b39 <_RME_Kom_Boot_Crt+0x233>
ffffffff80212b2d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80212b34:	e9 fd 00 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kom,struct RME_Cap_Kom*,Kom_Crt);
ffffffff80212b39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b3d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212b41:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80212b45:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212b48:	0f 93 c0             	setae  %al
ffffffff80212b4b:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b4e:	48 85 c0             	test   %rax,%rax
ffffffff80212b51:	74 0c                	je     ffffffff80212b5f <_RME_Kom_Boot_Crt+0x259>
ffffffff80212b53:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212b5a:	e9 d7 00 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212b5f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80212b63:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212b67:	48 89 c2             	mov    %rax,%rdx
ffffffff80212b6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b6e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212b72:	48 01 d0             	add    %rdx,%rax
ffffffff80212b75:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff80212b79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212b7d:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80212b84:	00 00 00 
ffffffff80212b87:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80212b8c:	48 89 c7             	mov    %rax,%rdi
ffffffff80212b8f:	e8 ca 9b ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212b94:	48 85 c0             	test   %rax,%rax
ffffffff80212b97:	0f 94 c0             	sete   %al
ffffffff80212b9a:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b9d:	48 85 c0             	test   %rax,%rax
ffffffff80212ba0:	74 0c                	je     ffffffff80212bae <_RME_Kom_Boot_Crt+0x2a8>
ffffffff80212ba2:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80212ba9:	e9 88 00 00 00       	jmp    ffffffff80212c36 <_RME_Kom_Boot_Crt+0x330>
ffffffff80212bae:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80212bb3:	e8 59 9c ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80212bb8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80212bbc:	48 89 42 20          	mov    %rax,0x20(%rdx)
    /* Align addresses */
#if(RME_KOM_SLOT_ORDER>6U)
    Kom_End=RME_ROUND_DOWN(End+1U,RME_KOM_SLOT_ORDER);
    Kom_Begin=RME_ROUND_UP(Start,RME_KOM_SLOT_ORDER);
#else
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff80212bc0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80212bc4:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212bc8:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80212bcc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff80212bd0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80212bd4:	48 83 c0 3f          	add    $0x3f,%rax
ffffffff80212bd8:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80212bdc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    /* Must at least allow creation of something */
    RME_ASSERT(Flag!=0U);

    /* Header init */
    Kom_Crt->Head.Root_Ref=1U;
ffffffff80212be0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212be4:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff80212beb:	00 
    Kom_Crt->Head.Object=0U;
ffffffff80212bec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212bf0:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212bf7:	00 
    Kom_Crt->Head.Flag=Flag;
ffffffff80212bf8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212bfc:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80212c00:	48 89 50 10          	mov    %rdx,0x10(%rax)
    
    /* Info init */
    Kom_Crt->Begin=Kom_Begin;
ffffffff80212c04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c08:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80212c0c:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Kom_Crt->End=Kom_End-1U;
ffffffff80212c10:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212c14:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80212c18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c1c:	48 89 50 30          	mov    %rdx,0x30(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff80212c20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c24:	48 b9 00 00 00 00 00 	movabs $0x2000000000000,%rcx
ffffffff80212c2b:	00 02 00 
ffffffff80212c2e:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_KOM,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80212c31:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212c36:	c9                   	leave
ffffffff80212c37:	c3                   	ret

ffffffff80212c38 <_RME_CPU_Local_Init>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_CPU_Local_Init(struct RME_CPU_Local* Local,
                         rme_ptr_t CPUID)
{
ffffffff80212c38:	f3 0f 1e fa          	endbr64
ffffffff80212c3c:	55                   	push   %rbp
ffffffff80212c3d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212c40:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212c44:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80212c48:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Prio_Cnt;
    
    Local->CPUID=CPUID;
ffffffff80212c4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c50:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80212c54:	48 89 10             	mov    %rdx,(%rax)
    Local->Thd_Cur=RME_NULL;
ffffffff80212c57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c5b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80212c62:	00 
    Local->Sig_Vct=RME_NULL;
ffffffff80212c63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c67:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212c6e:	00 
    Local->Sig_Tim=RME_NULL;
ffffffff80212c6f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c73:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80212c7a:	00 
    
    /* Initialize the run-queue and bitmap */
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80212c7b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212c82:	00 
ffffffff80212c83:	eb 42                	jmp    ffffffff80212cc7 <_RME_CPU_Local_Init+0x8f>
    {
        Local->Run.Bitmap[Prio_Cnt>>RME_WORD_ORDER]=0U;
ffffffff80212c85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212c89:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212c8d:	48 89 c2             	mov    %rax,%rdx
ffffffff80212c90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c94:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212c98:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
ffffffff80212c9f:	00 
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
ffffffff80212ca0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ca4:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212ca8:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212cac:	48 89 c2             	mov    %rax,%rdx
ffffffff80212caf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212cb3:	48 01 d0             	add    %rdx,%rax
ffffffff80212cb6:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212cba:	48 89 c7             	mov    %rax,%rdi
ffffffff80212cbd:	e8 ba a0 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80212cc2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212cc7:	48 83 7d f8 3f       	cmpq   $0x3f,-0x8(%rbp)
ffffffff80212ccc:	76 b7                	jbe    ffffffff80212c85 <_RME_CPU_Local_Init+0x4d>
    }
}
ffffffff80212cce:	90                   	nop
ffffffff80212ccf:	90                   	nop
ffffffff80212cd0:	c9                   	leave
ffffffff80212cd1:	c3                   	ret

ffffffff80212cd2 <_RME_Thd_Fatal>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Thd_Fatal(struct RME_Reg_Struct* Reg)
{
ffffffff80212cd2:	f3 0f 1e fa          	endbr64
ffffffff80212cd6:	55                   	push   %rbp
ffffffff80212cd7:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212cda:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212cde:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    
    /* Attempt to return from the invocation, from fault */
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80212ce2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ce6:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212ceb:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80212cf0:	48 89 c7             	mov    %rax,%rdi
ffffffff80212cf3:	e8 af 7c 00 00       	call   ffffffff8021a9a7 <_RME_Inv_Ret>
ffffffff80212cf8:	48 85 c0             	test   %rax,%rax
ffffffff80212cfb:	74 6f                	je     ffffffff80212d6c <_RME_Thd_Fatal+0x9a>
    {
        RME_COV_MARKER();

        /* Return failure - report the exception */
        Local=RME_CPU_LOCAL();
ffffffff80212cfd:	e8 3d 8b ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80212d02:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        Thd_Cur=Local->Thd_Cur;
ffffffff80212d06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212d0a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212d0e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        
        /* Init thread shall never have exceptions */
        if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80212d12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d16:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80212d1a:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80212d21:	ff ff 7f 
ffffffff80212d24:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212d27:	75 0c                	jne    ffffffff80212d35 <_RME_Thd_Fatal+0x63>
        {
            RME_COV_MARKER();
            
            RME_DBG_S("Attempted to kill init thread.");
ffffffff80212d29:	48 c7 c7 28 73 22 80 	mov    $0xffffffff80227328,%rdi
ffffffff80212d30:	e8 f8 9c ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
        
        /* We must be running at this point to trigger a synchronous exception */
        RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
        
        /* Remove from runqueue */
        _RME_Run_Del(Thd_Cur);
ffffffff80212d35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d39:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d3c:	e8 de 00 00 00       	call   ffffffff80212e1f <_RME_Run_Del>
        
        /* Exception pending and notify parent */
        Thd_Cur->Sched.State=RME_THD_EXCPEND;
ffffffff80212d41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d45:	48 c7 40 38 03 00 00 	movq   $0x3,0x38(%rax)
ffffffff80212d4c:	00 
        _RME_Run_Notif(Thd_Cur);
ffffffff80212d4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d51:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d54:	e8 11 02 00 00       	call   ffffffff80212f6a <_RME_Run_Notif>
        
        /* All kernel send complete, now pick the highest priority thread to run */
        _RME_Kern_High(Reg,Local);
ffffffff80212d59:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212d5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d61:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212d64:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d67:	e8 b3 60 00 00       	call   ffffffff80218e1f <_RME_Kern_High>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212d6c:	90                   	nop
ffffffff80212d6d:	c9                   	leave
ffffffff80212d6e:	c3                   	ret

ffffffff80212d6f <_RME_Run_Ins>:
              rme_ptr_t CPUID - The cpu to consult.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Ins(struct RME_Thd_Struct* Thd)
{
ffffffff80212d6f:	f3 0f 1e fa          	endbr64
ffffffff80212d73:	55                   	push   %rbp
ffffffff80212d74:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212d77:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212d7b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff80212d7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d83:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80212d87:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Local=Thd->Sched.Local;
ffffffff80212d8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d8f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212d93:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Insert this thread into the runqueue */
    _RME_List_Ins(&(Thd->Sched.Run),
                  Local->Run.List[Prio].Prev,
                  &(Local->Run.List[Prio]));
ffffffff80212d97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212d9b:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212d9f:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212da3:	48 89 c2             	mov    %rax,%rdx
ffffffff80212da6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212daa:	48 01 d0             	add    %rdx,%rax
ffffffff80212dad:	48 8d 50 08          	lea    0x8(%rax),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80212db1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212db5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80212db9:	48 83 c1 02          	add    $0x2,%rcx
ffffffff80212dbd:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80212dc1:	48 01 c8             	add    %rcx,%rax
ffffffff80212dc4:	48 83 c0 10          	add    $0x10,%rax
ffffffff80212dc8:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212dcb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212dcf:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212dd2:	48 89 c7             	mov    %rax,%rdi
ffffffff80212dd5:	e8 fa 9f ff ff       	call   ffffffff8020cdd4 <_RME_List_Ins>
    
    /* Set the bit in the bitmap */
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80212dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212dde:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212de2:	48 89 c2             	mov    %rax,%rdx
ffffffff80212de5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212de9:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212ded:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212df1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212df5:	83 e2 3f             	and    $0x3f,%edx
ffffffff80212df8:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80212dfd:	89 d1                	mov    %edx,%ecx
ffffffff80212dff:	48 d3 e6             	shl    %cl,%rsi
ffffffff80212e02:	48 89 f1             	mov    %rsi,%rcx
ffffffff80212e05:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212e09:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff80212e0d:	48 09 c1             	or     %rax,%rcx
ffffffff80212e10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e14:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212e18:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
}
ffffffff80212e1c:	90                   	nop
ffffffff80212e1d:	c9                   	leave
ffffffff80212e1e:	c3                   	ret

ffffffff80212e1f <_RME_Run_Del>:
Input       : struct RME_Thd_Struct* Thd - The thread to delete.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
ffffffff80212e1f:	f3 0f 1e fa          	endbr64
ffffffff80212e23:	55                   	push   %rbp
ffffffff80212e24:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212e27:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212e2b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff80212e2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e33:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80212e37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Local=Thd->Sched.Local;
ffffffff80212e3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e3f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212e43:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* It can't be free or there must be an error */
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Delete this thread from the runqueue */
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80212e47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e4b:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212e4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e52:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212e56:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212e59:	48 89 c7             	mov    %rax,%rdi
ffffffff80212e5c:	e8 45 9f ff ff       	call   ffffffff8020cda6 <_RME_List_Del>
    
    /* See if there are any thread on this priority level */
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff80212e61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e65:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212e69:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80212e6d:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80212e71:	48 01 d0             	add    %rdx,%rax
ffffffff80212e74:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212e78:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212e7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e7f:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212e83:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212e87:	48 89 c1             	mov    %rax,%rcx
ffffffff80212e8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e8e:	48 01 c8             	add    %rcx,%rax
ffffffff80212e91:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212e95:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212e98:	75 4b                	jne    ffffffff80212ee5 <_RME_Run_Del+0xc6>
    {
        RME_COV_MARKER();

        /* Nothing running, clear the bit in the bitmap */
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80212e9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e9e:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212ea2:	48 89 c2             	mov    %rax,%rdx
ffffffff80212ea5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212ea9:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212ead:	48 8b 34 d0          	mov    (%rax,%rdx,8),%rsi
ffffffff80212eb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212eb5:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212eb8:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212ebd:	89 c1                	mov    %eax,%ecx
ffffffff80212ebf:	48 d3 e2             	shl    %cl,%rdx
ffffffff80212ec2:	48 89 d0             	mov    %rdx,%rax
ffffffff80212ec5:	48 f7 d0             	not    %rax
ffffffff80212ec8:	48 89 c1             	mov    %rax,%rcx
ffffffff80212ecb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ecf:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212ed3:	48 89 c2             	mov    %rax,%rdx
ffffffff80212ed6:	48 21 f1             	and    %rsi,%rcx
ffffffff80212ed9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212edd:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212ee1:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212ee5:	90                   	nop
ffffffff80212ee6:	c9                   	leave
ffffffff80212ee7:	c3                   	ret

ffffffff80212ee8 <_RME_Run_High>:
Input       : struct RME_CPU_Local* Local - The CPU-local data structure.
Output      : None.
Return      : struct RME_Thd_Struct* - The thread returned.
******************************************************************************/
static struct RME_Thd_Struct* _RME_Run_High(struct RME_CPU_Local* Local)
{
ffffffff80212ee8:	f3 0f 1e fa          	endbr64
ffffffff80212eec:	55                   	push   %rbp
ffffffff80212eed:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212ef0:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212ef4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_cnt_t Count;
    rme_ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=(rme_cnt_t)(RME_PRIO_WORD_NUM-1U);Count>=0;Count--)
ffffffff80212ef8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212eff:	00 
ffffffff80212f00:	eb 1a                	jmp    ffffffff80212f1c <_RME_Run_High+0x34>
    {
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80212f02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f06:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212f0a:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212f0e:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212f12:	48 85 c0             	test   %rax,%rax
ffffffff80212f15:	75 0e                	jne    ffffffff80212f25 <_RME_Run_High+0x3d>
    for(Count=(rme_cnt_t)(RME_PRIO_WORD_NUM-1U);Count>=0;Count--)
ffffffff80212f17:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80212f1c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80212f21:	79 df                	jns    ffffffff80212f02 <_RME_Run_High+0x1a>
ffffffff80212f23:	eb 01                	jmp    ffffffff80212f26 <_RME_Run_High+0x3e>
        {
            RME_COV_MARKER();
            
            break;
ffffffff80212f25:	90                   	nop
    
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);

    /* Get the first "1"'s position in the word */
    Prio=RME_MSB_GET(Local->Run.Bitmap[Count]);
ffffffff80212f26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f2a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212f2e:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212f32:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212f36:	48 89 c7             	mov    %rax,%rdi
ffffffff80212f39:	e8 ad 98 ff ff       	call   ffffffff8020c7eb <_RME_X64_MSB_Get>
ffffffff80212f3e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80212f42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f46:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212f4a:	48 01 45 f0          	add    %rax,-0x10(%rbp)

    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80212f4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f52:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80212f56:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80212f5a:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80212f5e:	48 01 d0             	add    %rdx,%rax
ffffffff80212f61:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212f65:	48 8b 00             	mov    (%rax),%rax
}
ffffffff80212f68:	c9                   	leave
ffffffff80212f69:	c3                   	ret

ffffffff80212f6a <_RME_Run_Notif>:
Input       : struct RME_Thd_Struct* Thd - The thread to send notification for.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
ffffffff80212f6a:	f3 0f 1e fa          	endbr64
ffffffff80212f6e:	55                   	push   %rbp
ffffffff80212f6f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212f72:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212f76:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Thd_Struct* Sched_Thd;
    
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80212f7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f7e:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80212f82:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80212f86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f8a:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80212f8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f92:	48 83 c0 10          	add    $0x10,%rax
ffffffff80212f96:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212f99:	75 26                	jne    ffffffff80212fc1 <_RME_Run_Notif+0x57>
    {
        RME_COV_MARKER();

        _RME_List_Ins(&(Thd->Sched.Notif), 
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff80212f9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f9f:	48 8d 50 78          	lea    0x78(%rax),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80212fa3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212fa7:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80212fae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80212fb2:	48 83 c1 10          	add    $0x10,%rcx
ffffffff80212fb6:	48 89 c6             	mov    %rax,%rsi
ffffffff80212fb9:	48 89 cf             	mov    %rcx,%rdi
ffffffff80212fbc:	e8 13 9e ff ff       	call   ffffffff8020cdd4 <_RME_List_Ins>
        RME_COV_MARKER();
        /* No action required */
    }

    /* If this guy have an endpoint, send to it */
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80212fc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212fc5:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80212fc9:	48 85 c0             	test   %rax,%rax
ffffffff80212fcc:	74 10                	je     ffffffff80212fde <_RME_Run_Notif+0x74>
    {
        RME_COV_MARKER();
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80212fce:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212fd2:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80212fd6:	48 89 c7             	mov    %rax,%rdi
ffffffff80212fd9:	e8 c8 5e 00 00       	call   ffffffff80218ea6 <_RME_Kern_Snd>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212fde:	90                   	nop
ffffffff80212fdf:	c9                   	leave
ffffffff80212fe0:	c3                   	ret

ffffffff80212fe1 <_RME_Thd_Pgt>:
#if(RME_PGT_RAW_ENABLE==0U)
struct RME_Cap_Pgt* _RME_Thd_Pgt(struct RME_Thd_Struct* Thd)
#else
rme_ptr_t _RME_Thd_Pgt(struct RME_Thd_Struct* Thd)
#endif
{
ffffffff80212fe1:	f3 0f 1e fa          	endbr64
ffffffff80212fe5:	55                   	push   %rbp
ffffffff80212fe6:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212fe9:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212fed:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Inv_Struct* Inv_Top;
    
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80212ff1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ff5:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80212ffc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213000:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80213006:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213009:	74 0d                	je     ffffffff80213018 <_RME_Thd_Pgt+0x37>
ffffffff8021300b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021300f:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80213016:	eb 05                	jmp    ffffffff8021301d <_RME_Thd_Pgt+0x3c>
ffffffff80213018:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021301d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    if(Inv_Top==(void*)RME_NULL)
ffffffff80213021:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80213026:	75 0e                	jne    ffffffff80213036 <_RME_Thd_Pgt+0x55>
    {
        RME_COV_MARKER();

        return Thd->Sched.Prc->Pgt;
ffffffff80213028:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021302c:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80213030:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80213034:	eb 0c                	jmp    ffffffff80213042 <_RME_Thd_Pgt+0x61>
    }
    else
    {
        RME_COV_MARKER();

        return Inv_Top->Prc->Pgt;
ffffffff80213036:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021303a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021303e:	48 8b 40 30          	mov    0x30(%rax),%rax
    }
}
ffffffff80213042:	c9                   	leave
ffffffff80213043:	c3                   	ret

ffffffff80213044 <_RME_Run_Swt>:
Return      : rme_ret_t - Always 0.
******************************************************************************/
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
                              struct RME_Thd_Struct* Thd_Cur, 
                              struct RME_Thd_Struct* Thd_New)
{
ffffffff80213044:	f3 0f 1e fa          	endbr64
ffffffff80213048:	55                   	push   %rbp
ffffffff80213049:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021304c:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80213050:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80213054:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80213058:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Pgt_New;
#endif
    struct RME_Reg_Struct* Reg_Cur;
    struct RME_Reg_Struct* Reg_New;
    
    Reg_Cur=&(Thd_Cur->Ctx.Reg->Reg);
ffffffff8021305c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80213060:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80213067:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff8021306b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021306f:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80213076:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Save register context */
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff8021307a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021307e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213082:	48 89 d6             	mov    %rdx,%rsi
ffffffff80213085:	48 89 c7             	mov    %rax,%rdi
ffffffff80213088:	e8 9b 2d 01 00       	call   ffffffff80225e28 <__RME_Thd_Reg_Copy>
                       RME_THD_IS_HYP(Thd_Cur->Ctx.Hyp_Attr),
                       Reg_Cur,Thd_Cur->Ctx.Reg->Cop);
#endif

    /* Load register context */
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff8021308d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80213091:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213095:	48 89 d6             	mov    %rdx,%rsi
ffffffff80213098:	48 89 c7             	mov    %rax,%rdi
ffffffff8021309b:	e8 88 2d 01 00       	call   ffffffff80225e28 <__RME_Thd_Reg_Copy>

    /* Are we going to switch page tables? If yes, we change it now */
    Pgt_Cur=_RME_Thd_Pgt(Thd_Cur);
ffffffff802130a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802130a4:	48 89 c7             	mov    %rax,%rdi
ffffffff802130a7:	e8 35 ff ff ff       	call   ffffffff80212fe1 <_RME_Thd_Pgt>
ffffffff802130ac:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Pgt_New=_RME_Thd_Pgt(Thd_New);
ffffffff802130b0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802130b4:	48 89 c7             	mov    %rax,%rdi
ffffffff802130b7:	e8 25 ff ff ff       	call   ffffffff80212fe1 <_RME_Thd_Pgt>
ffffffff802130bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_Cur)!=0U);
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_New)!=0U);
#endif
    
#if(RME_PGT_RAW_ENABLE==0U)
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff802130c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802130c4:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff802130c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802130cc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802130d0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802130d3:	74 0c                	je     ffffffff802130e1 <_RME_Run_Swt+0x9d>
    if(Pgt_Cur!=Pgt_New)
#endif
    {
        RME_COV_MARKER();
        
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff802130d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802130d9:	48 89 c7             	mov    %rax,%rdi
ffffffff802130dc:	e8 ef 36 01 00       	call   ffffffff802267d0 <__RME_Pgt_Set>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff802130e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802130e6:	c9                   	leave
ffffffff802130e7:	c3                   	ret

ffffffff802130e8 <_RME_Prc_Boot_Crt>:
                            rme_cid_t Cap_Cpt_Crt,
                            rme_cid_t Cap_Prc,
                            rme_cid_t Cap_Cpt,
                            rme_ptr_t Raw_Pgt)
#endif
{
ffffffff802130e8:	f3 0f 1e fa          	endbr64
ffffffff802130ec:	55                   	push   %rbp
ffffffff802130ed:	48 89 e5             	mov    %rsp,%rbp
ffffffff802130f0:	48 83 ec 68          	sub    $0x68,%rsp
ffffffff802130f4:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802130f8:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802130fc:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff80213100:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80213104:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff80213108:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021310c:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213111:	48 85 c0             	test   %rax,%rax
ffffffff80213114:	0f 85 98 00 00 00    	jne    ffffffff802131b2 <_RME_Prc_Boot_Crt+0xca>
ffffffff8021311a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021311e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213122:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80213126:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213129:	0f 93 c0             	setae  %al
ffffffff8021312c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021312f:	48 85 c0             	test   %rax,%rax
ffffffff80213132:	74 0c                	je     ffffffff80213140 <_RME_Prc_Boot_Crt+0x58>
ffffffff80213134:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021313b:	e9 38 07 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213140:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213144:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213148:	48 89 c2             	mov    %rax,%rdx
ffffffff8021314b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021314f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213153:	48 01 d0             	add    %rdx,%rax
ffffffff80213156:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021315a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021315e:	48 8b 00             	mov    (%rax),%rax
ffffffff80213161:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213165:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213169:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021316d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213170:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213174:	0f 94 c0             	sete   %al
ffffffff80213177:	0f b6 c0             	movzbl %al,%eax
ffffffff8021317a:	48 85 c0             	test   %rax,%rax
ffffffff8021317d:	74 0c                	je     ffffffff8021318b <_RME_Prc_Boot_Crt+0xa3>
ffffffff8021317f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213186:	e9 ed 06 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021318b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021318f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213193:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213197:	0f 95 c0             	setne  %al
ffffffff8021319a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021319d:	48 85 c0             	test   %rax,%rax
ffffffff802131a0:	0f 84 4c 01 00 00    	je     ffffffff802132f2 <_RME_Prc_Boot_Crt+0x20a>
ffffffff802131a6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802131ad:	e9 c6 06 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff802131b2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802131b6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802131ba:	48 89 c2             	mov    %rax,%rdx
ffffffff802131bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802131c1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802131c5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802131c8:	0f 93 c0             	setae  %al
ffffffff802131cb:	0f b6 c0             	movzbl %al,%eax
ffffffff802131ce:	48 85 c0             	test   %rax,%rax
ffffffff802131d1:	74 0c                	je     ffffffff802131df <_RME_Prc_Boot_Crt+0xf7>
ffffffff802131d3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802131da:	e9 99 06 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff802131df:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802131e3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802131e7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802131eb:	48 89 c2             	mov    %rax,%rdx
ffffffff802131ee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802131f2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802131f6:	48 01 d0             	add    %rdx,%rax
ffffffff802131f9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802131fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213201:	48 8b 00             	mov    (%rax),%rax
ffffffff80213204:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213208:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021320c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213210:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213213:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213217:	0f 94 c0             	sete   %al
ffffffff8021321a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021321d:	48 85 c0             	test   %rax,%rax
ffffffff80213220:	74 0c                	je     ffffffff8021322e <_RME_Prc_Boot_Crt+0x146>
ffffffff80213222:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213229:	e9 4a 06 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021322e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213232:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213236:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021323a:	0f 95 c0             	setne  %al
ffffffff8021323d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213240:	48 85 c0             	test   %rax,%rax
ffffffff80213243:	74 0c                	je     ffffffff80213251 <_RME_Prc_Boot_Crt+0x169>
ffffffff80213245:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021324c:	e9 27 06 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213251:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213255:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021325a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021325d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213261:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213265:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213268:	0f 93 c0             	setae  %al
ffffffff8021326b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021326e:	48 85 c0             	test   %rax,%rax
ffffffff80213271:	74 0c                	je     ffffffff8021327f <_RME_Prc_Boot_Crt+0x197>
ffffffff80213273:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021327a:	e9 f9 05 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021327f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213283:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213288:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021328c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021328f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213293:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213297:	48 01 d0             	add    %rdx,%rax
ffffffff8021329a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021329e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802132a2:	48 8b 00             	mov    (%rax),%rax
ffffffff802132a5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802132a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802132ad:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802132b1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802132b4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802132b8:	0f 94 c0             	sete   %al
ffffffff802132bb:	0f b6 c0             	movzbl %al,%eax
ffffffff802132be:	48 85 c0             	test   %rax,%rax
ffffffff802132c1:	74 0c                	je     ffffffff802132cf <_RME_Prc_Boot_Crt+0x1e7>
ffffffff802132c3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802132ca:	e9 a9 05 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff802132cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802132d3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802132d7:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802132db:	0f 95 c0             	setne  %al
ffffffff802132de:	0f b6 c0             	movzbl %al,%eax
ffffffff802132e1:	48 85 c0             	test   %rax,%rax
ffffffff802132e4:	74 0c                	je     ffffffff802132f2 <_RME_Prc_Boot_Crt+0x20a>
ffffffff802132e6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802132ed:	e9 86 05 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802132f2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802132f6:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802132fb:	48 85 c0             	test   %rax,%rax
ffffffff802132fe:	0f 85 98 00 00 00    	jne    ffffffff8021339c <_RME_Prc_Boot_Crt+0x2b4>
ffffffff80213304:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213308:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021330c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80213310:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213313:	0f 93 c0             	setae  %al
ffffffff80213316:	0f b6 c0             	movzbl %al,%eax
ffffffff80213319:	48 85 c0             	test   %rax,%rax
ffffffff8021331c:	74 0c                	je     ffffffff8021332a <_RME_Prc_Boot_Crt+0x242>
ffffffff8021331e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213325:	e9 4e 05 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021332a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021332e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213332:	48 89 c2             	mov    %rax,%rdx
ffffffff80213335:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213339:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021333d:	48 01 d0             	add    %rdx,%rax
ffffffff80213340:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213344:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213348:	48 8b 00             	mov    (%rax),%rax
ffffffff8021334b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021334f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213353:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213357:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021335a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021335e:	0f 94 c0             	sete   %al
ffffffff80213361:	0f b6 c0             	movzbl %al,%eax
ffffffff80213364:	48 85 c0             	test   %rax,%rax
ffffffff80213367:	74 0c                	je     ffffffff80213375 <_RME_Prc_Boot_Crt+0x28d>
ffffffff80213369:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213370:	e9 03 05 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213375:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213379:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021337d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213381:	0f 95 c0             	setne  %al
ffffffff80213384:	0f b6 c0             	movzbl %al,%eax
ffffffff80213387:	48 85 c0             	test   %rax,%rax
ffffffff8021338a:	0f 84 4c 01 00 00    	je     ffffffff802134dc <_RME_Prc_Boot_Crt+0x3f4>
ffffffff80213390:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213397:	e9 dc 04 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021339c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802133a0:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802133a4:	48 89 c2             	mov    %rax,%rdx
ffffffff802133a7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802133ab:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802133af:	48 39 c2             	cmp    %rax,%rdx
ffffffff802133b2:	0f 93 c0             	setae  %al
ffffffff802133b5:	0f b6 c0             	movzbl %al,%eax
ffffffff802133b8:	48 85 c0             	test   %rax,%rax
ffffffff802133bb:	74 0c                	je     ffffffff802133c9 <_RME_Prc_Boot_Crt+0x2e1>
ffffffff802133bd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802133c4:	e9 af 04 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff802133c9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802133cd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802133d1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802133d5:	48 89 c2             	mov    %rax,%rdx
ffffffff802133d8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802133dc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802133e0:	48 01 d0             	add    %rdx,%rax
ffffffff802133e3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802133e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802133eb:	48 8b 00             	mov    (%rax),%rax
ffffffff802133ee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802133f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802133f6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802133fa:	0f b7 c0             	movzwl %ax,%eax
ffffffff802133fd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213401:	0f 94 c0             	sete   %al
ffffffff80213404:	0f b6 c0             	movzbl %al,%eax
ffffffff80213407:	48 85 c0             	test   %rax,%rax
ffffffff8021340a:	74 0c                	je     ffffffff80213418 <_RME_Prc_Boot_Crt+0x330>
ffffffff8021340c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213413:	e9 60 04 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213418:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021341c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213420:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213424:	0f 95 c0             	setne  %al
ffffffff80213427:	0f b6 c0             	movzbl %al,%eax
ffffffff8021342a:	48 85 c0             	test   %rax,%rax
ffffffff8021342d:	74 0c                	je     ffffffff8021343b <_RME_Prc_Boot_Crt+0x353>
ffffffff8021342f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213436:	e9 3d 04 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021343b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021343f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213444:	48 89 c2             	mov    %rax,%rdx
ffffffff80213447:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021344b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021344f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213452:	0f 93 c0             	setae  %al
ffffffff80213455:	0f b6 c0             	movzbl %al,%eax
ffffffff80213458:	48 85 c0             	test   %rax,%rax
ffffffff8021345b:	74 0c                	je     ffffffff80213469 <_RME_Prc_Boot_Crt+0x381>
ffffffff8021345d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213464:	e9 0f 04 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213469:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021346d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213472:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213476:	48 89 c2             	mov    %rax,%rdx
ffffffff80213479:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021347d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213481:	48 01 d0             	add    %rdx,%rax
ffffffff80213484:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213488:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021348c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021348f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213493:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213497:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021349b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021349e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802134a2:	0f 94 c0             	sete   %al
ffffffff802134a5:	0f b6 c0             	movzbl %al,%eax
ffffffff802134a8:	48 85 c0             	test   %rax,%rax
ffffffff802134ab:	74 0c                	je     ffffffff802134b9 <_RME_Prc_Boot_Crt+0x3d1>
ffffffff802134ad:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802134b4:	e9 bf 03 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff802134b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802134bd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802134c1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802134c5:	0f 95 c0             	setne  %al
ffffffff802134c8:	0f b6 c0             	movzbl %al,%eax
ffffffff802134cb:	48 85 c0             	test   %rax,%rax
ffffffff802134ce:	74 0c                	je     ffffffff802134dc <_RME_Prc_Boot_Crt+0x3f4>
ffffffff802134d0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802134d7:	e9 9c 03 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff802134dc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802134e0:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802134e5:	48 85 c0             	test   %rax,%rax
ffffffff802134e8:	0f 85 98 00 00 00    	jne    ffffffff80213586 <_RME_Prc_Boot_Crt+0x49e>
ffffffff802134ee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802134f2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802134f6:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff802134fa:	48 39 c2             	cmp    %rax,%rdx
ffffffff802134fd:	0f 93 c0             	setae  %al
ffffffff80213500:	0f b6 c0             	movzbl %al,%eax
ffffffff80213503:	48 85 c0             	test   %rax,%rax
ffffffff80213506:	74 0c                	je     ffffffff80213514 <_RME_Prc_Boot_Crt+0x42c>
ffffffff80213508:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021350f:	e9 64 03 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213514:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213518:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021351c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021351f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213523:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213527:	48 01 d0             	add    %rdx,%rax
ffffffff8021352a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021352e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213532:	48 8b 00             	mov    (%rax),%rax
ffffffff80213535:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213539:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021353d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213541:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213544:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213548:	0f 94 c0             	sete   %al
ffffffff8021354b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021354e:	48 85 c0             	test   %rax,%rax
ffffffff80213551:	74 0c                	je     ffffffff8021355f <_RME_Prc_Boot_Crt+0x477>
ffffffff80213553:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021355a:	e9 19 03 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021355f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213563:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213567:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021356b:	0f 95 c0             	setne  %al
ffffffff8021356e:	0f b6 c0             	movzbl %al,%eax
ffffffff80213571:	48 85 c0             	test   %rax,%rax
ffffffff80213574:	0f 84 4c 01 00 00    	je     ffffffff802136c6 <_RME_Prc_Boot_Crt+0x5de>
ffffffff8021357a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213581:	e9 f2 02 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213586:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021358a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021358e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213591:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213595:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213599:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021359c:	0f 93 c0             	setae  %al
ffffffff8021359f:	0f b6 c0             	movzbl %al,%eax
ffffffff802135a2:	48 85 c0             	test   %rax,%rax
ffffffff802135a5:	74 0c                	je     ffffffff802135b3 <_RME_Prc_Boot_Crt+0x4cb>
ffffffff802135a7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802135ae:	e9 c5 02 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff802135b3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802135b7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802135bb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802135bf:	48 89 c2             	mov    %rax,%rdx
ffffffff802135c2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802135c6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802135ca:	48 01 d0             	add    %rdx,%rax
ffffffff802135cd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802135d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802135d5:	48 8b 00             	mov    (%rax),%rax
ffffffff802135d8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802135dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802135e0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802135e4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802135e7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802135eb:	0f 94 c0             	sete   %al
ffffffff802135ee:	0f b6 c0             	movzbl %al,%eax
ffffffff802135f1:	48 85 c0             	test   %rax,%rax
ffffffff802135f4:	74 0c                	je     ffffffff80213602 <_RME_Prc_Boot_Crt+0x51a>
ffffffff802135f6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802135fd:	e9 76 02 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213602:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213606:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021360a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021360e:	0f 95 c0             	setne  %al
ffffffff80213611:	0f b6 c0             	movzbl %al,%eax
ffffffff80213614:	48 85 c0             	test   %rax,%rax
ffffffff80213617:	74 0c                	je     ffffffff80213625 <_RME_Prc_Boot_Crt+0x53d>
ffffffff80213619:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213620:	e9 53 02 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213625:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213629:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021362e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213631:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213635:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213639:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021363c:	0f 93 c0             	setae  %al
ffffffff8021363f:	0f b6 c0             	movzbl %al,%eax
ffffffff80213642:	48 85 c0             	test   %rax,%rax
ffffffff80213645:	74 0c                	je     ffffffff80213653 <_RME_Prc_Boot_Crt+0x56b>
ffffffff80213647:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021364e:	e9 25 02 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff80213653:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213657:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021365c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213660:	48 89 c2             	mov    %rax,%rdx
ffffffff80213663:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213667:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021366b:	48 01 d0             	add    %rdx,%rax
ffffffff8021366e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213672:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213676:	48 8b 00             	mov    (%rax),%rax
ffffffff80213679:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021367d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213681:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213685:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213688:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021368c:	0f 94 c0             	sete   %al
ffffffff8021368f:	0f b6 c0             	movzbl %al,%eax
ffffffff80213692:	48 85 c0             	test   %rax,%rax
ffffffff80213695:	74 0c                	je     ffffffff802136a3 <_RME_Prc_Boot_Crt+0x5bb>
ffffffff80213697:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021369e:	e9 d5 01 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff802136a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802136a7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802136ab:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802136af:	0f 95 c0             	setne  %al
ffffffff802136b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802136b5:	48 85 c0             	test   %rax,%rax
ffffffff802136b8:	74 0c                	je     ffffffff802136c6 <_RME_Prc_Boot_Crt+0x5de>
ffffffff802136ba:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802136c1:	e9 b2 01 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff802136c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802136ca:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802136ce:	83 e0 01             	and    $0x1,%eax
ffffffff802136d1:	48 85 c0             	test   %rax,%rax
ffffffff802136d4:	0f 94 c0             	sete   %al
ffffffff802136d7:	0f b6 c0             	movzbl %al,%eax
ffffffff802136da:	48 85 c0             	test   %rax,%rax
ffffffff802136dd:	74 0c                	je     ffffffff802136eb <_RME_Prc_Boot_Crt+0x603>
ffffffff802136df:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802136e6:	e9 8d 01 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff802136eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802136ef:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802136f3:	83 e0 40             	and    $0x40,%eax
ffffffff802136f6:	48 85 c0             	test   %rax,%rax
ffffffff802136f9:	0f 94 c0             	sete   %al
ffffffff802136fc:	0f b6 c0             	movzbl %al,%eax
ffffffff802136ff:	48 85 c0             	test   %rax,%rax
ffffffff80213702:	74 0c                	je     ffffffff80213710 <_RME_Prc_Boot_Crt+0x628>
ffffffff80213704:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021370b:	e9 68 01 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80213710:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213714:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213718:	83 e0 40             	and    $0x40,%eax
ffffffff8021371b:	48 85 c0             	test   %rax,%rax
ffffffff8021371e:	0f 94 c0             	sete   %al
ffffffff80213721:	0f b6 c0             	movzbl %al,%eax
ffffffff80213724:	48 85 c0             	test   %rax,%rax
ffffffff80213727:	74 0c                	je     ffffffff80213735 <_RME_Prc_Boot_Crt+0x64d>
ffffffff80213729:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213730:	e9 43 01 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
#endif
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff80213735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213739:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021373d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80213741:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213744:	0f 93 c0             	setae  %al
ffffffff80213747:	0f b6 c0             	movzbl %al,%eax
ffffffff8021374a:	48 85 c0             	test   %rax,%rax
ffffffff8021374d:	74 0c                	je     ffffffff8021375b <_RME_Prc_Boot_Crt+0x673>
ffffffff8021374f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213756:	e9 1d 01 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff8021375b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021375f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213763:	48 89 c2             	mov    %rax,%rdx
ffffffff80213766:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021376a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021376e:	48 01 d0             	add    %rdx,%rax
ffffffff80213771:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80213775:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213779:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80213780:	00 00 00 
ffffffff80213783:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80213788:	48 89 c7             	mov    %rax,%rdi
ffffffff8021378b:	e8 ce 8f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80213790:	48 85 c0             	test   %rax,%rax
ffffffff80213793:	0f 94 c0             	sete   %al
ffffffff80213796:	0f b6 c0             	movzbl %al,%eax
ffffffff80213799:	48 85 c0             	test   %rax,%rax
ffffffff8021379c:	74 0c                	je     ffffffff802137aa <_RME_Prc_Boot_Crt+0x6c2>
ffffffff8021379e:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802137a5:	e9 ce 00 00 00       	jmp    ffffffff80213878 <_RME_Prc_Boot_Crt+0x790>
ffffffff802137aa:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802137af:	e8 5d 90 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff802137b4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802137b8:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Header init */
    Prc_Crt->Head.Root_Ref=1U;
ffffffff802137bc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802137c0:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff802137c7:	00 
    Prc_Crt->Head.Object=0U;
ffffffff802137c8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802137cc:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff802137d3:	00 
    Prc_Crt->Head.Flag=RME_PRC_FLAG_INV|RME_PRC_FLAG_THD;
ffffffff802137d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802137d8:	48 c7 40 10 03 00 00 	movq   $0x3,0x10(%rax)
ffffffff802137df:	00 

    /* Info init */
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff802137e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802137e4:	48 8b 00             	mov    (%rax),%rax
ffffffff802137e7:	89 c0                	mov    %eax,%eax
ffffffff802137e9:	48 85 c0             	test   %rax,%rax
ffffffff802137ec:	74 0a                	je     ffffffff802137f8 <_RME_Prc_Boot_Crt+0x710>
ffffffff802137ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802137f2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802137f6:	eb 04                	jmp    ffffffff802137fc <_RME_Prc_Boot_Crt+0x714>
ffffffff802137f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802137fc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80213800:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213804:	48 8b 00             	mov    (%rax),%rax
ffffffff80213807:	89 c0                	mov    %eax,%eax
ffffffff80213809:	48 85 c0             	test   %rax,%rax
ffffffff8021380c:	74 0a                	je     ffffffff80213818 <_RME_Prc_Boot_Crt+0x730>
ffffffff8021380e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213812:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213816:	eb 04                	jmp    ffffffff8021381c <_RME_Prc_Boot_Crt+0x734>
ffffffff80213818:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021381c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
#endif
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff80213820:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213824:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80213828:	48 89 50 28          	mov    %rdx,0x28(%rax)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff8021382c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213830:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80213834:	48 89 50 30          	mov    %rdx,0x30(%rax)
#else
    Prc_Crt->Pgt=Raw_Pgt;
#endif
    
    /* Reference objects */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),1U);
ffffffff80213838:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021383c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213840:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213845:	48 89 c7             	mov    %rax,%rdi
ffffffff80213848:	e8 46 8f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),1U);
ffffffff8021384d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80213851:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213855:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021385a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021385d:	e8 31 8f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif

    /* Establish cap */
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff80213862:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213866:	48 b9 00 00 00 00 00 	movabs $0x5000000000000,%rcx
ffffffff8021386d:	00 05 00 
ffffffff80213870:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80213873:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80213878:	c9                   	leave
ffffffff80213879:	c3                   	ret

ffffffff8021387a <_RME_Prc_Crt>:
                              rme_cid_t Cap_Cpt_Crt,
                              rme_cid_t Cap_Prc,
                              rme_cid_t Cap_Cpt,
                              rme_ptr_t Raw_Pgt)
#endif
{
ffffffff8021387a:	f3 0f 1e fa          	endbr64
ffffffff8021387e:	55                   	push   %rbp
ffffffff8021387f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80213882:	48 83 ec 68          	sub    $0x68,%rsp
ffffffff80213886:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8021388a:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8021388e:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff80213892:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80213896:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8021389a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021389e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802138a3:	48 85 c0             	test   %rax,%rax
ffffffff802138a6:	0f 85 98 00 00 00    	jne    ffffffff80213944 <_RME_Prc_Crt+0xca>
ffffffff802138ac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802138b0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802138b4:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802138b8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802138bb:	0f 93 c0             	setae  %al
ffffffff802138be:	0f b6 c0             	movzbl %al,%eax
ffffffff802138c1:	48 85 c0             	test   %rax,%rax
ffffffff802138c4:	74 0c                	je     ffffffff802138d2 <_RME_Prc_Crt+0x58>
ffffffff802138c6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802138cd:	e9 38 07 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff802138d2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802138d6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802138da:	48 89 c2             	mov    %rax,%rdx
ffffffff802138dd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802138e1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802138e5:	48 01 d0             	add    %rdx,%rax
ffffffff802138e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802138ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802138f0:	48 8b 00             	mov    (%rax),%rax
ffffffff802138f3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802138f7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802138fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802138ff:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213902:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213906:	0f 94 c0             	sete   %al
ffffffff80213909:	0f b6 c0             	movzbl %al,%eax
ffffffff8021390c:	48 85 c0             	test   %rax,%rax
ffffffff8021390f:	74 0c                	je     ffffffff8021391d <_RME_Prc_Crt+0xa3>
ffffffff80213911:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213918:	e9 ed 06 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff8021391d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213921:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213925:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213929:	0f 95 c0             	setne  %al
ffffffff8021392c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021392f:	48 85 c0             	test   %rax,%rax
ffffffff80213932:	0f 84 4c 01 00 00    	je     ffffffff80213a84 <_RME_Prc_Crt+0x20a>
ffffffff80213938:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021393f:	e9 c6 06 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213944:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213948:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021394c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021394f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213953:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213957:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021395a:	0f 93 c0             	setae  %al
ffffffff8021395d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213960:	48 85 c0             	test   %rax,%rax
ffffffff80213963:	74 0c                	je     ffffffff80213971 <_RME_Prc_Crt+0xf7>
ffffffff80213965:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021396c:	e9 99 06 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213971:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213975:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213979:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021397d:	48 89 c2             	mov    %rax,%rdx
ffffffff80213980:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213984:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213988:	48 01 d0             	add    %rdx,%rax
ffffffff8021398b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021398f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213993:	48 8b 00             	mov    (%rax),%rax
ffffffff80213996:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021399a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021399e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802139a2:	0f b7 c0             	movzwl %ax,%eax
ffffffff802139a5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802139a9:	0f 94 c0             	sete   %al
ffffffff802139ac:	0f b6 c0             	movzbl %al,%eax
ffffffff802139af:	48 85 c0             	test   %rax,%rax
ffffffff802139b2:	74 0c                	je     ffffffff802139c0 <_RME_Prc_Crt+0x146>
ffffffff802139b4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802139bb:	e9 4a 06 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff802139c0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802139c4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802139c8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802139cc:	0f 95 c0             	setne  %al
ffffffff802139cf:	0f b6 c0             	movzbl %al,%eax
ffffffff802139d2:	48 85 c0             	test   %rax,%rax
ffffffff802139d5:	74 0c                	je     ffffffff802139e3 <_RME_Prc_Crt+0x169>
ffffffff802139d7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802139de:	e9 27 06 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff802139e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802139e7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802139ec:	48 89 c2             	mov    %rax,%rdx
ffffffff802139ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802139f3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802139f7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802139fa:	0f 93 c0             	setae  %al
ffffffff802139fd:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a00:	48 85 c0             	test   %rax,%rax
ffffffff80213a03:	74 0c                	je     ffffffff80213a11 <_RME_Prc_Crt+0x197>
ffffffff80213a05:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213a0c:	e9 f9 05 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213a11:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213a15:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213a1a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213a1e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213a21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213a25:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213a29:	48 01 d0             	add    %rdx,%rax
ffffffff80213a2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213a30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213a34:	48 8b 00             	mov    (%rax),%rax
ffffffff80213a37:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213a3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213a3f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213a43:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213a46:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213a4a:	0f 94 c0             	sete   %al
ffffffff80213a4d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a50:	48 85 c0             	test   %rax,%rax
ffffffff80213a53:	74 0c                	je     ffffffff80213a61 <_RME_Prc_Crt+0x1e7>
ffffffff80213a55:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213a5c:	e9 a9 05 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213a61:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213a65:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213a69:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213a6d:	0f 95 c0             	setne  %al
ffffffff80213a70:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a73:	48 85 c0             	test   %rax,%rax
ffffffff80213a76:	74 0c                	je     ffffffff80213a84 <_RME_Prc_Crt+0x20a>
ffffffff80213a78:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213a7f:	e9 86 05 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213a84:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213a88:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213a8d:	48 85 c0             	test   %rax,%rax
ffffffff80213a90:	0f 85 98 00 00 00    	jne    ffffffff80213b2e <_RME_Prc_Crt+0x2b4>
ffffffff80213a96:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213a9a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213a9e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80213aa2:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213aa5:	0f 93 c0             	setae  %al
ffffffff80213aa8:	0f b6 c0             	movzbl %al,%eax
ffffffff80213aab:	48 85 c0             	test   %rax,%rax
ffffffff80213aae:	74 0c                	je     ffffffff80213abc <_RME_Prc_Crt+0x242>
ffffffff80213ab0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213ab7:	e9 4e 05 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213abc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213ac0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213ac4:	48 89 c2             	mov    %rax,%rdx
ffffffff80213ac7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213acb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213acf:	48 01 d0             	add    %rdx,%rax
ffffffff80213ad2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213ad6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213ada:	48 8b 00             	mov    (%rax),%rax
ffffffff80213add:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213ae1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ae5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213ae9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213aec:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213af0:	0f 94 c0             	sete   %al
ffffffff80213af3:	0f b6 c0             	movzbl %al,%eax
ffffffff80213af6:	48 85 c0             	test   %rax,%rax
ffffffff80213af9:	74 0c                	je     ffffffff80213b07 <_RME_Prc_Crt+0x28d>
ffffffff80213afb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213b02:	e9 03 05 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213b07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213b0b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213b0f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213b13:	0f 95 c0             	setne  %al
ffffffff80213b16:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b19:	48 85 c0             	test   %rax,%rax
ffffffff80213b1c:	0f 84 4c 01 00 00    	je     ffffffff80213c6e <_RME_Prc_Crt+0x3f4>
ffffffff80213b22:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213b29:	e9 dc 04 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213b2e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213b32:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213b36:	48 89 c2             	mov    %rax,%rdx
ffffffff80213b39:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213b3d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213b41:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213b44:	0f 93 c0             	setae  %al
ffffffff80213b47:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b4a:	48 85 c0             	test   %rax,%rax
ffffffff80213b4d:	74 0c                	je     ffffffff80213b5b <_RME_Prc_Crt+0x2e1>
ffffffff80213b4f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213b56:	e9 af 04 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213b5b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213b5f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213b63:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213b67:	48 89 c2             	mov    %rax,%rdx
ffffffff80213b6a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213b6e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213b72:	48 01 d0             	add    %rdx,%rax
ffffffff80213b75:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213b79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213b7d:	48 8b 00             	mov    (%rax),%rax
ffffffff80213b80:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213b84:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213b88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213b8c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213b8f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213b93:	0f 94 c0             	sete   %al
ffffffff80213b96:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b99:	48 85 c0             	test   %rax,%rax
ffffffff80213b9c:	74 0c                	je     ffffffff80213baa <_RME_Prc_Crt+0x330>
ffffffff80213b9e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213ba5:	e9 60 04 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213baa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213bae:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213bb2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213bb6:	0f 95 c0             	setne  %al
ffffffff80213bb9:	0f b6 c0             	movzbl %al,%eax
ffffffff80213bbc:	48 85 c0             	test   %rax,%rax
ffffffff80213bbf:	74 0c                	je     ffffffff80213bcd <_RME_Prc_Crt+0x353>
ffffffff80213bc1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213bc8:	e9 3d 04 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213bcd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213bd1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213bd6:	48 89 c2             	mov    %rax,%rdx
ffffffff80213bd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213bdd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213be1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213be4:	0f 93 c0             	setae  %al
ffffffff80213be7:	0f b6 c0             	movzbl %al,%eax
ffffffff80213bea:	48 85 c0             	test   %rax,%rax
ffffffff80213bed:	74 0c                	je     ffffffff80213bfb <_RME_Prc_Crt+0x381>
ffffffff80213bef:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213bf6:	e9 0f 04 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213bfb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213bff:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213c04:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c08:	48 89 c2             	mov    %rax,%rdx
ffffffff80213c0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213c0f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213c13:	48 01 d0             	add    %rdx,%rax
ffffffff80213c16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213c1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213c1e:	48 8b 00             	mov    (%rax),%rax
ffffffff80213c21:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213c25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213c29:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213c2d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213c30:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213c34:	0f 94 c0             	sete   %al
ffffffff80213c37:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c3a:	48 85 c0             	test   %rax,%rax
ffffffff80213c3d:	74 0c                	je     ffffffff80213c4b <_RME_Prc_Crt+0x3d1>
ffffffff80213c3f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213c46:	e9 bf 03 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213c4b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213c4f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213c53:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213c57:	0f 95 c0             	setne  %al
ffffffff80213c5a:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c5d:	48 85 c0             	test   %rax,%rax
ffffffff80213c60:	74 0c                	je     ffffffff80213c6e <_RME_Prc_Crt+0x3f4>
ffffffff80213c62:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213c69:	e9 9c 03 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80213c6e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213c72:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213c77:	48 85 c0             	test   %rax,%rax
ffffffff80213c7a:	0f 85 98 00 00 00    	jne    ffffffff80213d18 <_RME_Prc_Crt+0x49e>
ffffffff80213c80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213c84:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213c88:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80213c8c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213c8f:	0f 93 c0             	setae  %al
ffffffff80213c92:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c95:	48 85 c0             	test   %rax,%rax
ffffffff80213c98:	74 0c                	je     ffffffff80213ca6 <_RME_Prc_Crt+0x42c>
ffffffff80213c9a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213ca1:	e9 64 03 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213ca6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213caa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213cae:	48 89 c2             	mov    %rax,%rdx
ffffffff80213cb1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213cb5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213cb9:	48 01 d0             	add    %rdx,%rax
ffffffff80213cbc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213cc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213cc4:	48 8b 00             	mov    (%rax),%rax
ffffffff80213cc7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213ccb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ccf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213cd3:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213cd6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213cda:	0f 94 c0             	sete   %al
ffffffff80213cdd:	0f b6 c0             	movzbl %al,%eax
ffffffff80213ce0:	48 85 c0             	test   %rax,%rax
ffffffff80213ce3:	74 0c                	je     ffffffff80213cf1 <_RME_Prc_Crt+0x477>
ffffffff80213ce5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213cec:	e9 19 03 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213cf1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213cf5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213cf9:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213cfd:	0f 95 c0             	setne  %al
ffffffff80213d00:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d03:	48 85 c0             	test   %rax,%rax
ffffffff80213d06:	0f 84 4c 01 00 00    	je     ffffffff80213e58 <_RME_Prc_Crt+0x5de>
ffffffff80213d0c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213d13:	e9 f2 02 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213d18:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213d1c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213d20:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213d27:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213d2b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213d2e:	0f 93 c0             	setae  %al
ffffffff80213d31:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d34:	48 85 c0             	test   %rax,%rax
ffffffff80213d37:	74 0c                	je     ffffffff80213d45 <_RME_Prc_Crt+0x4cb>
ffffffff80213d39:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213d40:	e9 c5 02 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213d45:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213d49:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213d4d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213d51:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d54:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213d58:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213d5c:	48 01 d0             	add    %rdx,%rax
ffffffff80213d5f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213d63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213d67:	48 8b 00             	mov    (%rax),%rax
ffffffff80213d6a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213d6e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213d72:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213d76:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213d79:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213d7d:	0f 94 c0             	sete   %al
ffffffff80213d80:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d83:	48 85 c0             	test   %rax,%rax
ffffffff80213d86:	74 0c                	je     ffffffff80213d94 <_RME_Prc_Crt+0x51a>
ffffffff80213d88:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213d8f:	e9 76 02 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213d94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213d98:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213d9c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213da0:	0f 95 c0             	setne  %al
ffffffff80213da3:	0f b6 c0             	movzbl %al,%eax
ffffffff80213da6:	48 85 c0             	test   %rax,%rax
ffffffff80213da9:	74 0c                	je     ffffffff80213db7 <_RME_Prc_Crt+0x53d>
ffffffff80213dab:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213db2:	e9 53 02 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213db7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213dbb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213dc0:	48 89 c2             	mov    %rax,%rdx
ffffffff80213dc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213dc7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213dcb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213dce:	0f 93 c0             	setae  %al
ffffffff80213dd1:	0f b6 c0             	movzbl %al,%eax
ffffffff80213dd4:	48 85 c0             	test   %rax,%rax
ffffffff80213dd7:	74 0c                	je     ffffffff80213de5 <_RME_Prc_Crt+0x56b>
ffffffff80213dd9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213de0:	e9 25 02 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213de5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213de9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213dee:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213df2:	48 89 c2             	mov    %rax,%rdx
ffffffff80213df5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213df9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213dfd:	48 01 d0             	add    %rdx,%rax
ffffffff80213e00:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213e04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213e08:	48 8b 00             	mov    (%rax),%rax
ffffffff80213e0b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213e0f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213e13:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213e17:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213e1a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213e1e:	0f 94 c0             	sete   %al
ffffffff80213e21:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e24:	48 85 c0             	test   %rax,%rax
ffffffff80213e27:	74 0c                	je     ffffffff80213e35 <_RME_Prc_Crt+0x5bb>
ffffffff80213e29:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213e30:	e9 d5 01 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213e35:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213e39:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213e3d:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213e41:	0f 95 c0             	setne  %al
ffffffff80213e44:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e47:	48 85 c0             	test   %rax,%rax
ffffffff80213e4a:	74 0c                	je     ffffffff80213e58 <_RME_Prc_Crt+0x5de>
ffffffff80213e4c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213e53:	e9 b2 01 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80213e58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213e5c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213e60:	83 e0 01             	and    $0x1,%eax
ffffffff80213e63:	48 85 c0             	test   %rax,%rax
ffffffff80213e66:	0f 94 c0             	sete   %al
ffffffff80213e69:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e6c:	48 85 c0             	test   %rax,%rax
ffffffff80213e6f:	74 0c                	je     ffffffff80213e7d <_RME_Prc_Crt+0x603>
ffffffff80213e71:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213e78:	e9 8d 01 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff80213e7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213e81:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213e85:	83 e0 40             	and    $0x40,%eax
ffffffff80213e88:	48 85 c0             	test   %rax,%rax
ffffffff80213e8b:	0f 94 c0             	sete   %al
ffffffff80213e8e:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e91:	48 85 c0             	test   %rax,%rax
ffffffff80213e94:	74 0c                	je     ffffffff80213ea2 <_RME_Prc_Crt+0x628>
ffffffff80213e96:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213e9d:	e9 68 01 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80213ea2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213ea6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213eaa:	83 e0 40             	and    $0x40,%eax
ffffffff80213ead:	48 85 c0             	test   %rax,%rax
ffffffff80213eb0:	0f 94 c0             	sete   %al
ffffffff80213eb3:	0f b6 c0             	movzbl %al,%eax
ffffffff80213eb6:	48 85 c0             	test   %rax,%rax
ffffffff80213eb9:	74 0c                	je     ffffffff80213ec7 <_RME_Prc_Crt+0x64d>
ffffffff80213ebb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213ec2:	e9 43 01 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
#endif
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff80213ec7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213ecb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213ecf:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80213ed3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213ed6:	0f 93 c0             	setae  %al
ffffffff80213ed9:	0f b6 c0             	movzbl %al,%eax
ffffffff80213edc:	48 85 c0             	test   %rax,%rax
ffffffff80213edf:	74 0c                	je     ffffffff80213eed <_RME_Prc_Crt+0x673>
ffffffff80213ee1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213ee8:	e9 1d 01 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213eed:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80213ef1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213ef5:	48 89 c2             	mov    %rax,%rdx
ffffffff80213ef8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213efc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213f00:	48 01 d0             	add    %rdx,%rax
ffffffff80213f03:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80213f07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f0b:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80213f12:	00 00 00 
ffffffff80213f15:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80213f1a:	48 89 c7             	mov    %rax,%rdi
ffffffff80213f1d:	e8 3c 88 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80213f22:	48 85 c0             	test   %rax,%rax
ffffffff80213f25:	0f 94 c0             	sete   %al
ffffffff80213f28:	0f b6 c0             	movzbl %al,%eax
ffffffff80213f2b:	48 85 c0             	test   %rax,%rax
ffffffff80213f2e:	74 0c                	je     ffffffff80213f3c <_RME_Prc_Crt+0x6c2>
ffffffff80213f30:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80213f37:	e9 ce 00 00 00       	jmp    ffffffff8021400a <_RME_Prc_Crt+0x790>
ffffffff80213f3c:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80213f41:	e8 cb 88 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80213f46:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80213f4a:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Header init */
    Prc_Crt->Head.Root_Ref=0U;
ffffffff80213f4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f52:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80213f59:	00 
    Prc_Crt->Head.Object=0U;
ffffffff80213f5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f5e:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80213f65:	00 
    Prc_Crt->Head.Flag=RME_PRC_FLAG_ALL;
ffffffff80213f66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f6a:	48 c7 40 10 0f 00 00 	movq   $0xf,0x10(%rax)
ffffffff80213f71:	00 
    
    /* Info init */
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80213f72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213f76:	48 8b 00             	mov    (%rax),%rax
ffffffff80213f79:	89 c0                	mov    %eax,%eax
ffffffff80213f7b:	48 85 c0             	test   %rax,%rax
ffffffff80213f7e:	74 0a                	je     ffffffff80213f8a <_RME_Prc_Crt+0x710>
ffffffff80213f80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213f84:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213f88:	eb 04                	jmp    ffffffff80213f8e <_RME_Prc_Crt+0x714>
ffffffff80213f8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213f8e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80213f92:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213f96:	48 8b 00             	mov    (%rax),%rax
ffffffff80213f99:	89 c0                	mov    %eax,%eax
ffffffff80213f9b:	48 85 c0             	test   %rax,%rax
ffffffff80213f9e:	74 0a                	je     ffffffff80213faa <_RME_Prc_Crt+0x730>
ffffffff80213fa0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213fa4:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213fa8:	eb 04                	jmp    ffffffff80213fae <_RME_Prc_Crt+0x734>
ffffffff80213faa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213fae:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
#endif
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff80213fb2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fb6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80213fba:	48 89 50 28          	mov    %rdx,0x28(%rax)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff80213fbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fc2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80213fc6:	48 89 50 30          	mov    %rdx,0x30(%rax)
#else
    Prc_Crt->Pgt=Raw_Pgt;
#endif
    
    /* Reference objects */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),1U);
ffffffff80213fca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80213fce:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213fd2:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213fd7:	48 89 c7             	mov    %rax,%rdi
ffffffff80213fda:	e8 b4 87 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),1U);
ffffffff80213fdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80213fe3:	48 83 c0 08          	add    $0x8,%rax
ffffffff80213fe7:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80213fec:	48 89 c7             	mov    %rax,%rdi
ffffffff80213fef:	e8 9f 87 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif

    /* Establish cap */
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff80213ff4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213ff8:	48 b9 00 00 00 00 00 	movabs $0x5000000000000,%rcx
ffffffff80213fff:	00 05 00 
ffffffff80214002:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80214005:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021400a:	c9                   	leave
ffffffff8021400b:	c3                   	ret

ffffffff8021400c <_RME_Prc_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Prc_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Prc)
{
ffffffff8021400c:	f3 0f 1e fa          	endbr64
ffffffff80214010:	55                   	push   %rbp
ffffffff80214011:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214014:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80214018:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021401c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80214020:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214024:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214028:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021402d:	48 85 c0             	test   %rax,%rax
ffffffff80214030:	0f 85 98 00 00 00    	jne    ffffffff802140ce <_RME_Prc_Del+0xc2>
ffffffff80214036:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021403a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021403e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80214042:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214045:	0f 93 c0             	setae  %al
ffffffff80214048:	0f b6 c0             	movzbl %al,%eax
ffffffff8021404b:	48 85 c0             	test   %rax,%rax
ffffffff8021404e:	74 0c                	je     ffffffff8021405c <_RME_Prc_Del+0x50>
ffffffff80214050:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214057:	e9 71 03 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff8021405c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214060:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214064:	48 89 c2             	mov    %rax,%rdx
ffffffff80214067:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021406b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021406f:	48 01 d0             	add    %rdx,%rax
ffffffff80214072:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214076:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021407a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021407d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214081:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214085:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214089:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021408c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214090:	0f 94 c0             	sete   %al
ffffffff80214093:	0f b6 c0             	movzbl %al,%eax
ffffffff80214096:	48 85 c0             	test   %rax,%rax
ffffffff80214099:	74 0c                	je     ffffffff802140a7 <_RME_Prc_Del+0x9b>
ffffffff8021409b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802140a2:	e9 26 03 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff802140a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802140ab:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802140af:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802140b3:	0f 95 c0             	setne  %al
ffffffff802140b6:	0f b6 c0             	movzbl %al,%eax
ffffffff802140b9:	48 85 c0             	test   %rax,%rax
ffffffff802140bc:	0f 84 4c 01 00 00    	je     ffffffff8021420e <_RME_Prc_Del+0x202>
ffffffff802140c2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802140c9:	e9 ff 02 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff802140ce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802140d2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802140d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802140d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802140dd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802140e1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802140e4:	0f 93 c0             	setae  %al
ffffffff802140e7:	0f b6 c0             	movzbl %al,%eax
ffffffff802140ea:	48 85 c0             	test   %rax,%rax
ffffffff802140ed:	74 0c                	je     ffffffff802140fb <_RME_Prc_Del+0xef>
ffffffff802140ef:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802140f6:	e9 d2 02 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff802140fb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802140ff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214103:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214107:	48 89 c2             	mov    %rax,%rdx
ffffffff8021410a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021410e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214112:	48 01 d0             	add    %rdx,%rax
ffffffff80214115:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214119:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021411d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214120:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214124:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214128:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021412c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021412f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214133:	0f 94 c0             	sete   %al
ffffffff80214136:	0f b6 c0             	movzbl %al,%eax
ffffffff80214139:	48 85 c0             	test   %rax,%rax
ffffffff8021413c:	74 0c                	je     ffffffff8021414a <_RME_Prc_Del+0x13e>
ffffffff8021413e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214145:	e9 83 02 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff8021414a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021414e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214152:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214156:	0f 95 c0             	setne  %al
ffffffff80214159:	0f b6 c0             	movzbl %al,%eax
ffffffff8021415c:	48 85 c0             	test   %rax,%rax
ffffffff8021415f:	74 0c                	je     ffffffff8021416d <_RME_Prc_Del+0x161>
ffffffff80214161:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214168:	e9 60 02 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff8021416d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214171:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214176:	48 89 c2             	mov    %rax,%rdx
ffffffff80214179:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021417d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214181:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214184:	0f 93 c0             	setae  %al
ffffffff80214187:	0f b6 c0             	movzbl %al,%eax
ffffffff8021418a:	48 85 c0             	test   %rax,%rax
ffffffff8021418d:	74 0c                	je     ffffffff8021419b <_RME_Prc_Del+0x18f>
ffffffff8021418f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214196:	e9 32 02 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff8021419b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021419f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802141a4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802141a8:	48 89 c2             	mov    %rax,%rdx
ffffffff802141ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802141af:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802141b3:	48 01 d0             	add    %rdx,%rax
ffffffff802141b6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802141ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802141be:	48 8b 00             	mov    (%rax),%rax
ffffffff802141c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802141c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802141c9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802141cd:	0f b7 c0             	movzwl %ax,%eax
ffffffff802141d0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802141d4:	0f 94 c0             	sete   %al
ffffffff802141d7:	0f b6 c0             	movzbl %al,%eax
ffffffff802141da:	48 85 c0             	test   %rax,%rax
ffffffff802141dd:	74 0c                	je     ffffffff802141eb <_RME_Prc_Del+0x1df>
ffffffff802141df:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802141e6:	e9 e2 01 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff802141eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802141ef:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802141f3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802141f7:	0f 95 c0             	setne  %al
ffffffff802141fa:	0f b6 c0             	movzbl %al,%eax
ffffffff802141fd:	48 85 c0             	test   %rax,%rax
ffffffff80214200:	74 0c                	je     ffffffff8021420e <_RME_Prc_Del+0x202>
ffffffff80214202:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214209:	e9 bf 01 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021420e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214212:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214216:	83 e0 02             	and    $0x2,%eax
ffffffff80214219:	48 85 c0             	test   %rax,%rax
ffffffff8021421c:	0f 94 c0             	sete   %al
ffffffff8021421f:	0f b6 c0             	movzbl %al,%eax
ffffffff80214222:	48 85 c0             	test   %rax,%rax
ffffffff80214225:	74 0c                	je     ffffffff80214233 <_RME_Prc_Del+0x227>
ffffffff80214227:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021422e:	e9 9a 01 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff80214233:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214237:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021423b:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021423f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214242:	0f 93 c0             	setae  %al
ffffffff80214245:	0f b6 c0             	movzbl %al,%eax
ffffffff80214248:	48 85 c0             	test   %rax,%rax
ffffffff8021424b:	74 0c                	je     ffffffff80214259 <_RME_Prc_Del+0x24d>
ffffffff8021424d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214254:	e9 74 01 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff80214259:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021425d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214261:	48 89 c2             	mov    %rax,%rdx
ffffffff80214264:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214268:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021426c:	48 01 d0             	add    %rdx,%rax
ffffffff8021426f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff80214273:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214277:	48 8b 00             	mov    (%rax),%rax
ffffffff8021427a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021427e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214282:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214286:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214289:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021428d:	0f 95 c0             	setne  %al
ffffffff80214290:	0f b6 c0             	movzbl %al,%eax
ffffffff80214293:	48 85 c0             	test   %rax,%rax
ffffffff80214296:	74 0c                	je     ffffffff802142a4 <_RME_Prc_Del+0x298>
ffffffff80214298:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021429f:	e9 29 01 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff802142a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802142a8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802142ac:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802142b0:	0f 95 c0             	setne  %al
ffffffff802142b3:	0f b6 c0             	movzbl %al,%eax
ffffffff802142b6:	48 85 c0             	test   %rax,%rax
ffffffff802142b9:	74 0c                	je     ffffffff802142c7 <_RME_Prc_Del+0x2bb>
ffffffff802142bb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802142c2:	e9 06 01 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff802142c7:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802142cc:	e8 40 85 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff802142d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802142d4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802142d8:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff802142dc:	48 29 c2             	sub    %rax,%rdx
ffffffff802142df:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff802142e3:	0f 96 c0             	setbe  %al
ffffffff802142e6:	0f b6 c0             	movzbl %al,%eax
ffffffff802142e9:	48 98                	cltq
ffffffff802142eb:	48 85 c0             	test   %rax,%rax
ffffffff802142ee:	74 0c                	je     ffffffff802142fc <_RME_Prc_Del+0x2f0>
ffffffff802142f0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff802142f7:	e9 d1 00 00 00       	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>
ffffffff802142fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214300:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214304:	48 85 c0             	test   %rax,%rax
ffffffff80214307:	0f 95 c0             	setne  %al
ffffffff8021430a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021430d:	48 85 c0             	test   %rax,%rax
ffffffff80214310:	74 41                	je     ffffffff80214353 <_RME_Prc_Del+0x347>
ffffffff80214312:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214316:	89 c0                	mov    %eax,%eax
ffffffff80214318:	48 85 c0             	test   %rax,%rax
ffffffff8021431b:	0f 94 c0             	sete   %al
ffffffff8021431e:	0f b6 c0             	movzbl %al,%eax
ffffffff80214321:	48 85 c0             	test   %rax,%rax
ffffffff80214324:	74 24                	je     ffffffff8021434a <_RME_Prc_Del+0x33e>
ffffffff80214326:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021432d:	00 ff ff 
ffffffff80214330:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80214334:	48 89 c2             	mov    %rax,%rdx
ffffffff80214337:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021433b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021433f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214342:	48 89 c7             	mov    %rax,%rdi
ffffffff80214345:	e8 14 84 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021434a:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80214351:	eb 7a                	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>

    /* Remember for deletion */
    Prc_Cpt=Prc_Del->Cpt;
ffffffff80214353:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214357:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021435b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=Prc_Del->Pgt;
ffffffff8021435f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214363:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80214367:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#endif

    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff8021436b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021436f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80214373:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80214378:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021437b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021437e:	e8 db 83 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80214383:	48 85 c0             	test   %rax,%rax
ffffffff80214386:	0f 94 c0             	sete   %al
ffffffff80214389:	0f b6 c0             	movzbl %al,%eax
ffffffff8021438c:	48 85 c0             	test   %rax,%rax
ffffffff8021438f:	74 09                	je     ffffffff8021439a <_RME_Prc_Del+0x38e>
ffffffff80214391:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80214398:	eb 33                	jmp    ffffffff802143cd <_RME_Prc_Del+0x3c1>

    /* Dereference caps */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),-1);
ffffffff8021439a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021439e:	48 83 c0 08          	add    $0x8,%rax
ffffffff802143a2:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802143a9:	48 89 c7             	mov    %rax,%rdi
ffffffff802143ac:	e8 e2 83 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),-1);
ffffffff802143b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802143b5:	48 83 c0 08          	add    $0x8,%rax
ffffffff802143b9:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802143c0:	48 89 c7             	mov    %rax,%rdi
ffffffff802143c3:	e8 cb 83 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif
    
    return 0;
ffffffff802143c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802143cd:	c9                   	leave
ffffffff802143ce:	c3                   	ret

ffffffff802143cf <_RME_Prc_Cpt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Prc_Cpt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Prc,
                              rme_cid_t Cap_Cpt)
{
ffffffff802143cf:	f3 0f 1e fa          	endbr64
ffffffff802143d3:	55                   	push   %rbp
ffffffff802143d4:	48 89 e5             	mov    %rsp,%rbp
ffffffff802143d7:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff802143db:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff802143df:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff802143e3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_New;
    struct RME_Cap_Cpt* Cpt_Old;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802143e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802143eb:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802143f0:	48 85 c0             	test   %rax,%rax
ffffffff802143f3:	0f 85 98 00 00 00    	jne    ffffffff80214491 <_RME_Prc_Cpt+0xc2>
ffffffff802143f9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802143fd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214401:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80214405:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214408:	0f 93 c0             	setae  %al
ffffffff8021440b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021440e:	48 85 c0             	test   %rax,%rax
ffffffff80214411:	74 0c                	je     ffffffff8021441f <_RME_Prc_Cpt+0x50>
ffffffff80214413:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021441a:	e9 6e 04 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff8021441f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214423:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214427:	48 89 c2             	mov    %rax,%rdx
ffffffff8021442a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021442e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214432:	48 01 d0             	add    %rdx,%rax
ffffffff80214435:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214439:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021443d:	48 8b 00             	mov    (%rax),%rax
ffffffff80214440:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214444:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214448:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021444c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021444f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214453:	0f 94 c0             	sete   %al
ffffffff80214456:	0f b6 c0             	movzbl %al,%eax
ffffffff80214459:	48 85 c0             	test   %rax,%rax
ffffffff8021445c:	74 0c                	je     ffffffff8021446a <_RME_Prc_Cpt+0x9b>
ffffffff8021445e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214465:	e9 23 04 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff8021446a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021446e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214472:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214476:	0f 95 c0             	setne  %al
ffffffff80214479:	0f b6 c0             	movzbl %al,%eax
ffffffff8021447c:	48 85 c0             	test   %rax,%rax
ffffffff8021447f:	0f 84 4c 01 00 00    	je     ffffffff802145d1 <_RME_Prc_Cpt+0x202>
ffffffff80214485:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021448c:	e9 fc 03 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff80214491:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214495:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214499:	48 89 c2             	mov    %rax,%rdx
ffffffff8021449c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802144a0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802144a4:	48 39 c2             	cmp    %rax,%rdx
ffffffff802144a7:	0f 93 c0             	setae  %al
ffffffff802144aa:	0f b6 c0             	movzbl %al,%eax
ffffffff802144ad:	48 85 c0             	test   %rax,%rax
ffffffff802144b0:	74 0c                	je     ffffffff802144be <_RME_Prc_Cpt+0xef>
ffffffff802144b2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802144b9:	e9 cf 03 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff802144be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802144c2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802144c6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802144ca:	48 89 c2             	mov    %rax,%rdx
ffffffff802144cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802144d1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802144d5:	48 01 d0             	add    %rdx,%rax
ffffffff802144d8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802144dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802144e0:	48 8b 00             	mov    (%rax),%rax
ffffffff802144e3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802144e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802144eb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802144ef:	0f b7 c0             	movzwl %ax,%eax
ffffffff802144f2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802144f6:	0f 94 c0             	sete   %al
ffffffff802144f9:	0f b6 c0             	movzbl %al,%eax
ffffffff802144fc:	48 85 c0             	test   %rax,%rax
ffffffff802144ff:	74 0c                	je     ffffffff8021450d <_RME_Prc_Cpt+0x13e>
ffffffff80214501:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214508:	e9 80 03 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff8021450d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214511:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214515:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214519:	0f 95 c0             	setne  %al
ffffffff8021451c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021451f:	48 85 c0             	test   %rax,%rax
ffffffff80214522:	74 0c                	je     ffffffff80214530 <_RME_Prc_Cpt+0x161>
ffffffff80214524:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021452b:	e9 5d 03 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff80214530:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214534:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214539:	48 89 c2             	mov    %rax,%rdx
ffffffff8021453c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214540:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214544:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214547:	0f 93 c0             	setae  %al
ffffffff8021454a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021454d:	48 85 c0             	test   %rax,%rax
ffffffff80214550:	74 0c                	je     ffffffff8021455e <_RME_Prc_Cpt+0x18f>
ffffffff80214552:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214559:	e9 2f 03 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff8021455e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214562:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214567:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021456b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021456e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214572:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214576:	48 01 d0             	add    %rdx,%rax
ffffffff80214579:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021457d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214581:	48 8b 00             	mov    (%rax),%rax
ffffffff80214584:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214588:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021458c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214590:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214593:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214597:	0f 94 c0             	sete   %al
ffffffff8021459a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021459d:	48 85 c0             	test   %rax,%rax
ffffffff802145a0:	74 0c                	je     ffffffff802145ae <_RME_Prc_Cpt+0x1df>
ffffffff802145a2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802145a9:	e9 df 02 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff802145ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802145b2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802145b6:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802145ba:	0f 95 c0             	setne  %al
ffffffff802145bd:	0f b6 c0             	movzbl %al,%eax
ffffffff802145c0:	48 85 c0             	test   %rax,%rax
ffffffff802145c3:	74 0c                	je     ffffffff802145d1 <_RME_Prc_Cpt+0x202>
ffffffff802145c5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802145cc:	e9 bc 02 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802145d1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802145d5:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802145da:	48 85 c0             	test   %rax,%rax
ffffffff802145dd:	0f 85 98 00 00 00    	jne    ffffffff8021467b <_RME_Prc_Cpt+0x2ac>
ffffffff802145e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802145e7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802145eb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802145ef:	48 39 c2             	cmp    %rax,%rdx
ffffffff802145f2:	0f 93 c0             	setae  %al
ffffffff802145f5:	0f b6 c0             	movzbl %al,%eax
ffffffff802145f8:	48 85 c0             	test   %rax,%rax
ffffffff802145fb:	74 0c                	je     ffffffff80214609 <_RME_Prc_Cpt+0x23a>
ffffffff802145fd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214604:	e9 84 02 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff80214609:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021460d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214611:	48 89 c2             	mov    %rax,%rdx
ffffffff80214614:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214618:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021461c:	48 01 d0             	add    %rdx,%rax
ffffffff8021461f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214623:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214627:	48 8b 00             	mov    (%rax),%rax
ffffffff8021462a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021462e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214632:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214636:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214639:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021463d:	0f 94 c0             	sete   %al
ffffffff80214640:	0f b6 c0             	movzbl %al,%eax
ffffffff80214643:	48 85 c0             	test   %rax,%rax
ffffffff80214646:	74 0c                	je     ffffffff80214654 <_RME_Prc_Cpt+0x285>
ffffffff80214648:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021464f:	e9 39 02 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff80214654:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214658:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021465c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214660:	0f 95 c0             	setne  %al
ffffffff80214663:	0f b6 c0             	movzbl %al,%eax
ffffffff80214666:	48 85 c0             	test   %rax,%rax
ffffffff80214669:	0f 84 4c 01 00 00    	je     ffffffff802147bb <_RME_Prc_Cpt+0x3ec>
ffffffff8021466f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214676:	e9 12 02 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff8021467b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021467f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214683:	48 89 c2             	mov    %rax,%rdx
ffffffff80214686:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021468a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021468e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214691:	0f 93 c0             	setae  %al
ffffffff80214694:	0f b6 c0             	movzbl %al,%eax
ffffffff80214697:	48 85 c0             	test   %rax,%rax
ffffffff8021469a:	74 0c                	je     ffffffff802146a8 <_RME_Prc_Cpt+0x2d9>
ffffffff8021469c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802146a3:	e9 e5 01 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff802146a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802146ac:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802146b0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802146b4:	48 89 c2             	mov    %rax,%rdx
ffffffff802146b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802146bb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802146bf:	48 01 d0             	add    %rdx,%rax
ffffffff802146c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802146c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802146ca:	48 8b 00             	mov    (%rax),%rax
ffffffff802146cd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802146d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802146d5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802146d9:	0f b7 c0             	movzwl %ax,%eax
ffffffff802146dc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802146e0:	0f 94 c0             	sete   %al
ffffffff802146e3:	0f b6 c0             	movzbl %al,%eax
ffffffff802146e6:	48 85 c0             	test   %rax,%rax
ffffffff802146e9:	74 0c                	je     ffffffff802146f7 <_RME_Prc_Cpt+0x328>
ffffffff802146eb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802146f2:	e9 96 01 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff802146f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802146fb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802146ff:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214703:	0f 95 c0             	setne  %al
ffffffff80214706:	0f b6 c0             	movzbl %al,%eax
ffffffff80214709:	48 85 c0             	test   %rax,%rax
ffffffff8021470c:	74 0c                	je     ffffffff8021471a <_RME_Prc_Cpt+0x34b>
ffffffff8021470e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214715:	e9 73 01 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff8021471a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021471e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214723:	48 89 c2             	mov    %rax,%rdx
ffffffff80214726:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021472a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021472e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214731:	0f 93 c0             	setae  %al
ffffffff80214734:	0f b6 c0             	movzbl %al,%eax
ffffffff80214737:	48 85 c0             	test   %rax,%rax
ffffffff8021473a:	74 0c                	je     ffffffff80214748 <_RME_Prc_Cpt+0x379>
ffffffff8021473c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214743:	e9 45 01 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff80214748:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021474c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214751:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214755:	48 89 c2             	mov    %rax,%rdx
ffffffff80214758:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021475c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214760:	48 01 d0             	add    %rdx,%rax
ffffffff80214763:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214767:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021476b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021476e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214772:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214776:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021477a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021477d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214781:	0f 94 c0             	sete   %al
ffffffff80214784:	0f b6 c0             	movzbl %al,%eax
ffffffff80214787:	48 85 c0             	test   %rax,%rax
ffffffff8021478a:	74 0c                	je     ffffffff80214798 <_RME_Prc_Cpt+0x3c9>
ffffffff8021478c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214793:	e9 f5 00 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
ffffffff80214798:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021479c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802147a0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802147a4:	0f 95 c0             	setne  %al
ffffffff802147a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802147aa:	48 85 c0             	test   %rax,%rax
ffffffff802147ad:	74 0c                	je     ffffffff802147bb <_RME_Prc_Cpt+0x3ec>
ffffffff802147af:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802147b6:	e9 d2 00 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
                   struct RME_Cap_Cpt*,Cpt_New,Type_Stat);     
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff802147bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802147bf:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802147c3:	83 e0 04             	and    $0x4,%eax
ffffffff802147c6:	48 85 c0             	test   %rax,%rax
ffffffff802147c9:	0f 94 c0             	sete   %al
ffffffff802147cc:	0f b6 c0             	movzbl %al,%eax
ffffffff802147cf:	48 85 c0             	test   %rax,%rax
ffffffff802147d2:	74 0c                	je     ffffffff802147e0 <_RME_Prc_Cpt+0x411>
ffffffff802147d4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802147db:	e9 ad 00 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
ffffffff802147e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802147e4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802147e8:	25 80 00 00 00       	and    $0x80,%eax
ffffffff802147ed:	48 85 c0             	test   %rax,%rax
ffffffff802147f0:	0f 94 c0             	sete   %al
ffffffff802147f3:	0f b6 c0             	movzbl %al,%eax
ffffffff802147f6:	48 85 c0             	test   %rax,%rax
ffffffff802147f9:	74 0c                	je     ffffffff80214807 <_RME_Prc_Cpt+0x438>
ffffffff802147fb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214802:	e9 86 00 00 00       	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
    
    /* Convert to root */
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
ffffffff80214807:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021480b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021480e:	89 c0                	mov    %eax,%eax
ffffffff80214810:	48 85 c0             	test   %rax,%rax
ffffffff80214813:	74 0a                	je     ffffffff8021481f <_RME_Prc_Cpt+0x450>
ffffffff80214815:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214819:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021481d:	eb 04                	jmp    ffffffff80214823 <_RME_Prc_Cpt+0x454>
ffffffff8021481f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214823:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Commit the change */
    Cpt_Old=Prc_Op->Cpt;
ffffffff80214827:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021482b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021482f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Cpt)),
ffffffff80214833:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80214837:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021483b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8021483f:	48 83 c1 28          	add    $0x28,%rcx
ffffffff80214843:	48 89 c6             	mov    %rax,%rsi
ffffffff80214846:	48 89 cf             	mov    %rcx,%rdi
ffffffff80214849:	e8 10 7f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021484e:	48 85 c0             	test   %rax,%rax
ffffffff80214851:	75 09                	jne    ffffffff8021485c <_RME_Prc_Cpt+0x48d>
                     (rme_ptr_t)Cpt_Old,(rme_ptr_t)Cpt_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();
        
        return RME_ERR_PTH_CONFLICT;
ffffffff80214853:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff8021485a:	eb 31                	jmp    ffffffff8021488d <_RME_Prc_Cpt+0x4be>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Reference new table and dereference the old table */
    RME_FETCH_ADD(&(Cpt_New->Head.Root_Ref),1);
ffffffff8021485c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214860:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214864:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214869:	48 89 c7             	mov    %rax,%rdi
ffffffff8021486c:	e8 22 7f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    RME_FETCH_ADD(&(Cpt_Old->Head.Root_Ref),-1);
ffffffff80214871:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214875:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214879:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80214880:	48 89 c7             	mov    %rax,%rdi
ffffffff80214883:	e8 0b 7f ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80214888:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021488d:	c9                   	leave
ffffffff8021488e:	c3                   	ret

ffffffff8021488f <_RME_Prc_Pgt>:
#else
static rme_ret_t _RME_Prc_Pgt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Raw_Pgt)
#endif
{
ffffffff8021488f:	f3 0f 1e fa          	endbr64
ffffffff80214893:	55                   	push   %rbp
ffffffff80214894:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214897:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021489b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021489f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff802148a3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Pgt_Old;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802148a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802148ab:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802148b0:	48 85 c0             	test   %rax,%rax
ffffffff802148b3:	0f 85 98 00 00 00    	jne    ffffffff80214951 <_RME_Prc_Pgt+0xc2>
ffffffff802148b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802148bd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802148c1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802148c5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802148c8:	0f 93 c0             	setae  %al
ffffffff802148cb:	0f b6 c0             	movzbl %al,%eax
ffffffff802148ce:	48 85 c0             	test   %rax,%rax
ffffffff802148d1:	74 0c                	je     ffffffff802148df <_RME_Prc_Pgt+0x50>
ffffffff802148d3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802148da:	e9 6e 04 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff802148df:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802148e3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802148e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802148ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802148ee:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802148f2:	48 01 d0             	add    %rdx,%rax
ffffffff802148f5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802148f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802148fd:	48 8b 00             	mov    (%rax),%rax
ffffffff80214900:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214904:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214908:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021490c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021490f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214913:	0f 94 c0             	sete   %al
ffffffff80214916:	0f b6 c0             	movzbl %al,%eax
ffffffff80214919:	48 85 c0             	test   %rax,%rax
ffffffff8021491c:	74 0c                	je     ffffffff8021492a <_RME_Prc_Pgt+0x9b>
ffffffff8021491e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214925:	e9 23 04 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff8021492a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021492e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214932:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214936:	0f 95 c0             	setne  %al
ffffffff80214939:	0f b6 c0             	movzbl %al,%eax
ffffffff8021493c:	48 85 c0             	test   %rax,%rax
ffffffff8021493f:	0f 84 4c 01 00 00    	je     ffffffff80214a91 <_RME_Prc_Pgt+0x202>
ffffffff80214945:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021494c:	e9 fc 03 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214951:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214955:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214959:	48 89 c2             	mov    %rax,%rdx
ffffffff8021495c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214960:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214964:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214967:	0f 93 c0             	setae  %al
ffffffff8021496a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021496d:	48 85 c0             	test   %rax,%rax
ffffffff80214970:	74 0c                	je     ffffffff8021497e <_RME_Prc_Pgt+0xef>
ffffffff80214972:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214979:	e9 cf 03 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff8021497e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214982:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214986:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021498a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021498d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214991:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214995:	48 01 d0             	add    %rdx,%rax
ffffffff80214998:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021499c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802149a0:	48 8b 00             	mov    (%rax),%rax
ffffffff802149a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802149a7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802149ab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802149af:	0f b7 c0             	movzwl %ax,%eax
ffffffff802149b2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802149b6:	0f 94 c0             	sete   %al
ffffffff802149b9:	0f b6 c0             	movzbl %al,%eax
ffffffff802149bc:	48 85 c0             	test   %rax,%rax
ffffffff802149bf:	74 0c                	je     ffffffff802149cd <_RME_Prc_Pgt+0x13e>
ffffffff802149c1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802149c8:	e9 80 03 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff802149cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802149d1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802149d5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802149d9:	0f 95 c0             	setne  %al
ffffffff802149dc:	0f b6 c0             	movzbl %al,%eax
ffffffff802149df:	48 85 c0             	test   %rax,%rax
ffffffff802149e2:	74 0c                	je     ffffffff802149f0 <_RME_Prc_Pgt+0x161>
ffffffff802149e4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802149eb:	e9 5d 03 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff802149f0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802149f4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802149f9:	48 89 c2             	mov    %rax,%rdx
ffffffff802149fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214a00:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214a04:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214a07:	0f 93 c0             	setae  %al
ffffffff80214a0a:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a0d:	48 85 c0             	test   %rax,%rax
ffffffff80214a10:	74 0c                	je     ffffffff80214a1e <_RME_Prc_Pgt+0x18f>
ffffffff80214a12:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214a19:	e9 2f 03 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214a1e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214a22:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214a27:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214a2b:	48 89 c2             	mov    %rax,%rdx
ffffffff80214a2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214a32:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214a36:	48 01 d0             	add    %rdx,%rax
ffffffff80214a39:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214a3d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214a41:	48 8b 00             	mov    (%rax),%rax
ffffffff80214a44:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214a48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214a4c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214a50:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214a53:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214a57:	0f 94 c0             	sete   %al
ffffffff80214a5a:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a5d:	48 85 c0             	test   %rax,%rax
ffffffff80214a60:	74 0c                	je     ffffffff80214a6e <_RME_Prc_Pgt+0x1df>
ffffffff80214a62:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214a69:	e9 df 02 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214a6e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214a72:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214a76:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214a7a:	0f 95 c0             	setne  %al
ffffffff80214a7d:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a80:	48 85 c0             	test   %rax,%rax
ffffffff80214a83:	74 0c                	je     ffffffff80214a91 <_RME_Prc_Pgt+0x202>
ffffffff80214a85:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214a8c:	e9 bc 02 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat); 
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80214a91:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214a95:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214a9a:	48 85 c0             	test   %rax,%rax
ffffffff80214a9d:	0f 85 98 00 00 00    	jne    ffffffff80214b3b <_RME_Prc_Pgt+0x2ac>
ffffffff80214aa3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214aa7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214aab:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80214aaf:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214ab2:	0f 93 c0             	setae  %al
ffffffff80214ab5:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ab8:	48 85 c0             	test   %rax,%rax
ffffffff80214abb:	74 0c                	je     ffffffff80214ac9 <_RME_Prc_Pgt+0x23a>
ffffffff80214abd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214ac4:	e9 84 02 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214ac9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214acd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214ad1:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ad4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214ad8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214adc:	48 01 d0             	add    %rdx,%rax
ffffffff80214adf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214ae3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214ae7:	48 8b 00             	mov    (%rax),%rax
ffffffff80214aea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214aee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214af2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214af6:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214af9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214afd:	0f 94 c0             	sete   %al
ffffffff80214b00:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b03:	48 85 c0             	test   %rax,%rax
ffffffff80214b06:	74 0c                	je     ffffffff80214b14 <_RME_Prc_Pgt+0x285>
ffffffff80214b08:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214b0f:	e9 39 02 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214b14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214b18:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214b1c:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214b20:	0f 95 c0             	setne  %al
ffffffff80214b23:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b26:	48 85 c0             	test   %rax,%rax
ffffffff80214b29:	0f 84 4c 01 00 00    	je     ffffffff80214c7b <_RME_Prc_Pgt+0x3ec>
ffffffff80214b2f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214b36:	e9 12 02 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214b3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214b3f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214b43:	48 89 c2             	mov    %rax,%rdx
ffffffff80214b46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214b4a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214b4e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214b51:	0f 93 c0             	setae  %al
ffffffff80214b54:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b57:	48 85 c0             	test   %rax,%rax
ffffffff80214b5a:	74 0c                	je     ffffffff80214b68 <_RME_Prc_Pgt+0x2d9>
ffffffff80214b5c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214b63:	e9 e5 01 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214b68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214b6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214b70:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214b74:	48 89 c2             	mov    %rax,%rdx
ffffffff80214b77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214b7b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214b7f:	48 01 d0             	add    %rdx,%rax
ffffffff80214b82:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214b86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214b8a:	48 8b 00             	mov    (%rax),%rax
ffffffff80214b8d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214b91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214b95:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214b99:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214b9c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214ba0:	0f 94 c0             	sete   %al
ffffffff80214ba3:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ba6:	48 85 c0             	test   %rax,%rax
ffffffff80214ba9:	74 0c                	je     ffffffff80214bb7 <_RME_Prc_Pgt+0x328>
ffffffff80214bab:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214bb2:	e9 96 01 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214bb7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214bbb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214bbf:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214bc3:	0f 95 c0             	setne  %al
ffffffff80214bc6:	0f b6 c0             	movzbl %al,%eax
ffffffff80214bc9:	48 85 c0             	test   %rax,%rax
ffffffff80214bcc:	74 0c                	je     ffffffff80214bda <_RME_Prc_Pgt+0x34b>
ffffffff80214bce:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214bd5:	e9 73 01 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214bda:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214bde:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214be3:	48 89 c2             	mov    %rax,%rdx
ffffffff80214be6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214bea:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214bee:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214bf1:	0f 93 c0             	setae  %al
ffffffff80214bf4:	0f b6 c0             	movzbl %al,%eax
ffffffff80214bf7:	48 85 c0             	test   %rax,%rax
ffffffff80214bfa:	74 0c                	je     ffffffff80214c08 <_RME_Prc_Pgt+0x379>
ffffffff80214bfc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214c03:	e9 45 01 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214c08:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214c0c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214c11:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214c15:	48 89 c2             	mov    %rax,%rdx
ffffffff80214c18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c1c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214c20:	48 01 d0             	add    %rdx,%rax
ffffffff80214c23:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214c27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c2b:	48 8b 00             	mov    (%rax),%rax
ffffffff80214c2e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214c32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214c36:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214c3a:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214c3d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214c41:	0f 94 c0             	sete   %al
ffffffff80214c44:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c47:	48 85 c0             	test   %rax,%rax
ffffffff80214c4a:	74 0c                	je     ffffffff80214c58 <_RME_Prc_Pgt+0x3c9>
ffffffff80214c4c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214c53:	e9 f5 00 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
ffffffff80214c58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214c5c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214c60:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214c64:	0f 95 c0             	setne  %al
ffffffff80214c67:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c6a:	48 85 c0             	test   %rax,%rax
ffffffff80214c6d:	74 0c                	je     ffffffff80214c7b <_RME_Prc_Pgt+0x3ec>
ffffffff80214c6f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214c76:	e9 d2 00 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
                   struct RME_Cap_Pgt*,Pgt_New,Type_Stat);
#endif
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80214c7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214c7f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214c83:	83 e0 08             	and    $0x8,%eax
ffffffff80214c86:	48 85 c0             	test   %rax,%rax
ffffffff80214c89:	0f 94 c0             	sete   %al
ffffffff80214c8c:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c8f:	48 85 c0             	test   %rax,%rax
ffffffff80214c92:	74 0c                	je     ffffffff80214ca0 <_RME_Prc_Pgt+0x411>
ffffffff80214c94:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214c9b:	e9 ad 00 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
ffffffff80214ca0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214ca4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214ca8:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80214cad:	48 85 c0             	test   %rax,%rax
ffffffff80214cb0:	0f 94 c0             	sete   %al
ffffffff80214cb3:	0f b6 c0             	movzbl %al,%eax
ffffffff80214cb6:	48 85 c0             	test   %rax,%rax
ffffffff80214cb9:	74 0c                	je     ffffffff80214cc7 <_RME_Prc_Pgt+0x438>
ffffffff80214cbb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214cc2:	e9 86 00 00 00       	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
#endif
    
    Pgt_Old=Prc_Op->Pgt;
ffffffff80214cc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214ccb:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80214ccf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
#if(RME_PGT_RAW_ENABLE==0U)
    /* Convert to root */
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff80214cd3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214cd7:	48 8b 00             	mov    (%rax),%rax
ffffffff80214cda:	89 c0                	mov    %eax,%eax
ffffffff80214cdc:	48 85 c0             	test   %rax,%rax
ffffffff80214cdf:	74 0a                	je     ffffffff80214ceb <_RME_Prc_Pgt+0x45c>
ffffffff80214ce1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214ce5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214ce9:	eb 04                	jmp    ffffffff80214cef <_RME_Prc_Pgt+0x460>
ffffffff80214ceb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214cef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* Actually commit the change */
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Pgt)),
ffffffff80214cf3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80214cf7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214cfb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80214cff:	48 83 c1 30          	add    $0x30,%rcx
ffffffff80214d03:	48 89 c6             	mov    %rax,%rsi
ffffffff80214d06:	48 89 cf             	mov    %rcx,%rdi
ffffffff80214d09:	e8 50 7a ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80214d0e:	48 85 c0             	test   %rax,%rax
ffffffff80214d11:	75 09                	jne    ffffffff80214d1c <_RME_Prc_Pgt+0x48d>
                     Raw_Pgt)==RME_CASFAIL)
#endif
    {
        RME_COV_MARKER();
        
        return RME_ERR_PTH_CONFLICT;
ffffffff80214d13:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff80214d1a:	eb 31                	jmp    ffffffff80214d4d <_RME_Prc_Pgt+0x4be>
        /* No action required */
    }
    
    /* Reference new table and dereference the old table */
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Pgt_New->Head.Root_Ref),1);
ffffffff80214d1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d20:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214d24:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214d29:	48 89 c7             	mov    %rax,%rdi
ffffffff80214d2c:	e8 62 7a ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    RME_FETCH_ADD(&(Pgt_Old->Head.Root_Ref),-1);
ffffffff80214d31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214d35:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214d39:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80214d40:	48 89 c7             	mov    %rax,%rdi
ffffffff80214d43:	e8 4b 7a ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif
    
    return 0;
ffffffff80214d48:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80214d4d:	c9                   	leave
ffffffff80214d4e:	c3                   	ret

ffffffff80214d4f <_RME_Thd_Boot_Crt>:
                            rme_cid_t Cap_Thd,
                            rme_cid_t Cap_Prc,
                            rme_ptr_t Vaddr,
                            rme_ptr_t Prio,
                            struct RME_CPU_Local* Local)
{
ffffffff80214d4f:	f3 0f 1e fa          	endbr64
ffffffff80214d53:	55                   	push   %rbp
ffffffff80214d54:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214d57:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80214d5b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80214d5f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80214d63:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80214d67:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80214d6b:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80214d6f:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    struct RME_Cap_Prc* Prc_Root;
    struct RME_Thd_Struct* Thread;
    rme_ptr_t Type_Stat;
    
    /* Check whether the priority level is allowed */
    if(Prio>=RME_PREEMPT_PRIO_NUM)
ffffffff80214d73:	48 83 7d a0 3f       	cmpq   $0x3f,-0x60(%rbp)
ffffffff80214d78:	76 0c                	jbe    ffffffff80214d86 <_RME_Thd_Boot_Crt+0x37>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80214d7a:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80214d81:	e9 47 06 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214d86:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214d8a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214d8f:	48 85 c0             	test   %rax,%rax
ffffffff80214d92:	0f 85 98 00 00 00    	jne    ffffffff80214e30 <_RME_Thd_Boot_Crt+0xe1>
ffffffff80214d98:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214d9c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214da0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80214da4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214da7:	0f 93 c0             	setae  %al
ffffffff80214daa:	0f b6 c0             	movzbl %al,%eax
ffffffff80214dad:	48 85 c0             	test   %rax,%rax
ffffffff80214db0:	74 0c                	je     ffffffff80214dbe <_RME_Thd_Boot_Crt+0x6f>
ffffffff80214db2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214db9:	e9 0f 06 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214dbe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214dc2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214dc6:	48 89 c2             	mov    %rax,%rdx
ffffffff80214dc9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214dcd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214dd1:	48 01 d0             	add    %rdx,%rax
ffffffff80214dd4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214dd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214ddc:	48 8b 00             	mov    (%rax),%rax
ffffffff80214ddf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214de3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214de7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214deb:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214dee:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214df2:	0f 94 c0             	sete   %al
ffffffff80214df5:	0f b6 c0             	movzbl %al,%eax
ffffffff80214df8:	48 85 c0             	test   %rax,%rax
ffffffff80214dfb:	74 0c                	je     ffffffff80214e09 <_RME_Thd_Boot_Crt+0xba>
ffffffff80214dfd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214e04:	e9 c4 05 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214e09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214e0d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214e11:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214e15:	0f 95 c0             	setne  %al
ffffffff80214e18:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e1b:	48 85 c0             	test   %rax,%rax
ffffffff80214e1e:	0f 84 4c 01 00 00    	je     ffffffff80214f70 <_RME_Thd_Boot_Crt+0x221>
ffffffff80214e24:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214e2b:	e9 9d 05 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214e30:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214e34:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214e38:	48 89 c2             	mov    %rax,%rdx
ffffffff80214e3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214e3f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214e43:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214e46:	0f 93 c0             	setae  %al
ffffffff80214e49:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e4c:	48 85 c0             	test   %rax,%rax
ffffffff80214e4f:	74 0c                	je     ffffffff80214e5d <_RME_Thd_Boot_Crt+0x10e>
ffffffff80214e51:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214e58:	e9 70 05 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214e5d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214e61:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214e65:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214e69:	48 89 c2             	mov    %rax,%rdx
ffffffff80214e6c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214e70:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214e74:	48 01 d0             	add    %rdx,%rax
ffffffff80214e77:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214e7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214e7f:	48 8b 00             	mov    (%rax),%rax
ffffffff80214e82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214e86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214e8a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214e8e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214e91:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214e95:	0f 94 c0             	sete   %al
ffffffff80214e98:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e9b:	48 85 c0             	test   %rax,%rax
ffffffff80214e9e:	74 0c                	je     ffffffff80214eac <_RME_Thd_Boot_Crt+0x15d>
ffffffff80214ea0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214ea7:	e9 21 05 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214eac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214eb0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214eb4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214eb8:	0f 95 c0             	setne  %al
ffffffff80214ebb:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ebe:	48 85 c0             	test   %rax,%rax
ffffffff80214ec1:	74 0c                	je     ffffffff80214ecf <_RME_Thd_Boot_Crt+0x180>
ffffffff80214ec3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214eca:	e9 fe 04 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214ecf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214ed3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214ed8:	48 89 c2             	mov    %rax,%rdx
ffffffff80214edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214edf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214ee3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214ee6:	0f 93 c0             	setae  %al
ffffffff80214ee9:	0f b6 c0             	movzbl %al,%eax
ffffffff80214eec:	48 85 c0             	test   %rax,%rax
ffffffff80214eef:	74 0c                	je     ffffffff80214efd <_RME_Thd_Boot_Crt+0x1ae>
ffffffff80214ef1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214ef8:	e9 d0 04 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214efd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214f01:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214f06:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214f0a:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214f11:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214f15:	48 01 d0             	add    %rdx,%rax
ffffffff80214f18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214f20:	48 8b 00             	mov    (%rax),%rax
ffffffff80214f23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214f27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214f2b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214f2f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214f32:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214f36:	0f 94 c0             	sete   %al
ffffffff80214f39:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f3c:	48 85 c0             	test   %rax,%rax
ffffffff80214f3f:	74 0c                	je     ffffffff80214f4d <_RME_Thd_Boot_Crt+0x1fe>
ffffffff80214f41:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214f48:	e9 80 04 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214f4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214f51:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214f55:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214f59:	0f 95 c0             	setne  %al
ffffffff80214f5c:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f5f:	48 85 c0             	test   %rax,%rax
ffffffff80214f62:	74 0c                	je     ffffffff80214f70 <_RME_Thd_Boot_Crt+0x221>
ffffffff80214f64:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214f6b:	e9 5d 04 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80214f70:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214f74:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214f79:	48 85 c0             	test   %rax,%rax
ffffffff80214f7c:	0f 85 98 00 00 00    	jne    ffffffff8021501a <_RME_Thd_Boot_Crt+0x2cb>
ffffffff80214f82:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214f86:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214f8a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80214f8e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214f91:	0f 93 c0             	setae  %al
ffffffff80214f94:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f97:	48 85 c0             	test   %rax,%rax
ffffffff80214f9a:	74 0c                	je     ffffffff80214fa8 <_RME_Thd_Boot_Crt+0x259>
ffffffff80214f9c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214fa3:	e9 25 04 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214fa8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214fac:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214fb0:	48 89 c2             	mov    %rax,%rdx
ffffffff80214fb3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214fb7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214fbb:	48 01 d0             	add    %rdx,%rax
ffffffff80214fbe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214fc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214fc6:	48 8b 00             	mov    (%rax),%rax
ffffffff80214fc9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214fcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214fd1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214fd5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214fd8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214fdc:	0f 94 c0             	sete   %al
ffffffff80214fdf:	0f b6 c0             	movzbl %al,%eax
ffffffff80214fe2:	48 85 c0             	test   %rax,%rax
ffffffff80214fe5:	74 0c                	je     ffffffff80214ff3 <_RME_Thd_Boot_Crt+0x2a4>
ffffffff80214fe7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214fee:	e9 da 03 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80214ff3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214ff7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214ffb:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214fff:	0f 95 c0             	setne  %al
ffffffff80215002:	0f b6 c0             	movzbl %al,%eax
ffffffff80215005:	48 85 c0             	test   %rax,%rax
ffffffff80215008:	0f 84 4c 01 00 00    	je     ffffffff8021515a <_RME_Thd_Boot_Crt+0x40b>
ffffffff8021500e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215015:	e9 b3 03 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff8021501a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021501e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215022:	48 89 c2             	mov    %rax,%rdx
ffffffff80215025:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215029:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021502d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215030:	0f 93 c0             	setae  %al
ffffffff80215033:	0f b6 c0             	movzbl %al,%eax
ffffffff80215036:	48 85 c0             	test   %rax,%rax
ffffffff80215039:	74 0c                	je     ffffffff80215047 <_RME_Thd_Boot_Crt+0x2f8>
ffffffff8021503b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215042:	e9 86 03 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80215047:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021504b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021504f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215053:	48 89 c2             	mov    %rax,%rdx
ffffffff80215056:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021505a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021505e:	48 01 d0             	add    %rdx,%rax
ffffffff80215061:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215065:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215069:	48 8b 00             	mov    (%rax),%rax
ffffffff8021506c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80215070:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215074:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215078:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021507b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021507f:	0f 94 c0             	sete   %al
ffffffff80215082:	0f b6 c0             	movzbl %al,%eax
ffffffff80215085:	48 85 c0             	test   %rax,%rax
ffffffff80215088:	74 0c                	je     ffffffff80215096 <_RME_Thd_Boot_Crt+0x347>
ffffffff8021508a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215091:	e9 37 03 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80215096:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021509a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021509e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802150a2:	0f 95 c0             	setne  %al
ffffffff802150a5:	0f b6 c0             	movzbl %al,%eax
ffffffff802150a8:	48 85 c0             	test   %rax,%rax
ffffffff802150ab:	74 0c                	je     ffffffff802150b9 <_RME_Thd_Boot_Crt+0x36a>
ffffffff802150ad:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802150b4:	e9 14 03 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff802150b9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802150bd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802150c2:	48 89 c2             	mov    %rax,%rdx
ffffffff802150c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802150c9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802150cd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802150d0:	0f 93 c0             	setae  %al
ffffffff802150d3:	0f b6 c0             	movzbl %al,%eax
ffffffff802150d6:	48 85 c0             	test   %rax,%rax
ffffffff802150d9:	74 0c                	je     ffffffff802150e7 <_RME_Thd_Boot_Crt+0x398>
ffffffff802150db:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802150e2:	e9 e6 02 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff802150e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802150eb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802150f0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802150f4:	48 89 c2             	mov    %rax,%rdx
ffffffff802150f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802150fb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802150ff:	48 01 d0             	add    %rdx,%rax
ffffffff80215102:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021510a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021510d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80215111:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215115:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215119:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021511c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215120:	0f 94 c0             	sete   %al
ffffffff80215123:	0f b6 c0             	movzbl %al,%eax
ffffffff80215126:	48 85 c0             	test   %rax,%rax
ffffffff80215129:	74 0c                	je     ffffffff80215137 <_RME_Thd_Boot_Crt+0x3e8>
ffffffff8021512b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215132:	e9 96 02 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80215137:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021513b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021513f:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80215143:	0f 95 c0             	setne  %al
ffffffff80215146:	0f b6 c0             	movzbl %al,%eax
ffffffff80215149:	48 85 c0             	test   %rax,%rax
ffffffff8021514c:	74 0c                	je     ffffffff8021515a <_RME_Thd_Boot_Crt+0x40b>
ffffffff8021514e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215155:	e9 73 02 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);   
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8021515a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021515e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215162:	83 e0 01             	and    $0x1,%eax
ffffffff80215165:	48 85 c0             	test   %rax,%rax
ffffffff80215168:	0f 94 c0             	sete   %al
ffffffff8021516b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021516e:	48 85 c0             	test   %rax,%rax
ffffffff80215171:	74 0c                	je     ffffffff8021517f <_RME_Thd_Boot_Crt+0x430>
ffffffff80215173:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021517a:	e9 4e 02 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff8021517f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215183:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215187:	83 e0 02             	and    $0x2,%eax
ffffffff8021518a:	48 85 c0             	test   %rax,%rax
ffffffff8021518d:	0f 94 c0             	sete   %al
ffffffff80215190:	0f b6 c0             	movzbl %al,%eax
ffffffff80215193:	48 85 c0             	test   %rax,%rax
ffffffff80215196:	74 0c                	je     ffffffff802151a4 <_RME_Thd_Boot_Crt+0x455>
ffffffff80215198:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021519f:	e9 29 02 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff802151a4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802151a8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802151ac:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802151b0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802151b3:	0f 93 c0             	setae  %al
ffffffff802151b6:	0f b6 c0             	movzbl %al,%eax
ffffffff802151b9:	48 85 c0             	test   %rax,%rax
ffffffff802151bc:	74 0c                	je     ffffffff802151ca <_RME_Thd_Boot_Crt+0x47b>
ffffffff802151be:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802151c5:	e9 03 02 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff802151ca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802151ce:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802151d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802151d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802151d9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802151dd:	48 01 d0             	add    %rdx,%rax
ffffffff802151e0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff802151e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802151e8:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802151ef:	00 00 00 
ffffffff802151f2:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802151f7:	48 89 c7             	mov    %rax,%rdi
ffffffff802151fa:	e8 5f 75 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802151ff:	48 85 c0             	test   %rax,%rax
ffffffff80215202:	0f 94 c0             	sete   %al
ffffffff80215205:	0f b6 c0             	movzbl %al,%eax
ffffffff80215208:	48 85 c0             	test   %rax,%rax
ffffffff8021520b:	74 0c                	je     ffffffff80215219 <_RME_Thd_Boot_Crt+0x4ca>
ffffffff8021520d:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80215214:	e9 b4 01 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
ffffffff80215219:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021521e:	e8 ee 75 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80215223:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80215227:	48 89 42 20          	mov    %rax,0x20(%rdx)
     
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff8021522b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021522f:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff80215234:	48 89 c7             	mov    %rax,%rdi
ffffffff80215237:	e8 06 d1 ff ff       	call   ffffffff80212342 <_RME_Kot_Mark>
ffffffff8021523c:	48 85 c0             	test   %rax,%rax
ffffffff8021523f:	74 17                	je     ffffffff80215258 <_RME_Thd_Boot_Crt+0x509>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff80215241:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215245:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8021524c:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80215253:	e9 75 01 00 00       	jmp    ffffffff802153cd <_RME_Thd_Boot_Crt+0x67e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    Thread=(struct RME_Thd_Struct*)Vaddr;
ffffffff80215258:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021525c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* The TID of these threads are by default taken care of by the kernel */
    Thread->Sched.TID=0U;
ffffffff80215260:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215264:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff8021526b:	00 
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff8021526c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215270:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff80215277:	ff ff 7f 
ffffffff8021527a:	48 89 48 30          	mov    %rcx,0x30(%rax)
    Thread->Sched.State=RME_THD_READY;
ffffffff8021527e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215282:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80215289:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8021528a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021528e:	48 8b 00             	mov    (%rax),%rax
ffffffff80215291:	89 c0                	mov    %eax,%eax
ffffffff80215293:	48 85 c0             	test   %rax,%rax
ffffffff80215296:	74 0a                	je     ffffffff802152a2 <_RME_Thd_Boot_Crt+0x553>
ffffffff80215298:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021529c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802152a0:	eb 04                	jmp    ffffffff802152a6 <_RME_Thd_Boot_Crt+0x557>
ffffffff802152a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802152a6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Thread->Sched.Prc=Prc_Root;
ffffffff802152aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152ae:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802152b2:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Thread->Sched.Signal=0U;
ffffffff802152b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152ba:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff802152c1:	00 
    Thread->Sched.Prio=Prio;
ffffffff802152c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152c6:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff802152ca:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Thread->Sched.Prio_Max=RME_PREEMPT_PRIO_NUM-1U;
ffffffff802152ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152d2:	48 c7 40 48 3f 00 00 	movq   $0x3f,0x48(%rax)
ffffffff802152d9:	00 
    /* Set scheduler reference to 1 so cannot be free */
    Thread->Sched.Sched_Ref=1U;
ffffffff802152da:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152de:	48 c7 40 60 01 00 00 	movq   $0x1,0x60(%rax)
ffffffff802152e5:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff802152e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152ea:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff802152f1:	00 
    /* Bind the thread to the current CPU */
    Thread->Sched.Local=Local;
ffffffff802152f2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152f6:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff802152fa:	48 89 50 28          	mov    %rdx,0x28(%rax)
    /* This is a marking that this thread haven't sent any notifications */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff802152fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215302:	48 83 c0 10          	add    $0x10,%rax
ffffffff80215306:	48 89 c7             	mov    %rax,%rdi
ffffffff80215309:	e8 6e 7a ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff8021530e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215312:	48 83 c0 78          	add    $0x78,%rax
ffffffff80215316:	48 89 c7             	mov    %rax,%rdi
ffffffff80215319:	e8 5e 7a ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    /* Point its pointer to itself - this will never be a hypervisor thread */
    Thread->Ctx.Hyp_Attr=0U;
ffffffff8021531e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215322:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
ffffffff80215329:	00 00 00 00 
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff8021532d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215331:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff80215337:	48 89 c2             	mov    %rax,%rdx
ffffffff8021533a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021533e:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    /* Initialize the invocation stack */
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80215345:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215349:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021534f:	48 89 c7             	mov    %rax,%rdi
ffffffff80215352:	e8 25 7a ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    Thread->Ctx.Invstk_Depth=0U;
ffffffff80215357:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021535b:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
ffffffff80215362:	00 00 00 00 
    
    /* Info init */
    Thd_Crt->Head.Root_Ref=1U;
ffffffff80215366:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021536a:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff80215371:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff80215372:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215376:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8021537a:	48 89 50 18          	mov    %rdx,0x18(%rax)
    /* This can only be a parent, and not a child, and cannot be freed. Additionally,
     * this should not be blocked on any endpoint. Any attempt to block this thread will fail.
     * Setting execution information for this is also prohibited. */
    Thd_Crt->Head.Flag=RME_THD_FLAG_SCHED_PRIO|RME_THD_FLAG_SCHED_PARENT|
ffffffff8021537e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215382:	48 c7 40 10 ec 01 00 	movq   $0x1ec,0x10(%rax)
ffffffff80215389:	00 
                       RME_THD_FLAG_XFER_DST|RME_THD_FLAG_XFER_SRC|
                       RME_THD_FLAG_SCHED_RCV|RME_THD_FLAG_SWT;

    /* Referece process */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref), 1U);
ffffffff8021538a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021538e:	48 83 c0 08          	add    $0x8,%rax
ffffffff80215392:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80215397:	48 89 c7             	mov    %rax,%rdi
ffffffff8021539a:	e8 f4 73 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Insert this into the runqueue, and set current thread to it */
    _RME_Run_Ins(Thread);
ffffffff8021539f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802153a3:	48 89 c7             	mov    %rax,%rdi
ffffffff802153a6:	e8 c4 d9 ff ff       	call   ffffffff80212d6f <_RME_Run_Ins>
    Local->Thd_Cur=Thread;
ffffffff802153ab:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802153af:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802153b3:	48 89 50 08          	mov    %rdx,0x8(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff802153b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802153bb:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff802153c2:	00 06 00 
ffffffff802153c5:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_THD,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff802153c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802153cd:	c9                   	leave
ffffffff802153ce:	c3                   	ret

ffffffff802153cf <_RME_Thd_Crt>:
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Prio_Max,
                              rme_ptr_t Raddr,
                              rme_ptr_t Attr,
                              rme_ptr_t Is_Hyp)
{
ffffffff802153cf:	f3 0f 1e fa          	endbr64
ffffffff802153d3:	55                   	push   %rbp
ffffffff802153d4:	48 89 e5             	mov    %rsp,%rbp
ffffffff802153d7:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff802153db:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff802153df:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff802153e3:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff802153e7:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff802153eb:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff802153ef:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Vaddr;
    rme_ptr_t Size;
    
    /* See if the maximum priority relationship is correct - a thread
     * can never create a thread with higher maximum priority */
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
ffffffff802153f3:	e8 47 64 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802153f8:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802153fc:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80215400:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
ffffffff80215404:	73 0c                	jae    ffffffff80215412 <_RME_Thd_Crt+0x43>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80215406:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8021540d:	e9 2b 09 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215412:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215416:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021541b:	48 85 c0             	test   %rax,%rax
ffffffff8021541e:	0f 85 98 00 00 00    	jne    ffffffff802154bc <_RME_Thd_Crt+0xed>
ffffffff80215424:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215428:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021542c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80215430:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215433:	0f 93 c0             	setae  %al
ffffffff80215436:	0f b6 c0             	movzbl %al,%eax
ffffffff80215439:	48 85 c0             	test   %rax,%rax
ffffffff8021543c:	74 0c                	je     ffffffff8021544a <_RME_Thd_Crt+0x7b>
ffffffff8021543e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215445:	e9 f3 08 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff8021544a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021544e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215452:	48 89 c2             	mov    %rax,%rdx
ffffffff80215455:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215459:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021545d:	48 01 d0             	add    %rdx,%rax
ffffffff80215460:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215464:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215468:	48 8b 00             	mov    (%rax),%rax
ffffffff8021546b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021546f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215473:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215477:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021547a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021547e:	0f 94 c0             	sete   %al
ffffffff80215481:	0f b6 c0             	movzbl %al,%eax
ffffffff80215484:	48 85 c0             	test   %rax,%rax
ffffffff80215487:	74 0c                	je     ffffffff80215495 <_RME_Thd_Crt+0xc6>
ffffffff80215489:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215490:	e9 a8 08 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215495:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215499:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021549d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802154a1:	0f 95 c0             	setne  %al
ffffffff802154a4:	0f b6 c0             	movzbl %al,%eax
ffffffff802154a7:	48 85 c0             	test   %rax,%rax
ffffffff802154aa:	0f 84 4c 01 00 00    	je     ffffffff802155fc <_RME_Thd_Crt+0x22d>
ffffffff802154b0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802154b7:	e9 81 08 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff802154bc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802154c0:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802154c4:	48 89 c2             	mov    %rax,%rdx
ffffffff802154c7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802154cb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802154cf:	48 39 c2             	cmp    %rax,%rdx
ffffffff802154d2:	0f 93 c0             	setae  %al
ffffffff802154d5:	0f b6 c0             	movzbl %al,%eax
ffffffff802154d8:	48 85 c0             	test   %rax,%rax
ffffffff802154db:	74 0c                	je     ffffffff802154e9 <_RME_Thd_Crt+0x11a>
ffffffff802154dd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802154e4:	e9 54 08 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff802154e9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802154ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802154f1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802154f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802154f8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802154fc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215500:	48 01 d0             	add    %rdx,%rax
ffffffff80215503:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215507:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021550b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021550e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215512:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215516:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021551a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021551d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215521:	0f 94 c0             	sete   %al
ffffffff80215524:	0f b6 c0             	movzbl %al,%eax
ffffffff80215527:	48 85 c0             	test   %rax,%rax
ffffffff8021552a:	74 0c                	je     ffffffff80215538 <_RME_Thd_Crt+0x169>
ffffffff8021552c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215533:	e9 05 08 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215538:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021553c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215540:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215544:	0f 95 c0             	setne  %al
ffffffff80215547:	0f b6 c0             	movzbl %al,%eax
ffffffff8021554a:	48 85 c0             	test   %rax,%rax
ffffffff8021554d:	74 0c                	je     ffffffff8021555b <_RME_Thd_Crt+0x18c>
ffffffff8021554f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215556:	e9 e2 07 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff8021555b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021555f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215564:	48 89 c2             	mov    %rax,%rdx
ffffffff80215567:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021556b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021556f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215572:	0f 93 c0             	setae  %al
ffffffff80215575:	0f b6 c0             	movzbl %al,%eax
ffffffff80215578:	48 85 c0             	test   %rax,%rax
ffffffff8021557b:	74 0c                	je     ffffffff80215589 <_RME_Thd_Crt+0x1ba>
ffffffff8021557d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215584:	e9 b4 07 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215589:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021558d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215592:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215596:	48 89 c2             	mov    %rax,%rdx
ffffffff80215599:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021559d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802155a1:	48 01 d0             	add    %rdx,%rax
ffffffff802155a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802155a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802155ac:	48 8b 00             	mov    (%rax),%rax
ffffffff802155af:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802155b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802155b7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802155bb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802155be:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802155c2:	0f 94 c0             	sete   %al
ffffffff802155c5:	0f b6 c0             	movzbl %al,%eax
ffffffff802155c8:	48 85 c0             	test   %rax,%rax
ffffffff802155cb:	74 0c                	je     ffffffff802155d9 <_RME_Thd_Crt+0x20a>
ffffffff802155cd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802155d4:	e9 64 07 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff802155d9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802155dd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802155e1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802155e5:	0f 95 c0             	setne  %al
ffffffff802155e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802155eb:	48 85 c0             	test   %rax,%rax
ffffffff802155ee:	74 0c                	je     ffffffff802155fc <_RME_Thd_Crt+0x22d>
ffffffff802155f0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802155f7:	e9 41 07 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff802155fc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215600:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215605:	48 85 c0             	test   %rax,%rax
ffffffff80215608:	0f 85 98 00 00 00    	jne    ffffffff802156a6 <_RME_Thd_Crt+0x2d7>
ffffffff8021560e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215612:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215616:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8021561a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021561d:	0f 93 c0             	setae  %al
ffffffff80215620:	0f b6 c0             	movzbl %al,%eax
ffffffff80215623:	48 85 c0             	test   %rax,%rax
ffffffff80215626:	74 0c                	je     ffffffff80215634 <_RME_Thd_Crt+0x265>
ffffffff80215628:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021562f:	e9 09 07 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215634:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215638:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021563c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021563f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215643:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215647:	48 01 d0             	add    %rdx,%rax
ffffffff8021564a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021564e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215652:	48 8b 00             	mov    (%rax),%rax
ffffffff80215655:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215659:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021565d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215661:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215664:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215668:	0f 94 c0             	sete   %al
ffffffff8021566b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021566e:	48 85 c0             	test   %rax,%rax
ffffffff80215671:	74 0c                	je     ffffffff8021567f <_RME_Thd_Crt+0x2b0>
ffffffff80215673:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021567a:	e9 be 06 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff8021567f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215683:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215687:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021568b:	0f 95 c0             	setne  %al
ffffffff8021568e:	0f b6 c0             	movzbl %al,%eax
ffffffff80215691:	48 85 c0             	test   %rax,%rax
ffffffff80215694:	0f 84 4c 01 00 00    	je     ffffffff802157e6 <_RME_Thd_Crt+0x417>
ffffffff8021569a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802156a1:	e9 97 06 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff802156a6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802156aa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802156ae:	48 89 c2             	mov    %rax,%rdx
ffffffff802156b1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802156b5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802156b9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802156bc:	0f 93 c0             	setae  %al
ffffffff802156bf:	0f b6 c0             	movzbl %al,%eax
ffffffff802156c2:	48 85 c0             	test   %rax,%rax
ffffffff802156c5:	74 0c                	je     ffffffff802156d3 <_RME_Thd_Crt+0x304>
ffffffff802156c7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802156ce:	e9 6a 06 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff802156d3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802156d7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802156db:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802156df:	48 89 c2             	mov    %rax,%rdx
ffffffff802156e2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802156e6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802156ea:	48 01 d0             	add    %rdx,%rax
ffffffff802156ed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802156f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802156f5:	48 8b 00             	mov    (%rax),%rax
ffffffff802156f8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802156fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215700:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215704:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215707:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021570b:	0f 94 c0             	sete   %al
ffffffff8021570e:	0f b6 c0             	movzbl %al,%eax
ffffffff80215711:	48 85 c0             	test   %rax,%rax
ffffffff80215714:	74 0c                	je     ffffffff80215722 <_RME_Thd_Crt+0x353>
ffffffff80215716:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021571d:	e9 1b 06 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215722:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215726:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021572a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021572e:	0f 95 c0             	setne  %al
ffffffff80215731:	0f b6 c0             	movzbl %al,%eax
ffffffff80215734:	48 85 c0             	test   %rax,%rax
ffffffff80215737:	74 0c                	je     ffffffff80215745 <_RME_Thd_Crt+0x376>
ffffffff80215739:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215740:	e9 f8 05 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215745:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215749:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021574e:	48 89 c2             	mov    %rax,%rdx
ffffffff80215751:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215755:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215759:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021575c:	0f 93 c0             	setae  %al
ffffffff8021575f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215762:	48 85 c0             	test   %rax,%rax
ffffffff80215765:	74 0c                	je     ffffffff80215773 <_RME_Thd_Crt+0x3a4>
ffffffff80215767:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021576e:	e9 ca 05 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215773:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215777:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021577c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215780:	48 89 c2             	mov    %rax,%rdx
ffffffff80215783:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215787:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021578b:	48 01 d0             	add    %rdx,%rax
ffffffff8021578e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80215792:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215796:	48 8b 00             	mov    (%rax),%rax
ffffffff80215799:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021579d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802157a1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802157a5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802157a8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802157ac:	0f 94 c0             	sete   %al
ffffffff802157af:	0f b6 c0             	movzbl %al,%eax
ffffffff802157b2:	48 85 c0             	test   %rax,%rax
ffffffff802157b5:	74 0c                	je     ffffffff802157c3 <_RME_Thd_Crt+0x3f4>
ffffffff802157b7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802157be:	e9 7a 05 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff802157c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802157c7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802157cb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802157cf:	0f 95 c0             	setne  %al
ffffffff802157d2:	0f b6 c0             	movzbl %al,%eax
ffffffff802157d5:	48 85 c0             	test   %rax,%rax
ffffffff802157d8:	74 0c                	je     ffffffff802157e6 <_RME_Thd_Crt+0x417>
ffffffff802157da:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802157e1:	e9 57 05 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802157e6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff802157ea:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802157ef:	48 85 c0             	test   %rax,%rax
ffffffff802157f2:	0f 85 98 00 00 00    	jne    ffffffff80215890 <_RME_Thd_Crt+0x4c1>
ffffffff802157f8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802157fc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215800:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff80215804:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215807:	0f 93 c0             	setae  %al
ffffffff8021580a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021580d:	48 85 c0             	test   %rax,%rax
ffffffff80215810:	74 0c                	je     ffffffff8021581e <_RME_Thd_Crt+0x44f>
ffffffff80215812:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215819:	e9 1f 05 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff8021581e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80215822:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215826:	48 89 c2             	mov    %rax,%rdx
ffffffff80215829:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021582d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215831:	48 01 d0             	add    %rdx,%rax
ffffffff80215834:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215838:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021583c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021583f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215843:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215847:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021584b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021584e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215852:	0f 94 c0             	sete   %al
ffffffff80215855:	0f b6 c0             	movzbl %al,%eax
ffffffff80215858:	48 85 c0             	test   %rax,%rax
ffffffff8021585b:	74 0c                	je     ffffffff80215869 <_RME_Thd_Crt+0x49a>
ffffffff8021585d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215864:	e9 d4 04 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215869:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021586d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215871:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80215875:	0f 95 c0             	setne  %al
ffffffff80215878:	0f b6 c0             	movzbl %al,%eax
ffffffff8021587b:	48 85 c0             	test   %rax,%rax
ffffffff8021587e:	0f 84 4c 01 00 00    	je     ffffffff802159d0 <_RME_Thd_Crt+0x601>
ffffffff80215884:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021588b:	e9 ad 04 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215890:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80215894:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215898:	48 89 c2             	mov    %rax,%rdx
ffffffff8021589b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021589f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802158a3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802158a6:	0f 93 c0             	setae  %al
ffffffff802158a9:	0f b6 c0             	movzbl %al,%eax
ffffffff802158ac:	48 85 c0             	test   %rax,%rax
ffffffff802158af:	74 0c                	je     ffffffff802158bd <_RME_Thd_Crt+0x4ee>
ffffffff802158b1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802158b8:	e9 80 04 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff802158bd:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff802158c1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802158c5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802158c9:	48 89 c2             	mov    %rax,%rdx
ffffffff802158cc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802158d0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802158d4:	48 01 d0             	add    %rdx,%rax
ffffffff802158d7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802158db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802158df:	48 8b 00             	mov    (%rax),%rax
ffffffff802158e2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802158e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802158ea:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158ee:	0f b7 c0             	movzwl %ax,%eax
ffffffff802158f1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802158f5:	0f 94 c0             	sete   %al
ffffffff802158f8:	0f b6 c0             	movzbl %al,%eax
ffffffff802158fb:	48 85 c0             	test   %rax,%rax
ffffffff802158fe:	74 0c                	je     ffffffff8021590c <_RME_Thd_Crt+0x53d>
ffffffff80215900:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215907:	e9 31 04 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff8021590c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215910:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215914:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215918:	0f 95 c0             	setne  %al
ffffffff8021591b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021591e:	48 85 c0             	test   %rax,%rax
ffffffff80215921:	74 0c                	je     ffffffff8021592f <_RME_Thd_Crt+0x560>
ffffffff80215923:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021592a:	e9 0e 04 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff8021592f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80215933:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215938:	48 89 c2             	mov    %rax,%rdx
ffffffff8021593b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021593f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215943:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215946:	0f 93 c0             	setae  %al
ffffffff80215949:	0f b6 c0             	movzbl %al,%eax
ffffffff8021594c:	48 85 c0             	test   %rax,%rax
ffffffff8021594f:	74 0c                	je     ffffffff8021595d <_RME_Thd_Crt+0x58e>
ffffffff80215951:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215958:	e9 e0 03 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff8021595d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80215961:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215966:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021596a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021596d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215971:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215975:	48 01 d0             	add    %rdx,%rax
ffffffff80215978:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021597c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215980:	48 8b 00             	mov    (%rax),%rax
ffffffff80215983:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215987:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021598b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021598f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215992:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215996:	0f 94 c0             	sete   %al
ffffffff80215999:	0f b6 c0             	movzbl %al,%eax
ffffffff8021599c:	48 85 c0             	test   %rax,%rax
ffffffff8021599f:	74 0c                	je     ffffffff802159ad <_RME_Thd_Crt+0x5de>
ffffffff802159a1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802159a8:	e9 90 03 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff802159ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802159b1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802159b5:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802159b9:	0f 95 c0             	setne  %al
ffffffff802159bc:	0f b6 c0             	movzbl %al,%eax
ffffffff802159bf:	48 85 c0             	test   %rax,%rax
ffffffff802159c2:	74 0c                	je     ffffffff802159d0 <_RME_Thd_Crt+0x601>
ffffffff802159c4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802159cb:	e9 6d 03 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802159d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802159d4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802159d8:	83 e0 01             	and    $0x1,%eax
ffffffff802159db:	48 85 c0             	test   %rax,%rax
ffffffff802159de:	0f 94 c0             	sete   %al
ffffffff802159e1:	0f b6 c0             	movzbl %al,%eax
ffffffff802159e4:	48 85 c0             	test   %rax,%rax
ffffffff802159e7:	74 0c                	je     ffffffff802159f5 <_RME_Thd_Crt+0x626>
ffffffff802159e9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802159f0:	e9 48 03 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff802159f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802159f9:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802159fd:	83 e0 02             	and    $0x2,%eax
ffffffff80215a00:	48 85 c0             	test   %rax,%rax
ffffffff80215a03:	0f 94 c0             	sete   %al
ffffffff80215a06:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a09:	48 85 c0             	test   %rax,%rax
ffffffff80215a0c:	74 0c                	je     ffffffff80215a1a <_RME_Thd_Crt+0x64b>
ffffffff80215a0e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a15:	e9 23 03 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
    /* See if the creation is valid for this kmem range */
    if(Is_Hyp==0U)
ffffffff80215a1a:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
ffffffff80215a1f:	75 23                	jne    ffffffff80215a44 <_RME_Thd_Crt+0x675>
    {
        RME_COV_MARKER();
        
        Size=RME_THD_SIZE(Attr);
ffffffff80215a21:	48 c7 45 d8 60 01 00 	movq   $0x160,-0x28(%rbp)
ffffffff80215a28:	00 
#else
        Size=RME_HYP_SIZE;
#endif
    }
    
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff80215a29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215a2d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215a31:	83 e0 04             	and    $0x4,%eax
ffffffff80215a34:	48 85 c0             	test   %rax,%rax
ffffffff80215a37:	0f 94 c0             	sete   %al
ffffffff80215a3a:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a3d:	48 85 c0             	test   %rax,%rax
ffffffff80215a40:	74 1a                	je     ffffffff80215a5c <_RME_Thd_Crt+0x68d>
ffffffff80215a42:	eb 0c                	jmp    ffffffff80215a50 <_RME_Thd_Crt+0x681>
        return RME_ERR_PTH_HADDR;
ffffffff80215a44:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80215a4b:	e9 ed 02 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff80215a50:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a57:	e9 e1 02 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215a5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215a60:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80215a64:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80215a68:	48 01 d0             	add    %rdx,%rax
ffffffff80215a6b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80215a6f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215a73:	48 3b 45 10          	cmp    0x10(%rbp),%rax
ffffffff80215a77:	0f 92 c0             	setb   %al
ffffffff80215a7a:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a7d:	48 85 c0             	test   %rax,%rax
ffffffff80215a80:	74 0c                	je     ffffffff80215a8e <_RME_Thd_Crt+0x6bf>
ffffffff80215a82:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a89:	e9 af 02 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215a8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215a92:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215a96:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80215a9a:	0f 92 c0             	setb   %al
ffffffff80215a9d:	0f b6 c0             	movzbl %al,%eax
ffffffff80215aa0:	48 85 c0             	test   %rax,%rax
ffffffff80215aa3:	74 0c                	je     ffffffff80215ab1 <_RME_Thd_Crt+0x6e2>
ffffffff80215aa5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215aac:	e9 8c 02 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215ab1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80215ab5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215ab9:	48 01 d0             	add    %rdx,%rax
ffffffff80215abc:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff80215ac0:	0f 92 c0             	setb   %al
ffffffff80215ac3:	0f b6 c0             	movzbl %al,%eax
ffffffff80215ac6:	48 85 c0             	test   %rax,%rax
ffffffff80215ac9:	74 0c                	je     ffffffff80215ad7 <_RME_Thd_Crt+0x708>
ffffffff80215acb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215ad2:	e9 66 02 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215ad7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215adb:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80215adf:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80215ae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215ae7:	48 01 c8             	add    %rcx,%rax
ffffffff80215aea:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80215aee:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215af1:	0f 92 c0             	setb   %al
ffffffff80215af4:	0f b6 c0             	movzbl %al,%eax
ffffffff80215af7:	48 85 c0             	test   %rax,%rax
ffffffff80215afa:	74 0c                	je     ffffffff80215b08 <_RME_Thd_Crt+0x739>
ffffffff80215afc:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215b03:	e9 35 02 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff80215b08:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215b0c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215b10:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff80215b14:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215b17:	0f 93 c0             	setae  %al
ffffffff80215b1a:	0f b6 c0             	movzbl %al,%eax
ffffffff80215b1d:	48 85 c0             	test   %rax,%rax
ffffffff80215b20:	74 0c                	je     ffffffff80215b2e <_RME_Thd_Crt+0x75f>
ffffffff80215b22:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215b29:	e9 0f 02 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215b2e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80215b32:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215b36:	48 89 c2             	mov    %rax,%rdx
ffffffff80215b39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215b3d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215b41:	48 01 d0             	add    %rdx,%rax
ffffffff80215b44:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80215b48:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215b4c:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80215b53:	00 00 00 
ffffffff80215b56:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80215b5b:	48 89 c7             	mov    %rax,%rdi
ffffffff80215b5e:	e8 fb 6b ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80215b63:	48 85 c0             	test   %rax,%rax
ffffffff80215b66:	0f 94 c0             	sete   %al
ffffffff80215b69:	0f b6 c0             	movzbl %al,%eax
ffffffff80215b6c:	48 85 c0             	test   %rax,%rax
ffffffff80215b6f:	74 0c                	je     ffffffff80215b7d <_RME_Thd_Crt+0x7ae>
ffffffff80215b71:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80215b78:	e9 c0 01 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
ffffffff80215b7d:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80215b82:	e8 8a 6c ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80215b87:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80215b8b:	48 89 42 20          	mov    %rax,0x20(%rdx)
     
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff80215b8f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80215b93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215b97:	48 89 d6             	mov    %rdx,%rsi
ffffffff80215b9a:	48 89 c7             	mov    %rax,%rdi
ffffffff80215b9d:	e8 a0 c7 ff ff       	call   ffffffff80212342 <_RME_Kot_Mark>
ffffffff80215ba2:	48 85 c0             	test   %rax,%rax
ffffffff80215ba5:	79 17                	jns    ffffffff80215bbe <_RME_Thd_Crt+0x7ef>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff80215ba7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215bab:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80215bb2:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80215bb9:	e9 7f 01 00 00       	jmp    ffffffff80215d3d <_RME_Thd_Crt+0x96e>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Object init */
    Thread=(struct RME_Thd_Struct*)Vaddr;
ffffffff80215bbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215bc2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    /* These thread's TID default to 0, and have no timeslices assigned */
    Thread->Sched.TID=0U;
ffffffff80215bc6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215bca:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80215bd1:	00 
    Thread->Sched.Slice=0U;
ffffffff80215bd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215bd6:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80215bdd:	00 
    Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80215bde:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215be2:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80215be9:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80215bea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215bee:	48 8b 00             	mov    (%rax),%rax
ffffffff80215bf1:	89 c0                	mov    %eax,%eax
ffffffff80215bf3:	48 85 c0             	test   %rax,%rax
ffffffff80215bf6:	74 0a                	je     ffffffff80215c02 <_RME_Thd_Crt+0x833>
ffffffff80215bf8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215bfc:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80215c00:	eb 04                	jmp    ffffffff80215c06 <_RME_Thd_Crt+0x837>
ffffffff80215c02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215c06:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Thread->Sched.Prc=Prc_Root;
ffffffff80215c0a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c0e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80215c12:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Thread->Sched.Signal=0U;
ffffffff80215c16:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c1a:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80215c21:	00 
    Thread->Sched.Prio_Max=Prio_Max;
ffffffff80215c22:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c26:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff80215c2a:	48 89 50 48          	mov    %rdx,0x48(%rax)
    Thread->Sched.Sched_Ref=0U;
ffffffff80215c2e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c32:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
ffffffff80215c39:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff80215c3a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c3e:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff80215c45:	00 
    /* Currently the thread is not bound to any particular CPU */
    Thread->Sched.Local=RME_THD_FREE;
ffffffff80215c46:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c4a:	48 c7 40 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rax)
ffffffff80215c51:	ff 
    /* This is a marking that this thread haven't sent any notifications */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80215c52:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c56:	48 83 c0 10          	add    $0x10,%rax
ffffffff80215c5a:	48 89 c7             	mov    %rax,%rdi
ffffffff80215c5d:	e8 1a 71 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff80215c62:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c66:	48 83 c0 78          	add    $0x78,%rax
ffffffff80215c6a:	48 89 c7             	mov    %rax,%rdi
ffffffff80215c6d:	e8 0a 71 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    /* Point its pointer to itself - this is not a hypervisor thread yet */
    if(Is_Hyp==0U)
ffffffff80215c72:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
ffffffff80215c77:	75 29                	jne    ffffffff80215ca2 <_RME_Thd_Crt+0x8d3>
    {
        RME_COV_MARKER();
        
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff80215c79:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c7d:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80215c81:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80215c88:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215c8c:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff80215c92:	48 89 c2             	mov    %rax,%rdx
ffffffff80215c95:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c99:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
ffffffff80215ca0:	eb 2b                	jmp    ffffffff80215ccd <_RME_Thd_Crt+0x8fe>
    /* Default to HYP_VA_BASE for all created hypervisor threads */
    else
    {
        RME_COV_MARKER();
        
        Thread->Ctx.Hyp_Attr=Attr|RME_THD_HYP_FLAG;
ffffffff80215ca2:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff80215ca9:	00 00 80 
ffffffff80215cac:	48 0b 45 18          	or     0x18(%rbp),%rax
ffffffff80215cb0:	48 89 c2             	mov    %rax,%rdx
ffffffff80215cb3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cb7:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        Thread->Ctx.Reg=RME_HYP_VA_BASE;
ffffffff80215cbe:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cc2:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
ffffffff80215cc9:	00 00 00 00 
    }
    /* Initialize the invocation stack */
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80215ccd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cd1:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80215cd7:	48 89 c7             	mov    %rax,%rdi
ffffffff80215cda:	e8 9d 70 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    Thread->Ctx.Invstk_Depth=0U;
ffffffff80215cdf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ce3:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
ffffffff80215cea:	00 00 00 00 

    /* Header init */
    Thd_Crt->Head.Root_Ref=0U;
ffffffff80215cee:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215cf2:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80215cf9:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff80215cfa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215cfe:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80215d02:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Thd_Crt->Head.Flag=RME_THD_FLAG_ALL;
ffffffff80215d06:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215d0a:	48 c7 40 10 ff 01 00 	movq   $0x1ff,0x10(%rax)
ffffffff80215d11:	00 

    /* Reference process */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref), 1U);
ffffffff80215d12:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80215d16:	48 83 c0 08          	add    $0x8,%rax
ffffffff80215d1a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80215d1f:	48 89 c7             	mov    %rax,%rdi
ffffffff80215d22:	e8 6c 6a ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff80215d27:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215d2b:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff80215d32:	00 06 00 
ffffffff80215d35:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_THD,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80215d38:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80215d3d:	c9                   	leave
ffffffff80215d3e:	c3                   	ret

ffffffff80215d3f <_RME_Thd_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Thd)
{
ffffffff80215d3f:	f3 0f 1e fa          	endbr64
ffffffff80215d43:	55                   	push   %rbp
ffffffff80215d44:	48 89 e5             	mov    %rsp,%rbp
ffffffff80215d47:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80215d4b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80215d4f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80215d53:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    /* These are for deletion */
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215d57:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d5b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215d60:	48 85 c0             	test   %rax,%rax
ffffffff80215d63:	0f 85 98 00 00 00    	jne    ffffffff80215e01 <_RME_Thd_Del+0xc2>
ffffffff80215d69:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215d6d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215d71:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80215d75:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215d78:	0f 93 c0             	setae  %al
ffffffff80215d7b:	0f b6 c0             	movzbl %al,%eax
ffffffff80215d7e:	48 85 c0             	test   %rax,%rax
ffffffff80215d81:	74 0c                	je     ffffffff80215d8f <_RME_Thd_Del+0x50>
ffffffff80215d83:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215d8a:	e9 33 04 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215d8f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d93:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215d97:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215d9e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215da2:	48 01 d0             	add    %rdx,%rax
ffffffff80215da5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215da9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215dad:	48 8b 00             	mov    (%rax),%rax
ffffffff80215db0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215db4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215db8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215dbc:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215dbf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215dc3:	0f 94 c0             	sete   %al
ffffffff80215dc6:	0f b6 c0             	movzbl %al,%eax
ffffffff80215dc9:	48 85 c0             	test   %rax,%rax
ffffffff80215dcc:	74 0c                	je     ffffffff80215dda <_RME_Thd_Del+0x9b>
ffffffff80215dce:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215dd5:	e9 e8 03 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215dda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215dde:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215de2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215de6:	0f 95 c0             	setne  %al
ffffffff80215de9:	0f b6 c0             	movzbl %al,%eax
ffffffff80215dec:	48 85 c0             	test   %rax,%rax
ffffffff80215def:	0f 84 4c 01 00 00    	je     ffffffff80215f41 <_RME_Thd_Del+0x202>
ffffffff80215df5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215dfc:	e9 c1 03 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215e01:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215e05:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215e09:	48 89 c2             	mov    %rax,%rdx
ffffffff80215e0c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215e10:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215e14:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215e17:	0f 93 c0             	setae  %al
ffffffff80215e1a:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e1d:	48 85 c0             	test   %rax,%rax
ffffffff80215e20:	74 0c                	je     ffffffff80215e2e <_RME_Thd_Del+0xef>
ffffffff80215e22:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215e29:	e9 94 03 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215e2e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215e32:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215e36:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215e3a:	48 89 c2             	mov    %rax,%rdx
ffffffff80215e3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215e41:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215e45:	48 01 d0             	add    %rdx,%rax
ffffffff80215e48:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215e4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215e50:	48 8b 00             	mov    (%rax),%rax
ffffffff80215e53:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215e57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215e5b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e5f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215e62:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215e66:	0f 94 c0             	sete   %al
ffffffff80215e69:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e6c:	48 85 c0             	test   %rax,%rax
ffffffff80215e6f:	74 0c                	je     ffffffff80215e7d <_RME_Thd_Del+0x13e>
ffffffff80215e71:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215e78:	e9 45 03 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215e7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215e81:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215e85:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215e89:	0f 95 c0             	setne  %al
ffffffff80215e8c:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e8f:	48 85 c0             	test   %rax,%rax
ffffffff80215e92:	74 0c                	je     ffffffff80215ea0 <_RME_Thd_Del+0x161>
ffffffff80215e94:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215e9b:	e9 22 03 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215ea0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ea4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215ea9:	48 89 c2             	mov    %rax,%rdx
ffffffff80215eac:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215eb0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215eb4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215eb7:	0f 93 c0             	setae  %al
ffffffff80215eba:	0f b6 c0             	movzbl %al,%eax
ffffffff80215ebd:	48 85 c0             	test   %rax,%rax
ffffffff80215ec0:	74 0c                	je     ffffffff80215ece <_RME_Thd_Del+0x18f>
ffffffff80215ec2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215ec9:	e9 f4 02 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215ece:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ed2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215ed7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215edb:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ede:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215ee2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215ee6:	48 01 d0             	add    %rdx,%rax
ffffffff80215ee9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215eed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215ef1:	48 8b 00             	mov    (%rax),%rax
ffffffff80215ef4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215ef8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215efc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215f00:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215f03:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215f07:	0f 94 c0             	sete   %al
ffffffff80215f0a:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f0d:	48 85 c0             	test   %rax,%rax
ffffffff80215f10:	74 0c                	je     ffffffff80215f1e <_RME_Thd_Del+0x1df>
ffffffff80215f12:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215f19:	e9 a4 02 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215f1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215f22:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215f26:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215f2a:	0f 95 c0             	setne  %al
ffffffff80215f2d:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f30:	48 85 c0             	test   %rax,%rax
ffffffff80215f33:	74 0c                	je     ffffffff80215f41 <_RME_Thd_Del+0x202>
ffffffff80215f35:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215f3c:	e9 81 02 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80215f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f45:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215f49:	83 e0 02             	and    $0x2,%eax
ffffffff80215f4c:	48 85 c0             	test   %rax,%rax
ffffffff80215f4f:	0f 94 c0             	sete   %al
ffffffff80215f52:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f55:	48 85 c0             	test   %rax,%rax
ffffffff80215f58:	74 0c                	je     ffffffff80215f66 <_RME_Thd_Del+0x227>
ffffffff80215f5a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215f61:	e9 5c 02 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff80215f66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f6a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215f6e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80215f72:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215f75:	0f 93 c0             	setae  %al
ffffffff80215f78:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f7b:	48 85 c0             	test   %rax,%rax
ffffffff80215f7e:	74 0c                	je     ffffffff80215f8c <_RME_Thd_Del+0x24d>
ffffffff80215f80:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215f87:	e9 36 02 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215f8c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80215f90:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215f94:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f9b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215f9f:	48 01 d0             	add    %rdx,%rax
ffffffff80215fa2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff80215fa6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215faa:	48 8b 00             	mov    (%rax),%rax
ffffffff80215fad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215fb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215fb5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215fb9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215fbc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215fc0:	0f 95 c0             	setne  %al
ffffffff80215fc3:	0f b6 c0             	movzbl %al,%eax
ffffffff80215fc6:	48 85 c0             	test   %rax,%rax
ffffffff80215fc9:	74 0c                	je     ffffffff80215fd7 <_RME_Thd_Del+0x298>
ffffffff80215fcb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215fd2:	e9 eb 01 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215fd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215fdb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215fdf:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80215fe3:	0f 95 c0             	setne  %al
ffffffff80215fe6:	0f b6 c0             	movzbl %al,%eax
ffffffff80215fe9:	48 85 c0             	test   %rax,%rax
ffffffff80215fec:	74 0c                	je     ffffffff80215ffa <_RME_Thd_Del+0x2bb>
ffffffff80215fee:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215ff5:	e9 c8 01 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff80215ffa:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80215fff:	e8 0d 68 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80216004:	48 89 c2             	mov    %rax,%rdx
ffffffff80216007:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021600b:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021600f:	48 29 c2             	sub    %rax,%rdx
ffffffff80216012:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80216016:	0f 96 c0             	setbe  %al
ffffffff80216019:	0f b6 c0             	movzbl %al,%eax
ffffffff8021601c:	48 98                	cltq
ffffffff8021601e:	48 85 c0             	test   %rax,%rax
ffffffff80216021:	74 0c                	je     ffffffff8021602f <_RME_Thd_Del+0x2f0>
ffffffff80216023:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8021602a:	e9 93 01 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
ffffffff8021602f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216033:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216037:	48 85 c0             	test   %rax,%rax
ffffffff8021603a:	0f 95 c0             	setne  %al
ffffffff8021603d:	0f b6 c0             	movzbl %al,%eax
ffffffff80216040:	48 85 c0             	test   %rax,%rax
ffffffff80216043:	74 44                	je     ffffffff80216089 <_RME_Thd_Del+0x34a>
ffffffff80216045:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216049:	89 c0                	mov    %eax,%eax
ffffffff8021604b:	48 85 c0             	test   %rax,%rax
ffffffff8021604e:	0f 94 c0             	sete   %al
ffffffff80216051:	0f b6 c0             	movzbl %al,%eax
ffffffff80216054:	48 85 c0             	test   %rax,%rax
ffffffff80216057:	74 24                	je     ffffffff8021607d <_RME_Thd_Del+0x33e>
ffffffff80216059:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80216060:	00 ff ff 
ffffffff80216063:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80216067:	48 89 c2             	mov    %rax,%rdx
ffffffff8021606a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021606e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80216072:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216075:	48 89 c7             	mov    %rax,%rdi
ffffffff80216078:	e8 e1 66 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021607d:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80216084:	e9 39 01 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
    
    /* Get the thread */
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff80216089:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021608d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216091:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* See if the thread is free. If still bound, we cannot proceed to deletion */
    if(Thread->Sched.Local!=RME_THD_FREE)
ffffffff80216095:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216099:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021609d:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff802160a1:	74 30                	je     ffffffff802160d3 <_RME_Thd_Del+0x394>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Thd_Del,Type_Stat);
ffffffff802160a3:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff802160aa:	00 ff ff 
ffffffff802160ad:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff802160b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802160b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802160b8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff802160bc:	48 89 ce             	mov    %rcx,%rsi
ffffffff802160bf:	48 89 c7             	mov    %rax,%rdi
ffffffff802160c2:	e8 97 66 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_PTH_INVSTATE;
ffffffff802160c7:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802160ce:	e9 ef 00 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff802160d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802160d7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff802160db:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802160e0:	48 89 ce             	mov    %rcx,%rsi
ffffffff802160e3:	48 89 c7             	mov    %rax,%rdi
ffffffff802160e6:	e8 73 66 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802160eb:	48 85 c0             	test   %rax,%rax
ffffffff802160ee:	0f 94 c0             	sete   %al
ffffffff802160f1:	0f b6 c0             	movzbl %al,%eax
ffffffff802160f4:	48 85 c0             	test   %rax,%rax
ffffffff802160f7:	74 5b                	je     ffffffff80216154 <_RME_Thd_Del+0x415>
ffffffff802160f9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80216100:	e9 bd 00 00 00       	jmp    ffffffff802161c2 <_RME_Thd_Del+0x483>
     * stack to empty, and free all the invocation stubs. This can be virtually
     * unbounded if the invocation stack is just too deep. This is left to the
     * user; if this is what he or she wants, be our guest. */
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
    {
        Invocation=(struct RME_Inv_Struct*)(Thread->Ctx.Invstk.Next);
ffffffff80216105:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216109:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80216110:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff80216114:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216118:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021611b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021611f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216123:	48 89 d6             	mov    %rdx,%rsi
ffffffff80216126:	48 89 c7             	mov    %rax,%rdi
ffffffff80216129:	e8 78 6c ff ff       	call   ffffffff8020cda6 <_RME_List_Del>
        Invocation->Thd_Act=0U;
ffffffff8021612e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216132:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80216139:	00 
        Thread->Ctx.Invstk_Depth--;
ffffffff8021613a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021613e:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff80216145:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80216149:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021614d:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80216154:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216158:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021615f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216163:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80216169:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021616c:	75 97                	jne    ffffffff80216105 <_RME_Thd_Del+0x3c6>
    }
    RME_ASSERT(Thread->Ctx.Invstk_Depth==0U);
    
    /* Dereference the process */
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
ffffffff8021616e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216172:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80216176:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021617a:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80216181:	48 89 c7             	mov    %rax,%rdi
ffffffff80216184:	e8 0a 66 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Try to depopulate the area - this must be successful */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
ffffffff80216189:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021618d:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216194:	48 85 c0             	test   %rax,%rax
ffffffff80216197:	78 13                	js     ffffffff802161ac <_RME_Thd_Del+0x46d>
    {
        RME_COV_MARKER();

        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff80216199:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021619d:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff802161a2:	48 89 c7             	mov    %rax,%rdi
ffffffff802161a5:	e8 df c4 ff ff       	call   ffffffff80212689 <_RME_Kot_Erase>
ffffffff802161aa:	eb 11                	jmp    ffffffff802161bd <_RME_Thd_Del+0x47e>
    }
    else
    {
        RME_COV_MARKER();

        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff802161ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802161b0:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff802161b5:	48 89 c7             	mov    %rax,%rdi
ffffffff802161b8:	e8 cc c4 ff ff       	call   ffffffff80212689 <_RME_Kot_Erase>
                   RME_HYP_SIZE)==0);
    }
    
    return 0;
ffffffff802161bd:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802161c2:	c9                   	leave
ffffffff802161c3:	c3                   	ret

ffffffff802161c4 <_RME_Thd_Sched_Bind>:
                                     rme_cid_t Cap_Thd_Sched,
                                     rme_cid_t Cap_Sig,
                                     rme_tid_t TID,
                                     rme_ptr_t Prio,
                                     rme_ptr_t Haddr)
{
ffffffff802161c4:	f3 0f 1e fa          	endbr64
ffffffff802161c8:	55                   	push   %rbp
ffffffff802161c9:	48 89 e5             	mov    %rsp,%rbp
ffffffff802161cc:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff802161d0:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff802161d4:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff802161d8:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff802161dc:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff802161e0:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff802161e4:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Hyp_Attr;
    rme_ptr_t End;

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802161e8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802161ec:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802161f1:	48 85 c0             	test   %rax,%rax
ffffffff802161f4:	0f 85 98 00 00 00    	jne    ffffffff80216292 <_RME_Thd_Sched_Bind+0xce>
ffffffff802161fa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802161fe:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216202:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80216206:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216209:	0f 93 c0             	setae  %al
ffffffff8021620c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021620f:	48 85 c0             	test   %rax,%rax
ffffffff80216212:	74 0c                	je     ffffffff80216220 <_RME_Thd_Sched_Bind+0x5c>
ffffffff80216214:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021621b:	e9 2e 08 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216220:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216224:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216228:	48 89 c2             	mov    %rax,%rdx
ffffffff8021622b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021622f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216233:	48 01 d0             	add    %rdx,%rax
ffffffff80216236:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021623a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021623e:	48 8b 00             	mov    (%rax),%rax
ffffffff80216241:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216245:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216249:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021624d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216250:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216254:	0f 94 c0             	sete   %al
ffffffff80216257:	0f b6 c0             	movzbl %al,%eax
ffffffff8021625a:	48 85 c0             	test   %rax,%rax
ffffffff8021625d:	74 0c                	je     ffffffff8021626b <_RME_Thd_Sched_Bind+0xa7>
ffffffff8021625f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216266:	e9 e3 07 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021626b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021626f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216273:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216277:	0f 95 c0             	setne  %al
ffffffff8021627a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021627d:	48 85 c0             	test   %rax,%rax
ffffffff80216280:	0f 84 4c 01 00 00    	je     ffffffff802163d2 <_RME_Thd_Sched_Bind+0x20e>
ffffffff80216286:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021628d:	e9 bc 07 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216292:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216296:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021629a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021629d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802162a1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802162a5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802162a8:	0f 93 c0             	setae  %al
ffffffff802162ab:	0f b6 c0             	movzbl %al,%eax
ffffffff802162ae:	48 85 c0             	test   %rax,%rax
ffffffff802162b1:	74 0c                	je     ffffffff802162bf <_RME_Thd_Sched_Bind+0xfb>
ffffffff802162b3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802162ba:	e9 8f 07 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff802162bf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802162c3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802162c7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802162cb:	48 89 c2             	mov    %rax,%rdx
ffffffff802162ce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802162d2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802162d6:	48 01 d0             	add    %rdx,%rax
ffffffff802162d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802162dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802162e1:	48 8b 00             	mov    (%rax),%rax
ffffffff802162e4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802162e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802162ec:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802162f0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802162f3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802162f7:	0f 94 c0             	sete   %al
ffffffff802162fa:	0f b6 c0             	movzbl %al,%eax
ffffffff802162fd:	48 85 c0             	test   %rax,%rax
ffffffff80216300:	74 0c                	je     ffffffff8021630e <_RME_Thd_Sched_Bind+0x14a>
ffffffff80216302:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216309:	e9 40 07 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021630e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216312:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216316:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021631a:	0f 95 c0             	setne  %al
ffffffff8021631d:	0f b6 c0             	movzbl %al,%eax
ffffffff80216320:	48 85 c0             	test   %rax,%rax
ffffffff80216323:	74 0c                	je     ffffffff80216331 <_RME_Thd_Sched_Bind+0x16d>
ffffffff80216325:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021632c:	e9 1d 07 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216331:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216335:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021633a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021633d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216341:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216345:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216348:	0f 93 c0             	setae  %al
ffffffff8021634b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021634e:	48 85 c0             	test   %rax,%rax
ffffffff80216351:	74 0c                	je     ffffffff8021635f <_RME_Thd_Sched_Bind+0x19b>
ffffffff80216353:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021635a:	e9 ef 06 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021635f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216363:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216368:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021636c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021636f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216373:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216377:	48 01 d0             	add    %rdx,%rax
ffffffff8021637a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021637e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216382:	48 8b 00             	mov    (%rax),%rax
ffffffff80216385:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216389:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021638d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216391:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216394:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216398:	0f 94 c0             	sete   %al
ffffffff8021639b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021639e:	48 85 c0             	test   %rax,%rax
ffffffff802163a1:	74 0c                	je     ffffffff802163af <_RME_Thd_Sched_Bind+0x1eb>
ffffffff802163a3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802163aa:	e9 9f 06 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff802163af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802163b3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802163b7:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802163bb:	0f 95 c0             	setne  %al
ffffffff802163be:	0f b6 c0             	movzbl %al,%eax
ffffffff802163c1:	48 85 c0             	test   %rax,%rax
ffffffff802163c4:	74 0c                	je     ffffffff802163d2 <_RME_Thd_Sched_Bind+0x20e>
ffffffff802163c6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802163cd:	e9 7c 06 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff802163d2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802163d6:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802163db:	48 85 c0             	test   %rax,%rax
ffffffff802163de:	0f 85 98 00 00 00    	jne    ffffffff8021647c <_RME_Thd_Sched_Bind+0x2b8>
ffffffff802163e4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802163e8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802163ec:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff802163f0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802163f3:	0f 93 c0             	setae  %al
ffffffff802163f6:	0f b6 c0             	movzbl %al,%eax
ffffffff802163f9:	48 85 c0             	test   %rax,%rax
ffffffff802163fc:	74 0c                	je     ffffffff8021640a <_RME_Thd_Sched_Bind+0x246>
ffffffff802163fe:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216405:	e9 44 06 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021640a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021640e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216412:	48 89 c2             	mov    %rax,%rdx
ffffffff80216415:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216419:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021641d:	48 01 d0             	add    %rdx,%rax
ffffffff80216420:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216424:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216428:	48 8b 00             	mov    (%rax),%rax
ffffffff8021642b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021642f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216433:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216437:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021643a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021643e:	0f 94 c0             	sete   %al
ffffffff80216441:	0f b6 c0             	movzbl %al,%eax
ffffffff80216444:	48 85 c0             	test   %rax,%rax
ffffffff80216447:	74 0c                	je     ffffffff80216455 <_RME_Thd_Sched_Bind+0x291>
ffffffff80216449:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216450:	e9 f9 05 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216455:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216459:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021645d:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216461:	0f 95 c0             	setne  %al
ffffffff80216464:	0f b6 c0             	movzbl %al,%eax
ffffffff80216467:	48 85 c0             	test   %rax,%rax
ffffffff8021646a:	0f 84 4c 01 00 00    	je     ffffffff802165bc <_RME_Thd_Sched_Bind+0x3f8>
ffffffff80216470:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216477:	e9 d2 05 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021647c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80216480:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216484:	48 89 c2             	mov    %rax,%rdx
ffffffff80216487:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021648b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021648f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216492:	0f 93 c0             	setae  %al
ffffffff80216495:	0f b6 c0             	movzbl %al,%eax
ffffffff80216498:	48 85 c0             	test   %rax,%rax
ffffffff8021649b:	74 0c                	je     ffffffff802164a9 <_RME_Thd_Sched_Bind+0x2e5>
ffffffff8021649d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802164a4:	e9 a5 05 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff802164a9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802164ad:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802164b1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802164b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802164b8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802164bc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802164c0:	48 01 d0             	add    %rdx,%rax
ffffffff802164c3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802164c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802164cb:	48 8b 00             	mov    (%rax),%rax
ffffffff802164ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802164d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802164d6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802164da:	0f b7 c0             	movzwl %ax,%eax
ffffffff802164dd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802164e1:	0f 94 c0             	sete   %al
ffffffff802164e4:	0f b6 c0             	movzbl %al,%eax
ffffffff802164e7:	48 85 c0             	test   %rax,%rax
ffffffff802164ea:	74 0c                	je     ffffffff802164f8 <_RME_Thd_Sched_Bind+0x334>
ffffffff802164ec:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802164f3:	e9 56 05 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff802164f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802164fc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216500:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216504:	0f 95 c0             	setne  %al
ffffffff80216507:	0f b6 c0             	movzbl %al,%eax
ffffffff8021650a:	48 85 c0             	test   %rax,%rax
ffffffff8021650d:	74 0c                	je     ffffffff8021651b <_RME_Thd_Sched_Bind+0x357>
ffffffff8021650f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216516:	e9 33 05 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021651b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021651f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216524:	48 89 c2             	mov    %rax,%rdx
ffffffff80216527:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021652b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021652f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216532:	0f 93 c0             	setae  %al
ffffffff80216535:	0f b6 c0             	movzbl %al,%eax
ffffffff80216538:	48 85 c0             	test   %rax,%rax
ffffffff8021653b:	74 0c                	je     ffffffff80216549 <_RME_Thd_Sched_Bind+0x385>
ffffffff8021653d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216544:	e9 05 05 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216549:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021654d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216552:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216556:	48 89 c2             	mov    %rax,%rdx
ffffffff80216559:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021655d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216561:	48 01 d0             	add    %rdx,%rax
ffffffff80216564:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216568:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021656c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021656f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216573:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216577:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021657b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021657e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216582:	0f 94 c0             	sete   %al
ffffffff80216585:	0f b6 c0             	movzbl %al,%eax
ffffffff80216588:	48 85 c0             	test   %rax,%rax
ffffffff8021658b:	74 0c                	je     ffffffff80216599 <_RME_Thd_Sched_Bind+0x3d5>
ffffffff8021658d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216594:	e9 b5 04 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216599:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021659d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802165a1:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802165a5:	0f 95 c0             	setne  %al
ffffffff802165a8:	0f b6 c0             	movzbl %al,%eax
ffffffff802165ab:	48 85 c0             	test   %rax,%rax
ffffffff802165ae:	74 0c                	je     ffffffff802165bc <_RME_Thd_Sched_Bind+0x3f8>
ffffffff802165b0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802165b7:	e9 92 04 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
                   struct RME_Cap_Thd*,Thd_Sched,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff802165bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802165c0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802165c4:	83 e0 02             	and    $0x2,%eax
ffffffff802165c7:	48 85 c0             	test   %rax,%rax
ffffffff802165ca:	0f 94 c0             	sete   %al
ffffffff802165cd:	0f b6 c0             	movzbl %al,%eax
ffffffff802165d0:	48 85 c0             	test   %rax,%rax
ffffffff802165d3:	74 0c                	je     ffffffff802165e1 <_RME_Thd_Sched_Bind+0x41d>
ffffffff802165d5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802165dc:	e9 6d 04 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff802165e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802165e5:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802165e9:	83 e0 04             	and    $0x4,%eax
ffffffff802165ec:	48 85 c0             	test   %rax,%rax
ffffffff802165ef:	0f 94 c0             	sete   %al
ffffffff802165f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802165f5:	48 85 c0             	test   %rax,%rax
ffffffff802165f8:	74 0c                	je     ffffffff80216606 <_RME_Thd_Sched_Bind+0x442>
ffffffff802165fa:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216601:	e9 48 04 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
    
    /* Check if we need the signal endpoint for this operation */
    if(Cap_Sig!=RME_CID_NULL)
ffffffff80216606:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff8021660b:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff8021660f:	0f 84 0f 02 00 00    	je     ffffffff80216824 <_RME_Thd_Sched_Bind+0x660>
    {
        RME_COV_MARKER();

        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80216615:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216619:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021661e:	48 85 c0             	test   %rax,%rax
ffffffff80216621:	0f 85 98 00 00 00    	jne    ffffffff802166bf <_RME_Thd_Sched_Bind+0x4fb>
ffffffff80216627:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021662b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021662f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff80216633:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216636:	0f 93 c0             	setae  %al
ffffffff80216639:	0f b6 c0             	movzbl %al,%eax
ffffffff8021663c:	48 85 c0             	test   %rax,%rax
ffffffff8021663f:	74 0c                	je     ffffffff8021664d <_RME_Thd_Sched_Bind+0x489>
ffffffff80216641:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216648:	e9 01 04 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021664d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216651:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216655:	48 89 c2             	mov    %rax,%rdx
ffffffff80216658:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021665c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216660:	48 01 d0             	add    %rdx,%rax
ffffffff80216663:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80216667:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021666b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021666e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216672:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216676:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021667a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021667d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216681:	0f 94 c0             	sete   %al
ffffffff80216684:	0f b6 c0             	movzbl %al,%eax
ffffffff80216687:	48 85 c0             	test   %rax,%rax
ffffffff8021668a:	74 0c                	je     ffffffff80216698 <_RME_Thd_Sched_Bind+0x4d4>
ffffffff8021668c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216693:	e9 b6 03 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216698:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021669c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802166a0:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802166a4:	0f 95 c0             	setne  %al
ffffffff802166a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802166aa:	48 85 c0             	test   %rax,%rax
ffffffff802166ad:	0f 84 4c 01 00 00    	je     ffffffff802167ff <_RME_Thd_Sched_Bind+0x63b>
ffffffff802166b3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802166ba:	e9 8f 03 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff802166bf:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802166c3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802166c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802166ca:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802166ce:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802166d2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802166d5:	0f 93 c0             	setae  %al
ffffffff802166d8:	0f b6 c0             	movzbl %al,%eax
ffffffff802166db:	48 85 c0             	test   %rax,%rax
ffffffff802166de:	74 0c                	je     ffffffff802166ec <_RME_Thd_Sched_Bind+0x528>
ffffffff802166e0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802166e7:	e9 62 03 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff802166ec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802166f0:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802166f4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802166f8:	48 89 c2             	mov    %rax,%rdx
ffffffff802166fb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802166ff:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216703:	48 01 d0             	add    %rdx,%rax
ffffffff80216706:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021670a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021670e:	48 8b 00             	mov    (%rax),%rax
ffffffff80216711:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216715:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216719:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021671d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216720:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216724:	0f 94 c0             	sete   %al
ffffffff80216727:	0f b6 c0             	movzbl %al,%eax
ffffffff8021672a:	48 85 c0             	test   %rax,%rax
ffffffff8021672d:	74 0c                	je     ffffffff8021673b <_RME_Thd_Sched_Bind+0x577>
ffffffff8021672f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216736:	e9 13 03 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021673b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021673f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216743:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216747:	0f 95 c0             	setne  %al
ffffffff8021674a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021674d:	48 85 c0             	test   %rax,%rax
ffffffff80216750:	74 0c                	je     ffffffff8021675e <_RME_Thd_Sched_Bind+0x59a>
ffffffff80216752:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216759:	e9 f0 02 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021675e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216762:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216767:	48 89 c2             	mov    %rax,%rdx
ffffffff8021676a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021676e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216772:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216775:	0f 93 c0             	setae  %al
ffffffff80216778:	0f b6 c0             	movzbl %al,%eax
ffffffff8021677b:	48 85 c0             	test   %rax,%rax
ffffffff8021677e:	74 0c                	je     ffffffff8021678c <_RME_Thd_Sched_Bind+0x5c8>
ffffffff80216780:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216787:	e9 c2 02 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021678c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216790:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216795:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216799:	48 89 c2             	mov    %rax,%rdx
ffffffff8021679c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802167a0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802167a4:	48 01 d0             	add    %rdx,%rax
ffffffff802167a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802167ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802167af:	48 8b 00             	mov    (%rax),%rax
ffffffff802167b2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802167b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802167ba:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802167be:	0f b7 c0             	movzwl %ax,%eax
ffffffff802167c1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802167c5:	0f 94 c0             	sete   %al
ffffffff802167c8:	0f b6 c0             	movzbl %al,%eax
ffffffff802167cb:	48 85 c0             	test   %rax,%rax
ffffffff802167ce:	74 0c                	je     ffffffff802167dc <_RME_Thd_Sched_Bind+0x618>
ffffffff802167d0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802167d7:	e9 72 02 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
ffffffff802167dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802167e0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802167e4:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802167e8:	0f 95 c0             	setne  %al
ffffffff802167eb:	0f b6 c0             	movzbl %al,%eax
ffffffff802167ee:	48 85 c0             	test   %rax,%rax
ffffffff802167f1:	74 0c                	je     ffffffff802167ff <_RME_Thd_Sched_Bind+0x63b>
ffffffff802167f3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802167fa:	e9 4f 02 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
                       struct RME_Cap_Sig*,Sig_Op,Type_Stat);
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
ffffffff802167ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216803:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216807:	83 e0 20             	and    $0x20,%eax
ffffffff8021680a:	48 85 c0             	test   %rax,%rax
ffffffff8021680d:	0f 94 c0             	sete   %al
ffffffff80216810:	0f b6 c0             	movzbl %al,%eax
ffffffff80216813:	48 85 c0             	test   %rax,%rax
ffffffff80216816:	74 14                	je     ffffffff8021682c <_RME_Thd_Sched_Bind+0x668>
ffffffff80216818:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021681f:	e9 2a 02 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
    }
    else
    {
        RME_COV_MARKER();

        Sig_Op=RME_NULL;
ffffffff80216824:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021682b:	00 
    }

    /* Check if the target thread is already bound. If yes, we just quit */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff8021682c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216830:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216834:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Local_Old=Thread->Sched.Local;
ffffffff80216838:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021683c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216840:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Local_Old!=RME_THD_FREE)
ffffffff80216844:	48 83 7d d0 ff       	cmpq   $0xffffffffffffffff,-0x30(%rbp)
ffffffff80216849:	74 0c                	je     ffffffff80216857 <_RME_Thd_Sched_Bind+0x693>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff8021684b:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216852:	e9 f7 01 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the parent thread is on the same core with the current processor */
    Local_New=RME_CPU_LOCAL();
ffffffff80216857:	e8 e3 4f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021685c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff80216860:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216864:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216868:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    if(Scheduler->Sched.Local!=Local_New)
ffffffff8021686c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80216870:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216874:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff80216878:	74 0c                	je     ffffffff80216886 <_RME_Thd_Sched_Bind+0x6c2>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff8021687a:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216881:	e9 c8 01 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if we are trying to bind to ourself - prohibited */
    if(Thread==Scheduler)
ffffffff80216886:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021688a:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff8021688e:	75 0c                	jne    ffffffff8021689c <_RME_Thd_Sched_Bind+0x6d8>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_NOTIF;
ffffffff80216890:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff80216897:	e9 b2 01 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the priority relationship is correct */
    if(Scheduler->Sched.Prio_Max<Prio)
ffffffff8021689c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802168a0:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff802168a4:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
ffffffff802168a8:	73 0c                	jae    ffffffff802168b6 <_RME_Thd_Sched_Bind+0x6f2>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff802168aa:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802168b1:	e9 98 01 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check whether the coprocessor context attribute is compatible with this core */
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
ffffffff802168b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802168ba:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff802168c1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
    }
#else
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
ffffffff802168c5:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff802168cc:	ff ff 7f 
ffffffff802168cf:	48 23 45 b8          	and    -0x48(%rbp),%rax
ffffffff802168d3:	48 85 c0             	test   %rax,%rax
ffffffff802168d6:	74 0c                	je     ffffffff802168e4 <_RME_Thd_Sched_Bind+0x720>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff802168d8:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802168df:	e9 6a 01 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check the hypervisor context buffer passed in to see whether it is good */
    if((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U))
ffffffff802168e4:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff802168e9:	74 5c                	je     ffffffff80216947 <_RME_Thd_Sched_Bind+0x783>
ffffffff802168eb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802168ef:	48 85 c0             	test   %rax,%rax
ffffffff802168f2:	79 53                	jns    ffffffff80216947 <_RME_Thd_Sched_Bind+0x783>
    {
        RME_COV_MARKER();
        
        /* Register save area must be aligned to word boundary */
        if(RME_IS_ALIGNED(Haddr)!=0U)
ffffffff802168f4:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802168f8:	83 e0 07             	and    $0x7,%eax
ffffffff802168fb:	48 85 c0             	test   %rax,%rax
ffffffff802168fe:	75 07                	jne    ffffffff80216907 <_RME_Thd_Sched_Bind+0x743>
ffffffff80216900:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80216905:	eb 05                	jmp    ffffffff8021690c <_RME_Thd_Sched_Bind+0x748>
ffffffff80216907:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021690c:	84 c0                	test   %al,%al
ffffffff8021690e:	74 2b                	je     ffffffff8021693b <_RME_Thd_Sched_Bind+0x777>
                return RME_ERR_PTH_HADDR;
            }
            else
            {
#endif
                End=Haddr+RME_REG_SIZE(RME_THD_ATTR(Thread->Ctx.Hyp_Attr));
ffffffff80216910:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80216914:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021691a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
                if((End<=Haddr)||(End>(RME_HYP_VA_BASE+RME_HYP_VA_SIZE)))
ffffffff8021691e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80216922:	48 39 45 10          	cmp    %rax,0x10(%rbp)
ffffffff80216926:	73 07                	jae    ffffffff8021692f <_RME_Thd_Sched_Bind+0x76b>
ffffffff80216928:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8021692d:	74 44                	je     ffffffff80216973 <_RME_Thd_Sched_Bind+0x7af>
                {
                    RME_COV_MARKER();

                    return RME_ERR_PTH_HADDR;
ffffffff8021692f:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80216936:	e9 13 01 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
        /* Not aligned, exiting */
        else
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_HADDR;
ffffffff8021693b:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80216942:	e9 07 01 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
        }
    }
    /* We don't allow setting HYP addr for normal threads, nor do we allow
     * setting HYP addr to NULL for hypervisor-managed threads. */
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
ffffffff80216947:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff8021694c:	74 09                	je     ffffffff80216957 <_RME_Thd_Sched_Bind+0x793>
ffffffff8021694e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216952:	48 85 c0             	test   %rax,%rax
ffffffff80216955:	79 10                	jns    ffffffff80216967 <_RME_Thd_Sched_Bind+0x7a3>
ffffffff80216957:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff8021695c:	75 16                	jne    ffffffff80216974 <_RME_Thd_Sched_Bind+0x7b0>
            ((Haddr==RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U)))
ffffffff8021695e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216962:	48 85 c0             	test   %rax,%rax
ffffffff80216965:	79 0d                	jns    ffffffff80216974 <_RME_Thd_Sched_Bind+0x7b0>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_HADDR;
ffffffff80216967:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff8021696e:	e9 db 00 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
        if(RME_IS_ALIGNED(Haddr)!=0U)
ffffffff80216973:	90                   	nop
        RME_COV_MARKER();
        /* No action required */
    }

    /* Try to bind the thread */
    if(RME_COMP_SWAP((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80216974:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216978:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021697c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80216980:	48 83 c1 28          	add    $0x28,%rcx
ffffffff80216984:	48 89 c6             	mov    %rax,%rsi
ffffffff80216987:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021698a:	e8 cf 5d ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021698f:	48 85 c0             	test   %rax,%rax
ffffffff80216992:	75 0c                	jne    ffffffff802169a0 <_RME_Thd_Sched_Bind+0x7dc>
                     (rme_ptr_t)Local_Old,
                     (rme_ptr_t)Local_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_CONFLICT;
ffffffff80216994:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff8021699b:	e9 ae 00 00 00       	jmp    ffffffff80216a4e <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase the reference count of the scheduler thread struct - same core */
    Scheduler->Sched.Sched_Ref++;
ffffffff802169a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802169a4:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff802169a8:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff802169ac:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802169b0:	48 89 50 60          	mov    %rdx,0x60(%rax)
    
    /* Bind successful and finish the work off. No need to worry about other cores'
     * operations on this thread because this thread is already bound to this core.
     * TID is half-word parameter-wise, but is stored and returned as a full word. */
    Thread->Sched.Sched_Thd=Scheduler;
ffffffff802169b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802169b8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff802169bc:	48 89 50 68          	mov    %rdx,0x68(%rax)
    Thread->Sched.Prio=Prio;
ffffffff802169c0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802169c4:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff802169c8:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Thread->Sched.TID=(rme_ptr_t)TID;
ffffffff802169cc:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff802169d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802169d4:	48 89 50 20          	mov    %rdx,0x20(%rax)
    /* The state must be TIMEOUT or EXCPEND at this point */
    RME_ASSERT((Thread->Sched.State==RME_THD_TIMEOUT)||
               (Thread->Sched.State==RME_THD_EXCPEND));

    /* Tie the signal endpoint to it if not zero */
    if(Sig_Op==(void*)0U)
ffffffff802169d8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff802169dd:	75 0e                	jne    ffffffff802169ed <_RME_Thd_Sched_Bind+0x829>
    {
        RME_COV_MARKER();

        Thread->Sched.Sched_Sig=0U;
ffffffff802169df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802169e3:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff802169ea:	00 
ffffffff802169eb:	eb 3d                	jmp    ffffffff80216a2a <_RME_Thd_Sched_Bind+0x866>
    else
    {
        RME_COV_MARKER();

        /* Convert to root cap */
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802169ed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802169f1:	48 8b 00             	mov    (%rax),%rax
ffffffff802169f4:	89 c0                	mov    %eax,%eax
ffffffff802169f6:	48 85 c0             	test   %rax,%rax
ffffffff802169f9:	74 0a                	je     ffffffff80216a05 <_RME_Thd_Sched_Bind+0x841>
ffffffff802169fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802169ff:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216a03:	eb 04                	jmp    ffffffff80216a09 <_RME_Thd_Sched_Bind+0x845>
ffffffff80216a05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216a09:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80216a0d:	48 89 42 70          	mov    %rax,0x70(%rdx)
        
        /* Increase refcnt */
        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),1U);
ffffffff80216a11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a15:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216a19:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216a1d:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80216a22:	48 89 c7             	mov    %rax,%rdi
ffffffff80216a25:	e8 69 5d ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    }
    
    /* Set hypervisor context address if we're hypervisor-managed */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
ffffffff80216a2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a2e:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216a35:	48 85 c0             	test   %rax,%rax
ffffffff80216a38:	79 0f                	jns    ffffffff80216a49 <_RME_Thd_Sched_Bind+0x885>
    {
        RME_COV_MARKER();
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
ffffffff80216a3a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80216a3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a42:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff80216a49:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216a4e:	c9                   	leave
ffffffff80216a4f:	c3                   	ret

ffffffff80216a50 <_RME_Thd_Sched_Free>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Free(struct RME_Cap_Cpt* Cpt, 
                                     struct RME_Reg_Struct* Reg,
                                     rme_cid_t Cap_Thd)
{
ffffffff80216a50:	f3 0f 1e fa          	endbr64
ffffffff80216a54:	55                   	push   %rbp
ffffffff80216a55:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216a58:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80216a5c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80216a60:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80216a64:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    /* These are used to free the thread */
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80216a68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216a6c:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216a71:	48 85 c0             	test   %rax,%rax
ffffffff80216a74:	0f 85 98 00 00 00    	jne    ffffffff80216b12 <_RME_Thd_Sched_Free+0xc2>
ffffffff80216a7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a7e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216a82:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216a86:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216a89:	0f 93 c0             	setae  %al
ffffffff80216a8c:	0f b6 c0             	movzbl %al,%eax
ffffffff80216a8f:	48 85 c0             	test   %rax,%rax
ffffffff80216a92:	74 0c                	je     ffffffff80216aa0 <_RME_Thd_Sched_Free+0x50>
ffffffff80216a94:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216a9b:	e9 90 03 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216aa0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216aa4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216aa8:	48 89 c2             	mov    %rax,%rdx
ffffffff80216aab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216aaf:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216ab3:	48 01 d0             	add    %rdx,%rax
ffffffff80216ab6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216aba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216abe:	48 8b 00             	mov    (%rax),%rax
ffffffff80216ac1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216ac5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216ac9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216acd:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216ad0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216ad4:	0f 94 c0             	sete   %al
ffffffff80216ad7:	0f b6 c0             	movzbl %al,%eax
ffffffff80216ada:	48 85 c0             	test   %rax,%rax
ffffffff80216add:	74 0c                	je     ffffffff80216aeb <_RME_Thd_Sched_Free+0x9b>
ffffffff80216adf:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216ae6:	e9 45 03 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216aeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216aef:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216af3:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216af7:	0f 95 c0             	setne  %al
ffffffff80216afa:	0f b6 c0             	movzbl %al,%eax
ffffffff80216afd:	48 85 c0             	test   %rax,%rax
ffffffff80216b00:	0f 84 4c 01 00 00    	je     ffffffff80216c52 <_RME_Thd_Sched_Free+0x202>
ffffffff80216b06:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216b0d:	e9 1e 03 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216b12:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216b16:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216b1a:	48 89 c2             	mov    %rax,%rdx
ffffffff80216b1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216b21:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216b25:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216b28:	0f 93 c0             	setae  %al
ffffffff80216b2b:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b2e:	48 85 c0             	test   %rax,%rax
ffffffff80216b31:	74 0c                	je     ffffffff80216b3f <_RME_Thd_Sched_Free+0xef>
ffffffff80216b33:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216b3a:	e9 f1 02 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216b3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216b43:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216b47:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216b4b:	48 89 c2             	mov    %rax,%rdx
ffffffff80216b4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216b52:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216b56:	48 01 d0             	add    %rdx,%rax
ffffffff80216b59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216b5d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216b61:	48 8b 00             	mov    (%rax),%rax
ffffffff80216b64:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216b68:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216b6c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216b70:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216b73:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216b77:	0f 94 c0             	sete   %al
ffffffff80216b7a:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b7d:	48 85 c0             	test   %rax,%rax
ffffffff80216b80:	74 0c                	je     ffffffff80216b8e <_RME_Thd_Sched_Free+0x13e>
ffffffff80216b82:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216b89:	e9 a2 02 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216b8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216b92:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216b96:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216b9a:	0f 95 c0             	setne  %al
ffffffff80216b9d:	0f b6 c0             	movzbl %al,%eax
ffffffff80216ba0:	48 85 c0             	test   %rax,%rax
ffffffff80216ba3:	74 0c                	je     ffffffff80216bb1 <_RME_Thd_Sched_Free+0x161>
ffffffff80216ba5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216bac:	e9 7f 02 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216bb1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216bb5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216bba:	48 89 c2             	mov    %rax,%rdx
ffffffff80216bbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216bc1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216bc5:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216bc8:	0f 93 c0             	setae  %al
ffffffff80216bcb:	0f b6 c0             	movzbl %al,%eax
ffffffff80216bce:	48 85 c0             	test   %rax,%rax
ffffffff80216bd1:	74 0c                	je     ffffffff80216bdf <_RME_Thd_Sched_Free+0x18f>
ffffffff80216bd3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216bda:	e9 51 02 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216bdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216be3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216be8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216bec:	48 89 c2             	mov    %rax,%rdx
ffffffff80216bef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216bf3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216bf7:	48 01 d0             	add    %rdx,%rax
ffffffff80216bfa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216bfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216c02:	48 8b 00             	mov    (%rax),%rax
ffffffff80216c05:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216c09:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216c0d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216c11:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216c14:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216c18:	0f 94 c0             	sete   %al
ffffffff80216c1b:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c1e:	48 85 c0             	test   %rax,%rax
ffffffff80216c21:	74 0c                	je     ffffffff80216c2f <_RME_Thd_Sched_Free+0x1df>
ffffffff80216c23:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216c2a:	e9 01 02 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216c2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216c33:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216c37:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216c3b:	0f 95 c0             	setne  %al
ffffffff80216c3e:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c41:	48 85 c0             	test   %rax,%rax
ffffffff80216c44:	74 0c                	je     ffffffff80216c52 <_RME_Thd_Sched_Free+0x202>
ffffffff80216c46:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216c4d:	e9 de 01 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80216c52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216c56:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216c5a:	83 e0 10             	and    $0x10,%eax
ffffffff80216c5d:	48 85 c0             	test   %rax,%rax
ffffffff80216c60:	0f 94 c0             	sete   %al
ffffffff80216c63:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c66:	48 85 c0             	test   %rax,%rax
ffffffff80216c69:	74 0c                	je     ffffffff80216c77 <_RME_Thd_Sched_Free+0x227>
ffffffff80216c6b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216c72:	e9 b9 01 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
    
    /* Check if the target thread is already bound to this core */
    Local=RME_CPU_LOCAL();
ffffffff80216c77:	e8 c3 4b ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80216c7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80216c80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216c84:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216c88:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(Thread->Sched.Local!=Local)
ffffffff80216c8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216c90:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216c94:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80216c98:	74 0c                	je     ffffffff80216ca6 <_RME_Thd_Sched_Free+0x256>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80216c9a:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216ca1:	e9 8a 01 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
        /* No action required */
    }
    
    /* Am I referenced by someone as a scheduler? If yes, we cannot unbind. Because
     * boot-time thread's refcnt will never be 0, thus they will never pass this checking */
    if(Thread->Sched.Sched_Ref!=0U)
ffffffff80216ca6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216caa:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80216cae:	48 85 c0             	test   %rax,%rax
ffffffff80216cb1:	74 0c                	je     ffffffff80216cbf <_RME_Thd_Sched_Free+0x26f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_REFCNT;
ffffffff80216cb3:	48 c7 c0 32 ff ff ff 	mov    $0xffffffffffffff32,%rax
ffffffff80216cba:	e9 71 01 00 00       	jmp    ffffffff80216e30 <_RME_Thd_Sched_Free+0x3e0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Decrease the parent's reference count - on the same core */
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff80216cbf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cc3:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80216cc7:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80216ccb:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80216ccf:	48 89 50 60          	mov    %rdx,0x60(%rax)

    /* See if we have any events sent to the parent. If yes, remove that event */
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff80216cd3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cd7:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80216cdb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cdf:	48 83 c0 10          	add    $0x10,%rax
ffffffff80216ce3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216ce6:	74 2b                	je     ffffffff80216d13 <_RME_Thd_Sched_Free+0x2c3>
    {
        RME_COV_MARKER();

        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80216ce8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cec:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80216cf0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216cf4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216cf8:	48 89 d6             	mov    %rdx,%rsi
ffffffff80216cfb:	48 89 c7             	mov    %rax,%rdi
ffffffff80216cfe:	e8 a3 60 ff ff       	call   ffffffff8020cda6 <_RME_List_Del>
        _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80216d03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d07:	48 83 c0 10          	add    $0x10,%rax
ffffffff80216d0b:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d0e:	e8 69 60 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
        RME_COV_MARKER();
        /* No action required */
    }

    /* If we have an scheduler event endpoint, release it */
    if(Thread->Sched.Sched_Sig!=(void*)RME_NULL)
ffffffff80216d13:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d17:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216d1b:	48 85 c0             	test   %rax,%rax
ffffffff80216d1e:	74 1b                	je     ffffffff80216d3b <_RME_Thd_Sched_Free+0x2eb>
    {
        RME_COV_MARKER();

        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),-1);
ffffffff80216d20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d24:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216d28:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216d2c:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80216d33:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d36:	e8 58 5a ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80216d3b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216d3f:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80216d44:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d47:	e8 96 03 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
    /* If the thread is ready, kick it out of the run queue. If it is blocked on
     * some endpoint, end the blocking and set the return value to RME_ERR_SIV_FREE.
     * If the thread is killed due to a fault, we will not clear the fault here, and
     * we will wait for the Exec_Set to clear it. No scheduler notifications are sent
     * because the thread is being freed and notifications at this point are useless. */
    if(Thread->Sched.State==RME_THD_READY)
ffffffff80216d4c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d50:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80216d54:	48 85 c0             	test   %rax,%rax
ffffffff80216d57:	75 1a                	jne    ffffffff80216d73 <_RME_Thd_Sched_Free+0x323>
    {
        RME_COV_MARKER();

        /* Remove from runqueue and timeout but don't notify parent */
        _RME_Run_Del(Thread);
ffffffff80216d59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d5d:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d60:	e8 ba c0 ff ff       	call   ffffffff80212e1f <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80216d65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d69:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80216d70:	00 
ffffffff80216d71:	eb 50                	jmp    ffffffff80216dc3 <_RME_Thd_Sched_Free+0x373>
    }
    /* BLOCKED */
    else if(Thread->Sched.State==RME_THD_BLOCKED)
ffffffff80216d73:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d77:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80216d7b:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80216d7f:	75 42                	jne    ffffffff80216dc3 <_RME_Thd_Sched_Free+0x373>
    {
        RME_COV_MARKER();
        
        /* If it got here, the thread that is operated on cannot be the current 
         * thread, so we are not overwriting the return value of the caller. */
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
ffffffff80216d81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d85:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80216d8c:	48 c7 c6 ce fe ff ff 	mov    $0xfffffffffffffece,%rsi
ffffffff80216d93:	48 89 c7             	mov    %rax,%rdi
ffffffff80216d96:	e8 47 03 01 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
        /* Release signal and thread from each other */
        Thread->Sched.Signal->Thd=RME_NULL;
ffffffff80216d9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d9f:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff80216da3:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80216daa:	00 
        Thread->Sched.Signal=RME_NULL;
ffffffff80216dab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216daf:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80216db6:	00 
        /* Timeout but don't notify parent */
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80216db7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216dbb:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80216dc2:	00 
        RME_COV_MARKER();
        /* No action required */
    }

    /* Cleanup all remaining timeslices on it */
    Thread->Sched.Slice=0U;
ffffffff80216dc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216dc7:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80216dce:	00 
    
    /* Check if this thread is the current one and we may need to switch away */
    if(Local->Thd_Cur==Thread)
ffffffff80216dcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216dd3:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216dd7:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80216ddb:	75 3f                	jne    ffffffff80216e1c <_RME_Thd_Sched_Free+0x3cc>
    {
        RME_COV_MARKER();

        Local->Thd_Cur=_RME_Run_High(Local);
ffffffff80216ddd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216de1:	48 89 c7             	mov    %rax,%rdi
ffffffff80216de4:	e8 ff c0 ff ff       	call   ffffffff80212ee8 <_RME_Run_High>
ffffffff80216de9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80216ded:	48 89 42 08          	mov    %rax,0x8(%rdx)
        _RME_Run_Ins(Local->Thd_Cur);
ffffffff80216df1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216df5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216df9:	48 89 c7             	mov    %rax,%rdi
ffffffff80216dfc:	e8 6e bf ff ff       	call   ffffffff80212d6f <_RME_Run_Ins>
        RME_ASSERT(Local->Thd_Cur->Sched.State==RME_THD_READY);
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff80216e01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216e05:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80216e09:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80216e0d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216e11:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216e14:	48 89 c7             	mov    %rax,%rdi
ffffffff80216e17:	e8 28 c2 ff ff       	call   ffffffff80213044 <_RME_Run_Swt>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Set the state to free so other cores can bind */
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80216e1c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e20:	48 83 c0 28          	add    $0x28,%rax
ffffffff80216e24:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
                      (rme_ptr_t)RME_THD_FREE);

    return 0;
ffffffff80216e2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216e30:	c9                   	leave
ffffffff80216e31:	c3                   	ret

ffffffff80216e32 <_RME_Thd_Exec_Set>:
                                   struct RME_Reg_Struct* Reg,
                                   rme_cid_t Cap_Thd,
                                   rme_ptr_t Entry,
                                   rme_ptr_t Stack,
                                   rme_ptr_t Param)
{
ffffffff80216e32:	f3 0f 1e fa          	endbr64
ffffffff80216e36:	55                   	push   %rbp
ffffffff80216e37:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216e3a:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80216e3e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80216e42:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80216e46:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80216e4a:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff80216e4e:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
ffffffff80216e52:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    struct RME_Thd_Struct* Thread;
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80216e56:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216e5a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216e5f:	48 85 c0             	test   %rax,%rax
ffffffff80216e62:	0f 85 98 00 00 00    	jne    ffffffff80216f00 <_RME_Thd_Exec_Set+0xce>
ffffffff80216e68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216e6c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216e70:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216e74:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216e77:	0f 93 c0             	setae  %al
ffffffff80216e7a:	0f b6 c0             	movzbl %al,%eax
ffffffff80216e7d:	48 85 c0             	test   %rax,%rax
ffffffff80216e80:	74 0c                	je     ffffffff80216e8e <_RME_Thd_Exec_Set+0x5c>
ffffffff80216e82:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216e89:	e9 ca 02 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
ffffffff80216e8e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216e92:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216e96:	48 89 c2             	mov    %rax,%rdx
ffffffff80216e99:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216e9d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216ea1:	48 01 d0             	add    %rdx,%rax
ffffffff80216ea4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216ea8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216eac:	48 8b 00             	mov    (%rax),%rax
ffffffff80216eaf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216eb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216eb7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216ebb:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216ebe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216ec2:	0f 94 c0             	sete   %al
ffffffff80216ec5:	0f b6 c0             	movzbl %al,%eax
ffffffff80216ec8:	48 85 c0             	test   %rax,%rax
ffffffff80216ecb:	74 0c                	je     ffffffff80216ed9 <_RME_Thd_Exec_Set+0xa7>
ffffffff80216ecd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216ed4:	e9 7f 02 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
ffffffff80216ed9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216edd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216ee1:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216ee5:	0f 95 c0             	setne  %al
ffffffff80216ee8:	0f b6 c0             	movzbl %al,%eax
ffffffff80216eeb:	48 85 c0             	test   %rax,%rax
ffffffff80216eee:	0f 84 4c 01 00 00    	je     ffffffff80217040 <_RME_Thd_Exec_Set+0x20e>
ffffffff80216ef4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216efb:	e9 58 02 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
ffffffff80216f00:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216f04:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216f08:	48 89 c2             	mov    %rax,%rdx
ffffffff80216f0b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216f0f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216f13:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216f16:	0f 93 c0             	setae  %al
ffffffff80216f19:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f1c:	48 85 c0             	test   %rax,%rax
ffffffff80216f1f:	74 0c                	je     ffffffff80216f2d <_RME_Thd_Exec_Set+0xfb>
ffffffff80216f21:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216f28:	e9 2b 02 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
ffffffff80216f2d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216f31:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216f35:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216f39:	48 89 c2             	mov    %rax,%rdx
ffffffff80216f3c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216f40:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216f44:	48 01 d0             	add    %rdx,%rax
ffffffff80216f47:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216f4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216f4f:	48 8b 00             	mov    (%rax),%rax
ffffffff80216f52:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216f56:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216f5a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216f5e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216f61:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216f65:	0f 94 c0             	sete   %al
ffffffff80216f68:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f6b:	48 85 c0             	test   %rax,%rax
ffffffff80216f6e:	74 0c                	je     ffffffff80216f7c <_RME_Thd_Exec_Set+0x14a>
ffffffff80216f70:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216f77:	e9 dc 01 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
ffffffff80216f7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216f80:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216f84:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216f88:	0f 95 c0             	setne  %al
ffffffff80216f8b:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f8e:	48 85 c0             	test   %rax,%rax
ffffffff80216f91:	74 0c                	je     ffffffff80216f9f <_RME_Thd_Exec_Set+0x16d>
ffffffff80216f93:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216f9a:	e9 b9 01 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
ffffffff80216f9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216fa3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216fa8:	48 89 c2             	mov    %rax,%rdx
ffffffff80216fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216faf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216fb3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216fb6:	0f 93 c0             	setae  %al
ffffffff80216fb9:	0f b6 c0             	movzbl %al,%eax
ffffffff80216fbc:	48 85 c0             	test   %rax,%rax
ffffffff80216fbf:	74 0c                	je     ffffffff80216fcd <_RME_Thd_Exec_Set+0x19b>
ffffffff80216fc1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216fc8:	e9 8b 01 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
ffffffff80216fcd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216fd1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216fd6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216fda:	48 89 c2             	mov    %rax,%rdx
ffffffff80216fdd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216fe1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216fe5:	48 01 d0             	add    %rdx,%rax
ffffffff80216fe8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216fec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216ff0:	48 8b 00             	mov    (%rax),%rax
ffffffff80216ff3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216ff7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216ffb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216fff:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217002:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217006:	0f 94 c0             	sete   %al
ffffffff80217009:	0f b6 c0             	movzbl %al,%eax
ffffffff8021700c:	48 85 c0             	test   %rax,%rax
ffffffff8021700f:	74 0c                	je     ffffffff8021701d <_RME_Thd_Exec_Set+0x1eb>
ffffffff80217011:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217018:	e9 3b 01 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
ffffffff8021701d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217021:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217025:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217029:	0f 95 c0             	setne  %al
ffffffff8021702c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021702f:	48 85 c0             	test   %rax,%rax
ffffffff80217032:	74 0c                	je     ffffffff80217040 <_RME_Thd_Exec_Set+0x20e>
ffffffff80217034:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021703b:	e9 18 01 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff80217040:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217044:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217048:	83 e0 01             	and    $0x1,%eax
ffffffff8021704b:	48 85 c0             	test   %rax,%rax
ffffffff8021704e:	0f 94 c0             	sete   %al
ffffffff80217051:	0f b6 c0             	movzbl %al,%eax
ffffffff80217054:	48 85 c0             	test   %rax,%rax
ffffffff80217057:	74 0c                	je     ffffffff80217065 <_RME_Thd_Exec_Set+0x233>
ffffffff80217059:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217060:	e9 f3 00 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
    
    /* Check if the target thread is already bound, and quit if it is not on our core */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff80217065:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217069:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021706d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Local=RME_CPU_LOCAL();
ffffffff80217071:	e8 c9 47 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80217076:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(Thread->Sched.Local!=Local)
ffffffff8021707a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021707e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217082:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80217086:	74 0c                	je     ffffffff80217094 <_RME_Thd_Exec_Set+0x262>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217088:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021708f:	e9 c4 00 00 00       	jmp    ffffffff80217158 <_RME_Thd_Exec_Set+0x326>
        /* No action required */
    }
    
    /* Commit the change if both values are non-zero. If both are zero we are just
     * clearing the error flag and continue from where the exception happened. */
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
ffffffff80217094:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
ffffffff80217099:	74 47                	je     ffffffff802170e2 <_RME_Thd_Exec_Set+0x2b0>
ffffffff8021709b:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff802170a0:	74 40                	je     ffffffff802170e2 <_RME_Thd_Exec_Set+0x2b0>
    {
        RME_COV_MARKER();

        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
                           Entry,Stack,Param,&(Thread->Ctx.Reg->Reg));
ffffffff802170a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802170a6:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
ffffffff802170ad:	48 89 c6             	mov    %rax,%rsi
ffffffff802170b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802170b4:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff802170bb:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff802170c2:	ff ff 7f 
ffffffff802170c5:	48 21 d0             	and    %rdx,%rax
ffffffff802170c8:	48 89 c7             	mov    %rax,%rdi
ffffffff802170cb:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff802170cf:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802170d3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802170d7:	49 89 f0             	mov    %rsi,%r8
ffffffff802170da:	48 89 c6             	mov    %rax,%rsi
ffffffff802170dd:	e8 b1 ec 00 00       	call   ffffffff80225d93 <__RME_Thd_Reg_Init>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff802170e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802170e6:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802170eb:	48 89 c7             	mov    %rax,%rdi
ffffffff802170ee:	e8 ef ff 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
    
    /* Check if there is a exception pending and clear it if there is */
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff802170f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802170f7:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802170fb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802170ff:	75 52                	jne    ffffffff80217153 <_RME_Thd_Exec_Set+0x321>
    {
        RME_COV_MARKER();
        
        /* Check if the thread still have timeslices. If yes, put it into the runqueue;
         * if no, mark it as TIMEOUT and send scheduler notification to its parent. */
        if(Thread->Sched.Slice!=0U)
ffffffff80217101:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217105:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217109:	48 85 c0             	test   %rax,%rax
ffffffff8021710c:	74 1a                	je     ffffffff80217128 <_RME_Thd_Exec_Set+0x2f6>
        {
            RME_COV_MARKER();
            
            /* Ready and add to runqueue */
            Thread->Sched.State=RME_THD_READY;
ffffffff8021710e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217112:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80217119:	00 
            _RME_Run_Ins(Thread);
ffffffff8021711a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021711e:	48 89 c7             	mov    %rax,%rdi
ffffffff80217121:	e8 49 bc ff ff       	call   ffffffff80212d6f <_RME_Run_Ins>
ffffffff80217126:	eb 18                	jmp    ffffffff80217140 <_RME_Thd_Exec_Set+0x30e>
        else
        {
            RME_COV_MARKER();
            
            /* Timeout and notify parent */
            Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80217128:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021712c:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80217133:	00 
            _RME_Run_Notif(Thread);
ffffffff80217134:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217138:	48 89 c7             	mov    %rax,%rdi
ffffffff8021713b:	e8 2a be ff ff       	call   ffffffff80212f6a <_RME_Run_Notif>
        }
        
        /* Pick the highest priority thread because something unblocked */
        _RME_Kern_High(Reg,Local);
ffffffff80217140:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80217144:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217148:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021714b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021714e:	e8 cc 1c 00 00       	call   ffffffff80218e1f <_RME_Kern_High>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff80217153:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80217158:	c9                   	leave
ffffffff80217159:	c3                   	ret

ffffffff8021715a <_RME_Thd_Sched_Prio>:
                                     rme_ptr_t Prio0,
                                     rme_cid_t Cap_Thd1,
                                     rme_ptr_t Prio1,
                                     rme_cid_t Cap_Thd2,
                                     rme_ptr_t Prio2)
{
ffffffff8021715a:	f3 0f 1e fa          	endbr64
ffffffff8021715e:	55                   	push   %rbp
ffffffff8021715f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80217162:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
ffffffff80217169:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
ffffffff80217170:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
ffffffff80217177:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
ffffffff8021717e:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
ffffffff80217185:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
ffffffff8021718c:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
    struct RME_Thd_Struct* Thread[3];
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Check parameter validity */
    if((Number==0U)||(Number>3U))
ffffffff80217193:	48 83 bd 58 ff ff ff 	cmpq   $0x0,-0xa8(%rbp)
ffffffff8021719a:	00 
ffffffff8021719b:	74 0a                	je     ffffffff802171a7 <_RME_Thd_Sched_Prio+0x4d>
ffffffff8021719d:	48 83 bd 58 ff ff ff 	cmpq   $0x3,-0xa8(%rbp)
ffffffff802171a4:	03 
ffffffff802171a5:	76 0c                	jbe    ffffffff802171b3 <_RME_Thd_Sched_Prio+0x59>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802171a7:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802171ae:	e9 04 04 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
    }
    
    /* We'll use arrays in the next */
    Cap_Thd[0]=Cap_Thd0;
ffffffff802171b3:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
ffffffff802171ba:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Cap_Thd[1]=Cap_Thd1;
ffffffff802171be:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
ffffffff802171c5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Cap_Thd[2]=Cap_Thd2;
ffffffff802171c9:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff802171cd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Prio[0]=Prio0;
ffffffff802171d1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
ffffffff802171d8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    Prio[1]=Prio1;
ffffffff802171dc:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802171e0:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Prio[2]=Prio2;
ffffffff802171e4:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff802171e8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

    Local=RME_CPU_LOCAL();
ffffffff802171ec:	e8 4e 46 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802171f1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0U;Count<Number;Count++)
ffffffff802171f5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802171fc:	00 
ffffffff802171fd:	e9 e4 02 00 00       	jmp    ffffffff802174e6 <_RME_Thd_Sched_Prio+0x38c>
    {
        /* Get the capability slot */
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff80217202:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217206:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff8021720b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80217210:	48 85 c0             	test   %rax,%rax
ffffffff80217213:	0f 85 b8 00 00 00    	jne    ffffffff802172d1 <_RME_Thd_Sched_Prio+0x177>
ffffffff80217219:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021721d:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217222:	48 89 c2             	mov    %rax,%rdx
ffffffff80217225:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff8021722c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217230:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217233:	0f 93 c0             	setae  %al
ffffffff80217236:	0f b6 c0             	movzbl %al,%eax
ffffffff80217239:	48 85 c0             	test   %rax,%rax
ffffffff8021723c:	74 0c                	je     ffffffff8021724a <_RME_Thd_Sched_Prio+0xf0>
ffffffff8021723e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217245:	e9 6d 03 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
ffffffff8021724a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021724e:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217253:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217257:	48 89 c2             	mov    %rax,%rdx
ffffffff8021725a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff80217261:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217265:	48 01 d0             	add    %rdx,%rax
ffffffff80217268:	48 89 c2             	mov    %rax,%rdx
ffffffff8021726b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021726f:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff80217274:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217278:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff8021727d:	48 8b 00             	mov    (%rax),%rax
ffffffff80217280:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217284:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217288:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021728c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021728f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217293:	0f 94 c0             	sete   %al
ffffffff80217296:	0f b6 c0             	movzbl %al,%eax
ffffffff80217299:	48 85 c0             	test   %rax,%rax
ffffffff8021729c:	74 0c                	je     ffffffff802172aa <_RME_Thd_Sched_Prio+0x150>
ffffffff8021729e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802172a5:	e9 0d 03 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
ffffffff802172aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802172ae:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802172b2:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802172b6:	0f 95 c0             	setne  %al
ffffffff802172b9:	0f b6 c0             	movzbl %al,%eax
ffffffff802172bc:	48 85 c0             	test   %rax,%rax
ffffffff802172bf:	0f 84 8a 01 00 00    	je     ffffffff8021744f <_RME_Thd_Sched_Prio+0x2f5>
ffffffff802172c5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802172cc:	e9 e6 02 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
ffffffff802172d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802172d5:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802172da:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802172de:	48 89 c2             	mov    %rax,%rdx
ffffffff802172e1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff802172e8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802172ec:	48 39 c2             	cmp    %rax,%rdx
ffffffff802172ef:	0f 93 c0             	setae  %al
ffffffff802172f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802172f5:	48 85 c0             	test   %rax,%rax
ffffffff802172f8:	74 0c                	je     ffffffff80217306 <_RME_Thd_Sched_Prio+0x1ac>
ffffffff802172fa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217301:	e9 b1 02 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021730a:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff8021730f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217313:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217317:	48 89 c2             	mov    %rax,%rdx
ffffffff8021731a:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff80217321:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217325:	48 01 d0             	add    %rdx,%rax
ffffffff80217328:	48 89 c2             	mov    %rax,%rdx
ffffffff8021732b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021732f:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff80217334:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217338:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff8021733d:	48 8b 00             	mov    (%rax),%rax
ffffffff80217340:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217344:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217348:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021734c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021734f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217353:	0f 94 c0             	sete   %al
ffffffff80217356:	0f b6 c0             	movzbl %al,%eax
ffffffff80217359:	48 85 c0             	test   %rax,%rax
ffffffff8021735c:	74 0c                	je     ffffffff8021736a <_RME_Thd_Sched_Prio+0x210>
ffffffff8021735e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217365:	e9 4d 02 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
ffffffff8021736a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021736e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217372:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217376:	0f 95 c0             	setne  %al
ffffffff80217379:	0f b6 c0             	movzbl %al,%eax
ffffffff8021737c:	48 85 c0             	test   %rax,%rax
ffffffff8021737f:	74 0c                	je     ffffffff8021738d <_RME_Thd_Sched_Prio+0x233>
ffffffff80217381:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217388:	e9 2a 02 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
ffffffff8021738d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217391:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217396:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021739b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021739e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173a2:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802173a7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802173ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff802173ae:	0f 93 c0             	setae  %al
ffffffff802173b1:	0f b6 c0             	movzbl %al,%eax
ffffffff802173b4:	48 85 c0             	test   %rax,%rax
ffffffff802173b7:	74 0c                	je     ffffffff802173c5 <_RME_Thd_Sched_Prio+0x26b>
ffffffff802173b9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802173c0:	e9 f2 01 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
ffffffff802173c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173c9:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802173ce:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802173d3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802173d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802173da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173de:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802173e3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802173e7:	48 01 d0             	add    %rdx,%rax
ffffffff802173ea:	48 89 c2             	mov    %rax,%rdx
ffffffff802173ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173f1:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff802173f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173fa:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802173ff:	48 8b 00             	mov    (%rax),%rax
ffffffff80217402:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217406:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021740a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021740e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217411:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217415:	0f 94 c0             	sete   %al
ffffffff80217418:	0f b6 c0             	movzbl %al,%eax
ffffffff8021741b:	48 85 c0             	test   %rax,%rax
ffffffff8021741e:	74 0c                	je     ffffffff8021742c <_RME_Thd_Sched_Prio+0x2d2>
ffffffff80217420:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217427:	e9 8b 01 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
ffffffff8021742c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217430:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217434:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217438:	0f 95 c0             	setne  %al
ffffffff8021743b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021743e:	48 85 c0             	test   %rax,%rax
ffffffff80217441:	74 0c                	je     ffffffff8021744f <_RME_Thd_Sched_Prio+0x2f5>
ffffffff80217443:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021744a:	e9 68 01 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
                       struct RME_Cap_Thd*,Thd_Op[Count],Type_Stat);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff8021744f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217453:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217458:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021745c:	83 e0 08             	and    $0x8,%eax
ffffffff8021745f:	48 85 c0             	test   %rax,%rax
ffffffff80217462:	0f 94 c0             	sete   %al
ffffffff80217465:	0f b6 c0             	movzbl %al,%eax
ffffffff80217468:	48 85 c0             	test   %rax,%rax
ffffffff8021746b:	74 0c                	je     ffffffff80217479 <_RME_Thd_Sched_Prio+0x31f>
ffffffff8021746d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217474:	e9 3e 01 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
        
        /* See if the target thread is already bound to this core. If no, we just quit */
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff80217479:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021747d:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217482:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217486:	48 89 c2             	mov    %rax,%rdx
ffffffff80217489:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021748d:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
ffffffff80217494:	ff 
        if(Thread[Count]->Sched.Local!=Local)
ffffffff80217495:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217499:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff802174a0:	ff 
ffffffff802174a1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802174a5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff802174a9:	74 0c                	je     ffffffff802174b7 <_RME_Thd_Sched_Prio+0x35d>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff802174ab:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802174b2:	e9 00 01 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* See if the priority relationship is correct */
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff802174b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174bb:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff802174c2:	ff 
ffffffff802174c3:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff802174c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174cb:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
ffffffff802174d0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802174d3:	73 0c                	jae    ffffffff802174e1 <_RME_Thd_Sched_Prio+0x387>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_PRIO;
ffffffff802174d5:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802174dc:	e9 d6 00 00 00       	jmp    ffffffff802175b7 <_RME_Thd_Sched_Prio+0x45d>
    for(Count=0U;Count<Number;Count++)
ffffffff802174e1:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802174e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174ea:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff802174f1:	0f 82 0b fd ff ff    	jb     ffffffff80217202 <_RME_Thd_Sched_Prio+0xa8>
            /* No action required */
        }
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802174f7:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff802174fe:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80217503:	48 89 c7             	mov    %rax,%rdi
ffffffff80217506:	e8 d7 fb 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
    
    /* Change priority for each thread, and we'll switch to the real highest priority
     * thread after all these changes. This can help remove the excessive overhead. */
    for(Count=0U;Count<Number;Count++)
ffffffff8021750b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80217512:	00 
ffffffff80217513:	eb 76                	jmp    ffffffff8021758b <_RME_Thd_Sched_Prio+0x431>
    {
        /* See if this thread is currently in the runqueue */
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff80217515:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217519:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217520:	ff 
ffffffff80217521:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217525:	48 85 c0             	test   %rax,%rax
ffffffff80217528:	75 43                	jne    ffffffff8021756d <_RME_Thd_Sched_Prio+0x413>
        {
            RME_COV_MARKER();

            /* Remove from runqueue, change priority, and add it back */
            _RME_Run_Del(Thread[Count]);
ffffffff8021752a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021752e:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217535:	ff 
ffffffff80217536:	48 89 c7             	mov    %rax,%rdi
ffffffff80217539:	e8 e1 b8 ff ff       	call   ffffffff80212e1f <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8021753e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217542:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217549:	ff 
ffffffff8021754a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021754e:	48 8b 54 d5 b0       	mov    -0x50(%rbp,%rdx,8),%rdx
ffffffff80217553:	48 89 50 40          	mov    %rdx,0x40(%rax)
            _RME_Run_Ins(Thread[Count]);
ffffffff80217557:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021755b:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217562:	ff 
ffffffff80217563:	48 89 c7             	mov    %rax,%rdi
ffffffff80217566:	e8 04 b8 ff ff       	call   ffffffff80212d6f <_RME_Run_Ins>
ffffffff8021756b:	eb 19                	jmp    ffffffff80217586 <_RME_Thd_Sched_Prio+0x42c>
        /* If it is BLOCKED, TIMEOUT or EXCPEND, changing the number will suffice */
        else
        {
            RME_COV_MARKER();

            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff8021756d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217571:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217578:	ff 
ffffffff80217579:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021757d:	48 8b 54 d5 b0       	mov    -0x50(%rbp,%rdx,8),%rdx
ffffffff80217582:	48 89 50 40          	mov    %rdx,0x40(%rax)
    for(Count=0U;Count<Number;Count++)
ffffffff80217586:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021758b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021758f:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff80217596:	0f 82 79 ff ff ff    	jb     ffffffff80217515 <_RME_Thd_Sched_Prio+0x3bb>
        }
    }
    
    /* Pick the current highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff8021759c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802175a0:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff802175a7:	48 89 d6             	mov    %rdx,%rsi
ffffffff802175aa:	48 89 c7             	mov    %rax,%rdi
ffffffff802175ad:	e8 6d 18 00 00       	call   ffffffff80218e1f <_RME_Kern_High>

    return 0;
ffffffff802175b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802175b7:	c9                   	leave
ffffffff802175b8:	c3                   	ret

ffffffff802175b9 <_RME_Thd_Sched_Rcv>:
Output      : None.
Return      : rme_ret_t - If successful, the thread ID; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Rcv(struct RME_Cap_Cpt* Cpt,
                                    rme_cid_t Cap_Thd)
{
ffffffff802175b9:	f3 0f 1e fa          	endbr64
ffffffff802175bd:	55                   	push   %rbp
ffffffff802175be:	48 89 e5             	mov    %rsp,%rbp
ffffffff802175c1:	53                   	push   %rbx
ffffffff802175c2:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff802175c6:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802175ca:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    struct RME_Thd_Struct* Thread;
    rme_ptr_t Type_Stat;
    rme_ptr_t Flag;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff802175ce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802175d2:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802175d7:	48 85 c0             	test   %rax,%rax
ffffffff802175da:	0f 85 98 00 00 00    	jne    ffffffff80217678 <_RME_Thd_Sched_Rcv+0xbf>
ffffffff802175e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802175e4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802175e8:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802175ec:	48 39 c2             	cmp    %rax,%rdx
ffffffff802175ef:	0f 93 c0             	setae  %al
ffffffff802175f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802175f5:	48 85 c0             	test   %rax,%rax
ffffffff802175f8:	74 0c                	je     ffffffff80217606 <_RME_Thd_Sched_Rcv+0x4d>
ffffffff802175fa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217601:	e9 c8 02 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217606:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021760a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021760e:	48 89 c2             	mov    %rax,%rdx
ffffffff80217611:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217615:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217619:	48 01 d0             	add    %rdx,%rax
ffffffff8021761c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217620:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217624:	48 8b 00             	mov    (%rax),%rax
ffffffff80217627:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8021762b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021762f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217633:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217636:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021763a:	0f 94 c0             	sete   %al
ffffffff8021763d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217640:	48 85 c0             	test   %rax,%rax
ffffffff80217643:	74 0c                	je     ffffffff80217651 <_RME_Thd_Sched_Rcv+0x98>
ffffffff80217645:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021764c:	e9 7d 02 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217651:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217655:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217659:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021765d:	0f 95 c0             	setne  %al
ffffffff80217660:	0f b6 c0             	movzbl %al,%eax
ffffffff80217663:	48 85 c0             	test   %rax,%rax
ffffffff80217666:	0f 84 4c 01 00 00    	je     ffffffff802177b8 <_RME_Thd_Sched_Rcv+0x1ff>
ffffffff8021766c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217673:	e9 56 02 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217678:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021767c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217680:	48 89 c2             	mov    %rax,%rdx
ffffffff80217683:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217687:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021768b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021768e:	0f 93 c0             	setae  %al
ffffffff80217691:	0f b6 c0             	movzbl %al,%eax
ffffffff80217694:	48 85 c0             	test   %rax,%rax
ffffffff80217697:	74 0c                	je     ffffffff802176a5 <_RME_Thd_Sched_Rcv+0xec>
ffffffff80217699:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802176a0:	e9 29 02 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
ffffffff802176a5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802176a9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802176ad:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802176b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802176b4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802176b8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802176bc:	48 01 d0             	add    %rdx,%rax
ffffffff802176bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802176c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802176c7:	48 8b 00             	mov    (%rax),%rax
ffffffff802176ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802176ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802176d2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802176d6:	0f b7 c0             	movzwl %ax,%eax
ffffffff802176d9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802176dd:	0f 94 c0             	sete   %al
ffffffff802176e0:	0f b6 c0             	movzbl %al,%eax
ffffffff802176e3:	48 85 c0             	test   %rax,%rax
ffffffff802176e6:	74 0c                	je     ffffffff802176f4 <_RME_Thd_Sched_Rcv+0x13b>
ffffffff802176e8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802176ef:	e9 da 01 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
ffffffff802176f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802176f8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802176fc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217700:	0f 95 c0             	setne  %al
ffffffff80217703:	0f b6 c0             	movzbl %al,%eax
ffffffff80217706:	48 85 c0             	test   %rax,%rax
ffffffff80217709:	74 0c                	je     ffffffff80217717 <_RME_Thd_Sched_Rcv+0x15e>
ffffffff8021770b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217712:	e9 b7 01 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217717:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021771b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217720:	48 89 c2             	mov    %rax,%rdx
ffffffff80217723:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217727:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021772b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021772e:	0f 93 c0             	setae  %al
ffffffff80217731:	0f b6 c0             	movzbl %al,%eax
ffffffff80217734:	48 85 c0             	test   %rax,%rax
ffffffff80217737:	74 0c                	je     ffffffff80217745 <_RME_Thd_Sched_Rcv+0x18c>
ffffffff80217739:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217740:	e9 89 01 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217745:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217749:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021774e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217752:	48 89 c2             	mov    %rax,%rdx
ffffffff80217755:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217759:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021775d:	48 01 d0             	add    %rdx,%rax
ffffffff80217760:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217764:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217768:	48 8b 00             	mov    (%rax),%rax
ffffffff8021776b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8021776f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217773:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217777:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021777a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021777e:	0f 94 c0             	sete   %al
ffffffff80217781:	0f b6 c0             	movzbl %al,%eax
ffffffff80217784:	48 85 c0             	test   %rax,%rax
ffffffff80217787:	74 0c                	je     ffffffff80217795 <_RME_Thd_Sched_Rcv+0x1dc>
ffffffff80217789:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217790:	e9 39 01 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217795:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217799:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021779d:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802177a1:	0f 95 c0             	setne  %al
ffffffff802177a4:	0f b6 c0             	movzbl %al,%eax
ffffffff802177a7:	48 85 c0             	test   %rax,%rax
ffffffff802177aa:	74 0c                	je     ffffffff802177b8 <_RME_Thd_Sched_Rcv+0x1ff>
ffffffff802177ac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802177b3:	e9 16 01 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff802177b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802177bc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802177c0:	83 e0 20             	and    $0x20,%eax
ffffffff802177c3:	48 85 c0             	test   %rax,%rax
ffffffff802177c6:	0f 94 c0             	sete   %al
ffffffff802177c9:	0f b6 c0             	movzbl %al,%eax
ffffffff802177cc:	48 85 c0             	test   %rax,%rax
ffffffff802177cf:	74 0c                	je     ffffffff802177dd <_RME_Thd_Sched_Rcv+0x224>
ffffffff802177d1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802177d8:	e9 f1 00 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
    
    /* Check if we are on the same core with the target thread */
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff802177dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802177e1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802177e5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
ffffffff802177e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802177ed:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffff802177f1:	e8 49 40 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802177f6:	48 39 c3             	cmp    %rax,%rbx
ffffffff802177f9:	74 0c                	je     ffffffff80217807 <_RME_Thd_Sched_Rcv+0x24e>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802177fb:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217802:	e9 c7 00 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if there are any notifications */
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
ffffffff80217807:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021780b:	48 8b 50 78          	mov    0x78(%rax),%rdx
ffffffff8021780f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217813:	48 83 c0 78          	add    $0x78,%rax
ffffffff80217817:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021781a:	75 0c                	jne    ffffffff80217828 <_RME_Thd_Sched_Rcv+0x26f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_NOTIF;
ffffffff8021781c:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff80217823:	e9 a6 00 00 00       	jmp    ffffffff802178ce <_RME_Thd_Sched_Rcv+0x315>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Return one notification and delete it from the notification list */
    Thread=(struct RME_Thd_Struct*)(Scheduler->Sched.Event.Next-1U);
ffffffff80217828:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021782c:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff80217830:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80217834:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80217838:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021783c:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80217840:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217844:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217848:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021784b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021784e:	e8 53 55 ff ff       	call   ffffffff8020cda6 <_RME_List_Del>
    /* We need to do this because we are using this to detect whether the notification is sent */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80217853:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217857:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021785b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021785e:	e8 19 55 ff ff       	call   ffffffff8020cd7c <_RME_List_Crt>
    
    /* Exception pending */
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80217863:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217867:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff8021786b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021786f:	75 2b                	jne    ffffffff8021789c <_RME_Thd_Sched_Rcv+0x2e3>
    {
        RME_COV_MARKER();
        
        Flag=RME_THD_EXCPEND_FLAG;
ffffffff80217871:	48 b8 00 00 00 00 00 	movabs $0x4000000000000000,%rax
ffffffff80217878:	00 00 40 
ffffffff8021787b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        
        /* Is it also out of timeslice? */
        if(Thread->Sched.Slice==0U)
ffffffff8021787f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217883:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217887:	48 85 c0             	test   %rax,%rax
ffffffff8021788a:	75 36                	jne    ffffffff802178c2 <_RME_Thd_Sched_Rcv+0x309>
        {
            RME_COV_MARKER();
            
            Flag|=RME_THD_TIMEOUT_FLAG;
ffffffff8021788c:	48 b8 00 00 00 00 00 	movabs $0x2000000000000000,%rax
ffffffff80217893:	00 00 20 
ffffffff80217896:	48 09 45 e0          	or     %rax,-0x20(%rbp)
ffffffff8021789a:	eb 26                	jmp    ffffffff802178c2 <_RME_Thd_Sched_Rcv+0x309>
            RME_COV_MARKER();
            /* No action required */
        }
    }
    /* Timeout */
    else if(Thread->Sched.State==RME_THD_TIMEOUT)
ffffffff8021789c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802178a0:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802178a4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802178a8:	75 10                	jne    ffffffff802178ba <_RME_Thd_Sched_Rcv+0x301>
    {
        RME_COV_MARKER();
        
        Flag=RME_THD_TIMEOUT_FLAG;
ffffffff802178aa:	48 b8 00 00 00 00 00 	movabs $0x2000000000000000,%rax
ffffffff802178b1:	00 00 20 
ffffffff802178b4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802178b8:	eb 08                	jmp    ffffffff802178c2 <_RME_Thd_Sched_Rcv+0x309>
    /* Spurious notification, cause eliminated before this sched rcv */
    else
    {
        RME_COV_MARKER();
        
        Flag=0U;
ffffffff802178ba:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff802178c1:	00 
    }
    
    /* Return the notification TID with the flags */
    return (rme_ret_t)(Thread->Sched.TID|Flag);
ffffffff802178c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802178c6:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff802178ca:	48 0b 45 e0          	or     -0x20(%rbp),%rax
}
ffffffff802178ce:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff802178d2:	c9                   	leave
ffffffff802178d3:	c3                   	ret

ffffffff802178d4 <_RME_Thd_Time_Xfer>:
static rme_ret_t _RME_Thd_Time_Xfer(struct RME_Cap_Cpt* Cpt,
                                    struct RME_Reg_Struct* Reg,
                                    rme_cid_t Cap_Thd_Dst,
                                    rme_cid_t Cap_Thd_Src,
                                    rme_ptr_t Time)
{
ffffffff802178d4:	f3 0f 1e fa          	endbr64
ffffffff802178d8:	55                   	push   %rbp
ffffffff802178d9:	48 89 e5             	mov    %rsp,%rbp
ffffffff802178dc:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff802178e0:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802178e4:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802178e8:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff802178ec:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff802178f0:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_CPU_Local* Local;
    rme_ptr_t Time_Xfer;
    rme_ptr_t Type_Stat;
    
    /* We may allow transferring infinite time here */
    if(Time==0U)
ffffffff802178f4:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
ffffffff802178f9:	75 0c                	jne    ffffffff80217907 <_RME_Thd_Time_Xfer+0x33>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802178fb:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217902:	e9 3c 07 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff80217907:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021790b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80217910:	48 85 c0             	test   %rax,%rax
ffffffff80217913:	0f 85 98 00 00 00    	jne    ffffffff802179b1 <_RME_Thd_Time_Xfer+0xdd>
ffffffff80217919:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021791d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217921:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80217925:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217928:	0f 93 c0             	setae  %al
ffffffff8021792b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021792e:	48 85 c0             	test   %rax,%rax
ffffffff80217931:	74 0c                	je     ffffffff8021793f <_RME_Thd_Time_Xfer+0x6b>
ffffffff80217933:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021793a:	e9 04 07 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff8021793f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217943:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217947:	48 89 c2             	mov    %rax,%rdx
ffffffff8021794a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021794e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217952:	48 01 d0             	add    %rdx,%rax
ffffffff80217955:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217959:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021795d:	48 8b 00             	mov    (%rax),%rax
ffffffff80217960:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217964:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217968:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021796c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021796f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217973:	0f 94 c0             	sete   %al
ffffffff80217976:	0f b6 c0             	movzbl %al,%eax
ffffffff80217979:	48 85 c0             	test   %rax,%rax
ffffffff8021797c:	74 0c                	je     ffffffff8021798a <_RME_Thd_Time_Xfer+0xb6>
ffffffff8021797e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217985:	e9 b9 06 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff8021798a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021798e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217992:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217996:	0f 95 c0             	setne  %al
ffffffff80217999:	0f b6 c0             	movzbl %al,%eax
ffffffff8021799c:	48 85 c0             	test   %rax,%rax
ffffffff8021799f:	0f 84 4c 01 00 00    	je     ffffffff80217af1 <_RME_Thd_Time_Xfer+0x21d>
ffffffff802179a5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802179ac:	e9 92 06 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff802179b1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802179b5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802179b9:	48 89 c2             	mov    %rax,%rdx
ffffffff802179bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802179c0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802179c4:	48 39 c2             	cmp    %rax,%rdx
ffffffff802179c7:	0f 93 c0             	setae  %al
ffffffff802179ca:	0f b6 c0             	movzbl %al,%eax
ffffffff802179cd:	48 85 c0             	test   %rax,%rax
ffffffff802179d0:	74 0c                	je     ffffffff802179de <_RME_Thd_Time_Xfer+0x10a>
ffffffff802179d2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802179d9:	e9 65 06 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff802179de:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802179e2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802179e6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802179ea:	48 89 c2             	mov    %rax,%rdx
ffffffff802179ed:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802179f1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802179f5:	48 01 d0             	add    %rdx,%rax
ffffffff802179f8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802179fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217a00:	48 8b 00             	mov    (%rax),%rax
ffffffff80217a03:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217a07:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217a0b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217a0f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217a12:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217a16:	0f 94 c0             	sete   %al
ffffffff80217a19:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a1c:	48 85 c0             	test   %rax,%rax
ffffffff80217a1f:	74 0c                	je     ffffffff80217a2d <_RME_Thd_Time_Xfer+0x159>
ffffffff80217a21:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217a28:	e9 16 06 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a2d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217a31:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217a35:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217a39:	0f 95 c0             	setne  %al
ffffffff80217a3c:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a3f:	48 85 c0             	test   %rax,%rax
ffffffff80217a42:	74 0c                	je     ffffffff80217a50 <_RME_Thd_Time_Xfer+0x17c>
ffffffff80217a44:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217a4b:	e9 f3 05 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a50:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217a54:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217a59:	48 89 c2             	mov    %rax,%rdx
ffffffff80217a5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217a60:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217a64:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217a67:	0f 93 c0             	setae  %al
ffffffff80217a6a:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a6d:	48 85 c0             	test   %rax,%rax
ffffffff80217a70:	74 0c                	je     ffffffff80217a7e <_RME_Thd_Time_Xfer+0x1aa>
ffffffff80217a72:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217a79:	e9 c5 05 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a7e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217a82:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217a87:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217a8b:	48 89 c2             	mov    %rax,%rdx
ffffffff80217a8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217a92:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217a96:	48 01 d0             	add    %rdx,%rax
ffffffff80217a99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217a9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217aa1:	48 8b 00             	mov    (%rax),%rax
ffffffff80217aa4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217aa8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217aac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217ab0:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217ab3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217ab7:	0f 94 c0             	sete   %al
ffffffff80217aba:	0f b6 c0             	movzbl %al,%eax
ffffffff80217abd:	48 85 c0             	test   %rax,%rax
ffffffff80217ac0:	74 0c                	je     ffffffff80217ace <_RME_Thd_Time_Xfer+0x1fa>
ffffffff80217ac2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217ac9:	e9 75 05 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217ace:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217ad2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217ad6:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217ada:	0f 95 c0             	setne  %al
ffffffff80217add:	0f b6 c0             	movzbl %al,%eax
ffffffff80217ae0:	48 85 c0             	test   %rax,%rax
ffffffff80217ae3:	74 0c                	je     ffffffff80217af1 <_RME_Thd_Time_Xfer+0x21d>
ffffffff80217ae5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217aec:	e9 52 05 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
                   struct RME_Cap_Thd*,Thd_Dst_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff80217af1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217af5:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80217afa:	48 85 c0             	test   %rax,%rax
ffffffff80217afd:	0f 85 98 00 00 00    	jne    ffffffff80217b9b <_RME_Thd_Time_Xfer+0x2c7>
ffffffff80217b03:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217b07:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217b0b:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80217b0f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217b12:	0f 93 c0             	setae  %al
ffffffff80217b15:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b18:	48 85 c0             	test   %rax,%rax
ffffffff80217b1b:	74 0c                	je     ffffffff80217b29 <_RME_Thd_Time_Xfer+0x255>
ffffffff80217b1d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217b24:	e9 1a 05 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b29:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217b2d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217b31:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b34:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217b38:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217b3c:	48 01 d0             	add    %rdx,%rax
ffffffff80217b3f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217b43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217b47:	48 8b 00             	mov    (%rax),%rax
ffffffff80217b4a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217b4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217b52:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217b56:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217b59:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217b5d:	0f 94 c0             	sete   %al
ffffffff80217b60:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b63:	48 85 c0             	test   %rax,%rax
ffffffff80217b66:	74 0c                	je     ffffffff80217b74 <_RME_Thd_Time_Xfer+0x2a0>
ffffffff80217b68:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217b6f:	e9 cf 04 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b74:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217b78:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217b7c:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217b80:	0f 95 c0             	setne  %al
ffffffff80217b83:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b86:	48 85 c0             	test   %rax,%rax
ffffffff80217b89:	0f 84 4c 01 00 00    	je     ffffffff80217cdb <_RME_Thd_Time_Xfer+0x407>
ffffffff80217b8f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217b96:	e9 a8 04 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b9b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217b9f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217ba3:	48 89 c2             	mov    %rax,%rdx
ffffffff80217ba6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217baa:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217bae:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217bb1:	0f 93 c0             	setae  %al
ffffffff80217bb4:	0f b6 c0             	movzbl %al,%eax
ffffffff80217bb7:	48 85 c0             	test   %rax,%rax
ffffffff80217bba:	74 0c                	je     ffffffff80217bc8 <_RME_Thd_Time_Xfer+0x2f4>
ffffffff80217bbc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217bc3:	e9 7b 04 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217bc8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217bcc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217bd0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217bd4:	48 89 c2             	mov    %rax,%rdx
ffffffff80217bd7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217bdb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217bdf:	48 01 d0             	add    %rdx,%rax
ffffffff80217be2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217be6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217bea:	48 8b 00             	mov    (%rax),%rax
ffffffff80217bed:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217bf1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217bf5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217bf9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217bfc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217c00:	0f 94 c0             	sete   %al
ffffffff80217c03:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c06:	48 85 c0             	test   %rax,%rax
ffffffff80217c09:	74 0c                	je     ffffffff80217c17 <_RME_Thd_Time_Xfer+0x343>
ffffffff80217c0b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217c12:	e9 2c 04 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217c1b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217c1f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217c23:	0f 95 c0             	setne  %al
ffffffff80217c26:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c29:	48 85 c0             	test   %rax,%rax
ffffffff80217c2c:	74 0c                	je     ffffffff80217c3a <_RME_Thd_Time_Xfer+0x366>
ffffffff80217c2e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217c35:	e9 09 04 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c3a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217c3e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217c43:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217c4a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217c4e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217c51:	0f 93 c0             	setae  %al
ffffffff80217c54:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c57:	48 85 c0             	test   %rax,%rax
ffffffff80217c5a:	74 0c                	je     ffffffff80217c68 <_RME_Thd_Time_Xfer+0x394>
ffffffff80217c5c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217c63:	e9 db 03 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c68:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217c6c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217c71:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217c75:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217c7c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217c80:	48 01 d0             	add    %rdx,%rax
ffffffff80217c83:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217c87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217c8b:	48 8b 00             	mov    (%rax),%rax
ffffffff80217c8e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217c92:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217c96:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217c9a:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217c9d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217ca1:	0f 94 c0             	sete   %al
ffffffff80217ca4:	0f b6 c0             	movzbl %al,%eax
ffffffff80217ca7:	48 85 c0             	test   %rax,%rax
ffffffff80217caa:	74 0c                	je     ffffffff80217cb8 <_RME_Thd_Time_Xfer+0x3e4>
ffffffff80217cac:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217cb3:	e9 8b 03 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217cb8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217cbc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217cc0:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217cc4:	0f 95 c0             	setne  %al
ffffffff80217cc7:	0f b6 c0             	movzbl %al,%eax
ffffffff80217cca:	48 85 c0             	test   %rax,%rax
ffffffff80217ccd:	74 0c                	je     ffffffff80217cdb <_RME_Thd_Time_Xfer+0x407>
ffffffff80217ccf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217cd6:	e9 68 03 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
                   struct RME_Cap_Thd*,Thd_Src_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80217cdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217cdf:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217ce3:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80217ce8:	48 85 c0             	test   %rax,%rax
ffffffff80217ceb:	0f 94 c0             	sete   %al
ffffffff80217cee:	0f b6 c0             	movzbl %al,%eax
ffffffff80217cf1:	48 85 c0             	test   %rax,%rax
ffffffff80217cf4:	74 0c                	je     ffffffff80217d02 <_RME_Thd_Time_Xfer+0x42e>
ffffffff80217cf6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217cfd:	e9 41 03 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
ffffffff80217d02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217d06:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217d0a:	83 e0 40             	and    $0x40,%eax
ffffffff80217d0d:	48 85 c0             	test   %rax,%rax
ffffffff80217d10:	0f 94 c0             	sete   %al
ffffffff80217d13:	0f b6 c0             	movzbl %al,%eax
ffffffff80217d16:	48 85 c0             	test   %rax,%rax
ffffffff80217d19:	74 0c                	je     ffffffff80217d27 <_RME_Thd_Time_Xfer+0x453>
ffffffff80217d1b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217d22:	e9 1c 03 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>

    /* Check if the two threads are on the core that is accordance with what we are on */
    Local=RME_CPU_LOCAL();
ffffffff80217d27:	e8 13 3b ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80217d2c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
ffffffff80217d30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217d34:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217d38:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Thd_Src->Sched.Local!=Local)
ffffffff80217d3c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217d40:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217d44:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80217d48:	74 0c                	je     ffffffff80217d56 <_RME_Thd_Time_Xfer+0x482>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217d4a:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217d51:	e9 ed 02 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if we have slices to transfer; 0 implies TIMEOUT, BLOCKED, or EXCPEND */
    if(Thd_Src->Sched.Slice==0U)
ffffffff80217d56:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217d5a:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217d5e:	48 85 c0             	test   %rax,%rax
ffffffff80217d61:	75 0c                	jne    ffffffff80217d6f <_RME_Thd_Time_Xfer+0x49b>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217d63:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217d6a:	e9 d4 02 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
ffffffff80217d6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217d73:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217d77:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    
    if(Thd_Dst->Sched.Local!=Local)
ffffffff80217d7b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217d7f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217d83:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80217d87:	74 0c                	je     ffffffff80217d95 <_RME_Thd_Time_Xfer+0x4c1>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217d89:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217d90:	e9 ae 02 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
        /* No action required */
    }

    /* The destination must never have higher maximum priority than the source,
     * unless it is a init thread which could be used as a black hole */
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80217d95:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217d99:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80217d9d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217da1:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80217da5:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217da8:	73 23                	jae    ffffffff80217dcd <_RME_Thd_Time_Xfer+0x4f9>
       (Thd_Dst->Sched.Slice!=RME_THD_INIT_TIME))
ffffffff80217daa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217dae:	48 8b 50 30          	mov    0x30(%rax),%rdx
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80217db2:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217db9:	ff ff 7f 
ffffffff80217dbc:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217dbf:	74 0c                	je     ffffffff80217dcd <_RME_Thd_Time_Xfer+0x4f9>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80217dc1:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80217dc8:	e9 76 02 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Delegating from a normal thread */
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217dcd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217dd1:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217dd5:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217ddc:	ff ff 7f 
ffffffff80217ddf:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217de2:	0f 82 e4 00 00 00    	jb     ffffffff80217ecc <_RME_Thd_Time_Xfer+0x5f8>
    {
        RME_COV_MARKER();

        /* Delegate all our time */
        if(Time>=RME_THD_INF_TIME)
ffffffff80217de8:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217def:	ff ff 7f 
ffffffff80217df2:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
ffffffff80217df6:	73 0e                	jae    ffffffff80217e06 <_RME_Thd_Time_Xfer+0x532>
        {
            RME_COV_MARKER();

            Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80217df8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217dfc:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e00:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217e04:	eb 24                	jmp    ffffffff80217e2a <_RME_Thd_Time_Xfer+0x556>
        /* Delegate some time, if not sufficient, clean up the source time */
        else
        {
            RME_COV_MARKER();
            
            if(Thd_Src->Sched.Slice>Time)
ffffffff80217e06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e0a:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e0e:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217e12:	73 0a                	jae    ffffffff80217e1e <_RME_Thd_Time_Xfer+0x54a>
            {
                RME_COV_MARKER();

                Time_Xfer=Time;
ffffffff80217e14:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217e18:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217e1c:	eb 0c                	jmp    ffffffff80217e2a <_RME_Thd_Time_Xfer+0x556>
            }
            else
            {
                RME_COV_MARKER();

                Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80217e1e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e22:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e26:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            }
        }
        
        /* See if we are transferring to an infinite budget thread. If yes, we
         * are revoking timeslices; If not, this is a finite transfer */
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217e2a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e2e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e32:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217e39:	ff ff 7f 
ffffffff80217e3c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e3f:	72 6f                	jb     ffffffff80217eb0 <_RME_Thd_Time_Xfer+0x5dc>
        {
            RME_COV_MARKER();
            
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80217e41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e45:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217e49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217e4d:	48 01 d0             	add    %rdx,%rax
ffffffff80217e50:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217e57:	ff ff 7f 
ffffffff80217e5a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e5d:	0f 92 c0             	setb   %al
ffffffff80217e60:	0f b6 c0             	movzbl %al,%eax
ffffffff80217e63:	48 85 c0             	test   %rax,%rax
ffffffff80217e66:	75 25                	jne    ffffffff80217e8d <_RME_Thd_Time_Xfer+0x5b9>
ffffffff80217e68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e6c:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217e70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217e74:	48 01 c2             	add    %rax,%rdx
ffffffff80217e77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e7b:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e7f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e82:	0f 92 c0             	setb   %al
ffffffff80217e85:	0f b6 c0             	movzbl %al,%eax
ffffffff80217e88:	48 85 c0             	test   %rax,%rax
ffffffff80217e8b:	74 0c                	je     ffffffff80217e99 <_RME_Thd_Time_Xfer+0x5c5>
ffffffff80217e8d:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff80217e94:	e9 aa 01 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
            Thd_Dst->Sched.Slice+=Time_Xfer;
ffffffff80217e99:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e9d:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217ea1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217ea5:	48 01 c2             	add    %rax,%rdx
ffffffff80217ea8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217eac:	48 89 50 30          	mov    %rdx,0x30(%rax)
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff80217eb0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217eb4:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217eb8:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff80217ebc:	48 89 c2             	mov    %rax,%rdx
ffffffff80217ebf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ec3:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff80217ec7:	e9 e1 00 00 00       	jmp    ffffffff80217fad <_RME_Thd_Time_Xfer+0x6d9>
    else
    {
        RME_COV_MARKER();

        /* Infinite transfer to the destination */
        if(Time>=RME_THD_INF_TIME)
ffffffff80217ecc:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217ed3:	ff ff 7f 
ffffffff80217ed6:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
ffffffff80217eda:	73 62                	jae    ffffffff80217f3e <_RME_Thd_Time_Xfer+0x66a>
        {
            RME_COV_MARKER();

            /* This transfer will revoke the infinite budget */
            if(Time==RME_THD_INIT_TIME)
ffffffff80217edc:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217ee3:	ff ff 7f 
ffffffff80217ee6:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217eea:	75 23                	jne    ffffffff80217f0f <_RME_Thd_Time_Xfer+0x63b>
            {
                RME_COV_MARKER();
                
                /* Will not revoke, source is an init thread */
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
ffffffff80217eec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ef0:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217ef4:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217efb:	ff ff 7f 
ffffffff80217efe:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f01:	74 0c                	je     ffffffff80217f0f <_RME_Thd_Time_Xfer+0x63b>
                {
                    RME_COV_MARKER();
                    
                    Thd_Src->Sched.Slice=0U;
ffffffff80217f03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217f07:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80217f0e:	00 
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* Set destination to infinite if it is not an init thread */
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217f0f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f13:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217f17:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217f1e:	ff ff 7f 
ffffffff80217f21:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f24:	0f 82 83 00 00 00    	jb     ffffffff80217fad <_RME_Thd_Time_Xfer+0x6d9>
            {
                RME_COV_MARKER();
                
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
ffffffff80217f2a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f2e:	48 b9 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rcx
ffffffff80217f35:	ff ff 7f 
ffffffff80217f38:	48 89 48 30          	mov    %rcx,0x30(%rax)
ffffffff80217f3c:	eb 6f                	jmp    ffffffff80217fad <_RME_Thd_Time_Xfer+0x6d9>
        else
        {
            RME_COV_MARKER();

            /* Just increase the budget of the other thread - check first */
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
ffffffff80217f3e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f42:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f46:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217f4a:	48 01 d0             	add    %rdx,%rax
ffffffff80217f4d:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217f54:	ff ff 7f 
ffffffff80217f57:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f5a:	0f 92 c0             	setb   %al
ffffffff80217f5d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217f60:	48 85 c0             	test   %rax,%rax
ffffffff80217f63:	75 25                	jne    ffffffff80217f8a <_RME_Thd_Time_Xfer+0x6b6>
ffffffff80217f65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f69:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f6d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217f71:	48 01 c2             	add    %rax,%rdx
ffffffff80217f74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f78:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217f7c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f7f:	0f 92 c0             	setb   %al
ffffffff80217f82:	0f b6 c0             	movzbl %al,%eax
ffffffff80217f85:	48 85 c0             	test   %rax,%rax
ffffffff80217f88:	74 0c                	je     ffffffff80217f96 <_RME_Thd_Time_Xfer+0x6c2>
ffffffff80217f8a:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff80217f91:	e9 ad 00 00 00       	jmp    ffffffff80218043 <_RME_Thd_Time_Xfer+0x76f>
            Thd_Dst->Sched.Slice+=Time;
ffffffff80217f96:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f9a:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f9e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217fa2:	48 01 c2             	add    %rax,%rdx
ffffffff80217fa5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217fa9:	48 89 50 30          	mov    %rdx,0x30(%rax)
        }
    }

    /* Is the source time used up? If yes, delete it from the run queue, and notify its 
     * parent. If it is not in the run queue, The state of the source must be BLOCKED. */
    if(Thd_Src->Sched.Slice==0U)
ffffffff80217fad:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fb1:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217fb5:	48 85 c0             	test   %rax,%rax
ffffffff80217fb8:	75 31                	jne    ffffffff80217feb <_RME_Thd_Time_Xfer+0x717>
        
        /* If it is blocked or have an exception, we neither change its state nor send
         * the scheduler notification. It will be sent when the thread unblocks, or gets
         * its exception handled. The rule of the thumb is, we only send scheduler 
         * notifications when the thread really enter TIMEOUT or EXCPEND state. */
        if(Thd_Src->Sched.State==RME_THD_READY)
ffffffff80217fba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fbe:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217fc2:	48 85 c0             	test   %rax,%rax
ffffffff80217fc5:	75 24                	jne    ffffffff80217feb <_RME_Thd_Time_Xfer+0x717>
        {
            RME_COV_MARKER();
            
            /* Remove from runqueue */
            _RME_Run_Del(Thd_Src);
ffffffff80217fc7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fcb:	48 89 c7             	mov    %rax,%rdi
ffffffff80217fce:	e8 4c ae ff ff       	call   ffffffff80212e1f <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
ffffffff80217fd3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fd7:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80217fde:	00 
            _RME_Run_Notif(Thd_Src);
ffffffff80217fdf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fe3:	48 89 c7             	mov    %rax,%rdi
ffffffff80217fe6:	e8 7f af ff ff       	call   ffffffff80212f6a <_RME_Run_Notif>
        /* No action required */
    }

    /* Now save the system call return value to the caller 
     * stack - how much time the destination have now */
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
ffffffff80217feb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217fef:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217ff3:	48 89 c2             	mov    %rax,%rdx
ffffffff80217ff6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217ffa:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217ffd:	48 89 c7             	mov    %rax,%rdi
ffffffff80218000:	e8 dd f0 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>

    /* See what was the state of the destination thread. If it is timeout, then activate
     * it. If it is BLOCKED or EXCPEND, then leave it alone, and it will be activated
     * when it unblocks or when the exception is handled. */
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
ffffffff80218005:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218009:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff8021800d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218011:	75 18                	jne    ffffffff8021802b <_RME_Thd_Time_Xfer+0x757>
    {
        RME_COV_MARKER();

        /* Ready and add to runqueue */
        Thd_Dst->Sched.State=RME_THD_READY;
ffffffff80218013:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218017:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8021801e:	00 
        _RME_Run_Ins(Thd_Dst);
ffffffff8021801f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218023:	48 89 c7             	mov    %rax,%rdi
ffffffff80218026:	e8 44 ad ff ff       	call   ffffffff80212d6f <_RME_Run_Ins>
        RME_COV_MARKER();
    }
    
    /* All possible kernel send (scheduler notifications) done,
     * now pick the highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff8021802b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021802f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80218033:	48 89 d6             	mov    %rdx,%rsi
ffffffff80218036:	48 89 c7             	mov    %rax,%rdi
ffffffff80218039:	e8 e1 0d 00 00       	call   ffffffff80218e1f <_RME_Kern_High>

    return 0;
ffffffff8021803e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218043:	c9                   	leave
ffffffff80218044:	c3                   	ret

ffffffff80218045 <_RME_Thd_Swt>:
******************************************************************************/
static rme_ret_t _RME_Thd_Swt(struct RME_Cap_Cpt* Cpt,
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Thd,
                              rme_ptr_t Is_Yield)
{
ffffffff80218045:	f3 0f 1e fa          	endbr64
ffffffff80218049:	55                   	push   %rbp
ffffffff8021804a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021804d:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80218051:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80218055:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80218059:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021805d:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    struct RME_Thd_Struct* Thd_High;
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    rme_ptr_t Type_Stat;

    Local=RME_CPU_LOCAL();
ffffffff80218061:	e8 d9 37 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80218066:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff8021806a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021806e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218072:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* The caller have picked a thread to switch to */
    if(Cap_Thd<RME_CID_NULL)
ffffffff80218076:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff8021807b:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff8021807f:	0f 8d 21 03 00 00    	jge    ffffffff802183a6 <_RME_Thd_Swt+0x361>
    {
        RME_COV_MARKER();
        
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80218085:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218089:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021808e:	48 85 c0             	test   %rax,%rax
ffffffff80218091:	0f 85 98 00 00 00    	jne    ffffffff8021812f <_RME_Thd_Swt+0xea>
ffffffff80218097:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021809b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021809f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802180a3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802180a6:	0f 93 c0             	setae  %al
ffffffff802180a9:	0f b6 c0             	movzbl %al,%eax
ffffffff802180ac:	48 85 c0             	test   %rax,%rax
ffffffff802180af:	74 0c                	je     ffffffff802180bd <_RME_Thd_Swt+0x78>
ffffffff802180b1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802180b8:	e9 ab 03 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
ffffffff802180bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802180c1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802180c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802180c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802180cc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802180d0:	48 01 d0             	add    %rdx,%rax
ffffffff802180d3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802180d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802180db:	48 8b 00             	mov    (%rax),%rax
ffffffff802180de:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802180e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802180e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802180ea:	0f b7 c0             	movzwl %ax,%eax
ffffffff802180ed:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802180f1:	0f 94 c0             	sete   %al
ffffffff802180f4:	0f b6 c0             	movzbl %al,%eax
ffffffff802180f7:	48 85 c0             	test   %rax,%rax
ffffffff802180fa:	74 0c                	je     ffffffff80218108 <_RME_Thd_Swt+0xc3>
ffffffff802180fc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218103:	e9 60 03 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
ffffffff80218108:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021810c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218110:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80218114:	0f 95 c0             	setne  %al
ffffffff80218117:	0f b6 c0             	movzbl %al,%eax
ffffffff8021811a:	48 85 c0             	test   %rax,%rax
ffffffff8021811d:	0f 84 4c 01 00 00    	je     ffffffff8021826f <_RME_Thd_Swt+0x22a>
ffffffff80218123:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021812a:	e9 39 03 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
ffffffff8021812f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218133:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218137:	48 89 c2             	mov    %rax,%rdx
ffffffff8021813a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021813e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218142:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218145:	0f 93 c0             	setae  %al
ffffffff80218148:	0f b6 c0             	movzbl %al,%eax
ffffffff8021814b:	48 85 c0             	test   %rax,%rax
ffffffff8021814e:	74 0c                	je     ffffffff8021815c <_RME_Thd_Swt+0x117>
ffffffff80218150:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218157:	e9 0c 03 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
ffffffff8021815c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218160:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218164:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218168:	48 89 c2             	mov    %rax,%rdx
ffffffff8021816b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021816f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218173:	48 01 d0             	add    %rdx,%rax
ffffffff80218176:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021817a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021817e:	48 8b 00             	mov    (%rax),%rax
ffffffff80218181:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80218185:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218189:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021818d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218190:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218194:	0f 94 c0             	sete   %al
ffffffff80218197:	0f b6 c0             	movzbl %al,%eax
ffffffff8021819a:	48 85 c0             	test   %rax,%rax
ffffffff8021819d:	74 0c                	je     ffffffff802181ab <_RME_Thd_Swt+0x166>
ffffffff8021819f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802181a6:	e9 bd 02 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
ffffffff802181ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802181af:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802181b3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802181b7:	0f 95 c0             	setne  %al
ffffffff802181ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802181bd:	48 85 c0             	test   %rax,%rax
ffffffff802181c0:	74 0c                	je     ffffffff802181ce <_RME_Thd_Swt+0x189>
ffffffff802181c2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802181c9:	e9 9a 02 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
ffffffff802181ce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802181d2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802181d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802181da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802181de:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802181e2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802181e5:	0f 93 c0             	setae  %al
ffffffff802181e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802181eb:	48 85 c0             	test   %rax,%rax
ffffffff802181ee:	74 0c                	je     ffffffff802181fc <_RME_Thd_Swt+0x1b7>
ffffffff802181f0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802181f7:	e9 6c 02 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
ffffffff802181fc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218200:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218205:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218209:	48 89 c2             	mov    %rax,%rdx
ffffffff8021820c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218210:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218214:	48 01 d0             	add    %rdx,%rax
ffffffff80218217:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021821b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021821f:	48 8b 00             	mov    (%rax),%rax
ffffffff80218222:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80218226:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021822a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021822e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218231:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218235:	0f 94 c0             	sete   %al
ffffffff80218238:	0f b6 c0             	movzbl %al,%eax
ffffffff8021823b:	48 85 c0             	test   %rax,%rax
ffffffff8021823e:	74 0c                	je     ffffffff8021824c <_RME_Thd_Swt+0x207>
ffffffff80218240:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218247:	e9 1c 02 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
ffffffff8021824c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218250:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218254:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80218258:	0f 95 c0             	setne  %al
ffffffff8021825b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021825e:	48 85 c0             	test   %rax,%rax
ffffffff80218261:	74 0c                	je     ffffffff8021826f <_RME_Thd_Swt+0x22a>
ffffffff80218263:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021826a:	e9 f9 01 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
                       struct RME_Cap_Thd*,Thd_Cap_New,Type_Stat);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff8021826f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218273:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218277:	25 00 01 00 00       	and    $0x100,%eax
ffffffff8021827c:	48 85 c0             	test   %rax,%rax
ffffffff8021827f:	0f 94 c0             	sete   %al
ffffffff80218282:	0f b6 c0             	movzbl %al,%eax
ffffffff80218285:	48 85 c0             	test   %rax,%rax
ffffffff80218288:	74 0c                	je     ffffffff80218296 <_RME_Thd_Swt+0x251>
ffffffff8021828a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218291:	e9 d2 01 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
        /* See if we can do operation on this core */
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
ffffffff80218296:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021829a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021829e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        if(Thd_New->Sched.Local!=Local)
ffffffff802182a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802182a6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802182aa:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff802182ae:	74 0c                	je     ffffffff802182bc <_RME_Thd_Swt+0x277>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff802182b0:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802182b7:	e9 ac 01 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
            
        /* See if we can yield to the thread */
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
ffffffff802182bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802182c0:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff802182c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802182c8:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff802182cc:	48 39 c2             	cmp    %rax,%rdx
ffffffff802182cf:	74 0c                	je     ffffffff802182dd <_RME_Thd_Swt+0x298>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_PRIO;
ffffffff802182d1:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff802182d8:	e9 8b 01 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
            
        /* Check if the target thread state is valid */
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff802182dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802182e1:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802182e5:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802182e9:	74 1c                	je     ffffffff80218307 <_RME_Thd_Swt+0x2c2>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff802182eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802182ef:	48 8b 40 38          	mov    0x38(%rax),%rax
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff802182f3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802182f7:	74 0e                	je     ffffffff80218307 <_RME_Thd_Swt+0x2c2>
           (Thd_New->Sched.State==RME_THD_EXCPEND))
ffffffff802182f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802182fd:	48 8b 40 38          	mov    0x38(%rax),%rax
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff80218301:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218305:	75 0c                	jne    ffffffff80218313 <_RME_Thd_Swt+0x2ce>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff80218307:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021830e:	e9 55 01 00 00       	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* See if we need to give up all our timeslices in this yield */
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80218313:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80218318:	0f 84 00 01 00 00    	je     ffffffff8021841e <_RME_Thd_Swt+0x3d9>
ffffffff8021831e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218322:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218326:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8021832d:	ff ff 7f 
ffffffff80218330:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218333:	0f 82 e5 00 00 00    	jb     ffffffff8021841e <_RME_Thd_Swt+0x3d9>
        {
            RME_COV_MARKER();
            
            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff80218339:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021833d:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218344:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80218345:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218349:	48 89 c7             	mov    %rax,%rdi
ffffffff8021834c:	e8 ce aa ff ff       	call   ffffffff80212e1f <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80218351:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218355:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8021835c:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff8021835d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218361:	48 89 c7             	mov    %rax,%rdi
ffffffff80218364:	e8 01 ac ff ff       	call   ffffffff80212f6a <_RME_Run_Notif>
            
            /* Because we have sent a notification, we could have unblocked a
             * thread at higher priority. Additionally, if the new thread is
             * the current thread, we are forced to switch to someone else,
             * because the current thread's timeslice must be exhausted. */
            Thd_High=_RME_Run_High(Local);
ffffffff80218369:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021836d:	48 89 c7             	mov    %rax,%rdi
ffffffff80218370:	e8 73 ab ff ff       	call   ffffffff80212ee8 <_RME_Run_High>
ffffffff80218375:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff80218379:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021837d:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80218381:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218385:	48 8b 52 40          	mov    0x40(%rdx),%rdx
ffffffff80218389:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021838c:	72 0e                	jb     ffffffff8021839c <_RME_Thd_Swt+0x357>
ffffffff8021838e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218392:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218396:	0f 85 82 00 00 00    	jne    ffffffff8021841e <_RME_Thd_Swt+0x3d9>
            {
                RME_COV_MARKER();

                Thd_New=Thd_High;
ffffffff8021839c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802183a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802183a4:	eb 78                	jmp    ffffffff8021841e <_RME_Thd_Swt+0x3d9>
    else
    {
        RME_COV_MARKER();
        
        /* See if we need to give up all our timeslices in this yield */
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff802183a6:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802183ab:	74 49                	je     ffffffff802183f6 <_RME_Thd_Swt+0x3b1>
ffffffff802183ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183b1:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802183b5:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff802183bc:	ff ff 7f 
ffffffff802183bf:	48 39 c2             	cmp    %rax,%rdx
ffffffff802183c2:	72 32                	jb     ffffffff802183f6 <_RME_Thd_Swt+0x3b1>
        {
            RME_COV_MARKER();
            
            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff802183c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183c8:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff802183cf:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff802183d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183d4:	48 89 c7             	mov    %rax,%rdi
ffffffff802183d7:	e8 43 aa ff ff       	call   ffffffff80212e1f <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff802183dc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183e0:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff802183e7:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff802183e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183ec:	48 89 c7             	mov    %rax,%rdi
ffffffff802183ef:	e8 76 ab ff ff       	call   ffffffff80212f6a <_RME_Run_Notif>
ffffffff802183f4:	eb 18                	jmp    ffffffff8021840e <_RME_Thd_Swt+0x3c9>
            RME_COV_MARKER();
            
            /* This operation is just to make sure that if there are any other
             * thread at the same priority level, we're not switching to ourself */
            RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
            _RME_Run_Del(Thd_Cur);
ffffffff802183f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183fa:	48 89 c7             	mov    %rax,%rdi
ffffffff802183fd:	e8 1d aa ff ff       	call   ffffffff80212e1f <_RME_Run_Del>
            _RME_Run_Ins(Thd_Cur);
ffffffff80218402:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218406:	48 89 c7             	mov    %rax,%rdi
ffffffff80218409:	e8 61 a9 ff ff       	call   ffffffff80212d6f <_RME_Run_Ins>
        }
        
        Thd_New=_RME_Run_High(Local);
ffffffff8021840e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218412:	48 89 c7             	mov    %rax,%rdi
ffffffff80218415:	e8 ce aa ff ff       	call   ffffffff80212ee8 <_RME_Run_High>
ffffffff8021841a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Now that we are successful, save the return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);
ffffffff8021841e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80218422:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80218427:	48 89 c7             	mov    %rax,%rdi
ffffffff8021842a:	e8 b3 ec 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>

    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
    /* We cannot call _RME_Kern_High because it picks some random thread. Instead,
     * we use a manual implementation that is faster than the _RME_Kern_High. */
    if(Thd_Cur==Thd_New)
ffffffff8021842f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218433:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218437:	75 07                	jne    ffffffff80218440 <_RME_Thd_Swt+0x3fb>
    {
        RME_COV_MARKER();
        
        return 0;
ffffffff80218439:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021843e:	eb 28                	jmp    ffffffff80218468 <_RME_Thd_Swt+0x423>
        RME_COV_MARKER();
        /* No action required */
    }
            
    /* We have a solid context switch at this point */
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff80218440:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218444:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80218448:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021844c:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021844f:	48 89 c7             	mov    %rax,%rdi
ffffffff80218452:	e8 ed ab ff ff       	call   ffffffff80213044 <_RME_Run_Swt>
    Local->Thd_Cur=Thd_New;
ffffffff80218457:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021845b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021845f:	48 89 50 08          	mov    %rdx,0x8(%rax)

    return 0;
ffffffff80218463:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218468:	c9                   	leave
ffffffff80218469:	c3                   	ret

ffffffff8021846a <_RME_Sig_Boot_Crt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Sig_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Sig)
{
ffffffff8021846a:	f3 0f 1e fa          	endbr64
ffffffff8021846e:	55                   	push   %rbp
ffffffff8021846f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218472:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218476:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021847a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021847e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Crt;
    struct RME_Cap_Sig* Sig_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80218482:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218486:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021848b:	48 85 c0             	test   %rax,%rax
ffffffff8021848e:	0f 85 98 00 00 00    	jne    ffffffff8021852c <_RME_Sig_Boot_Crt+0xc2>
ffffffff80218494:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218498:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021849c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802184a0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802184a3:	0f 93 c0             	setae  %al
ffffffff802184a6:	0f b6 c0             	movzbl %al,%eax
ffffffff802184a9:	48 85 c0             	test   %rax,%rax
ffffffff802184ac:	74 0c                	je     ffffffff802184ba <_RME_Sig_Boot_Crt+0x50>
ffffffff802184ae:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802184b5:	e9 ad 02 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802184ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802184be:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802184c2:	48 89 c2             	mov    %rax,%rdx
ffffffff802184c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802184c9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802184cd:	48 01 d0             	add    %rdx,%rax
ffffffff802184d0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802184d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802184d8:	48 8b 00             	mov    (%rax),%rax
ffffffff802184db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802184df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802184e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802184e7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802184ea:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802184ee:	0f 94 c0             	sete   %al
ffffffff802184f1:	0f b6 c0             	movzbl %al,%eax
ffffffff802184f4:	48 85 c0             	test   %rax,%rax
ffffffff802184f7:	74 0c                	je     ffffffff80218505 <_RME_Sig_Boot_Crt+0x9b>
ffffffff802184f9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218500:	e9 62 02 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff80218505:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218509:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021850d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218511:	0f 95 c0             	setne  %al
ffffffff80218514:	0f b6 c0             	movzbl %al,%eax
ffffffff80218517:	48 85 c0             	test   %rax,%rax
ffffffff8021851a:	0f 84 4c 01 00 00    	je     ffffffff8021866c <_RME_Sig_Boot_Crt+0x202>
ffffffff80218520:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218527:	e9 3b 02 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff8021852c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218530:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218534:	48 89 c2             	mov    %rax,%rdx
ffffffff80218537:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021853b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021853f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218542:	0f 93 c0             	setae  %al
ffffffff80218545:	0f b6 c0             	movzbl %al,%eax
ffffffff80218548:	48 85 c0             	test   %rax,%rax
ffffffff8021854b:	74 0c                	je     ffffffff80218559 <_RME_Sig_Boot_Crt+0xef>
ffffffff8021854d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218554:	e9 0e 02 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff80218559:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021855d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218561:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218565:	48 89 c2             	mov    %rax,%rdx
ffffffff80218568:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021856c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218570:	48 01 d0             	add    %rdx,%rax
ffffffff80218573:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021857b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021857e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218582:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218586:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021858a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021858d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218591:	0f 94 c0             	sete   %al
ffffffff80218594:	0f b6 c0             	movzbl %al,%eax
ffffffff80218597:	48 85 c0             	test   %rax,%rax
ffffffff8021859a:	74 0c                	je     ffffffff802185a8 <_RME_Sig_Boot_Crt+0x13e>
ffffffff8021859c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802185a3:	e9 bf 01 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802185a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802185ac:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802185b0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802185b4:	0f 95 c0             	setne  %al
ffffffff802185b7:	0f b6 c0             	movzbl %al,%eax
ffffffff802185ba:	48 85 c0             	test   %rax,%rax
ffffffff802185bd:	74 0c                	je     ffffffff802185cb <_RME_Sig_Boot_Crt+0x161>
ffffffff802185bf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802185c6:	e9 9c 01 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802185cb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802185cf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802185d4:	48 89 c2             	mov    %rax,%rdx
ffffffff802185d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802185db:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802185df:	48 39 c2             	cmp    %rax,%rdx
ffffffff802185e2:	0f 93 c0             	setae  %al
ffffffff802185e5:	0f b6 c0             	movzbl %al,%eax
ffffffff802185e8:	48 85 c0             	test   %rax,%rax
ffffffff802185eb:	74 0c                	je     ffffffff802185f9 <_RME_Sig_Boot_Crt+0x18f>
ffffffff802185ed:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802185f4:	e9 6e 01 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802185f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802185fd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218602:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218606:	48 89 c2             	mov    %rax,%rdx
ffffffff80218609:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021860d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218611:	48 01 d0             	add    %rdx,%rax
ffffffff80218614:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218618:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021861c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021861f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218623:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218627:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021862b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021862e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218632:	0f 94 c0             	sete   %al
ffffffff80218635:	0f b6 c0             	movzbl %al,%eax
ffffffff80218638:	48 85 c0             	test   %rax,%rax
ffffffff8021863b:	74 0c                	je     ffffffff80218649 <_RME_Sig_Boot_Crt+0x1df>
ffffffff8021863d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218644:	e9 1e 01 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff80218649:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021864d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218651:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218655:	0f 95 c0             	setne  %al
ffffffff80218658:	0f b6 c0             	movzbl %al,%eax
ffffffff8021865b:	48 85 c0             	test   %rax,%rax
ffffffff8021865e:	74 0c                	je     ffffffff8021866c <_RME_Sig_Boot_Crt+0x202>
ffffffff80218660:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218667:	e9 fb 00 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8021866c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218670:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218674:	83 e0 01             	and    $0x1,%eax
ffffffff80218677:	48 85 c0             	test   %rax,%rax
ffffffff8021867a:	0f 94 c0             	sete   %al
ffffffff8021867d:	0f b6 c0             	movzbl %al,%eax
ffffffff80218680:	48 85 c0             	test   %rax,%rax
ffffffff80218683:	74 0c                	je     ffffffff80218691 <_RME_Sig_Boot_Crt+0x227>
ffffffff80218685:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021868c:	e9 d6 00 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80218691:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218695:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218699:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021869d:	48 39 c2             	cmp    %rax,%rdx
ffffffff802186a0:	0f 93 c0             	setae  %al
ffffffff802186a3:	0f b6 c0             	movzbl %al,%eax
ffffffff802186a6:	48 85 c0             	test   %rax,%rax
ffffffff802186a9:	74 0c                	je     ffffffff802186b7 <_RME_Sig_Boot_Crt+0x24d>
ffffffff802186ab:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802186b2:	e9 b0 00 00 00       	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff802186b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802186bb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802186bf:	48 89 c2             	mov    %rax,%rdx
ffffffff802186c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802186c6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802186ca:	48 01 d0             	add    %rdx,%rax
ffffffff802186cd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff802186d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802186d5:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802186dc:	00 00 00 
ffffffff802186df:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802186e4:	48 89 c7             	mov    %rax,%rdi
ffffffff802186e7:	e8 72 40 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802186ec:	48 85 c0             	test   %rax,%rax
ffffffff802186ef:	0f 94 c0             	sete   %al
ffffffff802186f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802186f5:	48 85 c0             	test   %rax,%rax
ffffffff802186f8:	74 09                	je     ffffffff80218703 <_RME_Sig_Boot_Crt+0x299>
ffffffff802186fa:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80218701:	eb 64                	jmp    ffffffff80218767 <_RME_Sig_Boot_Crt+0x2fd>
ffffffff80218703:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80218708:	e8 04 41 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8021870d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80218711:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Header init */
    Sig_Crt->Head.Root_Ref=1U;
ffffffff80218715:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218719:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff80218720:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80218721:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218725:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021872c:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff8021872d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218731:	48 c7 40 10 3f 00 00 	movq   $0x3f,0x10(%rax)
ffffffff80218738:	00 
    
    /* Info init */
    Sig_Crt->Sig_Num=0U;
ffffffff80218739:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021873d:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff80218744:	00 
    Sig_Crt->Thd=RME_NULL;
ffffffff80218745:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218749:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218750:	00 

    /* Establish cap */
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80218751:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218755:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff8021875c:	00 08 00 
ffffffff8021875f:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_SIG,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80218762:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218767:	c9                   	leave
ffffffff80218768:	c3                   	ret

ffffffff80218769 <_RME_Sig_Crt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Crt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Sig)
{
ffffffff80218769:	f3 0f 1e fa          	endbr64
ffffffff8021876d:	55                   	push   %rbp
ffffffff8021876e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218771:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218775:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218779:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021877d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Sig* Sig_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80218781:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218785:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021878a:	48 85 c0             	test   %rax,%rax
ffffffff8021878d:	0f 85 98 00 00 00    	jne    ffffffff8021882b <_RME_Sig_Crt+0xc2>
ffffffff80218793:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218797:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021879b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021879f:	48 39 c2             	cmp    %rax,%rdx
ffffffff802187a2:	0f 93 c0             	setae  %al
ffffffff802187a5:	0f b6 c0             	movzbl %al,%eax
ffffffff802187a8:	48 85 c0             	test   %rax,%rax
ffffffff802187ab:	74 0c                	je     ffffffff802187b9 <_RME_Sig_Crt+0x50>
ffffffff802187ad:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802187b4:	e9 ad 02 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
ffffffff802187b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802187bd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802187c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802187c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802187c8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802187cc:	48 01 d0             	add    %rdx,%rax
ffffffff802187cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802187d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802187d7:	48 8b 00             	mov    (%rax),%rax
ffffffff802187da:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802187de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802187e2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802187e6:	0f b7 c0             	movzwl %ax,%eax
ffffffff802187e9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802187ed:	0f 94 c0             	sete   %al
ffffffff802187f0:	0f b6 c0             	movzbl %al,%eax
ffffffff802187f3:	48 85 c0             	test   %rax,%rax
ffffffff802187f6:	74 0c                	je     ffffffff80218804 <_RME_Sig_Crt+0x9b>
ffffffff802187f8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802187ff:	e9 62 02 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
ffffffff80218804:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218808:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021880c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218810:	0f 95 c0             	setne  %al
ffffffff80218813:	0f b6 c0             	movzbl %al,%eax
ffffffff80218816:	48 85 c0             	test   %rax,%rax
ffffffff80218819:	0f 84 4c 01 00 00    	je     ffffffff8021896b <_RME_Sig_Crt+0x202>
ffffffff8021881f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218826:	e9 3b 02 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
ffffffff8021882b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021882f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218833:	48 89 c2             	mov    %rax,%rdx
ffffffff80218836:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021883a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021883e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218841:	0f 93 c0             	setae  %al
ffffffff80218844:	0f b6 c0             	movzbl %al,%eax
ffffffff80218847:	48 85 c0             	test   %rax,%rax
ffffffff8021884a:	74 0c                	je     ffffffff80218858 <_RME_Sig_Crt+0xef>
ffffffff8021884c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218853:	e9 0e 02 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
ffffffff80218858:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021885c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218860:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218864:	48 89 c2             	mov    %rax,%rdx
ffffffff80218867:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021886b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021886f:	48 01 d0             	add    %rdx,%rax
ffffffff80218872:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218876:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021887a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021887d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218881:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218885:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218889:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021888c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218890:	0f 94 c0             	sete   %al
ffffffff80218893:	0f b6 c0             	movzbl %al,%eax
ffffffff80218896:	48 85 c0             	test   %rax,%rax
ffffffff80218899:	74 0c                	je     ffffffff802188a7 <_RME_Sig_Crt+0x13e>
ffffffff8021889b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802188a2:	e9 bf 01 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
ffffffff802188a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802188ab:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802188af:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802188b3:	0f 95 c0             	setne  %al
ffffffff802188b6:	0f b6 c0             	movzbl %al,%eax
ffffffff802188b9:	48 85 c0             	test   %rax,%rax
ffffffff802188bc:	74 0c                	je     ffffffff802188ca <_RME_Sig_Crt+0x161>
ffffffff802188be:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802188c5:	e9 9c 01 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
ffffffff802188ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802188ce:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802188d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802188d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802188da:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802188de:	48 39 c2             	cmp    %rax,%rdx
ffffffff802188e1:	0f 93 c0             	setae  %al
ffffffff802188e4:	0f b6 c0             	movzbl %al,%eax
ffffffff802188e7:	48 85 c0             	test   %rax,%rax
ffffffff802188ea:	74 0c                	je     ffffffff802188f8 <_RME_Sig_Crt+0x18f>
ffffffff802188ec:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802188f3:	e9 6e 01 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
ffffffff802188f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802188fc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218901:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218905:	48 89 c2             	mov    %rax,%rdx
ffffffff80218908:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021890c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218910:	48 01 d0             	add    %rdx,%rax
ffffffff80218913:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218917:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021891b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021891e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218922:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218926:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021892a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021892d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218931:	0f 94 c0             	sete   %al
ffffffff80218934:	0f b6 c0             	movzbl %al,%eax
ffffffff80218937:	48 85 c0             	test   %rax,%rax
ffffffff8021893a:	74 0c                	je     ffffffff80218948 <_RME_Sig_Crt+0x1df>
ffffffff8021893c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218943:	e9 1e 01 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
ffffffff80218948:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021894c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218950:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218954:	0f 95 c0             	setne  %al
ffffffff80218957:	0f b6 c0             	movzbl %al,%eax
ffffffff8021895a:	48 85 c0             	test   %rax,%rax
ffffffff8021895d:	74 0c                	je     ffffffff8021896b <_RME_Sig_Crt+0x202>
ffffffff8021895f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218966:	e9 fb 00 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8021896b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021896f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218973:	83 e0 01             	and    $0x1,%eax
ffffffff80218976:	48 85 c0             	test   %rax,%rax
ffffffff80218979:	0f 94 c0             	sete   %al
ffffffff8021897c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021897f:	48 85 c0             	test   %rax,%rax
ffffffff80218982:	74 0c                	je     ffffffff80218990 <_RME_Sig_Crt+0x227>
ffffffff80218984:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021898b:	e9 d6 00 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80218990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218994:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218998:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021899c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021899f:	0f 93 c0             	setae  %al
ffffffff802189a2:	0f b6 c0             	movzbl %al,%eax
ffffffff802189a5:	48 85 c0             	test   %rax,%rax
ffffffff802189a8:	74 0c                	je     ffffffff802189b6 <_RME_Sig_Crt+0x24d>
ffffffff802189aa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802189b1:	e9 b0 00 00 00       	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
ffffffff802189b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802189ba:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802189be:	48 89 c2             	mov    %rax,%rdx
ffffffff802189c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802189c5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802189c9:	48 01 d0             	add    %rdx,%rax
ffffffff802189cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff802189d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802189d4:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802189db:	00 00 00 
ffffffff802189de:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802189e3:	48 89 c7             	mov    %rax,%rdi
ffffffff802189e6:	e8 73 3d ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802189eb:	48 85 c0             	test   %rax,%rax
ffffffff802189ee:	0f 94 c0             	sete   %al
ffffffff802189f1:	0f b6 c0             	movzbl %al,%eax
ffffffff802189f4:	48 85 c0             	test   %rax,%rax
ffffffff802189f7:	74 09                	je     ffffffff80218a02 <_RME_Sig_Crt+0x299>
ffffffff802189f9:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80218a00:	eb 64                	jmp    ffffffff80218a66 <_RME_Sig_Crt+0x2fd>
ffffffff80218a02:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80218a07:	e8 05 3e ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80218a0c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80218a10:	48 89 42 20          	mov    %rax,0x20(%rdx)

    /* Header init */
    Sig_Crt->Head.Root_Ref=0U;
ffffffff80218a14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a18:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80218a1f:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80218a20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a24:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80218a2b:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff80218a2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a30:	48 c7 40 10 3f 00 00 	movq   $0x3f,0x10(%rax)
ffffffff80218a37:	00 
    
    /* Info init */
    Sig_Crt->Sig_Num=0U;
ffffffff80218a38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a3c:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff80218a43:	00 
    Sig_Crt->Thd=0U;
ffffffff80218a44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a48:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218a4f:	00 
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80218a50:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a54:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff80218a5b:	00 08 00 
ffffffff80218a5e:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_SIG,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80218a61:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218a66:	c9                   	leave
ffffffff80218a67:	c3                   	ret

ffffffff80218a68 <_RME_Sig_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Sig)
{
ffffffff80218a68:	f3 0f 1e fa          	endbr64
ffffffff80218a6c:	55                   	push   %rbp
ffffffff80218a6d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218a70:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218a74:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218a78:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80218a7c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Sig* Sig_Del;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80218a80:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218a84:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218a89:	48 85 c0             	test   %rax,%rax
ffffffff80218a8c:	0f 85 98 00 00 00    	jne    ffffffff80218b2a <_RME_Sig_Del+0xc2>
ffffffff80218a92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218a96:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218a9a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80218a9e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218aa1:	0f 93 c0             	setae  %al
ffffffff80218aa4:	0f b6 c0             	movzbl %al,%eax
ffffffff80218aa7:	48 85 c0             	test   %rax,%rax
ffffffff80218aaa:	74 0c                	je     ffffffff80218ab8 <_RME_Sig_Del+0x50>
ffffffff80218aac:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218ab3:	e9 65 03 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218ab8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218abc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218ac0:	48 89 c2             	mov    %rax,%rdx
ffffffff80218ac3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218ac7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218acb:	48 01 d0             	add    %rdx,%rax
ffffffff80218ace:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218ad6:	48 8b 00             	mov    (%rax),%rax
ffffffff80218ad9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218add:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218ae1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218ae5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218ae8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218aec:	0f 94 c0             	sete   %al
ffffffff80218aef:	0f b6 c0             	movzbl %al,%eax
ffffffff80218af2:	48 85 c0             	test   %rax,%rax
ffffffff80218af5:	74 0c                	je     ffffffff80218b03 <_RME_Sig_Del+0x9b>
ffffffff80218af7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218afe:	e9 1a 03 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218b03:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218b07:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218b0b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218b0f:	0f 95 c0             	setne  %al
ffffffff80218b12:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b15:	48 85 c0             	test   %rax,%rax
ffffffff80218b18:	0f 84 4c 01 00 00    	je     ffffffff80218c6a <_RME_Sig_Del+0x202>
ffffffff80218b1e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218b25:	e9 f3 02 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218b2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218b2e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218b32:	48 89 c2             	mov    %rax,%rdx
ffffffff80218b35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218b39:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218b3d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218b40:	0f 93 c0             	setae  %al
ffffffff80218b43:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b46:	48 85 c0             	test   %rax,%rax
ffffffff80218b49:	74 0c                	je     ffffffff80218b57 <_RME_Sig_Del+0xef>
ffffffff80218b4b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218b52:	e9 c6 02 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218b57:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218b5b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218b5f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218b63:	48 89 c2             	mov    %rax,%rdx
ffffffff80218b66:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218b6a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218b6e:	48 01 d0             	add    %rdx,%rax
ffffffff80218b71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218b75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218b79:	48 8b 00             	mov    (%rax),%rax
ffffffff80218b7c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218b80:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218b84:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218b88:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218b8b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218b8f:	0f 94 c0             	sete   %al
ffffffff80218b92:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b95:	48 85 c0             	test   %rax,%rax
ffffffff80218b98:	74 0c                	je     ffffffff80218ba6 <_RME_Sig_Del+0x13e>
ffffffff80218b9a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218ba1:	e9 77 02 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218ba6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218baa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218bae:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218bb2:	0f 95 c0             	setne  %al
ffffffff80218bb5:	0f b6 c0             	movzbl %al,%eax
ffffffff80218bb8:	48 85 c0             	test   %rax,%rax
ffffffff80218bbb:	74 0c                	je     ffffffff80218bc9 <_RME_Sig_Del+0x161>
ffffffff80218bbd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218bc4:	e9 54 02 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218bc9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218bcd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218bd2:	48 89 c2             	mov    %rax,%rdx
ffffffff80218bd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218bd9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218bdd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218be0:	0f 93 c0             	setae  %al
ffffffff80218be3:	0f b6 c0             	movzbl %al,%eax
ffffffff80218be6:	48 85 c0             	test   %rax,%rax
ffffffff80218be9:	74 0c                	je     ffffffff80218bf7 <_RME_Sig_Del+0x18f>
ffffffff80218beb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218bf2:	e9 26 02 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218bf7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218bfb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218c00:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218c04:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c0b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218c0f:	48 01 d0             	add    %rdx,%rax
ffffffff80218c12:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218c16:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c1a:	48 8b 00             	mov    (%rax),%rax
ffffffff80218c1d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218c21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218c25:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218c29:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218c2c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218c30:	0f 94 c0             	sete   %al
ffffffff80218c33:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c36:	48 85 c0             	test   %rax,%rax
ffffffff80218c39:	74 0c                	je     ffffffff80218c47 <_RME_Sig_Del+0x1df>
ffffffff80218c3b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218c42:	e9 d6 01 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218c47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218c4b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218c4f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218c53:	0f 95 c0             	setne  %al
ffffffff80218c56:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c59:	48 85 c0             	test   %rax,%rax
ffffffff80218c5c:	74 0c                	je     ffffffff80218c6a <_RME_Sig_Del+0x202>
ffffffff80218c5e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218c65:	e9 b3 01 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80218c6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c6e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218c72:	83 e0 02             	and    $0x2,%eax
ffffffff80218c75:	48 85 c0             	test   %rax,%rax
ffffffff80218c78:	0f 94 c0             	sete   %al
ffffffff80218c7b:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c7e:	48 85 c0             	test   %rax,%rax
ffffffff80218c81:	74 0c                	je     ffffffff80218c8f <_RME_Sig_Del+0x227>
ffffffff80218c83:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218c8a:	e9 8e 01 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff80218c8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c93:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218c97:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80218c9b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218c9e:	0f 93 c0             	setae  %al
ffffffff80218ca1:	0f b6 c0             	movzbl %al,%eax
ffffffff80218ca4:	48 85 c0             	test   %rax,%rax
ffffffff80218ca7:	74 0c                	je     ffffffff80218cb5 <_RME_Sig_Del+0x24d>
ffffffff80218ca9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218cb0:	e9 68 01 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218cb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218cb9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218cbd:	48 89 c2             	mov    %rax,%rdx
ffffffff80218cc0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218cc4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218cc8:	48 01 d0             	add    %rdx,%rax
ffffffff80218ccb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80218ccf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218cd3:	48 8b 00             	mov    (%rax),%rax
ffffffff80218cd6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218cda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218cde:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218ce2:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218ce5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218ce9:	0f 95 c0             	setne  %al
ffffffff80218cec:	0f b6 c0             	movzbl %al,%eax
ffffffff80218cef:	48 85 c0             	test   %rax,%rax
ffffffff80218cf2:	74 0c                	je     ffffffff80218d00 <_RME_Sig_Del+0x298>
ffffffff80218cf4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218cfb:	e9 1d 01 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218d00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218d04:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218d08:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80218d0c:	0f 95 c0             	setne  %al
ffffffff80218d0f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d12:	48 85 c0             	test   %rax,%rax
ffffffff80218d15:	74 0c                	je     ffffffff80218d23 <_RME_Sig_Del+0x2bb>
ffffffff80218d17:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218d1e:	e9 fa 00 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218d23:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80218d28:	e8 e4 3a ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80218d2d:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218d34:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80218d38:	48 29 c2             	sub    %rax,%rdx
ffffffff80218d3b:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80218d3f:	0f 96 c0             	setbe  %al
ffffffff80218d42:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d45:	48 98                	cltq
ffffffff80218d47:	48 85 c0             	test   %rax,%rax
ffffffff80218d4a:	74 0c                	je     ffffffff80218d58 <_RME_Sig_Del+0x2f0>
ffffffff80218d4c:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80218d53:	e9 c5 00 00 00       	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
ffffffff80218d58:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218d5c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218d60:	48 85 c0             	test   %rax,%rax
ffffffff80218d63:	0f 95 c0             	setne  %al
ffffffff80218d66:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d69:	48 85 c0             	test   %rax,%rax
ffffffff80218d6c:	74 41                	je     ffffffff80218daf <_RME_Sig_Del+0x347>
ffffffff80218d6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218d72:	89 c0                	mov    %eax,%eax
ffffffff80218d74:	48 85 c0             	test   %rax,%rax
ffffffff80218d77:	0f 94 c0             	sete   %al
ffffffff80218d7a:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d7d:	48 85 c0             	test   %rax,%rax
ffffffff80218d80:	74 24                	je     ffffffff80218da6 <_RME_Sig_Del+0x33e>
ffffffff80218d82:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80218d89:	00 ff ff 
ffffffff80218d8c:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80218d90:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218d97:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218d9b:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218d9e:	48 89 c7             	mov    %rax,%rdi
ffffffff80218da1:	e8 b8 39 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218da6:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80218dad:	eb 6e                	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>

    /* Check if the signal endpoint is currently used and cannot be deleted */
    if(Sig_Del->Thd!=(void*)0U)
ffffffff80218daf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218db3:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218db7:	48 85 c0             	test   %rax,%rax
ffffffff80218dba:	74 2d                	je     ffffffff80218de9 <_RME_Sig_Del+0x381>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Sig_Del,Type_Stat);
ffffffff80218dbc:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80218dc3:	00 ff ff 
ffffffff80218dc6:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80218dca:	48 89 c2             	mov    %rax,%rdx
ffffffff80218dcd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218dd1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218dd5:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218dd8:	48 89 c7             	mov    %rax,%rdi
ffffffff80218ddb:	e8 7e 39 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff80218de0:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff80218de7:	eb 34                	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Sig_Del,Type_Stat);
ffffffff80218de9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218ded:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218df1:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80218df6:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218df9:	48 89 c7             	mov    %rax,%rdi
ffffffff80218dfc:	e8 5d 39 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218e01:	48 85 c0             	test   %rax,%rax
ffffffff80218e04:	0f 94 c0             	sete   %al
ffffffff80218e07:	0f b6 c0             	movzbl %al,%eax
ffffffff80218e0a:	48 85 c0             	test   %rax,%rax
ffffffff80218e0d:	74 09                	je     ffffffff80218e18 <_RME_Sig_Del+0x3b0>
ffffffff80218e0f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80218e16:	eb 05                	jmp    ffffffff80218e1d <_RME_Sig_Del+0x3b5>
    
    return 0;
ffffffff80218e18:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218e1d:	c9                   	leave
ffffffff80218e1e:	c3                   	ret

ffffffff80218e1f <_RME_Kern_High>:
Output      : volatile struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Kern_High(struct RME_Reg_Struct* Reg,
                    struct RME_CPU_Local* Local)
{
ffffffff80218e1f:	f3 0f 1e fa          	endbr64
ffffffff80218e23:	55                   	push   %rbp
ffffffff80218e24:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218e27:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80218e2b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80218e2f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct RME_Thd_Struct* Thd_New;
    struct RME_Thd_Struct* Thd_Cur;

    Thd_New=_RME_Run_High(Local);
ffffffff80218e33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e37:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e3a:	e8 a9 a0 ff ff       	call   ffffffff80212ee8 <_RME_Run_High>
ffffffff80218e3f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_ASSERT(Thd_New!=(void*)RME_NULL);
    Thd_Cur=Local->Thd_Cur;
ffffffff80218e43:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e47:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218e4b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Are these two threads the same? */
    if(Thd_New==Thd_Cur)
ffffffff80218e4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218e53:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218e57:	74 47                	je     ffffffff80218ea0 <_RME_Kern_High+0x81>
        /* No action required */
    }

    /* Check if we need to do the context switch regardless of priority
     * because the current thread is not ready yet. */
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80218e59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218e5d:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80218e61:	48 85 c0             	test   %rax,%rax
ffffffff80218e64:	75 15                	jne    ffffffff80218e7b <_RME_Kern_High+0x5c>
    {
        RME_COV_MARKER();

        /* Check priority to see if the switch is necessary */
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80218e66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218e6a:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80218e6e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218e72:	48 8b 52 40          	mov    0x40(%rdx),%rdx
ffffffff80218e76:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218e79:	73 28                	jae    ffffffff80218ea3 <_RME_Kern_High+0x84>
    }

    /* We will have a solid context switch on this point. The current 
     * thread is not necessarily READY, it could be EXCPEND as well. */
    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff80218e7b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80218e7f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218e83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e87:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218e8a:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e8d:	e8 b2 a1 ff ff       	call   ffffffff80213044 <_RME_Run_Swt>
    Local->Thd_Cur=Thd_New;
ffffffff80218e92:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218e96:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80218e9a:	48 89 50 08          	mov    %rdx,0x8(%rax)
ffffffff80218e9e:	eb 04                	jmp    ffffffff80218ea4 <_RME_Kern_High+0x85>
        return;
ffffffff80218ea0:	90                   	nop
ffffffff80218ea1:	eb 01                	jmp    ffffffff80218ea4 <_RME_Kern_High+0x85>
            return;
ffffffff80218ea3:	90                   	nop
}
ffffffff80218ea4:	c9                   	leave
ffffffff80218ea5:	c3                   	ret

ffffffff80218ea6 <_RME_Kern_Snd>:
Input       : struct RME_Cap_Sig* Cap_Sig - The signal root capability.
Output      : None.
Return      : rme_ret_t - If successful, 0, or an error code.
******************************************************************************/
rme_ret_t _RME_Kern_Snd(struct RME_Cap_Sig* Cap_Sig)
{
ffffffff80218ea6:	f3 0f 1e fa          	endbr64
ffffffff80218eaa:	55                   	push   %rbp
ffffffff80218eab:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218eae:	53                   	push   %rbx
ffffffff80218eaf:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80218eb3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    rme_ptr_t Unblock;
    struct RME_Thd_Struct* Thd_Sig;
    
    Thd_Sig=Cap_Sig->Thd;
ffffffff80218eb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218ebb:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218ebf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* If and only if we are calling from the same core do we unblock */
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff80218ec3:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80218ec8:	74 26                	je     ffffffff80218ef0 <_RME_Kern_Snd+0x4a>
    {
        RME_COV_MARKER();

        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff80218eca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218ece:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffff80218ed2:	e8 68 29 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80218ed7:	48 39 c3             	cmp    %rax,%rbx
ffffffff80218eda:	75 0a                	jne    ffffffff80218ee6 <_RME_Kern_Snd+0x40>
        {
            RME_COV_MARKER();

            Unblock=1U;
ffffffff80218edc:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
ffffffff80218ee3:	00 
ffffffff80218ee4:	eb 12                	jmp    ffffffff80218ef8 <_RME_Kern_Snd+0x52>
        }
        else
        {
            RME_COV_MARKER();

            Unblock=0U;
ffffffff80218ee6:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80218eed:	00 
ffffffff80218eee:	eb 08                	jmp    ffffffff80218ef8 <_RME_Kern_Snd+0x52>
    }
    else
    {
        RME_COV_MARKER();

        Unblock=0U;
ffffffff80218ef0:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80218ef7:	00 
    }

    if(Unblock!=0U)
ffffffff80218ef8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80218efd:	74 65                	je     ffffffff80218f64 <_RME_Kern_Snd+0xbe>

        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value to one as always, Even if we were specifying
         * multi-receive. This is because other cores may reduce the count
         * to zero while we are doing this. */
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff80218eff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f03:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80218f0a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80218f0f:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f12:	e8 cb e1 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
        
        /* See if the thread still have time left */
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff80218f17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f1b:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218f1f:	48 85 c0             	test   %rax,%rax
ffffffff80218f22:	74 1a                	je     ffffffff80218f3e <_RME_Kern_Snd+0x98>
        {
            RME_COV_MARKER();

            /* Ready and add to runqueue */
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff80218f24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f28:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80218f2f:	00 
            _RME_Run_Ins(Thd_Sig);
ffffffff80218f30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f34:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f37:	e8 33 9e ff ff       	call   ffffffff80212d6f <_RME_Run_Ins>
ffffffff80218f3c:	eb 18                	jmp    ffffffff80218f56 <_RME_Kern_Snd+0xb0>
        else
        {
            RME_COV_MARKER();

            /* Timeout and notify parent */
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff80218f3e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f42:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80218f49:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff80218f4a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f4e:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f51:	e8 14 a0 ff ff       	call   ffffffff80212f6a <_RME_Run_Notif>
         * we hope to perform the context switch only once when exiting that
         * handler. Also note that the current thread could be EXCPEND as well;
         * this is different from the normal signal sending system call. */
        
        /* Clear endpoint blocking status - no write release required */
        Cap_Sig->Thd=RME_NULL;
ffffffff80218f56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218f5a:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218f61:	00 
ffffffff80218f62:	eb 44                	jmp    ffffffff80218fa8 <_RME_Kern_Snd+0x102>
    {
        RME_COV_MARKER();

        /* The guy who blocked on it is not on our core, or nobody blocked.
         * We just faa the counter value and return. */
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff80218f64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218f68:	48 83 c0 28          	add    $0x28,%rax
ffffffff80218f6c:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80218f71:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f74:	e8 1a 38 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff80218f79:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80218f80:	ff ff 7f 
ffffffff80218f83:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218f86:	73 20                	jae    ffffffff80218fa8 <_RME_Kern_Snd+0x102>
        {
            RME_COV_MARKER();

            RME_FETCH_ADD(&(Cap_Sig->Sig_Num),-1);
ffffffff80218f88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218f8c:	48 83 c0 28          	add    $0x28,%rax
ffffffff80218f90:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80218f97:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f9a:	e8 f4 37 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff80218f9f:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff80218fa6:	eb 05                	jmp    ffffffff80218fad <_RME_Kern_Snd+0x107>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff80218fa8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218fad:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80218fb1:	c9                   	leave
ffffffff80218fb2:	c3                   	ret

ffffffff80218fb3 <_RME_Sig_Snd>:
Return      : rme_ret_t - If successful, 0, or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Snd(struct RME_Cap_Cpt* Cpt, 
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Sig)
{
ffffffff80218fb3:	f3 0f 1e fa          	endbr64
ffffffff80218fb7:	55                   	push   %rbp
ffffffff80218fb8:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218fbb:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80218fbf:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80218fc3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80218fc7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    struct RME_CPU_Local* Local;
    rme_ptr_t Unblock;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80218fcb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218fcf:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218fd4:	48 85 c0             	test   %rax,%rax
ffffffff80218fd7:	0f 85 98 00 00 00    	jne    ffffffff80219075 <_RME_Sig_Snd+0xc2>
ffffffff80218fdd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218fe1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218fe5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80218fe9:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218fec:	0f 93 c0             	setae  %al
ffffffff80218fef:	0f b6 c0             	movzbl %al,%eax
ffffffff80218ff2:	48 85 c0             	test   %rax,%rax
ffffffff80218ff5:	74 0c                	je     ffffffff80219003 <_RME_Sig_Snd+0x50>
ffffffff80218ff7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218ffe:	e9 2b 03 00 00       	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
ffffffff80219003:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219007:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021900b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021900e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219012:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219016:	48 01 d0             	add    %rdx,%rax
ffffffff80219019:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021901d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219021:	48 8b 00             	mov    (%rax),%rax
ffffffff80219024:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219028:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021902c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219030:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219033:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219037:	0f 94 c0             	sete   %al
ffffffff8021903a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021903d:	48 85 c0             	test   %rax,%rax
ffffffff80219040:	74 0c                	je     ffffffff8021904e <_RME_Sig_Snd+0x9b>
ffffffff80219042:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219049:	e9 e0 02 00 00       	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
ffffffff8021904e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219052:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219056:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8021905a:	0f 95 c0             	setne  %al
ffffffff8021905d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219060:	48 85 c0             	test   %rax,%rax
ffffffff80219063:	0f 84 4c 01 00 00    	je     ffffffff802191b5 <_RME_Sig_Snd+0x202>
ffffffff80219069:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219070:	e9 b9 02 00 00       	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
ffffffff80219075:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219079:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021907d:	48 89 c2             	mov    %rax,%rdx
ffffffff80219080:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219084:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219088:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021908b:	0f 93 c0             	setae  %al
ffffffff8021908e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219091:	48 85 c0             	test   %rax,%rax
ffffffff80219094:	74 0c                	je     ffffffff802190a2 <_RME_Sig_Snd+0xef>
ffffffff80219096:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021909d:	e9 8c 02 00 00       	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
ffffffff802190a2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802190a6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802190aa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802190ae:	48 89 c2             	mov    %rax,%rdx
ffffffff802190b1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802190b5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802190b9:	48 01 d0             	add    %rdx,%rax
ffffffff802190bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802190c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802190c4:	48 8b 00             	mov    (%rax),%rax
ffffffff802190c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802190cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802190cf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802190d3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802190d6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802190da:	0f 94 c0             	sete   %al
ffffffff802190dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802190e0:	48 85 c0             	test   %rax,%rax
ffffffff802190e3:	74 0c                	je     ffffffff802190f1 <_RME_Sig_Snd+0x13e>
ffffffff802190e5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802190ec:	e9 3d 02 00 00       	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
ffffffff802190f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802190f5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802190f9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802190fd:	0f 95 c0             	setne  %al
ffffffff80219100:	0f b6 c0             	movzbl %al,%eax
ffffffff80219103:	48 85 c0             	test   %rax,%rax
ffffffff80219106:	74 0c                	je     ffffffff80219114 <_RME_Sig_Snd+0x161>
ffffffff80219108:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021910f:	e9 1a 02 00 00       	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
ffffffff80219114:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219118:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021911d:	48 89 c2             	mov    %rax,%rdx
ffffffff80219120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219124:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219128:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021912b:	0f 93 c0             	setae  %al
ffffffff8021912e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219131:	48 85 c0             	test   %rax,%rax
ffffffff80219134:	74 0c                	je     ffffffff80219142 <_RME_Sig_Snd+0x18f>
ffffffff80219136:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021913d:	e9 ec 01 00 00       	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
ffffffff80219142:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219146:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021914b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021914f:	48 89 c2             	mov    %rax,%rdx
ffffffff80219152:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219156:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021915a:	48 01 d0             	add    %rdx,%rax
ffffffff8021915d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219161:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219165:	48 8b 00             	mov    (%rax),%rax
ffffffff80219168:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021916c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219170:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219174:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219177:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021917b:	0f 94 c0             	sete   %al
ffffffff8021917e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219181:	48 85 c0             	test   %rax,%rax
ffffffff80219184:	74 0c                	je     ffffffff80219192 <_RME_Sig_Snd+0x1df>
ffffffff80219186:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021918d:	e9 9c 01 00 00       	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
ffffffff80219192:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219196:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021919a:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8021919e:	0f 95 c0             	setne  %al
ffffffff802191a1:	0f b6 c0             	movzbl %al,%eax
ffffffff802191a4:	48 85 c0             	test   %rax,%rax
ffffffff802191a7:	74 0c                	je     ffffffff802191b5 <_RME_Sig_Snd+0x202>
ffffffff802191a9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802191b0:	e9 79 01 00 00       	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
                   struct RME_Cap_Sig*,Sig_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff802191b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191b9:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802191bd:	83 e0 01             	and    $0x1,%eax
ffffffff802191c0:	48 85 c0             	test   %rax,%rax
ffffffff802191c3:	0f 94 c0             	sete   %al
ffffffff802191c6:	0f b6 c0             	movzbl %al,%eax
ffffffff802191c9:	48 85 c0             	test   %rax,%rax
ffffffff802191cc:	74 0c                	je     ffffffff802191da <_RME_Sig_Snd+0x227>
ffffffff802191ce:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802191d5:	e9 54 01 00 00       	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
    
    Local=RME_CPU_LOCAL();
ffffffff802191da:	e8 60 26 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802191df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802191e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191e7:	48 8b 00             	mov    (%rax),%rax
ffffffff802191ea:	89 c0                	mov    %eax,%eax
ffffffff802191ec:	48 85 c0             	test   %rax,%rax
ffffffff802191ef:	74 0a                	je     ffffffff802191fb <_RME_Sig_Snd+0x248>
ffffffff802191f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191f5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802191f9:	eb 04                	jmp    ffffffff802191ff <_RME_Sig_Snd+0x24c>
ffffffff802191fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191ff:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Thd_Rcv=Sig_Root->Thd;
ffffffff80219203:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219207:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021920b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    /* If and only if we are calling from the same core do we unblock */
    if(Thd_Rcv!=(void*)RME_NULL)
ffffffff8021920f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80219214:	74 22                	je     ffffffff80219238 <_RME_Sig_Snd+0x285>
    {
        RME_COV_MARKER();

        if(Thd_Rcv->Sched.Local==Local)
ffffffff80219216:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021921a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021921e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80219222:	75 0a                	jne    ffffffff8021922e <_RME_Sig_Snd+0x27b>
        {
            RME_COV_MARKER();

            Unblock=1U;
ffffffff80219224:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8021922b:	00 
ffffffff8021922c:	eb 12                	jmp    ffffffff80219240 <_RME_Sig_Snd+0x28d>
        }
        else
        {
            RME_COV_MARKER();

            Unblock=0U;
ffffffff8021922e:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80219235:	00 
ffffffff80219236:	eb 08                	jmp    ffffffff80219240 <_RME_Sig_Snd+0x28d>
    }
    else
    {
        RME_COV_MARKER();

        Unblock=0U;
ffffffff80219238:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021923f:	00 
    }
    
    if(Unblock!=0U)
ffffffff80219240:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80219245:	0f 84 89 00 00 00    	je     ffffffff802192d4 <_RME_Sig_Snd+0x321>
    {
        RME_COV_MARKER();

        /* Now save the system call return value to the caller stack */
        __RME_Svc_Retval_Set(Reg,0);
ffffffff8021924b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021924f:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219254:	48 89 c7             	mov    %rax,%rdi
ffffffff80219257:	e8 86 de 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
        
        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value to one as always, Even if we were specifying
         * multi-receive. This is because other cores may reduce the count
         * to zero while we are doing this. */
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
ffffffff8021925c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219260:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80219267:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021926c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021926f:	e8 6e de 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
        
        /* See if the thread still have time left */
        if(Thd_Rcv->Sched.Slice!=0U)
ffffffff80219274:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219278:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021927c:	48 85 c0             	test   %rax,%rax
ffffffff8021927f:	74 1a                	je     ffffffff8021929b <_RME_Sig_Snd+0x2e8>
        {
            RME_COV_MARKER();

            /* Ready and add to runqueue */
            Thd_Rcv->Sched.State=RME_THD_READY;
ffffffff80219281:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219285:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8021928c:	00 
            _RME_Run_Ins(Thd_Rcv);
ffffffff8021928d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219291:	48 89 c7             	mov    %rax,%rdi
ffffffff80219294:	e8 d6 9a ff ff       	call   ffffffff80212d6f <_RME_Run_Ins>
ffffffff80219299:	eb 18                	jmp    ffffffff802192b3 <_RME_Sig_Snd+0x300>
        else
        {
            RME_COV_MARKER();

            /* Timeout and notify parent */
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
ffffffff8021929b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021929f:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff802192a6:	00 
            _RME_Run_Notif(Thd_Rcv);
ffffffff802192a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802192ab:	48 89 c7             	mov    %rax,%rdi
ffffffff802192ae:	e8 b7 9c ff ff       	call   ffffffff80212f6a <_RME_Run_Notif>
        }
        
        /* Pick the highest priority thread to run */
        _RME_Kern_High(Reg,Local);
ffffffff802192b3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802192b7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802192bb:	48 89 d6             	mov    %rdx,%rsi
ffffffff802192be:	48 89 c7             	mov    %rax,%rdi
ffffffff802192c1:	e8 59 fb ff ff       	call   ffffffff80218e1f <_RME_Kern_High>
        
        /* Clear endpoint blocking status - no write release required */
        Sig_Root->Thd=RME_NULL;
ffffffff802192c6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802192ca:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff802192d1:	00 
ffffffff802192d2:	eb 55                	jmp    ffffffff80219329 <_RME_Sig_Snd+0x376>
    else
    {
        RME_COV_MARKER();

        /* The guy who blocked on it is not on our core, we just faa and return */
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff802192d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802192d8:	48 83 c0 28          	add    $0x28,%rax
ffffffff802192dc:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802192e1:	48 89 c7             	mov    %rax,%rdi
ffffffff802192e4:	e8 aa 34 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff802192e9:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff802192f0:	ff ff 7f 
ffffffff802192f3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802192f6:	73 20                	jae    ffffffff80219318 <_RME_Sig_Snd+0x365>
        {
            RME_COV_MARKER();

            RME_FETCH_ADD(&(Sig_Root->Sig_Num),-1);
ffffffff802192f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802192fc:	48 83 c0 28          	add    $0x28,%rax
ffffffff80219300:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80219307:	48 89 c7             	mov    %rax,%rdi
ffffffff8021930a:	e8 84 34 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff8021930f:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff80219316:	eb 16                	jmp    ffffffff8021932e <_RME_Sig_Snd+0x37b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Now save the system call return value to the caller stack */
        __RME_Svc_Retval_Set(Reg,0);
ffffffff80219318:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021931c:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219321:	48 89 c7             	mov    %rax,%rdi
ffffffff80219324:	e8 b9 dd 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
    }

    return 0;
ffffffff80219329:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021932e:	c9                   	leave
ffffffff8021932f:	c3                   	ret

ffffffff80219330 <_RME_Sig_Rcv>:
******************************************************************************/
static rme_ret_t _RME_Sig_Rcv(struct RME_Cap_Cpt* Cpt,
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Sig,
                              rme_ptr_t Option)
{
ffffffff80219330:	f3 0f 1e fa          	endbr64
ffffffff80219334:	55                   	push   %rbp
ffffffff80219335:	48 89 e5             	mov    %rsp,%rbp
ffffffff80219338:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021933c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80219340:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80219344:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80219348:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    rme_ptr_t Old_Value;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff8021934c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219350:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219355:	48 85 c0             	test   %rax,%rax
ffffffff80219358:	0f 85 98 00 00 00    	jne    ffffffff802193f6 <_RME_Sig_Rcv+0xc6>
ffffffff8021935e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219362:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219366:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021936a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021936d:	0f 93 c0             	setae  %al
ffffffff80219370:	0f b6 c0             	movzbl %al,%eax
ffffffff80219373:	48 85 c0             	test   %rax,%rax
ffffffff80219376:	74 0c                	je     ffffffff80219384 <_RME_Sig_Rcv+0x54>
ffffffff80219378:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021937f:	e9 45 04 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
ffffffff80219384:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219388:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021938c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021938f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219393:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219397:	48 01 d0             	add    %rdx,%rax
ffffffff8021939a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021939e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802193a2:	48 8b 00             	mov    (%rax),%rax
ffffffff802193a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802193a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802193ad:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802193b1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802193b4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802193b8:	0f 94 c0             	sete   %al
ffffffff802193bb:	0f b6 c0             	movzbl %al,%eax
ffffffff802193be:	48 85 c0             	test   %rax,%rax
ffffffff802193c1:	74 0c                	je     ffffffff802193cf <_RME_Sig_Rcv+0x9f>
ffffffff802193c3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802193ca:	e9 fa 03 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
ffffffff802193cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802193d3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802193d7:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802193db:	0f 95 c0             	setne  %al
ffffffff802193de:	0f b6 c0             	movzbl %al,%eax
ffffffff802193e1:	48 85 c0             	test   %rax,%rax
ffffffff802193e4:	0f 84 4c 01 00 00    	je     ffffffff80219536 <_RME_Sig_Rcv+0x206>
ffffffff802193ea:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802193f1:	e9 d3 03 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
ffffffff802193f6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802193fa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802193fe:	48 89 c2             	mov    %rax,%rdx
ffffffff80219401:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219405:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219409:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021940c:	0f 93 c0             	setae  %al
ffffffff8021940f:	0f b6 c0             	movzbl %al,%eax
ffffffff80219412:	48 85 c0             	test   %rax,%rax
ffffffff80219415:	74 0c                	je     ffffffff80219423 <_RME_Sig_Rcv+0xf3>
ffffffff80219417:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021941e:	e9 a6 03 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
ffffffff80219423:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219427:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021942b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021942f:	48 89 c2             	mov    %rax,%rdx
ffffffff80219432:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219436:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021943a:	48 01 d0             	add    %rdx,%rax
ffffffff8021943d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219441:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219445:	48 8b 00             	mov    (%rax),%rax
ffffffff80219448:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021944c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219450:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219454:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219457:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021945b:	0f 94 c0             	sete   %al
ffffffff8021945e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219461:	48 85 c0             	test   %rax,%rax
ffffffff80219464:	74 0c                	je     ffffffff80219472 <_RME_Sig_Rcv+0x142>
ffffffff80219466:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021946d:	e9 57 03 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
ffffffff80219472:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219476:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021947a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021947e:	0f 95 c0             	setne  %al
ffffffff80219481:	0f b6 c0             	movzbl %al,%eax
ffffffff80219484:	48 85 c0             	test   %rax,%rax
ffffffff80219487:	74 0c                	je     ffffffff80219495 <_RME_Sig_Rcv+0x165>
ffffffff80219489:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219490:	e9 34 03 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
ffffffff80219495:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219499:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021949e:	48 89 c2             	mov    %rax,%rdx
ffffffff802194a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802194a5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802194a9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802194ac:	0f 93 c0             	setae  %al
ffffffff802194af:	0f b6 c0             	movzbl %al,%eax
ffffffff802194b2:	48 85 c0             	test   %rax,%rax
ffffffff802194b5:	74 0c                	je     ffffffff802194c3 <_RME_Sig_Rcv+0x193>
ffffffff802194b7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802194be:	e9 06 03 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
ffffffff802194c3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802194c7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802194cc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802194d0:	48 89 c2             	mov    %rax,%rdx
ffffffff802194d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802194d7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802194db:	48 01 d0             	add    %rdx,%rax
ffffffff802194de:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802194e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802194e6:	48 8b 00             	mov    (%rax),%rax
ffffffff802194e9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802194ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802194f1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802194f5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802194f8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802194fc:	0f 94 c0             	sete   %al
ffffffff802194ff:	0f b6 c0             	movzbl %al,%eax
ffffffff80219502:	48 85 c0             	test   %rax,%rax
ffffffff80219505:	74 0c                	je     ffffffff80219513 <_RME_Sig_Rcv+0x1e3>
ffffffff80219507:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021950e:	e9 b6 02 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
ffffffff80219513:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219517:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021951b:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8021951f:	0f 95 c0             	setne  %al
ffffffff80219522:	0f b6 c0             	movzbl %al,%eax
ffffffff80219525:	48 85 c0             	test   %rax,%rax
ffffffff80219528:	74 0c                	je     ffffffff80219536 <_RME_Sig_Rcv+0x206>
ffffffff8021952a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219531:	e9 93 02 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
                   struct RME_Cap_Sig*,Sig_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    switch(Option)
ffffffff80219536:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
ffffffff8021953b:	0f 84 a3 00 00 00    	je     ffffffff802195e4 <_RME_Sig_Rcv+0x2b4>
ffffffff80219541:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
ffffffff80219546:	0f 87 bd 00 00 00    	ja     ffffffff80219609 <_RME_Sig_Rcv+0x2d9>
ffffffff8021954c:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff80219551:	74 6c                	je     ffffffff802195bf <_RME_Sig_Rcv+0x28f>
ffffffff80219553:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff80219558:	0f 87 ab 00 00 00    	ja     ffffffff80219609 <_RME_Sig_Rcv+0x2d9>
ffffffff8021955e:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80219563:	74 0c                	je     ffffffff80219571 <_RME_Sig_Rcv+0x241>
ffffffff80219565:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
ffffffff8021956a:	74 2e                	je     ffffffff8021959a <_RME_Sig_Rcv+0x26a>
ffffffff8021956c:	e9 98 00 00 00       	jmp    ffffffff80219609 <_RME_Sig_Rcv+0x2d9>
    {
        case RME_RCV_BS:
        {
            RME_COV_MARKER();

            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff80219571:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219575:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219579:	83 e0 02             	and    $0x2,%eax
ffffffff8021957c:	48 85 c0             	test   %rax,%rax
ffffffff8021957f:	0f 94 c0             	sete   %al
ffffffff80219582:	0f b6 c0             	movzbl %al,%eax
ffffffff80219585:	48 85 c0             	test   %rax,%rax
ffffffff80219588:	0f 84 87 00 00 00    	je     ffffffff80219615 <_RME_Sig_Rcv+0x2e5>
ffffffff8021958e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219595:	e9 2f 02 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_BM:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
ffffffff8021959a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021959e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802195a2:	83 e0 04             	and    $0x4,%eax
ffffffff802195a5:	48 85 c0             	test   %rax,%rax
ffffffff802195a8:	0f 94 c0             	sete   %al
ffffffff802195ab:	0f b6 c0             	movzbl %al,%eax
ffffffff802195ae:	48 85 c0             	test   %rax,%rax
ffffffff802195b1:	74 65                	je     ffffffff80219618 <_RME_Sig_Rcv+0x2e8>
ffffffff802195b3:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802195ba:	e9 0a 02 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_NS:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
ffffffff802195bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802195c3:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802195c7:	83 e0 08             	and    $0x8,%eax
ffffffff802195ca:	48 85 c0             	test   %rax,%rax
ffffffff802195cd:	0f 94 c0             	sete   %al
ffffffff802195d0:	0f b6 c0             	movzbl %al,%eax
ffffffff802195d3:	48 85 c0             	test   %rax,%rax
ffffffff802195d6:	74 43                	je     ffffffff8021961b <_RME_Sig_Rcv+0x2eb>
ffffffff802195d8:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802195df:	e9 e5 01 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_NM:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
ffffffff802195e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802195e8:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802195ec:	83 e0 10             	and    $0x10,%eax
ffffffff802195ef:	48 85 c0             	test   %rax,%rax
ffffffff802195f2:	0f 94 c0             	sete   %al
ffffffff802195f5:	0f b6 c0             	movzbl %al,%eax
ffffffff802195f8:	48 85 c0             	test   %rax,%rax
ffffffff802195fb:	74 21                	je     ffffffff8021961e <_RME_Sig_Rcv+0x2ee>
ffffffff802195fd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219604:	e9 c0 01 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
        }
        default:
        {
            RME_COV_MARKER();
            
            return RME_ERR_SIV_ACT;
ffffffff80219609:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff80219610:	e9 b4 01 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
            break;
ffffffff80219615:	90                   	nop
ffffffff80219616:	eb 07                	jmp    ffffffff8021961f <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff80219618:	90                   	nop
ffffffff80219619:	eb 04                	jmp    ffffffff8021961f <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff8021961b:	90                   	nop
ffffffff8021961c:	eb 01                	jmp    ffffffff8021961f <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff8021961e:	90                   	nop
        }
    }
    
    /* Convert to root cap */
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff8021961f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219623:	48 8b 00             	mov    (%rax),%rax
ffffffff80219626:	89 c0                	mov    %eax,%eax
ffffffff80219628:	48 85 c0             	test   %rax,%rax
ffffffff8021962b:	74 0a                	je     ffffffff80219637 <_RME_Sig_Rcv+0x307>
ffffffff8021962d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219631:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219635:	eb 04                	jmp    ffffffff8021963b <_RME_Sig_Rcv+0x30b>
ffffffff80219637:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021963b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* See if we can receive on that endpoint - if someone blocks on it, we 
     * must wait for it to unblock before we can proceed. */
    if(Sig_Root->Thd!=(void*)RME_NULL)
ffffffff8021963f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219643:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80219647:	48 85 c0             	test   %rax,%rax
ffffffff8021964a:	74 0c                	je     ffffffff80219658 <_RME_Sig_Rcv+0x328>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021964c:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff80219653:	e9 71 01 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    Local=RME_CPU_LOCAL();
ffffffff80219658:	e8 e2 21 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021965d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff80219661:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219665:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219669:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    
    /* Check if we trying to let a boot-time thread block on a signal, which is
     * disallowed. Additionally, if the current thread have no timeslice left
     * (which shouldn't happen under any circumstances), we assert and die. */
    RME_ASSERT(Thd_Cur->Sched.Slice!=0U);
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff8021966d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219671:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80219675:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff8021967c:	ff ff 7f 
ffffffff8021967f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219682:	75 0c                	jne    ffffffff80219690 <_RME_Sig_Rcv+0x360>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_BOOT;
ffffffff80219684:	48 c7 c0 cd fe ff ff 	mov    $0xfffffffffffffecd,%rax
ffffffff8021968b:	e9 39 01 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check if there are signals available */
    Old_Value=Sig_Root->Sig_Num;
ffffffff80219690:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219694:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219698:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Old_Value>0U)
ffffffff8021969c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff802196a1:	0f 84 9b 00 00 00    	je     ffffffff80219742 <_RME_Sig_Rcv+0x412>
    {
        RME_COV_MARKER();

        /* Can't use faa, other cores may reduce count to zero in the meantime */
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
ffffffff802196a7:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802196ac:	74 07                	je     ffffffff802196b5 <_RME_Sig_Rcv+0x385>
ffffffff802196ae:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff802196b3:	75 43                	jne    ffffffff802196f8 <_RME_Sig_Rcv+0x3c8>
        {
            RME_COV_MARKER();

            /* Try to take one */
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802196b5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802196b9:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff802196bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802196c1:	48 8d 48 28          	lea    0x28(%rax),%rcx
ffffffff802196c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802196c9:	48 89 c6             	mov    %rax,%rsi
ffffffff802196cc:	48 89 cf             	mov    %rcx,%rdi
ffffffff802196cf:	e8 8a 30 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802196d4:	48 85 c0             	test   %rax,%rax
ffffffff802196d7:	75 0c                	jne    ffffffff802196e5 <_RME_Sig_Rcv+0x3b5>
                             Old_Value,
                             Old_Value-1U)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff802196d9:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff802196e0:	e9 e4 00 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* We have taken it, now return what we have taken */
            __RME_Svc_Retval_Set(Reg,1);
ffffffff802196e5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802196e9:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802196ee:	48 89 c7             	mov    %rax,%rdi
ffffffff802196f1:	e8 ec d9 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff802196f6:	eb 40                	jmp    ffffffff80219738 <_RME_Sig_Rcv+0x408>
        else
        {
            RME_COV_MARKER();

            /* Try to take all */
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff802196f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802196fc:	48 8d 48 28          	lea    0x28(%rax),%rcx
ffffffff80219700:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219704:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80219709:	48 89 c6             	mov    %rax,%rsi
ffffffff8021970c:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021970f:	e8 4a 30 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80219714:	48 85 c0             	test   %rax,%rax
ffffffff80219717:	75 0c                	jne    ffffffff80219725 <_RME_Sig_Rcv+0x3f5>
                             Old_Value,
                             0U)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff80219719:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff80219720:	e9 a4 00 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* We have taken all, now return what we have taken */
            __RME_Svc_Retval_Set(Reg,(rme_ret_t)Old_Value);
ffffffff80219725:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80219729:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021972d:	48 89 d6             	mov    %rdx,%rsi
ffffffff80219730:	48 89 c7             	mov    %rax,%rdi
ffffffff80219733:	e8 aa d9 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
        }
        
        return 0;
ffffffff80219738:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021973d:	e9 87 00 00 00       	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
    else
    {
        RME_COV_MARKER();

        /* There's no value, try to block */
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
ffffffff80219742:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80219747:	74 07                	je     ffffffff80219750 <_RME_Sig_Rcv+0x420>
ffffffff80219749:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
ffffffff8021974e:	75 63                	jne    ffffffff802197b3 <_RME_Sig_Rcv+0x483>
        {
            RME_COV_MARKER();

            if(RME_COMP_SWAP((rme_ptr_t*)&(Sig_Root->Thd),
ffffffff80219750:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219754:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80219758:	48 8d 4a 30          	lea    0x30(%rdx),%rcx
ffffffff8021975c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021975f:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219764:	48 89 cf             	mov    %rcx,%rdi
ffffffff80219767:	e8 f2 2f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021976c:	48 85 c0             	test   %rax,%rax
ffffffff8021976f:	75 09                	jne    ffffffff8021977a <_RME_Sig_Rcv+0x44a>
                             RME_NULL,
                             (rme_ptr_t)Thd_Cur)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff80219771:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff80219778:	eb 4f                	jmp    ffffffff802197c9 <_RME_Sig_Rcv+0x499>
            /* Now we block our current thread. No need to set any return value
             * to the register set here, because we do not yet know how many
             * signals will be there when the thread unblocks. The unblocking
             * does not need an option so we don't keep that; we always treat
             * it as single receive when we unblock anyway. */
            Thd_Cur->Sched.Signal=Sig_Root;
ffffffff8021977a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021977e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80219782:	48 89 50 50          	mov    %rdx,0x50(%rax)
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
ffffffff80219786:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021978a:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff80219791:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80219792:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219796:	48 89 c7             	mov    %rax,%rdi
ffffffff80219799:	e8 81 96 ff ff       	call   ffffffff80212e1f <_RME_Run_Del>
            
            /* Pick the highest priority thread to run */
            _RME_Kern_High(Reg,Local);
ffffffff8021979e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802197a2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802197a6:	48 89 d6             	mov    %rdx,%rsi
ffffffff802197a9:	48 89 c7             	mov    %rax,%rdi
ffffffff802197ac:	e8 6e f6 ff ff       	call   ffffffff80218e1f <_RME_Kern_High>
ffffffff802197b1:	eb 11                	jmp    ffffffff802197c4 <_RME_Sig_Rcv+0x494>
        else
        {
            RME_COV_MARKER();

            /* We have taken nothing but the system call is successful anyway */
            __RME_Svc_Retval_Set(Reg,0);
ffffffff802197b3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802197b7:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802197bc:	48 89 c7             	mov    %rax,%rdi
ffffffff802197bf:	e8 1e d9 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
        }
    }
    
    return 0;
ffffffff802197c4:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802197c9:	c9                   	leave
ffffffff802197ca:	c3                   	ret

ffffffff802197cb <_RME_Inv_Crt>:
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Kom,
                              rme_cid_t Cap_Inv,
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Raddr)
{
ffffffff802197cb:	f3 0f 1e fa          	endbr64
ffffffff802197cf:	55                   	push   %rbp
ffffffff802197d0:	48 89 e5             	mov    %rsp,%rbp
ffffffff802197d3:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff802197d7:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802197db:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802197df:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff802197e3:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff802197e7:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
ffffffff802197eb:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    struct RME_Inv_Struct* Invocation;
    rme_ptr_t Type_Stat;
    rme_ptr_t Vaddr;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802197ef:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802197f3:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802197f8:	48 85 c0             	test   %rax,%rax
ffffffff802197fb:	0f 85 98 00 00 00    	jne    ffffffff80219899 <_RME_Inv_Crt+0xce>
ffffffff80219801:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219805:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219809:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8021980d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219810:	0f 93 c0             	setae  %al
ffffffff80219813:	0f b6 c0             	movzbl %al,%eax
ffffffff80219816:	48 85 c0             	test   %rax,%rax
ffffffff80219819:	74 0c                	je     ffffffff80219827 <_RME_Inv_Crt+0x5c>
ffffffff8021981b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219822:	e9 df 07 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219827:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021982b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021982f:	48 89 c2             	mov    %rax,%rdx
ffffffff80219832:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219836:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021983a:	48 01 d0             	add    %rdx,%rax
ffffffff8021983d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219841:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219845:	48 8b 00             	mov    (%rax),%rax
ffffffff80219848:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021984c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219850:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219854:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219857:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021985b:	0f 94 c0             	sete   %al
ffffffff8021985e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219861:	48 85 c0             	test   %rax,%rax
ffffffff80219864:	74 0c                	je     ffffffff80219872 <_RME_Inv_Crt+0xa7>
ffffffff80219866:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021986d:	e9 94 07 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219872:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219876:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021987a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021987e:	0f 95 c0             	setne  %al
ffffffff80219881:	0f b6 c0             	movzbl %al,%eax
ffffffff80219884:	48 85 c0             	test   %rax,%rax
ffffffff80219887:	0f 84 4c 01 00 00    	je     ffffffff802199d9 <_RME_Inv_Crt+0x20e>
ffffffff8021988d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219894:	e9 6d 07 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219899:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021989d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802198a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802198a4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802198a8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802198ac:	48 39 c2             	cmp    %rax,%rdx
ffffffff802198af:	0f 93 c0             	setae  %al
ffffffff802198b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802198b5:	48 85 c0             	test   %rax,%rax
ffffffff802198b8:	74 0c                	je     ffffffff802198c6 <_RME_Inv_Crt+0xfb>
ffffffff802198ba:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802198c1:	e9 40 07 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff802198c6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802198ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802198ce:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802198d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802198d5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802198d9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802198dd:	48 01 d0             	add    %rdx,%rax
ffffffff802198e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802198e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802198e8:	48 8b 00             	mov    (%rax),%rax
ffffffff802198eb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802198ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802198f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802198f7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802198fa:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802198fe:	0f 94 c0             	sete   %al
ffffffff80219901:	0f b6 c0             	movzbl %al,%eax
ffffffff80219904:	48 85 c0             	test   %rax,%rax
ffffffff80219907:	74 0c                	je     ffffffff80219915 <_RME_Inv_Crt+0x14a>
ffffffff80219909:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219910:	e9 f1 06 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219915:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219919:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021991d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219921:	0f 95 c0             	setne  %al
ffffffff80219924:	0f b6 c0             	movzbl %al,%eax
ffffffff80219927:	48 85 c0             	test   %rax,%rax
ffffffff8021992a:	74 0c                	je     ffffffff80219938 <_RME_Inv_Crt+0x16d>
ffffffff8021992c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219933:	e9 ce 06 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219938:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021993c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219941:	48 89 c2             	mov    %rax,%rdx
ffffffff80219944:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219948:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021994c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021994f:	0f 93 c0             	setae  %al
ffffffff80219952:	0f b6 c0             	movzbl %al,%eax
ffffffff80219955:	48 85 c0             	test   %rax,%rax
ffffffff80219958:	74 0c                	je     ffffffff80219966 <_RME_Inv_Crt+0x19b>
ffffffff8021995a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219961:	e9 a0 06 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219966:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021996a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021996f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219973:	48 89 c2             	mov    %rax,%rdx
ffffffff80219976:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021997a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021997e:	48 01 d0             	add    %rdx,%rax
ffffffff80219981:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219985:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219989:	48 8b 00             	mov    (%rax),%rax
ffffffff8021998c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219990:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219994:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219998:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021999b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021999f:	0f 94 c0             	sete   %al
ffffffff802199a2:	0f b6 c0             	movzbl %al,%eax
ffffffff802199a5:	48 85 c0             	test   %rax,%rax
ffffffff802199a8:	74 0c                	je     ffffffff802199b6 <_RME_Inv_Crt+0x1eb>
ffffffff802199aa:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802199b1:	e9 50 06 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff802199b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802199ba:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802199be:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802199c2:	0f 95 c0             	setne  %al
ffffffff802199c5:	0f b6 c0             	movzbl %al,%eax
ffffffff802199c8:	48 85 c0             	test   %rax,%rax
ffffffff802199cb:	74 0c                	je     ffffffff802199d9 <_RME_Inv_Crt+0x20e>
ffffffff802199cd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802199d4:	e9 2d 06 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff802199d9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802199dd:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802199e2:	48 85 c0             	test   %rax,%rax
ffffffff802199e5:	0f 85 98 00 00 00    	jne    ffffffff80219a83 <_RME_Inv_Crt+0x2b8>
ffffffff802199eb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802199ef:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802199f3:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff802199f7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802199fa:	0f 93 c0             	setae  %al
ffffffff802199fd:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a00:	48 85 c0             	test   %rax,%rax
ffffffff80219a03:	74 0c                	je     ffffffff80219a11 <_RME_Inv_Crt+0x246>
ffffffff80219a05:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219a0c:	e9 f5 05 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219a11:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219a15:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219a19:	48 89 c2             	mov    %rax,%rdx
ffffffff80219a1c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219a20:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219a24:	48 01 d0             	add    %rdx,%rax
ffffffff80219a27:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219a2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219a2f:	48 8b 00             	mov    (%rax),%rax
ffffffff80219a32:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219a36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219a3a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219a3e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219a41:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219a45:	0f 94 c0             	sete   %al
ffffffff80219a48:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a4b:	48 85 c0             	test   %rax,%rax
ffffffff80219a4e:	74 0c                	je     ffffffff80219a5c <_RME_Inv_Crt+0x291>
ffffffff80219a50:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219a57:	e9 aa 05 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219a5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219a60:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219a64:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80219a68:	0f 95 c0             	setne  %al
ffffffff80219a6b:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a6e:	48 85 c0             	test   %rax,%rax
ffffffff80219a71:	0f 84 4c 01 00 00    	je     ffffffff80219bc3 <_RME_Inv_Crt+0x3f8>
ffffffff80219a77:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219a7e:	e9 83 05 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219a83:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219a87:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219a8b:	48 89 c2             	mov    %rax,%rdx
ffffffff80219a8e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219a92:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219a96:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219a99:	0f 93 c0             	setae  %al
ffffffff80219a9c:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a9f:	48 85 c0             	test   %rax,%rax
ffffffff80219aa2:	74 0c                	je     ffffffff80219ab0 <_RME_Inv_Crt+0x2e5>
ffffffff80219aa4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219aab:	e9 56 05 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219ab0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219ab4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219ab8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219abc:	48 89 c2             	mov    %rax,%rdx
ffffffff80219abf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219ac3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219ac7:	48 01 d0             	add    %rdx,%rax
ffffffff80219aca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219ace:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219ad2:	48 8b 00             	mov    (%rax),%rax
ffffffff80219ad5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219ad9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219add:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219ae1:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219ae4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219ae8:	0f 94 c0             	sete   %al
ffffffff80219aeb:	0f b6 c0             	movzbl %al,%eax
ffffffff80219aee:	48 85 c0             	test   %rax,%rax
ffffffff80219af1:	74 0c                	je     ffffffff80219aff <_RME_Inv_Crt+0x334>
ffffffff80219af3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219afa:	e9 07 05 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219aff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219b03:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219b07:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219b0b:	0f 95 c0             	setne  %al
ffffffff80219b0e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b11:	48 85 c0             	test   %rax,%rax
ffffffff80219b14:	74 0c                	je     ffffffff80219b22 <_RME_Inv_Crt+0x357>
ffffffff80219b16:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219b1d:	e9 e4 04 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219b22:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219b26:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219b2b:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219b32:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219b36:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219b39:	0f 93 c0             	setae  %al
ffffffff80219b3c:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b3f:	48 85 c0             	test   %rax,%rax
ffffffff80219b42:	74 0c                	je     ffffffff80219b50 <_RME_Inv_Crt+0x385>
ffffffff80219b44:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219b4b:	e9 b6 04 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219b50:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219b54:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219b59:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219b5d:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219b64:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219b68:	48 01 d0             	add    %rdx,%rax
ffffffff80219b6b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219b6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219b73:	48 8b 00             	mov    (%rax),%rax
ffffffff80219b76:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219b7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219b7e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219b82:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219b85:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219b89:	0f 94 c0             	sete   %al
ffffffff80219b8c:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b8f:	48 85 c0             	test   %rax,%rax
ffffffff80219b92:	74 0c                	je     ffffffff80219ba0 <_RME_Inv_Crt+0x3d5>
ffffffff80219b94:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219b9b:	e9 66 04 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219ba0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219ba4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219ba8:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80219bac:	0f 95 c0             	setne  %al
ffffffff80219baf:	0f b6 c0             	movzbl %al,%eax
ffffffff80219bb2:	48 85 c0             	test   %rax,%rax
ffffffff80219bb5:	74 0c                	je     ffffffff80219bc3 <_RME_Inv_Crt+0x3f8>
ffffffff80219bb7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219bbe:	e9 43 04 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80219bc3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219bc7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219bcc:	48 85 c0             	test   %rax,%rax
ffffffff80219bcf:	0f 85 98 00 00 00    	jne    ffffffff80219c6d <_RME_Inv_Crt+0x4a2>
ffffffff80219bd5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219bd9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219bdd:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80219be1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219be4:	0f 93 c0             	setae  %al
ffffffff80219be7:	0f b6 c0             	movzbl %al,%eax
ffffffff80219bea:	48 85 c0             	test   %rax,%rax
ffffffff80219bed:	74 0c                	je     ffffffff80219bfb <_RME_Inv_Crt+0x430>
ffffffff80219bef:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219bf6:	e9 0b 04 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219bfb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219bff:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219c03:	48 89 c2             	mov    %rax,%rdx
ffffffff80219c06:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219c0a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219c0e:	48 01 d0             	add    %rdx,%rax
ffffffff80219c11:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219c15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219c19:	48 8b 00             	mov    (%rax),%rax
ffffffff80219c1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219c20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219c24:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219c28:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219c2b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219c2f:	0f 94 c0             	sete   %al
ffffffff80219c32:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c35:	48 85 c0             	test   %rax,%rax
ffffffff80219c38:	74 0c                	je     ffffffff80219c46 <_RME_Inv_Crt+0x47b>
ffffffff80219c3a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219c41:	e9 c0 03 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219c46:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219c4a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219c4e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219c52:	0f 95 c0             	setne  %al
ffffffff80219c55:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c58:	48 85 c0             	test   %rax,%rax
ffffffff80219c5b:	0f 84 4c 01 00 00    	je     ffffffff80219dad <_RME_Inv_Crt+0x5e2>
ffffffff80219c61:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219c68:	e9 99 03 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219c6d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219c71:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219c75:	48 89 c2             	mov    %rax,%rdx
ffffffff80219c78:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219c7c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219c80:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219c83:	0f 93 c0             	setae  %al
ffffffff80219c86:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c89:	48 85 c0             	test   %rax,%rax
ffffffff80219c8c:	74 0c                	je     ffffffff80219c9a <_RME_Inv_Crt+0x4cf>
ffffffff80219c8e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219c95:	e9 6c 03 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219c9a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219c9e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219ca2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219ca6:	48 89 c2             	mov    %rax,%rdx
ffffffff80219ca9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219cad:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219cb1:	48 01 d0             	add    %rdx,%rax
ffffffff80219cb4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219cb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219cbc:	48 8b 00             	mov    (%rax),%rax
ffffffff80219cbf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219cc3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219cc7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219ccb:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219cce:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219cd2:	0f 94 c0             	sete   %al
ffffffff80219cd5:	0f b6 c0             	movzbl %al,%eax
ffffffff80219cd8:	48 85 c0             	test   %rax,%rax
ffffffff80219cdb:	74 0c                	je     ffffffff80219ce9 <_RME_Inv_Crt+0x51e>
ffffffff80219cdd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219ce4:	e9 1d 03 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219ce9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219ced:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219cf1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219cf5:	0f 95 c0             	setne  %al
ffffffff80219cf8:	0f b6 c0             	movzbl %al,%eax
ffffffff80219cfb:	48 85 c0             	test   %rax,%rax
ffffffff80219cfe:	74 0c                	je     ffffffff80219d0c <_RME_Inv_Crt+0x541>
ffffffff80219d00:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219d07:	e9 fa 02 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219d0c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219d10:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219d15:	48 89 c2             	mov    %rax,%rdx
ffffffff80219d18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219d1c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219d20:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219d23:	0f 93 c0             	setae  %al
ffffffff80219d26:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d29:	48 85 c0             	test   %rax,%rax
ffffffff80219d2c:	74 0c                	je     ffffffff80219d3a <_RME_Inv_Crt+0x56f>
ffffffff80219d2e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219d35:	e9 cc 02 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219d3a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219d3e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219d43:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219d47:	48 89 c2             	mov    %rax,%rdx
ffffffff80219d4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219d4e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219d52:	48 01 d0             	add    %rdx,%rax
ffffffff80219d55:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219d59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219d5d:	48 8b 00             	mov    (%rax),%rax
ffffffff80219d60:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219d64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219d68:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219d6c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219d6f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219d73:	0f 94 c0             	sete   %al
ffffffff80219d76:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d79:	48 85 c0             	test   %rax,%rax
ffffffff80219d7c:	74 0c                	je     ffffffff80219d8a <_RME_Inv_Crt+0x5bf>
ffffffff80219d7e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219d85:	e9 7c 02 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219d8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219d8e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219d92:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219d96:	0f 95 c0             	setne  %al
ffffffff80219d99:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d9c:	48 85 c0             	test   %rax,%rax
ffffffff80219d9f:	74 0c                	je     ffffffff80219dad <_RME_Inv_Crt+0x5e2>
ffffffff80219da1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219da8:	e9 59 02 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80219dad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219db1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219db5:	83 e0 01             	and    $0x1,%eax
ffffffff80219db8:	48 85 c0             	test   %rax,%rax
ffffffff80219dbb:	0f 94 c0             	sete   %al
ffffffff80219dbe:	0f b6 c0             	movzbl %al,%eax
ffffffff80219dc1:	48 85 c0             	test   %rax,%rax
ffffffff80219dc4:	74 0c                	je     ffffffff80219dd2 <_RME_Inv_Crt+0x607>
ffffffff80219dc6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219dcd:	e9 34 02 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
ffffffff80219dd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219dd6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219dda:	83 e0 01             	and    $0x1,%eax
ffffffff80219ddd:	48 85 c0             	test   %rax,%rax
ffffffff80219de0:	0f 94 c0             	sete   %al
ffffffff80219de3:	0f b6 c0             	movzbl %al,%eax
ffffffff80219de6:	48 85 c0             	test   %rax,%rax
ffffffff80219de9:	74 0c                	je     ffffffff80219df7 <_RME_Inv_Crt+0x62c>
ffffffff80219deb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219df2:	e9 0f 02 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff80219df7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219dfb:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219dff:	83 e0 08             	and    $0x8,%eax
ffffffff80219e02:	48 85 c0             	test   %rax,%rax
ffffffff80219e05:	0f 94 c0             	sete   %al
ffffffff80219e08:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e0b:	48 85 c0             	test   %rax,%rax
ffffffff80219e0e:	74 0c                	je     ffffffff80219e1c <_RME_Inv_Crt+0x651>
ffffffff80219e10:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e17:	e9 ea 01 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219e1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219e20:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80219e24:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80219e28:	48 01 d0             	add    %rdx,%rax
ffffffff80219e2b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80219e2f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219e33:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
ffffffff80219e37:	0f 92 c0             	setb   %al
ffffffff80219e3a:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e3d:	48 85 c0             	test   %rax,%rax
ffffffff80219e40:	74 0c                	je     ffffffff80219e4e <_RME_Inv_Crt+0x683>
ffffffff80219e42:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e49:	e9 b8 01 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219e4e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219e52:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219e56:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80219e5a:	0f 92 c0             	setb   %al
ffffffff80219e5d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e60:	48 85 c0             	test   %rax,%rax
ffffffff80219e63:	74 0c                	je     ffffffff80219e71 <_RME_Inv_Crt+0x6a6>
ffffffff80219e65:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e6c:	e9 95 01 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219e71:	48 83 7d d8 b7       	cmpq   $0xffffffffffffffb7,-0x28(%rbp)
ffffffff80219e76:	0f 97 c0             	seta   %al
ffffffff80219e79:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e7c:	48 85 c0             	test   %rax,%rax
ffffffff80219e7f:	74 0c                	je     ffffffff80219e8d <_RME_Inv_Crt+0x6c2>
ffffffff80219e81:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e88:	e9 79 01 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219e8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219e91:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80219e95:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219e99:	48 83 c0 47          	add    $0x47,%rax
ffffffff80219e9d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219ea0:	0f 92 c0             	setb   %al
ffffffff80219ea3:	0f b6 c0             	movzbl %al,%eax
ffffffff80219ea6:	48 85 c0             	test   %rax,%rax
ffffffff80219ea9:	74 0c                	je     ffffffff80219eb7 <_RME_Inv_Crt+0x6ec>
ffffffff80219eab:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219eb2:	e9 4f 01 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff80219eb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219ebb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219ebf:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80219ec3:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219ec6:	0f 93 c0             	setae  %al
ffffffff80219ec9:	0f b6 c0             	movzbl %al,%eax
ffffffff80219ecc:	48 85 c0             	test   %rax,%rax
ffffffff80219ecf:	74 0c                	je     ffffffff80219edd <_RME_Inv_Crt+0x712>
ffffffff80219ed1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219ed8:	e9 29 01 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219edd:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80219ee1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219ee5:	48 89 c2             	mov    %rax,%rdx
ffffffff80219ee8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219eec:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219ef0:	48 01 d0             	add    %rdx,%rax
ffffffff80219ef3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff80219ef7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219efb:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80219f02:	00 00 00 
ffffffff80219f05:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219f0a:	48 89 c7             	mov    %rax,%rdi
ffffffff80219f0d:	e8 4c 28 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80219f12:	48 85 c0             	test   %rax,%rax
ffffffff80219f15:	0f 94 c0             	sete   %al
ffffffff80219f18:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f1b:	48 85 c0             	test   %rax,%rax
ffffffff80219f1e:	74 0c                	je     ffffffff80219f2c <_RME_Inv_Crt+0x761>
ffffffff80219f20:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80219f27:	e9 da 00 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
ffffffff80219f2c:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80219f31:	e8 db 28 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff80219f36:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80219f3a:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff80219f3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219f42:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff80219f47:	48 89 c7             	mov    %rax,%rdi
ffffffff80219f4a:	e8 f3 83 ff ff       	call   ffffffff80212342 <_RME_Kot_Mark>
ffffffff80219f4f:	48 85 c0             	test   %rax,%rax
ffffffff80219f52:	74 17                	je     ffffffff80219f6b <_RME_Inv_Crt+0x7a0>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
ffffffff80219f54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219f58:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80219f5f:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80219f66:	e9 9b 00 00 00       	jmp    ffffffff8021a006 <_RME_Inv_Crt+0x83b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Object init */
    Invocation=(struct RME_Inv_Struct*)Vaddr;
ffffffff80219f6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219f6f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80219f73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219f77:	48 8b 00             	mov    (%rax),%rax
ffffffff80219f7a:	89 c0                	mov    %eax,%eax
ffffffff80219f7c:	48 85 c0             	test   %rax,%rax
ffffffff80219f7f:	74 0a                	je     ffffffff80219f8b <_RME_Inv_Crt+0x7c0>
ffffffff80219f81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219f85:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219f89:	eb 04                	jmp    ffffffff80219f8f <_RME_Inv_Crt+0x7c4>
ffffffff80219f8b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219f8f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    Invocation->Prc=Prc_Root;
ffffffff80219f93:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219f97:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80219f9b:	48 89 50 10          	mov    %rdx,0x10(%rax)
    Invocation->Thd_Act=RME_NULL;
ffffffff80219f9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219fa3:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80219faa:	00 
    /* By default we do not return on exception */
    Invocation->Is_Exc_Ret=0U;
ffffffff80219fab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219faf:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80219fb6:	00 
    
    /* Header init */
    Inv_Crt->Head.Root_Ref=0U;
ffffffff80219fb7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219fbb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80219fc2:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff80219fc3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219fc7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80219fcb:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
ffffffff80219fcf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219fd3:	48 c7 40 10 03 00 00 	movq   $0x3,0x10(%rax)
ffffffff80219fda:	00 
    
    /* Reference object */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref),1U);
ffffffff80219fdb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219fdf:	48 83 c0 08          	add    $0x8,%rax
ffffffff80219fe3:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219fe8:	48 89 c7             	mov    %rax,%rdi
ffffffff80219feb:	e8 a3 27 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
ffffffff80219ff0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219ff4:	48 b9 00 00 00 00 00 	movabs $0x7000000000000,%rcx
ffffffff80219ffb:	00 07 00 
ffffffff80219ffe:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_INV,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021a001:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a006:	c9                   	leave
ffffffff8021a007:	c3                   	ret

ffffffff8021a008 <_RME_Inv_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Inv)
{
ffffffff8021a008:	f3 0f 1e fa          	endbr64
ffffffff8021a00c:	55                   	push   %rbp
ffffffff8021a00d:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a010:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021a014:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021a018:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021a01c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Type_Stat;
    /* These are for deletion */
    struct RME_Inv_Struct* Invocation;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021a020:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a024:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a029:	48 85 c0             	test   %rax,%rax
ffffffff8021a02c:	0f 85 98 00 00 00    	jne    ffffffff8021a0ca <_RME_Inv_Del+0xc2>
ffffffff8021a032:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a036:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a03a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021a03e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a041:	0f 93 c0             	setae  %al
ffffffff8021a044:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a047:	48 85 c0             	test   %rax,%rax
ffffffff8021a04a:	74 0c                	je     ffffffff8021a058 <_RME_Inv_Del+0x50>
ffffffff8021a04c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a053:	e9 a0 03 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a058:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a05c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a060:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a063:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a067:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a06b:	48 01 d0             	add    %rdx,%rax
ffffffff8021a06e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a072:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a076:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a079:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a07d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a081:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a085:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a088:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a08c:	0f 94 c0             	sete   %al
ffffffff8021a08f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a092:	48 85 c0             	test   %rax,%rax
ffffffff8021a095:	74 0c                	je     ffffffff8021a0a3 <_RME_Inv_Del+0x9b>
ffffffff8021a097:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a09e:	e9 55 03 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a0a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a0a7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a0ab:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a0af:	0f 95 c0             	setne  %al
ffffffff8021a0b2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a0b5:	48 85 c0             	test   %rax,%rax
ffffffff8021a0b8:	0f 84 4c 01 00 00    	je     ffffffff8021a20a <_RME_Inv_Del+0x202>
ffffffff8021a0be:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a0c5:	e9 2e 03 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a0ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0ce:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a0d2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a0d5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a0d9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a0dd:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a0e0:	0f 93 c0             	setae  %al
ffffffff8021a0e3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a0e6:	48 85 c0             	test   %rax,%rax
ffffffff8021a0e9:	74 0c                	je     ffffffff8021a0f7 <_RME_Inv_Del+0xef>
ffffffff8021a0eb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a0f2:	e9 01 03 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a0f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0fb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a0ff:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a103:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a106:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a10a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a10e:	48 01 d0             	add    %rdx,%rax
ffffffff8021a111:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a115:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a119:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a11c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a120:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a124:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a128:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a12b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a12f:	0f 94 c0             	sete   %al
ffffffff8021a132:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a135:	48 85 c0             	test   %rax,%rax
ffffffff8021a138:	74 0c                	je     ffffffff8021a146 <_RME_Inv_Del+0x13e>
ffffffff8021a13a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a141:	e9 b2 02 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a146:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a14a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a14e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a152:	0f 95 c0             	setne  %al
ffffffff8021a155:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a158:	48 85 c0             	test   %rax,%rax
ffffffff8021a15b:	74 0c                	je     ffffffff8021a169 <_RME_Inv_Del+0x161>
ffffffff8021a15d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a164:	e9 8f 02 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a169:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a16d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a172:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a175:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a179:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a17d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a180:	0f 93 c0             	setae  %al
ffffffff8021a183:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a186:	48 85 c0             	test   %rax,%rax
ffffffff8021a189:	74 0c                	je     ffffffff8021a197 <_RME_Inv_Del+0x18f>
ffffffff8021a18b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a192:	e9 61 02 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a197:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a19b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a1a0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a1a4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a1a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a1ab:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a1af:	48 01 d0             	add    %rdx,%rax
ffffffff8021a1b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a1b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a1ba:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a1bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a1c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a1c5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a1c9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a1cc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a1d0:	0f 94 c0             	sete   %al
ffffffff8021a1d3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1d6:	48 85 c0             	test   %rax,%rax
ffffffff8021a1d9:	74 0c                	je     ffffffff8021a1e7 <_RME_Inv_Del+0x1df>
ffffffff8021a1db:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a1e2:	e9 11 02 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a1e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a1eb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a1ef:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a1f3:	0f 95 c0             	setne  %al
ffffffff8021a1f6:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1f9:	48 85 c0             	test   %rax,%rax
ffffffff8021a1fc:	74 0c                	je     ffffffff8021a20a <_RME_Inv_Del+0x202>
ffffffff8021a1fe:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a205:	e9 ee 01 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021a20a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a20e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a212:	83 e0 02             	and    $0x2,%eax
ffffffff8021a215:	48 85 c0             	test   %rax,%rax
ffffffff8021a218:	0f 94 c0             	sete   %al
ffffffff8021a21b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a21e:	48 85 c0             	test   %rax,%rax
ffffffff8021a221:	74 0c                	je     ffffffff8021a22f <_RME_Inv_Del+0x227>
ffffffff8021a223:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a22a:	e9 c9 01 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff8021a22f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a233:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a237:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021a23b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a23e:	0f 93 c0             	setae  %al
ffffffff8021a241:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a244:	48 85 c0             	test   %rax,%rax
ffffffff8021a247:	74 0c                	je     ffffffff8021a255 <_RME_Inv_Del+0x24d>
ffffffff8021a249:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a250:	e9 a3 01 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a255:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a259:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a25d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a260:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a264:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a268:	48 01 d0             	add    %rdx,%rax
ffffffff8021a26b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8021a26f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a273:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a276:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a27a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a27e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a282:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a285:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a289:	0f 95 c0             	setne  %al
ffffffff8021a28c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a28f:	48 85 c0             	test   %rax,%rax
ffffffff8021a292:	74 0c                	je     ffffffff8021a2a0 <_RME_Inv_Del+0x298>
ffffffff8021a294:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a29b:	e9 58 01 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a2a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a2a4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a2a8:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a2ac:	0f 95 c0             	setne  %al
ffffffff8021a2af:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a2b2:	48 85 c0             	test   %rax,%rax
ffffffff8021a2b5:	74 0c                	je     ffffffff8021a2c3 <_RME_Inv_Del+0x2bb>
ffffffff8021a2b7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a2be:	e9 35 01 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a2c3:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021a2c8:	e8 44 25 ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8021a2cd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a2d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a2d4:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021a2d8:	48 29 c2             	sub    %rax,%rdx
ffffffff8021a2db:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021a2df:	0f 96 c0             	setbe  %al
ffffffff8021a2e2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a2e5:	48 98                	cltq
ffffffff8021a2e7:	48 85 c0             	test   %rax,%rax
ffffffff8021a2ea:	74 0c                	je     ffffffff8021a2f8 <_RME_Inv_Del+0x2f0>
ffffffff8021a2ec:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8021a2f3:	e9 00 01 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
ffffffff8021a2f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a2fc:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a300:	48 85 c0             	test   %rax,%rax
ffffffff8021a303:	0f 95 c0             	setne  %al
ffffffff8021a306:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a309:	48 85 c0             	test   %rax,%rax
ffffffff8021a30c:	74 44                	je     ffffffff8021a352 <_RME_Inv_Del+0x34a>
ffffffff8021a30e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a312:	89 c0                	mov    %eax,%eax
ffffffff8021a314:	48 85 c0             	test   %rax,%rax
ffffffff8021a317:	0f 94 c0             	sete   %al
ffffffff8021a31a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a31d:	48 85 c0             	test   %rax,%rax
ffffffff8021a320:	74 24                	je     ffffffff8021a346 <_RME_Inv_Del+0x33e>
ffffffff8021a322:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021a329:	00 ff ff 
ffffffff8021a32c:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021a330:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a333:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a337:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a33b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a33e:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a341:	e8 18 24 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a346:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021a34d:	e9 a6 00 00 00       	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
    
    /* Get the invocation */
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff8021a352:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a356:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a35a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* See if the invocation is currently being used. If yes, we cannot delete it */
    if(Invocation->Thd_Act!=(void*)RME_NULL)
ffffffff8021a35e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a362:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a366:	48 85 c0             	test   %rax,%rax
ffffffff8021a369:	74 2d                	je     ffffffff8021a398 <_RME_Inv_Del+0x390>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Inv_Del,Type_Stat);
ffffffff8021a36b:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021a372:	00 ff ff 
ffffffff8021a375:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021a379:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a37c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a380:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a384:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a387:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a38a:	e8 cf 23 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff8021a38f:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a396:	eb 60                	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff8021a398:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a39c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a3a0:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8021a3a5:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a3a8:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a3ab:	e8 ae 23 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a3b0:	48 85 c0             	test   %rax,%rax
ffffffff8021a3b3:	0f 94 c0             	sete   %al
ffffffff8021a3b6:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a3b9:	48 85 c0             	test   %rax,%rax
ffffffff8021a3bc:	74 09                	je     ffffffff8021a3c7 <_RME_Inv_Del+0x3bf>
ffffffff8021a3be:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021a3c5:	eb 31                	jmp    ffffffff8021a3f8 <_RME_Inv_Del+0x3f0>
    
    /* Dereference the process */
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
ffffffff8021a3c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a3cb:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a3cf:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021a3d3:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021a3da:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a3dd:	e8 b1 23 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Try to clear the area - this must be successful */
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
ffffffff8021a3e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a3e6:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021a3eb:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a3ee:	e8 96 82 ff ff       	call   ffffffff80212689 <_RME_Kot_Erase>
    
    return 0;
ffffffff8021a3f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a3f8:	c9                   	leave
ffffffff8021a3f9:	c3                   	ret

ffffffff8021a3fa <_RME_Inv_Set>:
static rme_ret_t _RME_Inv_Set(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Inv,
                              rme_ptr_t Entry,
                              rme_ptr_t Stack,
                              rme_ptr_t Is_Exc_Ret)
{
ffffffff8021a3fa:	f3 0f 1e fa          	endbr64
ffffffff8021a3fe:	55                   	push   %rbp
ffffffff8021a3ff:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a402:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8021a406:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021a40a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021a40e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8021a412:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8021a416:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Inv* Inv_Op;
    volatile struct RME_Inv_Struct* Invocation;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021a41a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a41e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a423:	48 85 c0             	test   %rax,%rax
ffffffff8021a426:	0f 85 98 00 00 00    	jne    ffffffff8021a4c4 <_RME_Inv_Set+0xca>
ffffffff8021a42c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a430:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a434:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021a438:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a43b:	0f 93 c0             	setae  %al
ffffffff8021a43e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a441:	48 85 c0             	test   %rax,%rax
ffffffff8021a444:	74 0c                	je     ffffffff8021a452 <_RME_Inv_Set+0x58>
ffffffff8021a446:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a44d:	e9 03 02 00 00       	jmp    ffffffff8021a655 <_RME_Inv_Set+0x25b>
ffffffff8021a452:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a456:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a45a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a45d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a461:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a465:	48 01 d0             	add    %rdx,%rax
ffffffff8021a468:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a46c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a470:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a473:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a477:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a47b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a47f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a482:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a486:	0f 94 c0             	sete   %al
ffffffff8021a489:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a48c:	48 85 c0             	test   %rax,%rax
ffffffff8021a48f:	74 0c                	je     ffffffff8021a49d <_RME_Inv_Set+0xa3>
ffffffff8021a491:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a498:	e9 b8 01 00 00       	jmp    ffffffff8021a655 <_RME_Inv_Set+0x25b>
ffffffff8021a49d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a4a1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a4a5:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a4a9:	0f 95 c0             	setne  %al
ffffffff8021a4ac:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a4af:	48 85 c0             	test   %rax,%rax
ffffffff8021a4b2:	0f 84 46 01 00 00    	je     ffffffff8021a5fe <_RME_Inv_Set+0x204>
ffffffff8021a4b8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a4bf:	e9 91 01 00 00       	jmp    ffffffff8021a655 <_RME_Inv_Set+0x25b>
ffffffff8021a4c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a4c8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a4cc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a4cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a4d3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a4d7:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a4da:	0f 93 c0             	setae  %al
ffffffff8021a4dd:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a4e0:	48 85 c0             	test   %rax,%rax
ffffffff8021a4e3:	74 0c                	je     ffffffff8021a4f1 <_RME_Inv_Set+0xf7>
ffffffff8021a4e5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a4ec:	e9 64 01 00 00       	jmp    ffffffff8021a655 <_RME_Inv_Set+0x25b>
ffffffff8021a4f1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a4f5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a4f9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a4fd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a500:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a504:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a508:	48 01 d0             	add    %rdx,%rax
ffffffff8021a50b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a50f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a513:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a516:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a51a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a51e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a522:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a525:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a529:	0f 94 c0             	sete   %al
ffffffff8021a52c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a52f:	48 85 c0             	test   %rax,%rax
ffffffff8021a532:	74 0c                	je     ffffffff8021a540 <_RME_Inv_Set+0x146>
ffffffff8021a534:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a53b:	e9 15 01 00 00       	jmp    ffffffff8021a655 <_RME_Inv_Set+0x25b>
ffffffff8021a540:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a544:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a548:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a54c:	0f 95 c0             	setne  %al
ffffffff8021a54f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a552:	48 85 c0             	test   %rax,%rax
ffffffff8021a555:	74 0c                	je     ffffffff8021a563 <_RME_Inv_Set+0x169>
ffffffff8021a557:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a55e:	e9 f2 00 00 00       	jmp    ffffffff8021a655 <_RME_Inv_Set+0x25b>
ffffffff8021a563:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a567:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a56c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a56f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a573:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a577:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a57a:	0f 93 c0             	setae  %al
ffffffff8021a57d:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a580:	48 85 c0             	test   %rax,%rax
ffffffff8021a583:	74 0c                	je     ffffffff8021a591 <_RME_Inv_Set+0x197>
ffffffff8021a585:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a58c:	e9 c4 00 00 00       	jmp    ffffffff8021a655 <_RME_Inv_Set+0x25b>
ffffffff8021a591:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a595:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a59a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a59e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a5a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a5a5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a5a9:	48 01 d0             	add    %rdx,%rax
ffffffff8021a5ac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a5b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a5b4:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a5b7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a5bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a5bf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a5c3:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a5c6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a5ca:	0f 94 c0             	sete   %al
ffffffff8021a5cd:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a5d0:	48 85 c0             	test   %rax,%rax
ffffffff8021a5d3:	74 09                	je     ffffffff8021a5de <_RME_Inv_Set+0x1e4>
ffffffff8021a5d5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a5dc:	eb 77                	jmp    ffffffff8021a655 <_RME_Inv_Set+0x25b>
ffffffff8021a5de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a5e2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a5e6:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a5ea:	0f 95 c0             	setne  %al
ffffffff8021a5ed:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a5f0:	48 85 c0             	test   %rax,%rax
ffffffff8021a5f3:	74 09                	je     ffffffff8021a5fe <_RME_Inv_Set+0x204>
ffffffff8021a5f5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a5fc:	eb 57                	jmp    ffffffff8021a655 <_RME_Inv_Set+0x25b>
                   struct RME_Cap_Inv*,Inv_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff8021a5fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a602:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a606:	83 e0 01             	and    $0x1,%eax
ffffffff8021a609:	48 85 c0             	test   %rax,%rax
ffffffff8021a60c:	0f 94 c0             	sete   %al
ffffffff8021a60f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a612:	48 85 c0             	test   %rax,%rax
ffffffff8021a615:	74 09                	je     ffffffff8021a620 <_RME_Inv_Set+0x226>
ffffffff8021a617:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a61e:	eb 35                	jmp    ffffffff8021a655 <_RME_Inv_Set+0x25b>
    
    /* Commit the change - we do not care if the invocation is in use, it is
     * the user's responsibility to guarantee the integrity of applications */
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021a620:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a624:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a628:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Invocation->Entry=Entry;
ffffffff8021a62c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a630:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021a634:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Invocation->Stack=Stack;
ffffffff8021a638:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a63c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021a640:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
ffffffff8021a644:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a648:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021a64c:	48 89 50 30          	mov    %rdx,0x30(%rax)
    
    return 0;
ffffffff8021a650:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a655:	c9                   	leave
ffffffff8021a656:	c3                   	ret

ffffffff8021a657 <_RME_Inv_Act>:
******************************************************************************/
static rme_ret_t _RME_Inv_Act(struct RME_Cap_Cpt* Cpt, 
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Inv,
                              rme_ptr_t Param)
{
ffffffff8021a657:	f3 0f 1e fa          	endbr64
ffffffff8021a65b:	55                   	push   %rbp
ffffffff8021a65c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a65f:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021a663:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021a667:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021a66b:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021a66f:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        /* No action required */
    }
#endif

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021a673:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a677:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a67c:	48 85 c0             	test   %rax,%rax
ffffffff8021a67f:	0f 85 98 00 00 00    	jne    ffffffff8021a71d <_RME_Inv_Act+0xc6>
ffffffff8021a685:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a689:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a68d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021a691:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a694:	0f 93 c0             	setae  %al
ffffffff8021a697:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a69a:	48 85 c0             	test   %rax,%rax
ffffffff8021a69d:	74 0c                	je     ffffffff8021a6ab <_RME_Inv_Act+0x54>
ffffffff8021a69f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a6a6:	e9 fa 02 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>
ffffffff8021a6ab:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a6af:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a6b3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a6b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a6ba:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a6be:	48 01 d0             	add    %rdx,%rax
ffffffff8021a6c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a6c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a6c9:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a6cc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a6d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a6d4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a6d8:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a6db:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a6df:	0f 94 c0             	sete   %al
ffffffff8021a6e2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a6e5:	48 85 c0             	test   %rax,%rax
ffffffff8021a6e8:	74 0c                	je     ffffffff8021a6f6 <_RME_Inv_Act+0x9f>
ffffffff8021a6ea:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a6f1:	e9 af 02 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>
ffffffff8021a6f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a6fa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a6fe:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a702:	0f 95 c0             	setne  %al
ffffffff8021a705:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a708:	48 85 c0             	test   %rax,%rax
ffffffff8021a70b:	0f 84 4c 01 00 00    	je     ffffffff8021a85d <_RME_Inv_Act+0x206>
ffffffff8021a711:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a718:	e9 88 02 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>
ffffffff8021a71d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a721:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a725:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a728:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a72c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a730:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a733:	0f 93 c0             	setae  %al
ffffffff8021a736:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a739:	48 85 c0             	test   %rax,%rax
ffffffff8021a73c:	74 0c                	je     ffffffff8021a74a <_RME_Inv_Act+0xf3>
ffffffff8021a73e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a745:	e9 5b 02 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>
ffffffff8021a74a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a74e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a752:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a756:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a759:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a75d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a761:	48 01 d0             	add    %rdx,%rax
ffffffff8021a764:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a768:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a76c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a76f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a773:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a777:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a77b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a77e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a782:	0f 94 c0             	sete   %al
ffffffff8021a785:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a788:	48 85 c0             	test   %rax,%rax
ffffffff8021a78b:	74 0c                	je     ffffffff8021a799 <_RME_Inv_Act+0x142>
ffffffff8021a78d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a794:	e9 0c 02 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>
ffffffff8021a799:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a79d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a7a1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a7a5:	0f 95 c0             	setne  %al
ffffffff8021a7a8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a7ab:	48 85 c0             	test   %rax,%rax
ffffffff8021a7ae:	74 0c                	je     ffffffff8021a7bc <_RME_Inv_Act+0x165>
ffffffff8021a7b0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a7b7:	e9 e9 01 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>
ffffffff8021a7bc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a7c0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a7c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a7c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a7cc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a7d0:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a7d3:	0f 93 c0             	setae  %al
ffffffff8021a7d6:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a7d9:	48 85 c0             	test   %rax,%rax
ffffffff8021a7dc:	74 0c                	je     ffffffff8021a7ea <_RME_Inv_Act+0x193>
ffffffff8021a7de:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a7e5:	e9 bb 01 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>
ffffffff8021a7ea:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a7ee:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a7f3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a7f7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a7fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a7fe:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a802:	48 01 d0             	add    %rdx,%rax
ffffffff8021a805:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a809:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a80d:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a810:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a814:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a818:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a81c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a81f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a823:	0f 94 c0             	sete   %al
ffffffff8021a826:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a829:	48 85 c0             	test   %rax,%rax
ffffffff8021a82c:	74 0c                	je     ffffffff8021a83a <_RME_Inv_Act+0x1e3>
ffffffff8021a82e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a835:	e9 6b 01 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>
ffffffff8021a83a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a83e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a842:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a846:	0f 95 c0             	setne  %al
ffffffff8021a849:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a84c:	48 85 c0             	test   %rax,%rax
ffffffff8021a84f:	74 0c                	je     ffffffff8021a85d <_RME_Inv_Act+0x206>
ffffffff8021a851:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a858:	e9 48 01 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>
                   struct RME_Cap_Inv*,Inv_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8021a85d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a861:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a865:	83 e0 02             	and    $0x2,%eax
ffffffff8021a868:	48 85 c0             	test   %rax,%rax
ffffffff8021a86b:	0f 94 c0             	sete   %al
ffffffff8021a86e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a871:	48 85 c0             	test   %rax,%rax
ffffffff8021a874:	74 0c                	je     ffffffff8021a882 <_RME_Inv_Act+0x22b>
ffffffff8021a876:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a87d:	e9 23 01 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>

    /* Get the invocation struct */
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021a882:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a886:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a88a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Check if this invocation port is already active */
    Thd_Act=Invocation->Thd_Act;
ffffffff8021a88e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a892:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a896:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(RME_UNLIKELY(Thd_Act!=(void*)0U))
ffffffff8021a89a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8021a89f:	0f 95 c0             	setne  %al
ffffffff8021a8a2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8a5:	48 85 c0             	test   %rax,%rax
ffffffff8021a8a8:	74 0c                	je     ffffffff8021a8b6 <_RME_Inv_Act+0x25f>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021a8aa:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a8b1:	e9 ef 00 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>
        RME_COV_MARKER();
        /* No action required */
    }

#if(RME_CPT_ENTRY_MAX==0U)
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8021a8b6:	e8 84 0f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a8bb:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a8bf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#endif
    
    /* Try to do CAS and activate this port */
    if(RME_UNLIKELY(RME_COMP_SWAP((volatile rme_ptr_t*)&(Invocation->Thd_Act),
ffffffff8021a8c3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021a8c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a8cb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8021a8cf:	48 83 c1 18          	add    $0x18,%rcx
ffffffff8021a8d3:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a8d6:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021a8d9:	e8 80 1e ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a8de:	48 85 c0             	test   %rax,%rax
ffffffff8021a8e1:	0f 94 c0             	sete   %al
ffffffff8021a8e4:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8e7:	48 85 c0             	test   %rax,%rax
ffffffff8021a8ea:	74 0c                	je     ffffffff8021a8f8 <_RME_Inv_Act+0x2a1>
                                  (rme_ptr_t)Thd_Act,
                                  (rme_ptr_t)Thd_Cur)==RME_CASFAIL))
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021a8ec:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a8f3:	e9 ad 00 00 00       	jmp    ffffffff8021a9a5 <_RME_Inv_Act+0x34e>

    /* Save whatever is needed to return to the point - normally only SP and IP needed
     * because all other registers, including the coprocessor registers, are saved at
     * user-level. We do not set the return value because it will be set by Inv_Ret.
     * The coprocessor state will be consistent across the call */
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
ffffffff8021a8f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a8fc:	48 8d 50 38          	lea    0x38(%rax),%rdx
ffffffff8021a900:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021a904:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a907:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021a90a:	e8 f7 b6 00 00       	call   ffffffff80226006 <__RME_Inv_Reg_Save>
    /* Push this into the stack: insert after the thread list header */
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021a90f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a913:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
                  &(Thd_Cur->Ctx.Invstk),
ffffffff8021a91a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a91e:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021a925:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a929:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a92c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a92f:	e8 a0 24 ff ff       	call   ffffffff8020cdd4 <_RME_List_Ins>
                  Thd_Cur->Ctx.Invstk.Next);
    /* Increase invocation depth - no atomic operation needed */
    Thd_Cur->Ctx.Invstk_Depth++;
ffffffff8021a934:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a938:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021a93f:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8021a943:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a947:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
    /* Setup the register contents, and do the invocation */
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff8021a94e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a952:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021a956:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a95a:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021a95e:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021a962:	48 8b 89 88 00 00 00 	mov    0x88(%rcx),%rcx
ffffffff8021a969:	48 be ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rsi
ffffffff8021a970:	ff ff 7f 
ffffffff8021a973:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021a976:	48 21 f7             	and    %rsi,%rdi
ffffffff8021a979:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff8021a97d:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8021a981:	49 89 f0             	mov    %rsi,%r8
ffffffff8021a984:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a987:	e8 07 b4 00 00       	call   ffffffff80225d93 <__RME_Thd_Reg_Init>
    /* We are assuming that we are always invoking into a new process (why use synchronous
     * invocation if you don't do so?). So we always switch page tables regardless. */
#if(RME_PGT_RAW_ENABLE==0U)
    RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
    __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8021a98c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a990:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a994:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021a998:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a99b:	e8 30 be 00 00       	call   ffffffff802267d0 <__RME_Pgt_Set>
    
    return 0;
ffffffff8021a9a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a9a5:	c9                   	leave
ffffffff8021a9a6:	c3                   	ret

ffffffff8021a9a7 <_RME_Inv_Ret>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg,
                              rme_ptr_t Retval,
                              rme_ptr_t Is_Exc)
{
ffffffff8021a9a7:	f3 0f 1e fa          	endbr64
ffffffff8021a9ab:	55                   	push   %rbp
ffffffff8021a9ac:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a9af:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021a9b3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021a9b7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021a9bb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8021a9bf:	e8 7b 0e ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a9c4:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a9c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8021a9cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a9d0:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021a9d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a9db:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021a9e1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a9e4:	74 0d                	je     ffffffff8021a9f3 <_RME_Inv_Ret+0x4c>
ffffffff8021a9e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a9ea:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021a9f1:	eb 05                	jmp    ffffffff8021a9f8 <_RME_Inv_Ret+0x51>
ffffffff8021a9f3:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021a9f8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(RME_UNLIKELY(Invocation==(void*)RME_NULL))
ffffffff8021a9fc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021aa01:	0f 94 c0             	sete   %al
ffffffff8021aa04:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aa07:	48 85 c0             	test   %rax,%rax
ffffffff8021aa0a:	74 0c                	je     ffffffff8021aa18 <_RME_Inv_Ret+0x71>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_EMPTY;
ffffffff8021aa0c:	48 c7 c0 d0 fe ff ff 	mov    $0xfffffffffffffed0,%rax
ffffffff8021aa13:	e9 38 01 00 00       	jmp    ffffffff8021ab50 <_RME_Inv_Ret+0x1a9>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8021aa18:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8021aa1d:	0f 95 c0             	setne  %al
ffffffff8021aa20:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aa23:	48 85 c0             	test   %rax,%rax
ffffffff8021aa26:	74 22                	je     ffffffff8021aa4a <_RME_Inv_Ret+0xa3>
ffffffff8021aa28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aa2c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021aa30:	48 85 c0             	test   %rax,%rax
ffffffff8021aa33:	0f 94 c0             	sete   %al
ffffffff8021aa36:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aa39:	48 85 c0             	test   %rax,%rax
ffffffff8021aa3c:	74 0c                	je     ffffffff8021aa4a <_RME_Inv_Ret+0xa3>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_FAULT;
ffffffff8021aa3e:	48 c7 c0 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rax
ffffffff8021aa45:	e9 06 01 00 00       	jmp    ffffffff8021ab50 <_RME_Inv_Ret+0x1a9>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8021aa4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aa4e:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021aa51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aa55:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021aa59:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021aa5c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aa5f:	e8 42 23 ff ff       	call   ffffffff8020cda6 <_RME_List_Del>
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;
ffffffff8021aa64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aa68:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021aa6f:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8021aa73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aa77:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8021aa7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aa82:	48 8d 50 38          	lea    0x38(%rax),%rdx
ffffffff8021aa86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa8a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021aa8d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aa90:	e8 ad b5 00 00       	call   ffffffff80226042 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8021aa95:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021aa99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa9d:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021aaa0:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aaa3:	e8 5c c6 00 00       	call   ffffffff80227104 <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8021aaa8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aaac:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021aab3:	00 

    /* Decide the system call's return value */
    if(RME_UNLIKELY(Is_Exc!=0U))
ffffffff8021aab4:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8021aab9:	0f 95 c0             	setne  %al
ffffffff8021aabc:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aabf:	48 85 c0             	test   %rax,%rax
ffffffff8021aac2:	74 15                	je     ffffffff8021aad9 <_RME_Inv_Ret+0x132>
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff8021aac4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aac8:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff8021aacf:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aad2:	e8 0b c6 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
ffffffff8021aad7:	eb 11                	jmp    ffffffff8021aaea <_RME_Inv_Ret+0x143>
    }
    else
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg,0);
ffffffff8021aad9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aadd:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021aae2:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aae5:	e8 f8 c5 00 00       	call   ffffffff802270e2 <__RME_Svc_Retval_Set>
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8021aaea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aaee:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021aaf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aaf9:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021aaff:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ab02:	74 0d                	je     ffffffff8021ab11 <_RME_Inv_Ret+0x16a>
ffffffff8021ab04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ab08:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021ab0f:	eb 05                	jmp    ffffffff8021ab16 <_RME_Inv_Ret+0x16f>
ffffffff8021ab11:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021ab16:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Invocation!=(void*)RME_NULL)
ffffffff8021ab1a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021ab1f:	74 16                	je     ffffffff8021ab37 <_RME_Inv_Ret+0x190>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8021ab21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ab25:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021ab29:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ab2d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ab30:	e8 9b bc 00 00       	call   ffffffff802267d0 <__RME_Pgt_Set>
ffffffff8021ab35:	eb 14                	jmp    ffffffff8021ab4b <_RME_Inv_Ret+0x1a4>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff8021ab37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ab3b:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021ab3f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ab43:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ab46:	e8 85 bc 00 00       	call   ffffffff802267d0 <__RME_Pgt_Set>
    }
    
    return 0;
ffffffff8021ab4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021ab50:	c9                   	leave
ffffffff8021ab51:	c3                   	ret

ffffffff8021ab52 <_RME_Kfn_Boot_Crt>:
Return      : rme_ret_t - If successful, 0; or error code.
******************************************************************************/
rme_ret_t _RME_Kfn_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Kfn)
{
ffffffff8021ab52:	f3 0f 1e fa          	endbr64
ffffffff8021ab56:	55                   	push   %rbp
ffffffff8021ab57:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021ab5a:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021ab5e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021ab62:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021ab66:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Kfn* Kfn_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021ab6a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ab6e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021ab73:	48 85 c0             	test   %rax,%rax
ffffffff8021ab76:	0f 85 98 00 00 00    	jne    ffffffff8021ac14 <_RME_Kfn_Boot_Crt+0xc2>
ffffffff8021ab7c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ab80:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ab84:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021ab88:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ab8b:	0f 93 c0             	setae  %al
ffffffff8021ab8e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ab91:	48 85 c0             	test   %rax,%rax
ffffffff8021ab94:	74 0c                	je     ffffffff8021aba2 <_RME_Kfn_Boot_Crt+0x50>
ffffffff8021ab96:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ab9d:	e9 9b 02 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021aba2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021aba6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021abaa:	48 89 c2             	mov    %rax,%rdx
ffffffff8021abad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021abb1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021abb5:	48 01 d0             	add    %rdx,%rax
ffffffff8021abb8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021abbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021abc0:	48 8b 00             	mov    (%rax),%rax
ffffffff8021abc3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021abc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021abcb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021abcf:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021abd2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021abd6:	0f 94 c0             	sete   %al
ffffffff8021abd9:	0f b6 c0             	movzbl %al,%eax
ffffffff8021abdc:	48 85 c0             	test   %rax,%rax
ffffffff8021abdf:	74 0c                	je     ffffffff8021abed <_RME_Kfn_Boot_Crt+0x9b>
ffffffff8021abe1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021abe8:	e9 50 02 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021abed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021abf1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021abf5:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021abf9:	0f 95 c0             	setne  %al
ffffffff8021abfc:	0f b6 c0             	movzbl %al,%eax
ffffffff8021abff:	48 85 c0             	test   %rax,%rax
ffffffff8021ac02:	0f 84 4c 01 00 00    	je     ffffffff8021ad54 <_RME_Kfn_Boot_Crt+0x202>
ffffffff8021ac08:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ac0f:	e9 29 02 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ac14:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ac18:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ac1c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ac1f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ac23:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ac27:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ac2a:	0f 93 c0             	setae  %al
ffffffff8021ac2d:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ac30:	48 85 c0             	test   %rax,%rax
ffffffff8021ac33:	74 0c                	je     ffffffff8021ac41 <_RME_Kfn_Boot_Crt+0xef>
ffffffff8021ac35:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ac3c:	e9 fc 01 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ac41:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ac45:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ac49:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ac4d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ac50:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ac54:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021ac58:	48 01 d0             	add    %rdx,%rax
ffffffff8021ac5b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021ac5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ac63:	48 8b 00             	mov    (%rax),%rax
ffffffff8021ac66:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ac6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ac6e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ac72:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ac75:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ac79:	0f 94 c0             	sete   %al
ffffffff8021ac7c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ac7f:	48 85 c0             	test   %rax,%rax
ffffffff8021ac82:	74 0c                	je     ffffffff8021ac90 <_RME_Kfn_Boot_Crt+0x13e>
ffffffff8021ac84:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ac8b:	e9 ad 01 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ac90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ac94:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ac98:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ac9c:	0f 95 c0             	setne  %al
ffffffff8021ac9f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aca2:	48 85 c0             	test   %rax,%rax
ffffffff8021aca5:	74 0c                	je     ffffffff8021acb3 <_RME_Kfn_Boot_Crt+0x161>
ffffffff8021aca7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021acae:	e9 8a 01 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021acb3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021acb7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021acbc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021acbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021acc3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021acc7:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021acca:	0f 93 c0             	setae  %al
ffffffff8021accd:	0f b6 c0             	movzbl %al,%eax
ffffffff8021acd0:	48 85 c0             	test   %rax,%rax
ffffffff8021acd3:	74 0c                	je     ffffffff8021ace1 <_RME_Kfn_Boot_Crt+0x18f>
ffffffff8021acd5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021acdc:	e9 5c 01 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ace1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ace5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021acea:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021acee:	48 89 c2             	mov    %rax,%rdx
ffffffff8021acf1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021acf5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021acf9:	48 01 d0             	add    %rdx,%rax
ffffffff8021acfc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021ad00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ad04:	48 8b 00             	mov    (%rax),%rax
ffffffff8021ad07:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ad0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ad0f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ad13:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ad16:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ad1a:	0f 94 c0             	sete   %al
ffffffff8021ad1d:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad20:	48 85 c0             	test   %rax,%rax
ffffffff8021ad23:	74 0c                	je     ffffffff8021ad31 <_RME_Kfn_Boot_Crt+0x1df>
ffffffff8021ad25:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ad2c:	e9 0c 01 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ad31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ad35:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ad39:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ad3d:	0f 95 c0             	setne  %al
ffffffff8021ad40:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad43:	48 85 c0             	test   %rax,%rax
ffffffff8021ad46:	74 0c                	je     ffffffff8021ad54 <_RME_Kfn_Boot_Crt+0x202>
ffffffff8021ad48:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ad4f:	e9 e9 00 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8021ad54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ad58:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021ad5c:	83 e0 01             	and    $0x1,%eax
ffffffff8021ad5f:	48 85 c0             	test   %rax,%rax
ffffffff8021ad62:	0f 94 c0             	sete   %al
ffffffff8021ad65:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad68:	48 85 c0             	test   %rax,%rax
ffffffff8021ad6b:	74 0c                	je     ffffffff8021ad79 <_RME_Kfn_Boot_Crt+0x227>
ffffffff8021ad6d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021ad74:	e9 c4 00 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kfn,struct RME_Cap_Kfn*,Kfn_Crt);
ffffffff8021ad79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ad7d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ad81:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021ad85:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ad88:	0f 93 c0             	setae  %al
ffffffff8021ad8b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad8e:	48 85 c0             	test   %rax,%rax
ffffffff8021ad91:	74 0c                	je     ffffffff8021ad9f <_RME_Kfn_Boot_Crt+0x24d>
ffffffff8021ad93:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ad9a:	e9 9e 00 00 00       	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021ad9f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021ada3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ada7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021adaa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021adae:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021adb2:	48 01 d0             	add    %rdx,%rax
ffffffff8021adb5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff8021adb9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021adbd:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021adc4:	00 00 00 
ffffffff8021adc7:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021adcc:	48 89 c7             	mov    %rax,%rdi
ffffffff8021adcf:	e8 8a 19 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021add4:	48 85 c0             	test   %rax,%rax
ffffffff8021add7:	0f 94 c0             	sete   %al
ffffffff8021adda:	0f b6 c0             	movzbl %al,%eax
ffffffff8021addd:	48 85 c0             	test   %rax,%rax
ffffffff8021ade0:	74 09                	je     ffffffff8021adeb <_RME_Kfn_Boot_Crt+0x299>
ffffffff8021ade2:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021ade9:	eb 52                	jmp    ffffffff8021ae3d <_RME_Kfn_Boot_Crt+0x2eb>
ffffffff8021adeb:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021adf0:	e8 1c 1a ff ff       	call   ffffffff8020c811 <RME_X64_RDTSC>
ffffffff8021adf5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021adf9:	48 89 42 20          	mov    %rax,0x20(%rdx)
    
    /* Header init */
    Kfn_Crt->Head.Root_Ref=1U;
ffffffff8021adfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ae01:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8021ae08:	00 
    Kfn_Crt->Head.Object=0U;
ffffffff8021ae09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ae0d:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021ae14:	00 
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff8021ae15:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ae19:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
ffffffff8021ae20:	ff ff ff 
ffffffff8021ae23:	48 89 48 10          	mov    %rcx,0x10(%rax)
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Kfn_Crt->Head.Type_Stat),
ffffffff8021ae27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ae2b:	48 b9 00 00 00 00 00 	movabs $0x1000000000000,%rcx
ffffffff8021ae32:	00 01 00 
ffffffff8021ae35:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_KFN,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021ae38:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021ae3d:	c9                   	leave
ffffffff8021ae3e:	c3                   	ret

ffffffff8021ae3f <_RME_Kfn_Act>:
                              rme_cid_t Cap_Kfn,
                              rme_ptr_t Func_ID,
                              rme_ptr_t Sub_ID,
                              rme_ptr_t Param1,
                              rme_ptr_t Param2)
{
ffffffff8021ae3f:	f3 0f 1e fa          	endbr64
ffffffff8021ae43:	55                   	push   %rbp
ffffffff8021ae44:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021ae47:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021ae4b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021ae4f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021ae53:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8021ae57:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff8021ae5b:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff8021ae5f:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021ae63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ae67:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021ae6c:	48 85 c0             	test   %rax,%rax
ffffffff8021ae6f:	0f 85 98 00 00 00    	jne    ffffffff8021af0d <_RME_Kfn_Act+0xce>
ffffffff8021ae75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ae79:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ae7d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021ae81:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ae84:	0f 93 c0             	setae  %al
ffffffff8021ae87:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae8a:	48 85 c0             	test   %rax,%rax
ffffffff8021ae8d:	74 0c                	je     ffffffff8021ae9b <_RME_Kfn_Act+0x5c>
ffffffff8021ae8f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ae96:	e9 fd 01 00 00       	jmp    ffffffff8021b098 <_RME_Kfn_Act+0x259>
ffffffff8021ae9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ae9f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021aea3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021aea6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aeaa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021aeae:	48 01 d0             	add    %rdx,%rax
ffffffff8021aeb1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021aeb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aeb9:	48 8b 00             	mov    (%rax),%rax
ffffffff8021aebc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021aec0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aec4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021aec8:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021aecb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021aecf:	0f 94 c0             	sete   %al
ffffffff8021aed2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aed5:	48 85 c0             	test   %rax,%rax
ffffffff8021aed8:	74 0c                	je     ffffffff8021aee6 <_RME_Kfn_Act+0xa7>
ffffffff8021aeda:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021aee1:	e9 b2 01 00 00       	jmp    ffffffff8021b098 <_RME_Kfn_Act+0x259>
ffffffff8021aee6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aeea:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021aeee:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021aef2:	0f 95 c0             	setne  %al
ffffffff8021aef5:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aef8:	48 85 c0             	test   %rax,%rax
ffffffff8021aefb:	0f 84 46 01 00 00    	je     ffffffff8021b047 <_RME_Kfn_Act+0x208>
ffffffff8021af01:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021af08:	e9 8b 01 00 00       	jmp    ffffffff8021b098 <_RME_Kfn_Act+0x259>
ffffffff8021af0d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021af11:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021af15:	48 89 c2             	mov    %rax,%rdx
ffffffff8021af18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af1c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021af20:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021af23:	0f 93 c0             	setae  %al
ffffffff8021af26:	0f b6 c0             	movzbl %al,%eax
ffffffff8021af29:	48 85 c0             	test   %rax,%rax
ffffffff8021af2c:	74 0c                	je     ffffffff8021af3a <_RME_Kfn_Act+0xfb>
ffffffff8021af2e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021af35:	e9 5e 01 00 00       	jmp    ffffffff8021b098 <_RME_Kfn_Act+0x259>
ffffffff8021af3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021af3e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021af42:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021af46:	48 89 c2             	mov    %rax,%rdx
ffffffff8021af49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af4d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021af51:	48 01 d0             	add    %rdx,%rax
ffffffff8021af54:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021af58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021af5c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021af5f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021af63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021af67:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021af6b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021af6e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021af72:	0f 94 c0             	sete   %al
ffffffff8021af75:	0f b6 c0             	movzbl %al,%eax
ffffffff8021af78:	48 85 c0             	test   %rax,%rax
ffffffff8021af7b:	74 0c                	je     ffffffff8021af89 <_RME_Kfn_Act+0x14a>
ffffffff8021af7d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021af84:	e9 0f 01 00 00       	jmp    ffffffff8021b098 <_RME_Kfn_Act+0x259>
ffffffff8021af89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021af8d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021af91:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021af95:	0f 95 c0             	setne  %al
ffffffff8021af98:	0f b6 c0             	movzbl %al,%eax
ffffffff8021af9b:	48 85 c0             	test   %rax,%rax
ffffffff8021af9e:	74 0c                	je     ffffffff8021afac <_RME_Kfn_Act+0x16d>
ffffffff8021afa0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021afa7:	e9 ec 00 00 00       	jmp    ffffffff8021b098 <_RME_Kfn_Act+0x259>
ffffffff8021afac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021afb0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021afb5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021afb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021afbc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021afc0:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021afc3:	0f 93 c0             	setae  %al
ffffffff8021afc6:	0f b6 c0             	movzbl %al,%eax
ffffffff8021afc9:	48 85 c0             	test   %rax,%rax
ffffffff8021afcc:	74 0c                	je     ffffffff8021afda <_RME_Kfn_Act+0x19b>
ffffffff8021afce:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021afd5:	e9 be 00 00 00       	jmp    ffffffff8021b098 <_RME_Kfn_Act+0x259>
ffffffff8021afda:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021afde:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021afe3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021afe7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021afea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021afee:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021aff2:	48 01 d0             	add    %rdx,%rax
ffffffff8021aff5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021aff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021affd:	48 8b 00             	mov    (%rax),%rax
ffffffff8021b000:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021b004:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b008:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b00c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b00f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021b013:	0f 94 c0             	sete   %al
ffffffff8021b016:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b019:	48 85 c0             	test   %rax,%rax
ffffffff8021b01c:	74 09                	je     ffffffff8021b027 <_RME_Kfn_Act+0x1e8>
ffffffff8021b01e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021b025:	eb 71                	jmp    ffffffff8021b098 <_RME_Kfn_Act+0x259>
ffffffff8021b027:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b02b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021b02f:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b033:	0f 95 c0             	setne  %al
ffffffff8021b036:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b039:	48 85 c0             	test   %rax,%rax
ffffffff8021b03c:	74 09                	je     ffffffff8021b047 <_RME_Kfn_Act+0x208>
ffffffff8021b03e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021b045:	eb 51                	jmp    ffffffff8021b098 <_RME_Kfn_Act+0x259>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021b047:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b04b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b04f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b053:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021b057:	72 10                	jb     ffffffff8021b069 <_RME_Kfn_Act+0x22a>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
ffffffff8021b059:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b05d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b061:	89 c0                	mov    %eax,%eax
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021b063:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff8021b067:	73 09                	jae    ffffffff8021b072 <_RME_Kfn_Act+0x233>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021b069:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021b070:	eb 26                	jmp    ffffffff8021b098 <_RME_Kfn_Act+0x259>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
ffffffff8021b072:	4c 8b 45 10          	mov    0x10(%rbp),%r8
ffffffff8021b076:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8021b07a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021b07e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021b082:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8021b086:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b08a:	4d 89 c1             	mov    %r8,%r9
ffffffff8021b08d:	49 89 f8             	mov    %rdi,%r8
ffffffff8021b090:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b093:	e8 75 00 00 00       	call   ffffffff8021b10d <__RME_Kfn_Handler>
}
ffffffff8021b098:	c9                   	leave
ffffffff8021b099:	c3                   	ret

ffffffff8021b09a <_RME_X64_Comp_Swap>:
            if((Checksum&0xFF)==0)
            {
                return (struct RME_X64_ACPI_RDSP_Desc*)&(Pos[Count]);
            }
        }
    }
ffffffff8021b09a:	55                   	push   %rbp
ffffffff8021b09b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b09e:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8021b0a2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021b0a6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021b0aa:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    return 0;
}
ffffffff8021b0ae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021b0b2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021b0b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b0ba:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8021b0be:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021b0c3:	0f 94 c0             	sete   %al
ffffffff8021b0c6:	88 45 ff             	mov    %al,-0x1(%rbp)
/* End Function:__RME_X64_RDSP_Scan ******************************************/

/* Function:__RME_X64_RDSP_Find ***********************************************
Description : Find a valid RDSP structure and return it.
ffffffff8021b0c9:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
Input       : None.
ffffffff8021b0cd:	c9                   	leave
ffffffff8021b0ce:	c3                   	ret

ffffffff8021b0cf <main>:
{
ffffffff8021b0cf:	f3 0f 1e fa          	endbr64
ffffffff8021b0d3:	55                   	push   %rbp
ffffffff8021b0d4:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b0d7:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8021b0db:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021b0df:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021b0e6:	80 ff ff 
ffffffff8021b0e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b0ed:	48 01 d0             	add    %rdx,%rax
ffffffff8021b0f0:	48 89 05 31 7f 01 00 	mov    %rax,0x17f31(%rip)        # ffffffff80233028 <RME_X64_MBInfo>
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021b0f7:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
ffffffff8021b0fe:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b101:	e8 ad 07 ff ff       	call   ffffffff8020b8b3 <_RME_Kmain>
    return 0;
ffffffff8021b106:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b10b:	c9                   	leave
ffffffff8021b10c:	c3                   	ret

ffffffff8021b10d <__RME_Kfn_Handler>:
{
ffffffff8021b10d:	f3 0f 1e fa          	endbr64
ffffffff8021b111:	55                   	push   %rbp
ffffffff8021b112:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b115:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021b119:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8021b11d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8021b121:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8021b125:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff8021b129:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
ffffffff8021b12d:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    RME_DBG_S("System call successfully processed! Hello World!");
ffffffff8021b131:	48 c7 c7 48 77 22 80 	mov    $0xffffffff80227748,%rdi
ffffffff8021b138:	e8 f0 18 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    return 0;
ffffffff8021b13d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b142:	c9                   	leave
ffffffff8021b143:	c3                   	ret

ffffffff8021b144 <__RME_Putchar>:
{
ffffffff8021b144:	f3 0f 1e fa          	endbr64
ffffffff8021b148:	55                   	push   %rbp
ffffffff8021b149:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b14c:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8021b150:	89 f8                	mov    %edi,%eax
ffffffff8021b152:	88 45 fc             	mov    %al,-0x4(%rbp)
    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff8021b155:	90                   	nop
ffffffff8021b156:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021b15b:	e8 a0 06 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021b160:	83 e0 20             	and    $0x20,%eax
ffffffff8021b163:	48 85 c0             	test   %rax,%rax
ffffffff8021b166:	74 ee                	je     ffffffff8021b156 <__RME_Putchar+0x12>
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff8021b168:	48 0f be 45 fc       	movsbq -0x4(%rbp),%rax
ffffffff8021b16d:	48 89 c6             	mov    %rax,%rsi
ffffffff8021b170:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021b175:	e8 90 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    return 0;
ffffffff8021b17a:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b17f:	c9                   	leave
ffffffff8021b180:	c3                   	ret

ffffffff8021b181 <__RME_X64_UART_Init>:
{
ffffffff8021b181:	f3 0f 1e fa          	endbr64
ffffffff8021b185:	55                   	push   %rbp
ffffffff8021b186:	48 89 e5             	mov    %rsp,%rbp
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021b189:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b18e:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021b193:	e8 72 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff8021b198:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff8021b19d:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021b1a2:	e8 63 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff8021b1a7:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff8021b1ac:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021b1b1:	e8 54 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021b1b6:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b1bb:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021b1c0:	e8 45 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff8021b1c5:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021b1ca:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021b1cf:	e8 36 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff8021b1d4:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff8021b1d9:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff8021b1de:	e8 27 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff8021b1e3:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b1e8:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff8021b1ed:	e8 18 06 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff8021b1f2:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021b1f7:	e8 04 06 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021b1fc:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff8021b202:	75 0d                	jne    ffffffff8021b211 <__RME_X64_UART_Init+0x90>
        RME_X64_UART_Exist=0;
ffffffff8021b204:	48 c7 05 11 7e 01 00 	movq   $0x0,0x17e11(%rip)        # ffffffff80233020 <RME_X64_UART_Exist>
ffffffff8021b20b:	00 00 00 00 
}
ffffffff8021b20f:	eb 0b                	jmp    ffffffff8021b21c <__RME_X64_UART_Init+0x9b>
        RME_X64_UART_Exist=1;
ffffffff8021b211:	48 c7 05 04 7e 01 00 	movq   $0x1,0x17e04(%rip)        # ffffffff80233020 <RME_X64_UART_Exist>
ffffffff8021b218:	01 00 00 00 
}
ffffffff8021b21c:	90                   	nop
ffffffff8021b21d:	5d                   	pop    %rbp
ffffffff8021b21e:	c3                   	ret

ffffffff8021b21f <__RME_X64_RDSP_Scan>:
{
ffffffff8021b21f:	f3 0f 1e fa          	endbr64
ffffffff8021b223:	55                   	push   %rbp
ffffffff8021b224:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b227:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021b22b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021b22f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff8021b233:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021b23a:	80 ff ff 
ffffffff8021b23d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b241:	48 01 d0             	add    %rdx,%rax
ffffffff8021b244:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff8021b248:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021b24f:	00 
ffffffff8021b250:	eb 7f                	jmp    ffffffff8021b2d1 <__RME_X64_RDSP_Scan+0xb2>
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff8021b252:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b256:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b25a:	48 01 d0             	add    %rdx,%rax
ffffffff8021b25d:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021b262:	48 c7 c6 79 77 22 80 	mov    $0xffffffff80227779,%rsi
ffffffff8021b269:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b26c:	e8 eb 1b ff ff       	call   ffffffff8020ce5c <_RME_Memcmp>
ffffffff8021b271:	48 85 c0             	test   %rax,%rax
ffffffff8021b274:	75 56                	jne    ffffffff8021b2cc <__RME_X64_RDSP_Scan+0xad>
            Checksum=0;
ffffffff8021b276:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b27d:	00 
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff8021b27e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b285:	00 
ffffffff8021b286:	eb 24                	jmp    ffffffff8021b2ac <__RME_X64_RDSP_Scan+0x8d>
                Checksum+=( rme_ptr_t)Pos[Count+Check_Cnt];
ffffffff8021b288:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b28c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b290:	48 01 d0             	add    %rdx,%rax
ffffffff8021b293:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b296:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b29a:	48 01 d0             	add    %rdx,%rax
ffffffff8021b29d:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b2a0:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b2a3:	48 01 45 f0          	add    %rax,-0x10(%rbp)
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff8021b2a7:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff8021b2ac:	48 83 7d e8 13       	cmpq   $0x13,-0x18(%rbp)
ffffffff8021b2b1:	7e d5                	jle    ffffffff8021b288 <__RME_X64_RDSP_Scan+0x69>
            if((Checksum&0xFF)==0)
ffffffff8021b2b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b2b7:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b2ba:	48 85 c0             	test   %rax,%rax
ffffffff8021b2bd:	75 0d                	jne    ffffffff8021b2cc <__RME_X64_RDSP_Scan+0xad>
                return (struct RME_X64_ACPI_RDSP_Desc*)&(Pos[Count]);
ffffffff8021b2bf:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b2c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b2c7:	48 01 d0             	add    %rdx,%rax
ffffffff8021b2ca:	eb 1f                	jmp    ffffffff8021b2eb <__RME_X64_RDSP_Scan+0xcc>
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff8021b2cc:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
ffffffff8021b2d1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b2d5:	48 8d 50 dc          	lea    -0x24(%rax),%rdx
ffffffff8021b2d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b2dd:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b2e0:	0f 83 6c ff ff ff    	jae    ffffffff8021b252 <__RME_X64_RDSP_Scan+0x33>
    return 0;
ffffffff8021b2e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b2eb:	c9                   	leave
ffffffff8021b2ec:	c3                   	ret

ffffffff8021b2ed <__RME_X64_RDSP_Find>:
Output      : None.
Return      : struct RME_X64_ACPI_RDSP_Desc* - The descriptor address.
******************************************************************************/
struct RME_X64_ACPI_RDSP_Desc*__RME_X64_RDSP_Find(void)
{
ffffffff8021b2ed:	f3 0f 1e fa          	endbr64
ffffffff8021b2f1:	55                   	push   %rbp
ffffffff8021b2f2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b2f5:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_X64_ACPI_RDSP_Desc* RDSP;
    rme_ptr_t Paddr;
    /* 0x40E contains the address of Extended BIOS Data Area (EBDA). Let's try
     * to find the RDSP there first */
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff8021b2f9:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff8021b300:	80 ff ff 
ffffffff8021b303:	0f b7 00             	movzwl (%rax),%eax
ffffffff8021b306:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b309:	c1 e0 04             	shl    $0x4,%eax
ffffffff8021b30c:	48 98                	cltq
ffffffff8021b30e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if(Paddr!=0)
ffffffff8021b312:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8021b317:	74 22                	je     ffffffff8021b33b <__RME_X64_RDSP_Find+0x4e>
    {
        RDSP=__RME_X64_RDSP_Scan(Paddr,1024);
ffffffff8021b319:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b31d:	be 00 04 00 00       	mov    $0x400,%esi
ffffffff8021b322:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b325:	e8 f5 fe ff ff       	call   ffffffff8021b21f <__RME_X64_RDSP_Scan>
ffffffff8021b32a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        /* Found */
        if(RDSP!=0)
ffffffff8021b32e:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021b333:	74 06                	je     ffffffff8021b33b <__RME_X64_RDSP_Find+0x4e>
            return RDSP;
ffffffff8021b335:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b339:	eb 0f                	jmp    ffffffff8021b34a <__RME_X64_RDSP_Find+0x5d>
    }

    /* If that fails, the RDSP must be here */
    return __RME_X64_RDSP_Scan(0xE0000, 0x20000);
ffffffff8021b33b:	be 00 00 02 00       	mov    $0x20000,%esi
ffffffff8021b340:	bf 00 00 0e 00       	mov    $0xe0000,%edi
ffffffff8021b345:	e8 d5 fe ff ff       	call   ffffffff8021b21f <__RME_X64_RDSP_Scan>
}
ffffffff8021b34a:	c9                   	leave
ffffffff8021b34b:	c3                   	ret

ffffffff8021b34c <__RME_X64_SMP_Detect>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
rme_ret_t __RME_X64_SMP_Detect(struct RME_X64_ACPI_MADT_Hdr* MADT)
{
ffffffff8021b34c:	f3 0f 1e fa          	endbr64
ffffffff8021b350:	55                   	push   %rbp
ffffffff8021b351:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b354:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021b358:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_ptr_t Length;
    rme_u8_t* Ptr;
    rme_u8_t* End;

    /* Is there a MADT? */
    if(MADT==0)
ffffffff8021b35c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8021b361:	75 0c                	jne    ffffffff8021b36f <__RME_X64_SMP_Detect+0x23>
        return -1;
ffffffff8021b363:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b36a:	e9 18 03 00 00       	jmp    ffffffff8021b687 <__RME_X64_SMP_Detect+0x33b>
    /* Is the MADT valid? */
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
ffffffff8021b36f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b373:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b376:	83 f8 2b             	cmp    $0x2b,%eax
ffffffff8021b379:	77 0c                	ja     ffffffff8021b387 <__RME_X64_SMP_Detect+0x3b>
        return -1;
ffffffff8021b37b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b382:	e9 00 03 00 00       	jmp    ffffffff8021b687 <__RME_X64_SMP_Detect+0x33b>

    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff8021b387:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b38b:	8b 40 24             	mov    0x24(%rax),%eax
ffffffff8021b38e:	89 c0                	mov    %eax,%eax
ffffffff8021b390:	48 89 05 89 8f 01 00 	mov    %rax,0x18f89(%rip)        # ffffffff80234320 <RME_X64_LAPIC_Addr>

    /* Where does the actual table contents start? */
    Ptr=MADT->Table;
ffffffff8021b397:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b39b:	48 83 c0 2c          	add    $0x2c,%rax
ffffffff8021b39f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff8021b3a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b3a7:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b3aa:	89 c0                	mov    %eax,%eax
ffffffff8021b3ac:	48 8d 50 d4          	lea    -0x2c(%rax),%rdx
ffffffff8021b3b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b3b4:	48 01 d0             	add    %rdx,%rax
ffffffff8021b3b7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    RME_X64_Num_IOAPIC=0;
ffffffff8021b3bb:	48 c7 05 fa 8e 01 00 	movq   $0x0,0x18efa(%rip)        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
ffffffff8021b3c2:	00 00 00 00 
    RME_X64_Num_CPU=0;
ffffffff8021b3c6:	48 c7 05 d7 7e 01 00 	movq   $0x0,0x17ed7(%rip)        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021b3cd:	00 00 00 00 
    while(Ptr<End)
ffffffff8021b3d1:	e9 98 02 00 00       	jmp    ffffffff8021b66e <__RME_X64_SMP_Detect+0x322>
    {
        /* See if we have finished scanning the table */
        if((End-Ptr)<2)
ffffffff8021b3d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b3da:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8021b3de:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b3e2:	0f 8e 96 02 00 00    	jle    ffffffff8021b67e <__RME_X64_SMP_Detect+0x332>
            break;
        Length=Ptr[1];
ffffffff8021b3e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b3ec:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b3f0:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b3f3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b3f6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        if((End-Ptr)<Length)
ffffffff8021b3fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b3fe:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8021b402:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8021b406:	0f 82 75 02 00 00    	jb     ffffffff8021b681 <__RME_X64_SMP_Detect+0x335>
            break;

        /* See what is in the table */
        switch(Ptr[0])
ffffffff8021b40c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b410:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b413:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b416:	83 f8 02             	cmp    $0x2,%eax
ffffffff8021b419:	0f 84 a9 01 00 00    	je     ffffffff8021b5c8 <__RME_X64_SMP_Detect+0x27c>
ffffffff8021b41f:	83 f8 02             	cmp    $0x2,%eax
ffffffff8021b422:	0f 8f 31 02 00 00    	jg     ffffffff8021b659 <__RME_X64_SMP_Detect+0x30d>
ffffffff8021b428:	85 c0                	test   %eax,%eax
ffffffff8021b42a:	74 0e                	je     ffffffff8021b43a <__RME_X64_SMP_Detect+0xee>
ffffffff8021b42c:	83 f8 01             	cmp    $0x1,%eax
ffffffff8021b42f:	0f 84 ba 00 00 00    	je     ffffffff8021b4ef <__RME_X64_SMP_Detect+0x1a3>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);

                break;
            }
            /* All other types are ignored */
            default:break;
ffffffff8021b435:	e9 1f 02 00 00       	jmp    ffffffff8021b659 <__RME_X64_SMP_Detect+0x30d>
                LAPIC=(struct RME_X64_ACPI_MADT_LAPIC_Record*)Ptr;
ffffffff8021b43a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b43e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_LAPIC_Record))
ffffffff8021b442:	48 83 7d e8 07       	cmpq   $0x7,-0x18(%rbp)
ffffffff8021b447:	0f 86 0f 02 00 00    	jbe    ffffffff8021b65c <__RME_X64_SMP_Detect+0x310>
                if((LAPIC->Flags&RME_X64_APIC_LAPIC_ENABLED)==0)
ffffffff8021b44d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b451:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b454:	83 e0 01             	and    $0x1,%eax
ffffffff8021b457:	85 c0                	test   %eax,%eax
ffffffff8021b459:	0f 84 00 02 00 00    	je     ffffffff8021b65f <__RME_X64_SMP_Detect+0x313>
                RME_DBG_S("\n\rACPI: CPU ");
ffffffff8021b45f:	48 c7 c7 82 77 22 80 	mov    $0xffffffff80227782,%rdi
ffffffff8021b466:	e8 c2 15 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print((rme_cnt_t)RME_X64_Num_CPU);
ffffffff8021b46b:	48 8b 05 36 7e 01 00 	mov    0x17e36(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021b472:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b475:	e8 b9 13 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", LAPIC ID ");
ffffffff8021b47a:	48 c7 c7 8f 77 22 80 	mov    $0xffffffff8022778f,%rdi
ffffffff8021b481:	e8 a7 15 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(LAPIC->APIC_ID);
ffffffff8021b486:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b48a:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b48e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b491:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b494:	e8 9a 13 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_X64_CPU_Info[RME_X64_Num_CPU].LAPIC_ID=LAPIC->APIC_ID;
ffffffff8021b499:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b49d:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b4a1:	48 8b 15 00 7e 01 00 	mov    0x17e00(%rip),%rdx        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021b4a8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b4ab:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8021b4af:	48 81 c2 c0 32 23 80 	add    $0xffffffff802332c0,%rdx
ffffffff8021b4b6:	48 89 02             	mov    %rax,(%rdx)
                RME_X64_CPU_Info[RME_X64_Num_CPU].Boot_Done=0;
ffffffff8021b4b9:	48 8b 05 e8 7d 01 00 	mov    0x17de8(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021b4c0:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021b4c4:	48 05 c8 32 23 80    	add    $0xffffffff802332c8,%rax
ffffffff8021b4ca:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
                RME_X64_Num_CPU++;
ffffffff8021b4d1:	48 8b 05 d0 7d 01 00 	mov    0x17dd0(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021b4d8:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b4dc:	48 89 05 c5 7d 01 00 	mov    %rax,0x17dc5(%rip)        # ffffffff802332a8 <RME_X64_Num_CPU>
                RME_ASSERT(RME_X64_Num_CPU<=RME_X64_CPU_NUM);
ffffffff8021b4e3:	48 8b 05 be 7d 01 00 	mov    0x17dbe(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
                break;
ffffffff8021b4ea:	e9 77 01 00 00       	jmp    ffffffff8021b666 <__RME_X64_SMP_Detect+0x31a>
                IOAPIC=(struct RME_X64_ACPI_MADT_IOAPIC_Record*)Ptr;
ffffffff8021b4ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b4f3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_IOAPIC_Record))
ffffffff8021b4f7:	48 83 7d e8 0b       	cmpq   $0xb,-0x18(%rbp)
ffffffff8021b4fc:	0f 86 60 01 00 00    	jbe    ffffffff8021b662 <__RME_X64_SMP_Detect+0x316>
                RME_DBG_S("\n\rACPI: IOAPIC ");
ffffffff8021b502:	48 c7 c7 9b 77 22 80 	mov    $0xffffffff8022779b,%rdi
ffffffff8021b509:	e8 1f 15 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print((rme_cnt_t)RME_X64_Num_IOAPIC);
ffffffff8021b50e:	48 8b 05 ab 8d 01 00 	mov    0x18dab(%rip),%rax        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
ffffffff8021b515:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b518:	e8 16 13 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(" @ ");
ffffffff8021b51d:	48 c7 c7 ab 77 22 80 	mov    $0xffffffff802277ab,%rdi
ffffffff8021b524:	e8 04 15 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Hex_Print(IOAPIC->Addr);
ffffffff8021b529:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b52d:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b530:	89 c0                	mov    %eax,%eax
ffffffff8021b532:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b535:	e8 31 14 ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
                RME_DBG_S(", ID ");
ffffffff8021b53a:	48 c7 c7 af 77 22 80 	mov    $0xffffffff802277af,%rdi
ffffffff8021b541:	e8 e7 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(IOAPIC->ID);
ffffffff8021b546:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b54a:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff8021b54e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b551:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b554:	e8 da 12 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", IBASE ");
ffffffff8021b559:	48 c7 c7 b5 77 22 80 	mov    $0xffffffff802277b5,%rdi
ffffffff8021b560:	e8 c8 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(IOAPIC->Interrupt_Base);
ffffffff8021b565:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b569:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff8021b56c:	89 c0                	mov    %eax,%eax
ffffffff8021b56e:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b571:	e8 bd 12 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                if(RME_X64_Num_IOAPIC!=0)
ffffffff8021b576:	48 8b 05 43 8d 01 00 	mov    0x18d43(%rip),%rax        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
ffffffff8021b57d:	48 85 c0             	test   %rax,%rax
ffffffff8021b580:	74 0e                	je     ffffffff8021b590 <__RME_X64_SMP_Detect+0x244>
                    RME_DBG_S("Warning: multiple ioapics are not supported - currently we will not initialize IOAPIC > 1\n");
ffffffff8021b582:	48 c7 c7 c0 77 22 80 	mov    $0xffffffff802277c0,%rdi
ffffffff8021b589:	e8 9f 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8021b58e:	eb 1a                	jmp    ffffffff8021b5aa <__RME_X64_SMP_Detect+0x25e>
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
ffffffff8021b590:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b594:	0f b6 50 02          	movzbl 0x2(%rax),%edx
ffffffff8021b598:	48 8b 05 21 8d 01 00 	mov    0x18d21(%rip),%rax        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
ffffffff8021b59f:	0f b6 d2             	movzbl %dl,%edx
ffffffff8021b5a2:	48 89 14 c5 e0 42 23 	mov    %rdx,-0x7fdcbd20(,%rax,8)
ffffffff8021b5a9:	80 
                RME_X64_Num_IOAPIC++;
ffffffff8021b5aa:	48 8b 05 0f 8d 01 00 	mov    0x18d0f(%rip),%rax        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
ffffffff8021b5b1:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b5b5:	48 89 05 04 8d 01 00 	mov    %rax,0x18d04(%rip)        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
                RME_ASSERT(RME_X64_Num_IOAPIC<=RME_X64_IOAPIC_NUM);
ffffffff8021b5bc:	48 8b 05 fd 8c 01 00 	mov    0x18cfd(%rip),%rax        # ffffffff802342c0 <RME_X64_Num_IOAPIC>
                break;
ffffffff8021b5c3:	e9 9e 00 00 00       	jmp    ffffffff8021b666 <__RME_X64_SMP_Detect+0x31a>
                OVERRIDE=(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record*)Ptr;
ffffffff8021b5c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b5cc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
ffffffff8021b5d0:	48 83 7d e8 06       	cmpq   $0x6,-0x18(%rbp)
ffffffff8021b5d5:	0f 86 8a 00 00 00    	jbe    ffffffff8021b665 <__RME_X64_SMP_Detect+0x319>
                RME_DBG_S("\n\rACPI: OVERRIDE Bus ");
ffffffff8021b5db:	48 c7 c7 1b 78 22 80 	mov    $0xffffffff8022781b,%rdi
ffffffff8021b5e2:	e8 46 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(OVERRIDE->Bus);
ffffffff8021b5e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b5eb:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff8021b5ef:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b5f2:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b5f5:	e8 39 12 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", Source ");
ffffffff8021b5fa:	48 c7 c7 31 78 22 80 	mov    $0xffffffff80227831,%rdi
ffffffff8021b601:	e8 27 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Hex_Print(OVERRIDE->Source);
ffffffff8021b606:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b60a:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b60e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b611:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b614:	e8 52 13 ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
                RME_DBG_S(", GSI ");
ffffffff8021b619:	48 c7 c7 3b 78 22 80 	mov    $0xffffffff8022783b,%rdi
ffffffff8021b620:	e8 08 14 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(OVERRIDE->GS_Interrupt);
ffffffff8021b625:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b629:	0f b6 40 04          	movzbl 0x4(%rax),%eax
ffffffff8021b62d:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b630:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b633:	e8 fb 11 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                RME_DBG_S(", Flags ");
ffffffff8021b638:	48 c7 c7 42 78 22 80 	mov    $0xffffffff80227842,%rdi
ffffffff8021b63f:	e8 e9 13 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff8021b644:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b648:	0f b7 40 05          	movzwl 0x5(%rax),%eax
ffffffff8021b64c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b64f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b652:	e8 dc 11 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
                break;
ffffffff8021b657:	eb 0d                	jmp    ffffffff8021b666 <__RME_X64_SMP_Detect+0x31a>
            default:break;
ffffffff8021b659:	90                   	nop
ffffffff8021b65a:	eb 0a                	jmp    ffffffff8021b666 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b65c:	90                   	nop
ffffffff8021b65d:	eb 07                	jmp    ffffffff8021b666 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b65f:	90                   	nop
ffffffff8021b660:	eb 04                	jmp    ffffffff8021b666 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b662:	90                   	nop
ffffffff8021b663:	eb 01                	jmp    ffffffff8021b666 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b665:	90                   	nop
        }
        
        Ptr+=Length;
ffffffff8021b666:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b66a:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    while(Ptr<End)
ffffffff8021b66e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b672:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8021b676:	0f 82 5a fd ff ff    	jb     ffffffff8021b3d6 <__RME_X64_SMP_Detect+0x8a>
ffffffff8021b67c:	eb 04                	jmp    ffffffff8021b682 <__RME_X64_SMP_Detect+0x336>
            break;
ffffffff8021b67e:	90                   	nop
ffffffff8021b67f:	eb 01                	jmp    ffffffff8021b682 <__RME_X64_SMP_Detect+0x336>
            break;
ffffffff8021b681:	90                   	nop
    }

    return 0;
ffffffff8021b682:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b687:	c9                   	leave
ffffffff8021b688:	c3                   	ret

ffffffff8021b689 <__RME_X64_ACPI_Debug>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
void __RME_X64_ACPI_Debug(struct RME_X64_ACPI_Desc_Hdr *Header)
{
ffffffff8021b689:	f3 0f 1e fa          	endbr64
ffffffff8021b68d:	55                   	push   %rbp
ffffffff8021b68e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b691:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021b695:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_u8_t Creator[5];
    rme_ptr_t OEM_Rev;
    rme_ptr_t Creator_Rev;

    /* Copy everything into our buffer */
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff8021b699:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021b69d:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
ffffffff8021b6a1:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b6a6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b6a9:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b6ac:	e8 3c 18 ff ff       	call   ffffffff8020ceed <_RME_Memcpy>
    Signature[4]='\0';
ffffffff8021b6b1:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff8021b6b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b6b9:	48 8d 48 0a          	lea    0xa(%rax),%rcx
ffffffff8021b6bd:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
ffffffff8021b6c1:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021b6c6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b6c9:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b6cc:	e8 1c 18 ff ff       	call   ffffffff8020ceed <_RME_Memcpy>
    ID[6]='\0';
ffffffff8021b6d1:	c6 45 ea 00          	movb   $0x0,-0x16(%rbp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff8021b6d5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b6d9:	48 8d 48 10          	lea    0x10(%rax),%rcx
ffffffff8021b6dd:	48 8d 45 db          	lea    -0x25(%rbp),%rax
ffffffff8021b6e1:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021b6e6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b6e9:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b6ec:	e8 fc 17 ff ff       	call   ffffffff8020ceed <_RME_Memcpy>
    Table_ID[8]='\0';
ffffffff8021b6f1:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff8021b6f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b6f9:	48 8d 48 1c          	lea    0x1c(%rax),%rcx
ffffffff8021b6fd:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
ffffffff8021b701:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b706:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b709:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b70c:	e8 dc 17 ff ff       	call   ffffffff8020ceed <_RME_Memcpy>
    Creator[4]='\0';
ffffffff8021b711:	c6 45 da 00          	movb   $0x0,-0x26(%rbp)

    OEM_Rev=Header->OEM_Revision;
ffffffff8021b715:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b719:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff8021b71c:	89 c0                	mov    %eax,%eax
ffffffff8021b71e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Creator_Rev=Header->Creator_Revision;
ffffffff8021b722:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b726:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff8021b729:	89 c0                	mov    %eax,%eax
ffffffff8021b72b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* And print these entries */
    RME_DBG_S("\n\rACPI:");
ffffffff8021b72f:	48 c7 c7 4b 78 22 80 	mov    $0xffffffff8022784b,%rdi
ffffffff8021b736:	e8 f2 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Signature);
ffffffff8021b73b:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
ffffffff8021b73f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b742:	e8 e6 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b747:	48 c7 c7 53 78 22 80 	mov    $0xffffffff80227853,%rdi
ffffffff8021b74e:	e8 da 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(ID);
ffffffff8021b753:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
ffffffff8021b757:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b75a:	e8 ce 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b75f:	48 c7 c7 53 78 22 80 	mov    $0xffffffff80227853,%rdi
ffffffff8021b766:	e8 c2 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Table_ID);
ffffffff8021b76b:	48 8d 45 db          	lea    -0x25(%rbp),%rax
ffffffff8021b76f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b772:	e8 b6 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b777:	48 c7 c7 53 78 22 80 	mov    $0xffffffff80227853,%rdi
ffffffff8021b77e:	e8 aa 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(OEM_Rev);
ffffffff8021b783:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b787:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b78a:	e8 a4 10 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S(", ");
ffffffff8021b78f:	48 c7 c7 53 78 22 80 	mov    $0xffffffff80227853,%rdi
ffffffff8021b796:	e8 92 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(Creator);
ffffffff8021b79b:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
ffffffff8021b79f:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b7a2:	e8 86 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b7a7:	48 c7 c7 53 78 22 80 	mov    $0xffffffff80227853,%rdi
ffffffff8021b7ae:	e8 7a 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(Creator_Rev);
ffffffff8021b7b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b7b7:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b7ba:	e8 74 10 ff ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S(".");
ffffffff8021b7bf:	48 c7 c7 56 78 22 80 	mov    $0xffffffff80227856,%rdi
ffffffff8021b7c6:	e8 62 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
}
ffffffff8021b7cb:	90                   	nop
ffffffff8021b7cc:	c9                   	leave
ffffffff8021b7cd:	c3                   	ret

ffffffff8021b7ce <__RME_X64_ACPI_Init>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
rme_ret_t __RME_X64_ACPI_Init(void)
{
ffffffff8021b7ce:	f3 0f 1e fa          	endbr64
ffffffff8021b7d2:	55                   	push   %rbp
ffffffff8021b7d3:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b7d6:	48 83 ec 30          	sub    $0x30,%rsp
    rme_cnt_t Count;
    rme_cnt_t Table_Num;
    struct RME_X64_ACPI_RDSP_Desc* RDSP=RME_NULL;
ffffffff8021b7da:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b7e1:	00 
    struct RME_X64_ACPI_RSDT_Hdr* RSDT=RME_NULL;
ffffffff8021b7e2:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8021b7e9:	00 
    struct RME_X64_ACPI_MADT_Hdr* MADT=RME_NULL;
ffffffff8021b7ea:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b7f1:	00 
    struct RME_X64_ACPI_Desc_Hdr* Header=RME_NULL;
ffffffff8021b7f2:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8021b7f9:	00 

    /* Try to find RDSP */
    RDSP=__RME_X64_RDSP_Find();
ffffffff8021b7fa:	e8 ee fa ff ff       	call   ffffffff8021b2ed <__RME_X64_RDSP_Find>
ffffffff8021b7ff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    RME_DBG_S("\r\nRDSP address: ");
ffffffff8021b803:	48 c7 c7 58 78 22 80 	mov    $0xffffffff80227858,%rdi
ffffffff8021b80a:	e8 1e 12 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)RDSP);
ffffffff8021b80f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b813:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b816:	e8 50 11 ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
    /* Find the RSDT */
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff8021b81b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b81f:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8021b822:	89 c2                	mov    %eax,%edx
ffffffff8021b824:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b82b:	80 ff ff 
ffffffff8021b82e:	48 01 d0             	add    %rdx,%rax
ffffffff8021b831:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_DBG_S("\r\nRSDT address: ");
ffffffff8021b835:	48 c7 c7 69 78 22 80 	mov    $0xffffffff80227869,%rdi
ffffffff8021b83c:	e8 ec 11 ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)RSDT);
ffffffff8021b841:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b845:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b848:	e8 1e 11 ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff8021b84d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b851:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b854:	89 c0                	mov    %eax,%eax
ffffffff8021b856:	48 83 e8 24          	sub    $0x24,%rax
ffffffff8021b85a:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff8021b85e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    for(Count=0;Count<Table_Num;Count++)
ffffffff8021b862:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021b869:	00 
ffffffff8021b86a:	eb 59                	jmp    ffffffff8021b8c5 <__RME_X64_ACPI_Init+0xf7>
    {
        /* See what did we find */
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff8021b86c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b870:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b874:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8021b878:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
ffffffff8021b87c:	89 c2                	mov    %eax,%edx
ffffffff8021b87e:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b885:	80 ff ff 
ffffffff8021b888:	48 01 d0             	add    %rdx,%rax
ffffffff8021b88b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        __RME_X64_ACPI_Debug(Header);
ffffffff8021b88f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b893:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b896:	e8 ee fd ff ff       	call   ffffffff8021b689 <__RME_X64_ACPI_Debug>
        /* See if this is the MADT */
        if(_RME_Memcmp(Header->Signature, "APIC", 4)==0)
ffffffff8021b89b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b89f:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b8a4:	48 c7 c6 7a 78 22 80 	mov    $0xffffffff8022787a,%rsi
ffffffff8021b8ab:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b8ae:	e8 a9 15 ff ff       	call   ffffffff8020ce5c <_RME_Memcmp>
ffffffff8021b8b3:	48 85 c0             	test   %rax,%rax
ffffffff8021b8b6:	75 08                	jne    ffffffff8021b8c0 <__RME_X64_ACPI_Init+0xf2>
            MADT=(struct RME_X64_ACPI_MADT_Hdr*)Header;
ffffffff8021b8b8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b8bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0;Count<Table_Num;Count++)
ffffffff8021b8c0:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021b8c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b8c9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021b8cd:	7c 9d                	jl     ffffffff8021b86c <__RME_X64_ACPI_Init+0x9e>
    }

    return __RME_X64_SMP_Detect(MADT);
ffffffff8021b8cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b8d3:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b8d6:	e8 71 fa ff ff       	call   ffffffff8021b34c <__RME_X64_SMP_Detect>
}
ffffffff8021b8db:	c9                   	leave
ffffffff8021b8dc:	c3                   	ret

ffffffff8021b8dd <__RME_X64_Feature_Get>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_Feature_Get(void)
{
ffffffff8021b8dd:	f3 0f 1e fa          	endbr64
ffffffff8021b8e1:	55                   	push   %rbp
ffffffff8021b8e2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b8e5:	48 83 ec 10          	sub    $0x10,%rsp
    rme_cnt_t Count;

    /* What's the maximum feature? */
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff8021b8e9:	48 c7 c1 68 43 23 80 	mov    $0xffffffff80234368,%rcx
ffffffff8021b8f0:	48 c7 c2 60 43 23 80 	mov    $0xffffffff80234360,%rdx
ffffffff8021b8f7:	48 c7 c6 58 43 23 80 	mov    $0xffffffff80234358,%rsi
ffffffff8021b8fe:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff8021b903:	e8 41 ff fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b908:	48 89 05 31 8a 01 00 	mov    %rax,0x18a31(%rip)        # ffffffff80234340 <RME_X64_Feature>
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][1]),
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][2]),
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][3]));
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;
ffffffff8021b90f:	48 8b 05 2a 8a 01 00 	mov    0x18a2a(%rip),%rax        # ffffffff80234340 <RME_X64_Feature>
ffffffff8021b916:	48 89 05 33 8a 01 00 	mov    %rax,0x18a33(%rip)        # ffffffff80234350 <RME_X64_Feature+0x10>

    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021b91d:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8021b924:	00 
ffffffff8021b925:	eb 5c                	jmp    ffffffff8021b983 <__RME_X64_Feature_Get+0xa6>
    {
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][1]),
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][3]));
ffffffff8021b927:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b92b:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b92f:	48 83 c0 28          	add    $0x28,%rax
ffffffff8021b933:	48 8d 88 40 43 23 80 	lea    -0x7fdcbcc0(%rax),%rcx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
ffffffff8021b93a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b93e:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b942:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b946:	48 8d 90 40 43 23 80 	lea    -0x7fdcbcc0(%rax),%rdx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][1]),
ffffffff8021b94d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b951:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b955:	48 83 c0 18          	add    $0x18,%rax
ffffffff8021b959:	48 8d b0 40 43 23 80 	lea    -0x7fdcbcc0(%rax),%rsi
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff8021b960:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b964:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b967:	e8 dd fe fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b96c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b970:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021b974:	48 81 c2 50 43 23 80 	add    $0xffffffff80234350,%rdx
ffffffff8021b97b:	48 89 02             	mov    %rax,(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021b97e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021b983:	48 8b 15 b6 89 01 00 	mov    0x189b6(%rip),%rdx        # ffffffff80234340 <RME_X64_Feature>
ffffffff8021b98a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b98e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b991:	73 94                	jae    ffffffff8021b927 <__RME_X64_Feature_Get+0x4a>
    }

    /* What's the maximum extended feature? */
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff8021b993:	48 c7 c1 68 45 23 80 	mov    $0xffffffff80234568,%rcx
ffffffff8021b99a:	48 c7 c2 60 45 23 80 	mov    $0xffffffff80234560,%rdx
ffffffff8021b9a1:	48 c7 c6 58 45 23 80 	mov    $0xffffffff80234558,%rsi
ffffffff8021b9a8:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff8021b9ad:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b9b0:	e8 94 fe fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b9b5:	48 89 05 8c 89 01 00 	mov    %rax,0x1898c(%rip)        # ffffffff80234348 <RME_X64_Feature+0x8>
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][1]),
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][2]),
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][3]));
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;
ffffffff8021b9bc:	48 8b 05 85 89 01 00 	mov    0x18985(%rip),%rax        # ffffffff80234348 <RME_X64_Feature+0x8>
ffffffff8021b9c3:	48 89 05 86 8b 01 00 	mov    %rax,0x18b86(%rip)        # ffffffff80234550 <RME_X64_Feature+0x210>


    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021b9ca:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8021b9d1:	00 
ffffffff8021b9d2:	eb 67                	jmp    ffffffff8021ba3b <__RME_X64_Feature_Get+0x15e>
    {
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][1]),
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][3]));
ffffffff8021b9d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b9d8:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b9dc:	48 05 28 02 00 00    	add    $0x228,%rax
ffffffff8021b9e2:	48 8d 88 40 43 23 80 	lea    -0x7fdcbcc0(%rax),%rcx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
ffffffff8021b9e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b9ed:	48 83 c0 11          	add    $0x11,%rax
ffffffff8021b9f1:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021b9f5:	48 8d 90 40 43 23 80 	lea    -0x7fdcbcc0(%rax),%rdx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][1]),
ffffffff8021b9fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba00:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021ba04:	48 05 18 02 00 00    	add    $0x218,%rax
ffffffff8021ba0a:	48 05 40 43 23 80    	add    $0xffffffff80234340,%rax
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff8021ba10:	be 00 00 00 80       	mov    $0x80000000,%esi
ffffffff8021ba15:	48 0b 75 f8          	or     -0x8(%rbp),%rsi
ffffffff8021ba19:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021ba1c:	48 89 c6             	mov    %rax,%rsi
ffffffff8021ba1f:	e8 25 fe fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021ba24:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021ba28:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021ba2c:	48 81 c2 50 45 23 80 	add    $0xffffffff80234550,%rdx
ffffffff8021ba33:	48 89 02             	mov    %rax,(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021ba36:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021ba3b:	48 8b 05 06 89 01 00 	mov    0x18906(%rip),%rax        # ffffffff80234348 <RME_X64_Feature+0x8>
ffffffff8021ba42:	48 8d 90 00 00 00 80 	lea    -0x80000000(%rax),%rdx
ffffffff8021ba49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba4d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ba50:	73 82                	jae    ffffffff8021b9d4 <__RME_X64_Feature_Get+0xf7>
    }

    /* TODO: Check these flags. If not satisfied, we hang immediately. */
}
ffffffff8021ba52:	90                   	nop
ffffffff8021ba53:	90                   	nop
ffffffff8021ba54:	c9                   	leave
ffffffff8021ba55:	c3                   	ret

ffffffff8021ba56 <__RME_X64_Mem_Init>:
volatile struct RME_List RME_X64_Phys_Mem;
/* The BIOS wouldn't really report more than 1024 blocks of memory */
struct __RME_X64_Mem RME_X64_Mem[1024];

void __RME_X64_Mem_Init(rme_ptr_t MMap_Addr, rme_ptr_t MMap_Length)
{
ffffffff8021ba56:	f3 0f 1e fa          	endbr64
ffffffff8021ba5a:	55                   	push   %rbp
ffffffff8021ba5b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021ba5e:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021ba62:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021ba66:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    struct multiboot_mmap_entry* MMap;
    volatile struct RME_List* Trav_Ptr;
    rme_ptr_t MMap_Cnt;
    rme_ptr_t Info_Cnt;
    MMap_Cnt=0;
ffffffff8021ba6a:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021ba71:	00 
    Info_Cnt=0;
ffffffff8021ba72:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021ba79:	00 

    __RME_List_Crt(&RME_X64_Phys_Mem);
ffffffff8021ba7a:	48 c7 c7 00 b0 22 80 	mov    $0xffffffff8022b000,%rdi
ffffffff8021ba81:	e8 a1 b6 00 00       	call   ffffffff80227127 <__RME_List_Crt>

    while(MMap_Cnt<MMap_Length)
ffffffff8021ba86:	e9 72 01 00 00       	jmp    ffffffff8021bbfd <__RME_X64_Mem_Init+0x1a7>
    {
        MMap=(struct multiboot_mmap_entry*)(MMap_Addr+MMap_Cnt);
ffffffff8021ba8b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021ba8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ba93:	48 01 d0             	add    %rdx,%rax
ffffffff8021ba96:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        MMap_Cnt+=MMap->size+4;
ffffffff8021ba9a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021ba9e:	8b 00                	mov    (%rax),%eax
ffffffff8021baa0:	83 c0 04             	add    $0x4,%eax
ffffffff8021baa3:	89 c0                	mov    %eax,%eax
ffffffff8021baa5:	48 01 45 f0          	add    %rax,-0x10(%rbp)

        if(MMap->type!=1)
ffffffff8021baa9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021baad:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021bab0:	83 f8 01             	cmp    $0x1,%eax
ffffffff8021bab3:	74 5a                	je     ffffffff8021bb0f <__RME_X64_Mem_Init+0xb9>
        {
            RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff8021bab5:	48 c7 c7 7f 78 22 80 	mov    $0xffffffff8022787f,%rdi
ffffffff8021babc:	e8 6c 0f ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_Hex_Print(MMap->addr);
ffffffff8021bac1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bac5:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bac9:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bacc:	e8 9a 0e ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
            RME_DBG_S(", 0x");
ffffffff8021bad1:	48 c7 c7 95 78 22 80 	mov    $0xffffffff80227895,%rdi
ffffffff8021bad8:	e8 50 0f ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_Hex_Print(MMap->len);
ffffffff8021badd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bae1:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bae5:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bae8:	e8 7e 0e ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
            RME_DBG_S(", ");
ffffffff8021baed:	48 c7 c7 53 78 22 80 	mov    $0xffffffff80227853,%rdi
ffffffff8021baf4:	e8 34 0f ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_Hex_Print(MMap->type);
ffffffff8021baf9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bafd:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021bb00:	89 c0                	mov    %eax,%eax
ffffffff8021bb02:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bb05:	e8 61 0e ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
            continue;
ffffffff8021bb0a:	e9 ee 00 00 00       	jmp    ffffffff8021bbfd <__RME_X64_Mem_Init+0x1a7>
        }

        Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bb0f:	48 8b 05 ea f4 00 00 	mov    0xf4ea(%rip),%rax        # ffffffff8022b000 <RME_X64_Phys_Mem>
ffffffff8021bb16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bb1a:	eb 20                	jmp    ffffffff8021bb3c <__RME_X64_Mem_Init+0xe6>
        {
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
ffffffff8021bb1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb20:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021bb24:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021bb28:	48 8b 52 04          	mov    0x4(%rdx),%rdx
ffffffff8021bb2c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021bb2f:	72 17                	jb     ffffffff8021bb48 <__RME_X64_Mem_Init+0xf2>
                break;
            Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bb31:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb35:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bb38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bb3c:	48 81 7d f8 00 b0 22 	cmpq   $0xffffffff8022b000,-0x8(%rbp)
ffffffff8021bb43:	80 
ffffffff8021bb44:	75 d6                	jne    ffffffff8021bb1c <__RME_X64_Mem_Init+0xc6>
ffffffff8021bb46:	eb 01                	jmp    ffffffff8021bb49 <__RME_X64_Mem_Init+0xf3>
                break;
ffffffff8021bb48:	90                   	nop
        }
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff8021bb49:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bb4d:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bb51:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bb55:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bb59:	48 81 c2 30 b0 22 80 	add    $0xffffffff8022b030,%rdx
ffffffff8021bb60:	48 89 02             	mov    %rax,(%rdx)
        RME_X64_Mem[Info_Cnt].Length=MMap->len;
ffffffff8021bb63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bb67:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bb6b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bb6f:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bb73:	48 81 c2 38 b0 22 80 	add    $0xffffffff8022b038,%rdx
ffffffff8021bb7a:	48 89 02             	mov    %rax,(%rdx)
        __RME_List_Ins(&(RME_X64_Mem[Info_Cnt].Head),Trav_Ptr->Prev,Trav_Ptr);
ffffffff8021bb7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb81:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021bb85:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bb89:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bb8d:	48 8d 8a 20 b0 22 80 	lea    -0x7fdd4fe0(%rdx),%rcx
ffffffff8021bb94:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021bb98:	48 89 c6             	mov    %rax,%rsi
ffffffff8021bb9b:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021bb9e:	e8 ae b5 00 00       	call   ffffffff80227151 <__RME_List_Ins>

        /* Just print them then */
        RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff8021bba3:	48 c7 c7 7f 78 22 80 	mov    $0xffffffff8022787f,%rdi
ffffffff8021bbaa:	e8 7e 0e ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_Hex_Print(MMap->addr);
ffffffff8021bbaf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bbb3:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bbb7:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bbba:	e8 ac 0d ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
        RME_DBG_S(", 0x");
ffffffff8021bbbf:	48 c7 c7 95 78 22 80 	mov    $0xffffffff80227895,%rdi
ffffffff8021bbc6:	e8 62 0e ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_Hex_Print(MMap->len);
ffffffff8021bbcb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bbcf:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bbd3:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bbd6:	e8 90 0d ff ff       	call   ffffffff8020c96b <RME_Hex_Print>
        RME_DBG_S(", ");
ffffffff8021bbdb:	48 c7 c7 53 78 22 80 	mov    $0xffffffff80227853,%rdi
ffffffff8021bbe2:	e8 46 0e ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_Hex_Print(MMap->type);
ffffffff8021bbe7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bbeb:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021bbee:	89 c0                	mov    %eax,%eax
ffffffff8021bbf0:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bbf3:	e8 73 0d ff ff       	call   ffffffff8020c96b <RME_Hex_Print>

        Info_Cnt++;
ffffffff8021bbf8:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    while(MMap_Cnt<MMap_Length)
ffffffff8021bbfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bc01:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021bc05:	0f 82 80 fe ff ff    	jb     ffffffff8021ba8b <__RME_X64_Mem_Init+0x35>
    }

    /* Check if any memory segment overlaps. If yes, merge them into one,
     * until there is no overlapping segments */
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bc0b:	48 8b 05 ee f3 00 00 	mov    0xf3ee(%rip),%rax        # ffffffff8022b000 <RME_X64_Phys_Mem>
ffffffff8021bc12:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021bc16:	eb 75                	jmp    ffffffff8021bc8d <__RME_X64_Mem_Init+0x237>
    {
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bc18:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc1c:	48 8b 50 10          	mov    0x10(%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length)>
ffffffff8021bc20:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc24:	48 8b 40 18          	mov    0x18(%rax),%rax
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bc28:	48 01 c2             	add    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
ffffffff8021bc2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc2f:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc32:	48 8b 40 10          	mov    0x10(%rax),%rax
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bc36:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021bc39:	73 47                	jae    ffffffff8021bc82 <__RME_X64_Mem_Init+0x22c>
        {
            /* Merge these two blocks */
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021bc3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc3f:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc42:	48 8b 50 10          	mov    0x10(%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021bc46:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc4a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc4d:	48 8b 40 18          	mov    0x18(%rax),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021bc51:	48 01 c2             	add    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr;
ffffffff8021bc54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc58:	48 8b 40 10          	mov    0x10(%rax),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021bc5c:	48 29 c2             	sub    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
ffffffff8021bc5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc63:	48 89 50 18          	mov    %rdx,0x18(%rax)
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff8021bc67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc6b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc6e:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021bc71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc75:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021bc78:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bc7b:	e8 1a b5 00 00       	call   ffffffff8022719a <__RME_List_Del>
            continue;
ffffffff8021bc80:	eb 0b                	jmp    ffffffff8021bc8d <__RME_X64_Mem_Init+0x237>
        }
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bc82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc86:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc89:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021bc8d:	48 81 7d f8 00 b0 22 	cmpq   $0xffffffff8022b000,-0x8(%rbp)
ffffffff8021bc94:	80 
ffffffff8021bc95:	74 13                	je     ffffffff8021bcaa <__RME_X64_Mem_Init+0x254>
ffffffff8021bc97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc9b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc9e:	48 3d 00 b0 22 80    	cmp    $0xffffffff8022b000,%rax
ffffffff8021bca4:	0f 85 6e ff ff ff    	jne    ffffffff8021bc18 <__RME_X64_Mem_Init+0x1c2>
    }

    /* Calculate total memory */
    MMap_Cnt=0;
ffffffff8021bcaa:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021bcb1:	00 
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bcb2:	48 8b 05 47 f3 00 00 	mov    0xf347(%rip),%rax        # ffffffff8022b000 <RME_X64_Phys_Mem>
ffffffff8021bcb9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bcbd:	eb 17                	jmp    ffffffff8021bcd6 <__RME_X64_Mem_Init+0x280>
    {
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
ffffffff8021bcbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bcc3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021bcc7:	48 01 45 f0          	add    %rax,-0x10(%rbp)
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bccb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bccf:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bcd2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bcd6:	48 81 7d f8 00 b0 22 	cmpq   $0xffffffff8022b000,-0x8(%rbp)
ffffffff8021bcdd:	80 
ffffffff8021bcde:	75 df                	jne    ffffffff8021bcbf <__RME_X64_Mem_Init+0x269>
    }
    RME_DBG_S("\n\rTotal physical memory: 0x");
ffffffff8021bce0:	48 c7 c7 9a 78 22 80 	mov    $0xffffffff8022789a,%rdi
ffffffff8021bce7:	e8 41 0d ff ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_Hex_Print(MMap_Cnt);
ffffffff8021bcec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bcf0:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bcf3:	e8 73 0c ff ff       	call   ffffffff8020c96b <RME_Hex_Print>

    /* At least 256MB memory required on x64 architecture */
    RME_ASSERT(MMap_Cnt>=RME_POW2(RME_PGT_SIZE_256M));

    /* Kernel virtual memory layout */
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff8021bcf8:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021bcff:	80 ff ff 
ffffffff8021bd02:	48 89 05 37 73 01 00 	mov    %rax,0x17337(%rip)        # ffffffff80233040 <RME_X64_Layout>
    /* +1G in cases where we have > 3GB memory for covering the memory hole */
    Info_Cnt=(MMap_Cnt>3*RME_POW2(RME_PGT_SIZE_1G))?(MMap_Cnt+RME_POW2(RME_PGT_SIZE_1G)):MMap_Cnt;
ffffffff8021bd09:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
ffffffff8021bd0e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8021bd12:	73 0c                	jae    ffffffff8021bd20 <__RME_X64_Mem_Init+0x2ca>
ffffffff8021bd14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd18:	48 05 00 00 00 40    	add    $0x40000000,%rax
ffffffff8021bd1e:	eb 04                	jmp    ffffffff8021bd24 <__RME_X64_Mem_Init+0x2ce>
ffffffff8021bd20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bd24:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    RME_X64_Layout.Kot_Size=((Info_Cnt>>RME_KOM_SLOT_ORDER)>>RME_WORD_ORDER)+1;
ffffffff8021bd28:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021bd2c:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff8021bd30:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021bd34:	48 89 05 0d 73 01 00 	mov    %rax,0x1730d(%rip)        # ffffffff80233048 <RME_X64_Layout+0x8>

    /* Calculate the per-CPU data structure size - each CPU have two 4k pages */
    RME_X64_Layout.PerCPU_Start=RME_ROUND_UP(RME_X64_Layout.Kot_Start+RME_X64_Layout.Kot_Size,RME_PGT_SIZE_4K);
ffffffff8021bd3b:	48 8b 15 fe 72 01 00 	mov    0x172fe(%rip),%rdx        # ffffffff80233040 <RME_X64_Layout>
ffffffff8021bd42:	48 8b 05 ff 72 01 00 	mov    0x172ff(%rip),%rax        # ffffffff80233048 <RME_X64_Layout+0x8>
ffffffff8021bd49:	48 01 d0             	add    %rdx,%rax
ffffffff8021bd4c:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff8021bd52:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8021bd58:	48 89 05 f1 72 01 00 	mov    %rax,0x172f1(%rip)        # ffffffff80233050 <RME_X64_Layout+0x10>
    RME_X64_Layout.PerCPU_Size=2*RME_POW2(RME_PGT_SIZE_4K)*RME_X64_Num_CPU;
ffffffff8021bd5f:	48 8b 05 42 75 01 00 	mov    0x17542(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021bd66:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8021bd6a:	48 89 05 e7 72 01 00 	mov    %rax,0x172e7(%rip)        # ffffffff80233058 <RME_X64_Layout+0x18>

    /* Now decide the size of the stack */
    RME_X64_Layout.Stack_Size=RME_X64_Num_CPU<<RME_X64_KSTACK_ORDER;
ffffffff8021bd71:	48 8b 05 30 75 01 00 	mov    0x17530(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff8021bd78:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff8021bd7c:	48 89 05 1d 75 01 00 	mov    %rax,0x1751d(%rip)        # ffffffff802332a0 <RME_X64_Layout+0x260>
}
ffffffff8021bd83:	90                   	nop
ffffffff8021bd84:	c9                   	leave
ffffffff8021bd85:	c3                   	ret

ffffffff8021bd86 <__RME_X64_CPU_Local_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_CPU_Local_Init(void)
{
ffffffff8021bd86:	f3 0f 1e fa          	endbr64
ffffffff8021bd8a:	55                   	push   %rbp
ffffffff8021bd8b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021bd8e:	48 83 ec 40          	sub    $0x40,%rsp
    struct RME_CPU_Local* CPU_Local;
    rme_ptr_t* GDT_Table;
    rme_ptr_t TSS_Table;
    rme_cnt_t Count;

    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff8021bd92:	48 8b 05 b7 72 01 00 	mov    0x172b7(%rip),%rax        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff8021bd99:	48 8b 15 10 75 01 00 	mov    0x17510(%rip),%rdx        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8021bda0:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021bda4:	48 01 d0             	add    %rdx,%rax
ffffffff8021bda7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
ffffffff8021bdab:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021bdb2:	00 
ffffffff8021bdb3:	eb 1b                	jmp    ffffffff8021bdd0 <__RME_X64_CPU_Local_Init+0x4a>
        IDT_Table[Count].Type_Attr=0;
ffffffff8021bdb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bdb9:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021bdbd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bdc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdc4:	48 01 d0             	add    %rdx,%rax
ffffffff8021bdc7:	c6 40 05 00          	movb   $0x0,0x5(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021bdcb:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021bdd0:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff8021bdd7:	00 
ffffffff8021bdd8:	7e db                	jle    ffffffff8021bdb5 <__RME_X64_CPU_Local_Init+0x2f>

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8021bdda:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bde1:	89 c2                	mov    %eax,%edx
ffffffff8021bde3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bde7:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bdea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bdf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bdf8:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bdfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be00:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021be04:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021be0b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021be0f:	89 c2                	mov    %eax,%edx
ffffffff8021be11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be15:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021be19:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021be20:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021be24:	89 c2                	mov    %eax,%edx
ffffffff8021be26:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be2a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021be2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be31:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8021be38:	48 c7 c2 df b8 20 80 	mov    $0xffffffff8020b8df,%rdx
ffffffff8021be3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be43:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021be47:	66 89 10             	mov    %dx,(%rax)
ffffffff8021be4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be4e:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021be52:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021be58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be5c:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021be60:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021be64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be68:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021be6c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021be70:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
ffffffff8021be77:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021be7b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021be7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be82:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021be86:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021be8a:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
ffffffff8021be91:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021be95:	48 89 c2             	mov    %rax,%rdx
ffffffff8021be98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be9c:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bea0:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bea3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bea7:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021beab:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8021beb2:	48 c7 c2 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rdx
ffffffff8021beb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bebd:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bec1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bec4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bec8:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021becc:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bed2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bed6:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021beda:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bede:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bee2:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bee6:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021beea:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
ffffffff8021bef1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bef5:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bef8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021befc:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bf00:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bf04:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
ffffffff8021bf0b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bf0f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf16:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bf1a:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bf1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf21:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bf25:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8021bf2c:	48 c7 c2 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rdx
ffffffff8021bf33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf37:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bf3b:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bf3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf42:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bf46:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bf4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf50:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bf54:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bf58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf5c:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bf60:	c6 40 05 ee          	movb   $0xee,0x5(%rax)
ffffffff8021bf64:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
ffffffff8021bf6b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bf6f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf76:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bf7a:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bf7e:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
ffffffff8021bf85:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bf89:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf90:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bf94:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bf97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf9b:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021bf9f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8021bfa6:	48 c7 c2 03 b9 20 80 	mov    $0xffffffff8020b903,%rdx
ffffffff8021bfad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfb1:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bfb5:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bfb8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfbc:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bfc0:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bfc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfca:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bfce:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bfd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfd6:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bfda:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bfde:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
ffffffff8021bfe5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bfe9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bfec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bff0:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021bff4:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bff8:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
ffffffff8021bfff:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c003:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c006:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c00a:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c00e:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c011:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c015:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c019:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8021c020:	48 c7 c2 0c b9 20 80 	mov    $0xffffffff8020b90c,%rdx
ffffffff8021c027:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c02b:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c02f:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c032:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c036:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c03a:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c040:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c044:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c048:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c04c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c050:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c054:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c058:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
ffffffff8021c05f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c063:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c066:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c06a:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c06e:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c072:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
ffffffff8021c079:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c07d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c080:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c084:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c088:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c08b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c08f:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c093:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8021c09a:	48 c7 c2 15 b9 20 80 	mov    $0xffffffff8020b915,%rdx
ffffffff8021c0a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0a5:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c0a9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c0ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0b0:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c0b4:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c0ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0be:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c0c2:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c0c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0ca:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c0ce:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c0d2:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
ffffffff8021c0d9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c0dd:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c0e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0e4:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c0e8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c0ec:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
ffffffff8021c0f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c0f7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c0fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0fe:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c102:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c105:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c109:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c10d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff8021c114:	48 c7 c2 1e b9 20 80 	mov    $0xffffffff8020b91e,%rdx
ffffffff8021c11b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c11f:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c123:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c126:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c12a:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c12e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c134:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c138:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c13c:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c140:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c144:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c148:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c14c:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021c153:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c157:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c15a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c15e:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c162:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c166:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021c16d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c171:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c174:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c178:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c17c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c17f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c183:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c187:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8021c18e:	48 c7 c2 27 b9 20 80 	mov    $0xffffffff8020b927,%rdx
ffffffff8021c195:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c199:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c19d:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c1a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1a4:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c1a8:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c1ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1b2:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c1b6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c1ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1be:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c1c2:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c1c6:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
ffffffff8021c1cd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c1d1:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c1d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1d8:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c1dc:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c1e0:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
ffffffff8021c1e7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c1eb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c1ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1f2:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c1f6:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c1f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1fd:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c201:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8021c208:	48 c7 c2 2e b9 20 80 	mov    $0xffffffff8020b92e,%rdx
ffffffff8021c20f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c213:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c219:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c21c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c220:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c226:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c22c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c230:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c236:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c23a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c23e:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c244:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c248:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8021c24f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c253:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c256:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c25a:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c260:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c264:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8021c26b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c26f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c272:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c276:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c27c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c27f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c283:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c289:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8021c290:	48 c7 c2 37 b9 20 80 	mov    $0xffffffff8020b937,%rdx
ffffffff8021c297:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c29b:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c2a1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c2a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2a8:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c2ae:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c2b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2b8:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c2be:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c2c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2c6:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c2cc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c2d0:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
ffffffff8021c2d7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c2db:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c2de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2e2:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c2e8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c2ec:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
ffffffff8021c2f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c2f7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c2fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2fe:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c304:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c307:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c30b:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c311:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021c318:	48 c7 c2 3e b9 20 80 	mov    $0xffffffff8020b93e,%rdx
ffffffff8021c31f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c323:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c329:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c32c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c330:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c336:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c33c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c340:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c346:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c34a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c34e:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c354:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c358:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
ffffffff8021c35f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c363:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c366:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c36a:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c370:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c374:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
ffffffff8021c37b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c37f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c382:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c386:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c38c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c38f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c393:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c399:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8021c3a0:	48 c7 c2 45 b9 20 80 	mov    $0xffffffff8020b945,%rdx
ffffffff8021c3a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3ab:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c3b1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c3b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3b8:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c3be:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c3c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3c8:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c3ce:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c3d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3d6:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c3dc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c3e0:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
ffffffff8021c3e7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c3eb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c3ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3f2:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c3f8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c3fc:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
ffffffff8021c403:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c407:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c40a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c40e:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c414:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c417:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c41b:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c421:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8021c428:	48 c7 c2 4c b9 20 80 	mov    $0xffffffff8020b94c,%rdx
ffffffff8021c42f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c433:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c439:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c43c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c440:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c446:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c44c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c450:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c456:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c45a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c45e:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c464:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c468:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
ffffffff8021c46f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c473:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c476:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c47a:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c480:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c484:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
ffffffff8021c48b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c48f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c492:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c496:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c49c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c49f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4a3:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c4a9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8021c4b0:	48 c7 c2 53 b9 20 80 	mov    $0xffffffff8020b953,%rdx
ffffffff8021c4b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4bb:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c4c1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c4c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4c8:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c4ce:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c4d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4d8:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c4de:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c4e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4e6:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c4ec:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c4f0:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
ffffffff8021c4f7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c4fb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c4fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c502:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c508:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c50c:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
ffffffff8021c513:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c517:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c51a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c51e:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c524:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c527:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c52b:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c531:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021c538:	48 c7 c2 5a b9 20 80 	mov    $0xffffffff8020b95a,%rdx
ffffffff8021c53f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c543:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c549:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c54c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c550:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c556:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c55c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c560:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c566:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c56a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c56e:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c574:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c578:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
ffffffff8021c57f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c583:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c586:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c58a:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c590:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c594:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
ffffffff8021c59b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c59f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c5a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5a6:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c5ac:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c5af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5b3:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c5b9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8021c5c0:	48 c7 c2 63 b9 20 80 	mov    $0xffffffff8020b963,%rdx
ffffffff8021c5c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5cb:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c5d1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c5d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5d8:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c5de:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c5e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5e8:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c5ee:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c5f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5f6:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c5fc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c600:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
ffffffff8021c607:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c60b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c60e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c612:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c618:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c61c:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
ffffffff8021c623:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c627:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c62a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c62e:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c634:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c637:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c63b:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c641:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8021c648:	48 c7 c2 6a b9 20 80 	mov    $0xffffffff8020b96a,%rdx
ffffffff8021c64f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c653:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c659:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c65c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c660:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c666:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c66c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c670:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c676:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c67a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c67e:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c684:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c688:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
ffffffff8021c68f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c693:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c696:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c69a:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c6a0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c6a4:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
ffffffff8021c6ab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c6af:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c6b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6b6:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c6bc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c6bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6c3:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c6c9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021c6d0:	48 c7 c2 73 b9 20 80 	mov    $0xffffffff8020b973,%rdx
ffffffff8021c6d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6db:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c6e1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c6e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6e8:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c6ee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c6f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6f8:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c6fe:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c702:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c706:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c70c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c710:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
ffffffff8021c717:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c71b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c71e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c722:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c728:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c72c:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
ffffffff8021c733:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c737:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c73a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c73e:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c744:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c747:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c74b:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c751:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8021c758:	48 c7 c2 7c b9 20 80 	mov    $0xffffffff8020b97c,%rdx
ffffffff8021c75f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c763:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c769:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c76c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c770:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c776:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c77c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c780:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c786:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c78a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c78e:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c794:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c798:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
ffffffff8021c79f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c7a3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c7a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7aa:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c7b0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c7b4:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
ffffffff8021c7bb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c7bf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c7c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7c6:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c7cc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c7cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7d3:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c7d9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8021c7e0:	48 c7 c2 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rdx
ffffffff8021c7e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7eb:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c7f1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c7f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7f8:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c7fe:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c804:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c808:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c80e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c812:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c816:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c81c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c820:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021c827:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c82b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c82e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c832:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c838:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c83c:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021c843:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c847:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c84a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c84e:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c854:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c857:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c85b:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c861:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021c868:	48 c7 c2 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rdx
ffffffff8021c86f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c873:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c879:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c87c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c880:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c886:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c88c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c890:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c896:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c89a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c89e:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c8a4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c8a8:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021c8af:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c8b3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c8b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8ba:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c8c0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c8c4:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021c8cb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c8cf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c8d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8d6:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c8dc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c8df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8e3:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c8e9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021c8f0:	48 c7 c2 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rdx
ffffffff8021c8f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8fb:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c901:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c904:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c908:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c90e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c914:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c918:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c91e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c922:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c926:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c92c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c930:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
ffffffff8021c937:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c93b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c93e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c942:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c948:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c94c:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
ffffffff8021c953:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c957:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c95a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c95e:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c964:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c967:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c96b:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c971:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021c978:	48 c7 c2 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rdx
ffffffff8021c97f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c983:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c989:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c98c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c990:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c996:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c99c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9a0:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c9a6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c9aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9ae:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c9b4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c9b8:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff8021c9bf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c9c3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c9c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9ca:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c9d0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c9d4:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff8021c9db:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c9df:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c9e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9e6:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c9ec:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c9ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9f3:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021c9f9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8021ca00:	48 c7 c2 05 ba 20 80 	mov    $0xffffffff8020ba05,%rdx
ffffffff8021ca07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca0b:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021ca11:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ca14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca18:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021ca1e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ca24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca28:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021ca2e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ca32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca36:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021ca3c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ca40:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
ffffffff8021ca47:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ca4b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca52:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021ca58:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ca5c:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
ffffffff8021ca63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ca67:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca6e:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021ca74:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ca77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca7b:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021ca81:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ca88:	48 c7 c2 11 ba 20 80 	mov    $0xffffffff8020ba11,%rdx
ffffffff8021ca8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca93:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021ca99:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ca9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021caa0:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021caa6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021caac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cab0:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cab6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021caba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cabe:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cac4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cac8:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff8021cacf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cad3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cad6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cada:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cae0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cae4:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff8021caeb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021caef:	48 89 c2             	mov    %rax,%rdx
ffffffff8021caf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021caf6:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cafc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021caff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb03:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cb09:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8021cb10:	48 c7 c2 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rdx
ffffffff8021cb17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb1b:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cb21:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cb24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb28:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cb2e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cb34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb38:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cb3e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cb42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb46:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cb4c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cb50:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
ffffffff8021cb57:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cb5b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb62:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cb68:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cb6c:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
ffffffff8021cb73:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cb77:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb7e:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cb84:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cb87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb8b:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cb91:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cb98:	48 c7 c2 29 ba 20 80 	mov    $0xffffffff8020ba29,%rdx
ffffffff8021cb9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cba3:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cba9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cbac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbb0:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cbb6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cbbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbc0:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cbc6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cbca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbce:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cbd4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cbd8:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff8021cbdf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cbe3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cbe6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbea:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cbf0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cbf4:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff8021cbfb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cbff:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc06:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cc0c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cc0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc13:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cc19:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8021cc20:	48 c7 c2 35 ba 20 80 	mov    $0xffffffff8020ba35,%rdx
ffffffff8021cc27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc2b:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cc31:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cc34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc38:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cc3e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cc44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc48:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cc4e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cc52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc56:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cc5c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cc60:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
ffffffff8021cc67:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cc6b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc72:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cc78:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cc7c:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
ffffffff8021cc83:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cc87:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc8e:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cc94:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cc97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc9b:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cca1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cca8:	48 c7 c2 41 ba 20 80 	mov    $0xffffffff8020ba41,%rdx
ffffffff8021ccaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccb3:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ccb9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ccbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccc0:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ccc6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cccc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccd0:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ccd6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ccda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccde:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cce4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cce8:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021ccef:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ccf3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ccf6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccfa:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cd00:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cd04:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021cd0b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cd0f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd16:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cd1c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cd1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd23:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cd29:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8021cd30:	48 c7 c2 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rdx
ffffffff8021cd37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd3b:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cd41:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cd44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd48:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cd4e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cd54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd58:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cd5e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cd62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd66:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cd6c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cd70:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
ffffffff8021cd77:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cd7b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd82:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cd88:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cd8c:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
ffffffff8021cd93:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cd97:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd9e:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cda4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cda7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdab:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cdb1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cdb8:	48 c7 c2 59 ba 20 80 	mov    $0xffffffff8020ba59,%rdx
ffffffff8021cdbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdc3:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cdc9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cdcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdd0:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cdd6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cddc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cde0:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cde6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cdea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdee:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cdf4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cdf8:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff8021cdff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ce03:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce0a:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021ce10:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ce14:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff8021ce1b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ce1f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce26:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021ce2c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ce2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce33:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021ce39:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8021ce40:	48 c7 c2 65 ba 20 80 	mov    $0xffffffff8020ba65,%rdx
ffffffff8021ce47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce4b:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ce51:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ce54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce58:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ce5e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ce64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce68:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ce6e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ce72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce76:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ce7c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ce80:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
ffffffff8021ce87:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ce8b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce92:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ce98:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ce9c:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
ffffffff8021cea3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cea7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ceaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ceae:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021ceb4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ceb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cebb:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cec1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cec8:	48 c7 c2 71 ba 20 80 	mov    $0xffffffff8020ba71,%rdx
ffffffff8021cecf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ced3:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021ced9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cedc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cee0:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cee6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ceec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cef0:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cef6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cefa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cefe:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cf04:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cf08:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff8021cf0f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cf13:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf1a:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cf20:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cf24:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff8021cf2b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cf2f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf36:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cf3c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cf3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf43:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cf49:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8021cf50:	48 c7 c2 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rdx
ffffffff8021cf57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf5b:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cf61:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cf64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf68:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cf6e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cf74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf78:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cf7e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cf82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf86:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cf8c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cf90:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
ffffffff8021cf97:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cf9b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfa2:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cfa8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cfac:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
ffffffff8021cfb3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cfb7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cfba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfbe:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cfc4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cfc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfcb:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021cfd1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cfd8:	48 c7 c2 89 ba 20 80 	mov    $0xffffffff8020ba89,%rdx
ffffffff8021cfdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfe3:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cfe9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cfec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cff0:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021cff6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cffc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d000:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d006:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d00a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d00e:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d014:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d018:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff8021d01f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d023:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d026:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d02a:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d030:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d034:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff8021d03b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d03f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d042:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d046:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d04c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d04f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d053:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d059:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8021d060:	48 c7 c2 95 ba 20 80 	mov    $0xffffffff8020ba95,%rdx
ffffffff8021d067:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d06b:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d071:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d074:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d078:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d07e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d084:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d088:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d08e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d092:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d096:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d09c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d0a0:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
ffffffff8021d0a7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d0ab:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d0ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0b2:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d0b8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d0bc:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
ffffffff8021d0c3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d0c7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d0ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0ce:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d0d4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d0d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0db:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d0e1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d0e8:	48 c7 c2 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rdx
ffffffff8021d0ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0f3:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d0f9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d0fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d100:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d106:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d10c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d110:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d116:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d11a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d11e:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d124:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d128:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021d12f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d133:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d136:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d13a:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d140:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d144:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021d14b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d14f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d152:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d156:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d15c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d15f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d163:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d169:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8021d170:	48 c7 c2 ad ba 20 80 	mov    $0xffffffff8020baad,%rdx
ffffffff8021d177:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d17b:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d181:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d184:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d188:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d18e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d194:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d198:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d19e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d1a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1a6:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d1ac:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d1b0:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
ffffffff8021d1b7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d1bb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d1be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1c2:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d1c8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d1cc:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
ffffffff8021d1d3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d1d7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d1da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1de:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d1e4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d1e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1eb:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d1f1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d1f8:	48 c7 c2 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rdx
ffffffff8021d1ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d203:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d209:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d20c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d210:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d216:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d21c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d220:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d226:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d22a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d22e:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d234:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d238:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021d23f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d243:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d246:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d24a:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d250:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d254:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021d25b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d25f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d262:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d266:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d26c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d26f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d273:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d279:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8021d280:	48 c7 c2 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rdx
ffffffff8021d287:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d28b:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d291:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d294:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d298:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d29e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d2a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2a8:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d2ae:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d2b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2b6:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d2bc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d2c0:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
ffffffff8021d2c7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d2cb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d2ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2d2:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d2d8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d2dc:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
ffffffff8021d2e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d2e7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d2ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2ee:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d2f4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d2f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2fb:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d301:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d308:	48 c7 c2 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rdx
ffffffff8021d30f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d313:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d319:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d31c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d320:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d326:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d32c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d330:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d336:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d33a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d33e:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d344:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d348:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff8021d34f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d353:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d356:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d35a:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d360:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d364:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff8021d36b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d36f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d372:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d376:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d37c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d37f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d383:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d389:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8021d390:	48 c7 c2 dd ba 20 80 	mov    $0xffffffff8020badd,%rdx
ffffffff8021d397:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d39b:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d3a1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d3a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3a8:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d3ae:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d3b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3b8:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d3be:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d3c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3c6:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d3cc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d3d0:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
ffffffff8021d3d7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d3db:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d3de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3e2:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d3e8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d3ec:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
ffffffff8021d3f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d3f7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d3fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3fe:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d404:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d407:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d40b:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d411:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d418:	48 c7 c2 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rdx
ffffffff8021d41f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d423:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d429:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d42c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d430:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d436:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d43c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d440:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d446:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d44a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d44e:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d454:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d458:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff8021d45f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d463:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d466:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d46a:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d470:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d474:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff8021d47b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d47f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d482:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d486:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d48c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d48f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d493:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d499:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8021d4a0:	48 c7 c2 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rdx
ffffffff8021d4a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4ab:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d4b1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d4b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4b8:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d4be:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d4c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4c8:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d4ce:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d4d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4d6:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d4dc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d4e0:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
ffffffff8021d4e7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d4eb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d4ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4f2:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d4f8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d4fc:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
ffffffff8021d503:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d507:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d50a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d50e:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d514:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d517:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d51b:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d521:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d528:	48 c7 c2 01 bb 20 80 	mov    $0xffffffff8020bb01,%rdx
ffffffff8021d52f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d533:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d539:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d53c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d540:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d546:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d54c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d550:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d556:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d55a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d55e:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d564:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d568:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff8021d56f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d573:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d576:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d57a:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d580:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d584:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff8021d58b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d58f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d592:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d596:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d59c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d59f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5a3:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d5a9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8021d5b0:	48 c7 c2 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rdx
ffffffff8021d5b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5bb:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d5c1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d5c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5c8:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d5ce:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d5d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5d8:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d5de:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d5e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5e6:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d5ec:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d5f0:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff8021d5f7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d5fb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d5fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d602:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d608:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d60c:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff8021d613:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d617:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d61a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d61e:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d624:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d627:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d62b:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d631:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d638:	48 c7 c2 19 bb 20 80 	mov    $0xffffffff8020bb19,%rdx
ffffffff8021d63f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d643:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d649:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d64c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d650:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d656:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d65c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d660:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d666:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d66a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d66e:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d674:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d678:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021d67f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d683:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d686:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d68a:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d690:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d694:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021d69b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d69f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d6a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6a6:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d6ac:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d6af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6b3:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d6b9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8021d6c0:	48 c7 c2 25 bb 20 80 	mov    $0xffffffff8020bb25,%rdx
ffffffff8021d6c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6cb:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d6d1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d6d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6d8:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d6de:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d6e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6e8:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d6ee:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d6f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6f6:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d6fc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d700:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
ffffffff8021d707:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d70b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d70e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d712:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d718:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d71c:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
ffffffff8021d723:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d727:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d72a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d72e:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d734:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d737:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d73b:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d741:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d748:	48 c7 c2 31 bb 20 80 	mov    $0xffffffff8020bb31,%rdx
ffffffff8021d74f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d753:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d759:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d75c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d760:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d766:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d76c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d770:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d776:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d77a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d77e:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d784:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d788:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff8021d78f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d793:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d796:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d79a:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d7a0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d7a4:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff8021d7ab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d7af:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d7b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7b6:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d7bc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d7bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7c3:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d7c9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8021d7d0:	48 c7 c2 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rdx
ffffffff8021d7d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7db:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d7e1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d7e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7e8:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d7ee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d7f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7f8:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d7fe:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d802:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d806:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d80c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d810:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
ffffffff8021d817:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d81b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d81e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d822:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d828:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d82c:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
ffffffff8021d833:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d837:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d83a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d83e:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d844:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d847:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d84b:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d851:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d858:	48 c7 c2 49 bb 20 80 	mov    $0xffffffff8020bb49,%rdx
ffffffff8021d85f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d863:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d869:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d86c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d870:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d876:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d87c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d880:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d886:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d88a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d88e:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d894:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d898:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff8021d89f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d8a3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d8a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8aa:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d8b0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d8b4:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff8021d8bb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d8bf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d8c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8c6:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d8cc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d8cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8d3:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d8d9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021d8e0:	48 c7 c2 55 bb 20 80 	mov    $0xffffffff8020bb55,%rdx
ffffffff8021d8e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8eb:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d8f1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d8f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8f8:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d8fe:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d904:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d908:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d90e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d912:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d916:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d91c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d920:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
ffffffff8021d927:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d92b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d92e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d932:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d938:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d93c:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
ffffffff8021d943:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d947:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d94a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d94e:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d954:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d957:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d95b:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d961:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d968:	48 c7 c2 61 bb 20 80 	mov    $0xffffffff8020bb61,%rdx
ffffffff8021d96f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d973:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d979:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d97c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d980:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d986:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d98c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d990:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d996:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d99a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d99e:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d9a4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d9a8:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff8021d9af:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d9b3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d9b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9ba:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d9c0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d9c4:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff8021d9cb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d9cf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d9d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9d6:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d9dc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d9df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9e3:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021d9e9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8021d9f0:	48 c7 c2 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rdx
ffffffff8021d9f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9fb:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021da01:	66 89 10             	mov    %dx,(%rax)
ffffffff8021da04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da08:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021da0e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021da14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da18:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021da1e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021da22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da26:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021da2c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021da30:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
ffffffff8021da37:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021da3b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da42:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021da48:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021da4c:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
ffffffff8021da53:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021da57:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da5e:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021da64:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021da67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da6b:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021da71:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021da78:	48 c7 c2 79 bb 20 80 	mov    $0xffffffff8020bb79,%rdx
ffffffff8021da7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da83:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021da89:	66 89 10             	mov    %dx,(%rax)
ffffffff8021da8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da90:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021da96:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021da9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daa0:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021daa6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021daaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daae:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dab4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dab8:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff8021dabf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dac3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dac6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daca:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dad0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dad4:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff8021dadb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dadf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dae2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dae6:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021daec:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021daef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daf3:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021daf9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8021db00:	48 c7 c2 85 bb 20 80 	mov    $0xffffffff8020bb85,%rdx
ffffffff8021db07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db0b:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021db11:	66 89 10             	mov    %dx,(%rax)
ffffffff8021db14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db18:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021db1e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021db24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db28:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021db2e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021db32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db36:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021db3c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021db40:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
ffffffff8021db47:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021db4b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db52:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021db58:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021db5c:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
ffffffff8021db63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021db67:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db6e:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021db74:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021db77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db7b:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021db81:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021db88:	48 c7 c2 91 bb 20 80 	mov    $0xffffffff8020bb91,%rdx
ffffffff8021db8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db93:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021db99:	66 89 10             	mov    %dx,(%rax)
ffffffff8021db9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dba0:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dba6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dbac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbb0:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dbb6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dbba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbbe:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dbc4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dbc8:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff8021dbcf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dbd3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dbd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbda:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dbe0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dbe4:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff8021dbeb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dbef:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dbf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbf6:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dbfc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dbff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc03:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dc09:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021dc10:	48 c7 c2 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rdx
ffffffff8021dc17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc1b:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dc21:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dc24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc28:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dc2e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dc34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc38:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dc3e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dc42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc46:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dc4c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dc50:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
ffffffff8021dc57:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dc5b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc62:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dc68:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dc6c:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
ffffffff8021dc73:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dc77:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc7e:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dc84:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dc87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc8b:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dc91:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dc98:	48 c7 c2 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rdx
ffffffff8021dc9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dca3:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dca9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dcac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcb0:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dcb6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dcbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcc0:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dcc6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dcca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcce:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dcd4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dcd8:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff8021dcdf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dce3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dce6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcea:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dcf0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dcf4:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff8021dcfb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dcff:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd06:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dd0c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dd0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd13:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dd19:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8021dd20:	48 c7 c2 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rdx
ffffffff8021dd27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd2b:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dd31:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dd34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd38:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dd3e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dd44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd48:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dd4e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dd52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd56:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dd5c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dd60:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
ffffffff8021dd67:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dd6b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd72:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dd78:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dd7c:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
ffffffff8021dd83:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dd87:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd8e:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dd94:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dd97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd9b:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021dda1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dda8:	48 c7 c2 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rdx
ffffffff8021ddaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddb3:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021ddb9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ddbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddc0:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021ddc6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ddcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddd0:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021ddd6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ddda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddde:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dde4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dde8:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff8021ddef:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ddf3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ddf6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddfa:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021de00:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021de04:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff8021de0b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021de0f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de16:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021de1c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021de1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de23:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021de29:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8021de30:	48 c7 c2 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rdx
ffffffff8021de37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de3b:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021de41:	66 89 10             	mov    %dx,(%rax)
ffffffff8021de44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de48:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021de4e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021de54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de58:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021de5e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021de62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de66:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021de6c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021de70:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
ffffffff8021de77:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021de7b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de82:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021de88:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021de8c:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
ffffffff8021de93:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021de97:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de9e:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dea4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dea7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021deab:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021deb1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021deb8:	48 c7 c2 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rdx
ffffffff8021debf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dec3:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dec9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021decc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ded0:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021ded6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dedc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dee0:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dee6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021deea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021deee:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021def4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021def8:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff8021deff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021df03:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df0a:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021df10:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021df14:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff8021df1b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021df1f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df26:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021df2c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021df2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df33:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021df39:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8021df40:	48 c7 c2 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rdx
ffffffff8021df47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df4b:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021df51:	66 89 10             	mov    %dx,(%rax)
ffffffff8021df54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df58:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021df5e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021df64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df68:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021df6e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021df72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df76:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021df7c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021df80:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
ffffffff8021df87:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021df8b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df92:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021df98:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021df9c:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
ffffffff8021dfa3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dfa7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dfaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfae:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021dfb4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dfb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfbb:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021dfc1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dfc8:	48 c7 c2 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rdx
ffffffff8021dfcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfd3:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021dfd9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dfdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfe0:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021dfe6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dfec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dff0:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021dff6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dffa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dffe:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e004:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e008:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff8021e00f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e013:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e016:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e01a:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e020:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e024:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff8021e02b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e02f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e032:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e036:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e03c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e03f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e043:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e049:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8021e050:	48 c7 c2 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rdx
ffffffff8021e057:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e05b:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e061:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e064:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e068:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e06e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e074:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e078:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e07e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e082:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e086:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e08c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e090:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
ffffffff8021e097:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e09b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e09e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0a2:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e0a8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e0ac:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
ffffffff8021e0b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e0b7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e0ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0be:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e0c4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e0c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0cb:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e0d1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e0d8:	48 c7 c2 09 bc 20 80 	mov    $0xffffffff8020bc09,%rdx
ffffffff8021e0df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0e3:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e0e9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e0ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0f0:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e0f6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e0fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e100:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e106:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e10a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e10e:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e114:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e118:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff8021e11f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e123:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e126:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e12a:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e130:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e134:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff8021e13b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e13f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e142:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e146:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e14c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e14f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e153:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e159:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8021e160:	48 c7 c2 15 bc 20 80 	mov    $0xffffffff8020bc15,%rdx
ffffffff8021e167:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e16b:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e171:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e174:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e178:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e17e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e184:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e188:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e18e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e192:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e196:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e19c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e1a0:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
ffffffff8021e1a7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e1ab:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e1ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1b2:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e1b8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e1bc:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
ffffffff8021e1c3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e1c7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e1ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1ce:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e1d4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e1d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1db:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e1e1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e1e8:	48 c7 c2 21 bc 20 80 	mov    $0xffffffff8020bc21,%rdx
ffffffff8021e1ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1f3:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e1f9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e1fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e200:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e206:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e20c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e210:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e216:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e21a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e21e:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e224:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e228:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff8021e22f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e233:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e236:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e23a:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e240:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e244:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff8021e24b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e24f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e252:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e256:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e25c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e25f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e263:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e269:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8021e270:	48 c7 c2 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rdx
ffffffff8021e277:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e27b:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e281:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e284:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e288:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e28e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e294:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e298:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e29e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e2a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2a6:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e2ac:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e2b0:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
ffffffff8021e2b7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e2bb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e2be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2c2:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e2c8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e2cc:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
ffffffff8021e2d3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e2d7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e2da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2de:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e2e4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e2e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2eb:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e2f1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e2f8:	48 c7 c2 39 bc 20 80 	mov    $0xffffffff8020bc39,%rdx
ffffffff8021e2ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e303:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e309:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e30c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e310:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e316:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e31c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e320:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e326:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e32a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e32e:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e334:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e338:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff8021e33f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e343:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e346:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e34a:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e350:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e354:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff8021e35b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e35f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e362:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e366:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e36c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e36f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e373:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e379:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021e380:	48 c7 c2 45 bc 20 80 	mov    $0xffffffff8020bc45,%rdx
ffffffff8021e387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e38b:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e391:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e394:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e398:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e39e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e3a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3a8:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e3ae:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e3b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3b6:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e3bc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e3c0:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
ffffffff8021e3c7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e3cb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e3ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3d2:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e3d8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e3dc:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
ffffffff8021e3e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e3e7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e3ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3ee:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e3f4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e3f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3fb:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e401:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e408:	48 c7 c2 51 bc 20 80 	mov    $0xffffffff8020bc51,%rdx
ffffffff8021e40f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e413:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e419:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e41c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e420:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e426:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e42c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e430:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e436:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e43a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e43e:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e444:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e448:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff8021e44f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e453:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e456:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e45a:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e460:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e464:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff8021e46b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e46f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e472:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e476:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e47c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e47f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e483:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e489:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8021e490:	48 c7 c2 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rdx
ffffffff8021e497:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e49b:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e4a1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e4a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4a8:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e4ae:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e4b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4b8:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e4be:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e4c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4c6:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e4cc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e4d0:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
ffffffff8021e4d7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e4db:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e4de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4e2:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e4e8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e4ec:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
ffffffff8021e4f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e4f7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e4fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4fe:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e504:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e507:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e50b:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e511:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e518:	48 c7 c2 69 bc 20 80 	mov    $0xffffffff8020bc69,%rdx
ffffffff8021e51f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e523:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e529:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e52c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e530:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e536:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e53c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e540:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e546:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e54a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e54e:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e554:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e558:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff8021e55f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e563:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e566:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e56a:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e570:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e574:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff8021e57b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e57f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e582:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e586:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e58c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e58f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e593:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e599:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8021e5a0:	48 c7 c2 75 bc 20 80 	mov    $0xffffffff8020bc75,%rdx
ffffffff8021e5a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5ab:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e5b1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e5b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5b8:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e5be:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e5c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5c8:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e5ce:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e5d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5d6:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e5dc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e5e0:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
ffffffff8021e5e7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e5eb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e5ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5f2:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e5f8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e5fc:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
ffffffff8021e603:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e607:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e60a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e60e:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e614:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e617:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e61b:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e621:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e628:	48 c7 c2 81 bc 20 80 	mov    $0xffffffff8020bc81,%rdx
ffffffff8021e62f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e633:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e639:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e63c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e640:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e646:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e64c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e650:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e656:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e65a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e65e:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e664:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e668:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff8021e66f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e673:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e676:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e67a:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e680:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e684:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff8021e68b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e68f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e696:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e69c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e69f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6a3:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e6a9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021e6b0:	48 c7 c2 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rdx
ffffffff8021e6b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6bb:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e6c1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e6c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6c8:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e6ce:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e6d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6d8:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e6de:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e6e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6e6:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e6ec:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e6f0:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
ffffffff8021e6f7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e6fb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e6fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e702:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e708:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e70c:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
ffffffff8021e713:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e717:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e71a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e71e:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e724:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e727:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e72b:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e731:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e738:	48 c7 c2 99 bc 20 80 	mov    $0xffffffff8020bc99,%rdx
ffffffff8021e73f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e743:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e749:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e74c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e750:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e756:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e75c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e760:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e766:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e76a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e76e:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e774:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e778:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff8021e77f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e783:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e786:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e78a:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e790:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e794:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff8021e79b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e79f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e7a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7a6:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e7ac:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e7af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7b3:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e7b9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8021e7c0:	48 c7 c2 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rdx
ffffffff8021e7c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7cb:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e7d1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e7d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7d8:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e7de:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e7e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7e8:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e7ee:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e7f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7f6:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e7fc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e800:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
ffffffff8021e807:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e80b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e80e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e812:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e818:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e81c:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
ffffffff8021e823:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e827:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e82a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e82e:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e834:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e837:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e83b:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e841:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e848:	48 c7 c2 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rdx
ffffffff8021e84f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e853:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e859:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e85c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e860:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e866:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e86c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e870:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e876:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e87a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e87e:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e884:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e888:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021e88f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e893:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e896:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e89a:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e8a0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e8a4:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021e8ab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e8af:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e8b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8b6:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e8bc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e8bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8c3:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e8c9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021e8d0:	48 c7 c2 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rdx
ffffffff8021e8d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8db:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e8e1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e8e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8e8:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e8ee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e8f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8f8:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e8fe:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e902:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e906:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e90c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e910:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
ffffffff8021e917:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e91b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e91e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e922:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e928:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e92c:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
ffffffff8021e933:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e937:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e93a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e93e:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e944:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e947:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e94b:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e951:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e958:	48 c7 c2 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rdx
ffffffff8021e95f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e963:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e969:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e96c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e970:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e976:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e97c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e980:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e986:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e98a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e98e:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e994:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e998:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021e99f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e9a3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e9a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9aa:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e9b0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e9b4:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021e9bb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e9bf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e9c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9c6:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e9cc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e9cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9d3:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021e9d9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021e9e0:	48 c7 c2 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rdx
ffffffff8021e9e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9eb:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e9f1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e9f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9f8:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021e9fe:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ea04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea08:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021ea0e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ea12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea16:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021ea1c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ea20:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
ffffffff8021ea27:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ea2b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea32:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021ea38:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ea3c:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
ffffffff8021ea43:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ea47:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea4e:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021ea54:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ea57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea5b:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021ea61:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ea68:	48 c7 c2 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rdx
ffffffff8021ea6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea73:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ea79:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ea7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea80:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ea86:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ea8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea90:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ea96:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ea9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea9e:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021eaa4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eaa8:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff8021eaaf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eab3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eab6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eaba:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021eac0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eac4:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff8021eacb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eacf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ead2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ead6:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021eadc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eadf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eae3:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021eae9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8021eaf0:	48 c7 c2 ed bc 20 80 	mov    $0xffffffff8020bced,%rdx
ffffffff8021eaf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eafb:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eb01:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eb04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb08:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eb0e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eb14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb18:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eb1e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eb22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb26:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eb2c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eb30:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
ffffffff8021eb37:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eb3b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb42:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eb48:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eb4c:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
ffffffff8021eb53:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eb57:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb5e:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eb64:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eb67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb6b:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021eb71:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021eb78:	48 c7 c2 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rdx
ffffffff8021eb7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb83:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eb89:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eb8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb90:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eb96:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eb9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eba0:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eba6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ebaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebae:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ebb4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ebb8:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021ebbf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ebc3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ebc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebca:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ebd0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ebd4:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021ebdb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ebdf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ebe2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebe6:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ebec:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ebef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebf3:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ebf9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8021ec00:	48 c7 c2 05 bd 20 80 	mov    $0xffffffff8020bd05,%rdx
ffffffff8021ec07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec0b:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ec11:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ec14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec18:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ec1e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ec24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec28:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ec2e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ec32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec36:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ec3c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ec40:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
ffffffff8021ec47:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ec4b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec52:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ec58:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ec5c:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
ffffffff8021ec63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ec67:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec6e:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ec74:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ec77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec7b:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ec81:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ec88:	48 c7 c2 11 bd 20 80 	mov    $0xffffffff8020bd11,%rdx
ffffffff8021ec8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec93:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ec99:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ec9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eca0:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eca6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ecac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecb0:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ecb6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ecba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecbe:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ecc4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ecc8:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff8021eccf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ecd3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ecd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecda:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ece0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ece4:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff8021eceb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ecef:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ecf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecf6:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ecfc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ecff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed03:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ed09:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021ed10:	48 c7 c2 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rdx
ffffffff8021ed17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed1b:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ed21:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ed24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed28:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ed2e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ed34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed38:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ed3e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ed42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed46:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ed4c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ed50:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
ffffffff8021ed57:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ed5b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed62:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ed68:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ed6c:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
ffffffff8021ed73:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ed77:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed7e:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ed84:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ed87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed8b:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ed91:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ed98:	48 c7 c2 29 bd 20 80 	mov    $0xffffffff8020bd29,%rdx
ffffffff8021ed9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eda3:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021eda9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021edac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edb0:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021edb6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021edbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edc0:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021edc6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021edca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edce:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021edd4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021edd8:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff8021eddf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ede3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ede6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edea:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021edf0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021edf4:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff8021edfb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021edff:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee06:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ee0c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ee0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee13:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ee19:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8021ee20:	48 c7 c2 35 bd 20 80 	mov    $0xffffffff8020bd35,%rdx
ffffffff8021ee27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee2b:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ee31:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ee34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee38:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ee3e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ee44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee48:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ee4e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ee52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee56:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ee5c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ee60:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
ffffffff8021ee67:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ee6b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee72:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ee78:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ee7c:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
ffffffff8021ee83:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ee87:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee8e:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ee94:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ee97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee9b:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021eea1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021eea8:	48 c7 c2 41 bd 20 80 	mov    $0xffffffff8020bd41,%rdx
ffffffff8021eeaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eeb3:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021eeb9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eebc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eec0:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021eec6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eecc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eed0:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021eed6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eeda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eede:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021eee4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eee8:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff8021eeef:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eef3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eef6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eefa:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ef00:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ef04:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff8021ef0b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ef0f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef16:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ef1c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ef1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef23:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021ef29:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8021ef30:	48 c7 c2 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rdx
ffffffff8021ef37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef3b:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ef41:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ef44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef48:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ef4e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ef54:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef58:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ef5e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ef62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef66:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ef6c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ef70:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
ffffffff8021ef77:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ef7b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef82:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021ef88:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ef8c:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
ffffffff8021ef93:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ef97:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef9e:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021efa4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021efa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efab:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021efb1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021efb8:	48 c7 c2 59 bd 20 80 	mov    $0xffffffff8020bd59,%rdx
ffffffff8021efbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efc3:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021efc9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021efcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efd0:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021efd6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021efdc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efe0:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021efe6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021efea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efee:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021eff4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eff8:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff8021efff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f003:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f006:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f00a:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f010:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f014:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff8021f01b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f01f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f022:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f026:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f02c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f02f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f033:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f039:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8021f040:	48 c7 c2 65 bd 20 80 	mov    $0xffffffff8020bd65,%rdx
ffffffff8021f047:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f04b:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f051:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f054:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f058:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f05e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f064:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f068:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f06e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f072:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f076:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f07c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f080:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
ffffffff8021f087:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f08b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f08e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f092:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f098:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f09c:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
ffffffff8021f0a3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f0a7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f0aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0ae:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f0b4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f0b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0bb:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f0c1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f0c8:	48 c7 c2 71 bd 20 80 	mov    $0xffffffff8020bd71,%rdx
ffffffff8021f0cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0d3:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f0d9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f0dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0e0:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f0e6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f0ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0f0:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f0f6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f0fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0fe:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f104:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f108:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021f10f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f113:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f116:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f11a:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f120:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f124:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021f12b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f12f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f132:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f136:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f13c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f13f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f143:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f149:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8021f150:	48 c7 c2 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rdx
ffffffff8021f157:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f15b:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f161:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f164:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f168:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f16e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f174:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f178:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f17e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f182:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f186:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f18c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f190:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021f197:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f19b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f19e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1a2:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f1a8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f1ac:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021f1b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f1b7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f1ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1be:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f1c4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f1c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1cb:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f1d1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f1d8:	48 c7 c2 89 bd 20 80 	mov    $0xffffffff8020bd89,%rdx
ffffffff8021f1df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1e3:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f1e9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f1ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1f0:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f1f6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f1fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f200:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f206:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f20a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f20e:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f214:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f218:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff8021f21f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f223:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f226:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f22a:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f230:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f234:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff8021f23b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f23f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f242:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f246:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f24c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f24f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f253:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f259:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8021f260:	48 c7 c2 95 bd 20 80 	mov    $0xffffffff8020bd95,%rdx
ffffffff8021f267:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f26b:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f271:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f274:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f278:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f27e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f284:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f288:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f28e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f292:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f296:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f29c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f2a0:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
ffffffff8021f2a7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f2ab:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f2ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2b2:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f2b8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f2bc:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
ffffffff8021f2c3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f2c7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f2ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2ce:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f2d4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f2d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2db:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f2e1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f2e8:	48 c7 c2 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rdx
ffffffff8021f2ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2f3:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f2f9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f2fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f300:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f306:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f30c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f310:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f316:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f31a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f31e:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f324:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f328:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff8021f32f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f333:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f33a:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f340:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f344:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff8021f34b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f34f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f352:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f356:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f35c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f35f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f363:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f369:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8021f370:	48 c7 c2 ad bd 20 80 	mov    $0xffffffff8020bdad,%rdx
ffffffff8021f377:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f37b:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f381:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f384:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f388:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f38e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f394:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f398:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f39e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f3a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3a6:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f3ac:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f3b0:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
ffffffff8021f3b7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f3bb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f3be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3c2:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f3c8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f3cc:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
ffffffff8021f3d3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f3d7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f3da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3de:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f3e4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f3e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3eb:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f3f1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f3f8:	48 c7 c2 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rdx
ffffffff8021f3ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f403:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f409:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f40c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f410:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f416:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f41c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f420:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f426:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f42a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f42e:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f434:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f438:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff8021f43f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f443:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f446:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f44a:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f450:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f454:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff8021f45b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f45f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f462:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f466:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f46c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f46f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f473:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f479:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8021f480:	48 c7 c2 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rdx
ffffffff8021f487:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f48b:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f491:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f494:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f498:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f49e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f4a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4a8:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f4ae:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f4b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4b6:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f4bc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f4c0:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
ffffffff8021f4c7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f4cb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f4ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4d2:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f4d8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f4dc:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
ffffffff8021f4e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f4e7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f4ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4ee:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f4f4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f4f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4fb:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f501:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f508:	48 c7 c2 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rdx
ffffffff8021f50f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f513:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f519:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f51c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f520:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f526:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f52c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f530:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f536:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f53a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f53e:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f544:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f548:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff8021f54f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f553:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f556:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f55a:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f560:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f564:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff8021f56b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f56f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f572:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f576:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f57c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f57f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f583:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f589:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8021f590:	48 c7 c2 dd bd 20 80 	mov    $0xffffffff8020bddd,%rdx
ffffffff8021f597:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f59b:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f5a1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f5a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5a8:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f5ae:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f5b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5b8:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f5be:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f5c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5c6:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f5cc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f5d0:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
ffffffff8021f5d7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f5db:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f5de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5e2:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f5e8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f5ec:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
ffffffff8021f5f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f5f7:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f5fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5fe:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f604:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f607:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f60b:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f611:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f618:	48 c7 c2 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rdx
ffffffff8021f61f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f623:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f629:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f62c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f630:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f636:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f63c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f640:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f646:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f64a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f64e:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f654:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f658:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff8021f65f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f663:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f666:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f66a:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f670:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f674:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff8021f67b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f67f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f682:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f686:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f68c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f68f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f693:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f699:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8021f6a0:	48 c7 c2 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rdx
ffffffff8021f6a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6ab:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f6b1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f6b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6b8:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f6be:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f6c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6c8:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f6ce:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f6d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6d6:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f6dc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f6e0:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
ffffffff8021f6e7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f6eb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f6ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6f2:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f6f8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f6fc:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
ffffffff8021f703:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f707:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f70a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f70e:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f714:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f717:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f71b:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f721:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f728:	48 c7 c2 01 be 20 80 	mov    $0xffffffff8020be01,%rdx
ffffffff8021f72f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f733:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f739:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f73c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f740:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f746:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f74c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f750:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f756:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f75a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f75e:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f764:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f768:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff8021f76f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f773:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f776:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f77a:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f780:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f784:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff8021f78b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f78f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f792:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f796:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f79c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f79f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7a3:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f7a9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8021f7b0:	48 c7 c2 0d be 20 80 	mov    $0xffffffff8020be0d,%rdx
ffffffff8021f7b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7bb:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f7c1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f7c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7c8:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f7ce:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f7d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7d8:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f7de:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f7e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7e6:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f7ec:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f7f0:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
ffffffff8021f7f7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f7fb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f7fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f802:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f808:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f80c:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
ffffffff8021f813:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f817:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f81a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f81e:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f824:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f827:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f82b:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f831:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f838:	48 c7 c2 19 be 20 80 	mov    $0xffffffff8020be19,%rdx
ffffffff8021f83f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f843:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f849:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f84c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f850:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f856:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f85c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f860:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f866:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f86a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f86e:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f874:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f878:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff8021f87f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f883:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f886:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f88a:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f890:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f894:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff8021f89b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f89f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f8a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8a6:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f8ac:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f8af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8b3:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f8b9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8021f8c0:	48 c7 c2 25 be 20 80 	mov    $0xffffffff8020be25,%rdx
ffffffff8021f8c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8cb:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f8d1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f8d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8d8:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f8de:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f8e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8e8:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f8ee:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f8f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8f6:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f8fc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f900:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
ffffffff8021f907:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f90b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f90e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f912:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f918:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f91c:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
ffffffff8021f923:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f927:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f92a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f92e:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f934:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f937:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f93b:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f941:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f948:	48 c7 c2 31 be 20 80 	mov    $0xffffffff8020be31,%rdx
ffffffff8021f94f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f953:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f959:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f95c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f960:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f966:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f96c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f970:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f976:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f97a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f97e:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f984:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f988:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021f98f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f993:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f996:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f99a:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f9a0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f9a4:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021f9ab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f9af:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f9b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9b6:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f9bc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f9bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9c3:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021f9c9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8021f9d0:	48 c7 c2 3d be 20 80 	mov    $0xffffffff8020be3d,%rdx
ffffffff8021f9d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9db:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f9e1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f9e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9e8:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f9ee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f9f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9f8:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021f9fe:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fa02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa06:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fa0c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fa10:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
ffffffff8021fa17:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fa1b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa22:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fa28:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fa2c:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
ffffffff8021fa33:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fa37:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa3e:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fa44:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fa47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa4b:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fa51:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fa58:	48 c7 c2 49 be 20 80 	mov    $0xffffffff8020be49,%rdx
ffffffff8021fa5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa63:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa69:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fa6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa70:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa76:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fa7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa80:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa86:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fa8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa8e:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fa94:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fa98:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff8021fa9f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021faa3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021faa6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faaa:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fab0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fab4:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff8021fabb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fabf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fac2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fac6:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021facc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021facf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fad3:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fad9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8021fae0:	48 c7 c2 55 be 20 80 	mov    $0xffffffff8020be55,%rdx
ffffffff8021fae7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faeb:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021faf1:	66 89 10             	mov    %dx,(%rax)
ffffffff8021faf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faf8:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fafe:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fb04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb08:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fb0e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fb12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb16:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fb1c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fb20:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
ffffffff8021fb27:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fb2b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb32:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fb38:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fb3c:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
ffffffff8021fb43:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fb47:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb4e:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fb54:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fb57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb5b:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fb61:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fb68:	48 c7 c2 64 be 20 80 	mov    $0xffffffff8020be64,%rdx
ffffffff8021fb6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb73:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fb79:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fb7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb80:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fb86:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fb8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb90:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fb96:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fb9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb9e:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fba4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fba8:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff8021fbaf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fbb3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fbb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbba:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fbc0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fbc4:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff8021fbcb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fbcf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fbd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbd6:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fbdc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fbdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbe3:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fbe9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8021fbf0:	48 c7 c2 73 be 20 80 	mov    $0xffffffff8020be73,%rdx
ffffffff8021fbf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbfb:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fc01:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fc04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc08:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fc0e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fc14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc18:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fc1e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fc22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc26:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fc2c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fc30:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff8021fc37:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fc3b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc42:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fc48:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fc4c:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff8021fc53:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fc57:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc5e:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fc64:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fc67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc6b:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fc71:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fc78:	48 c7 c2 82 be 20 80 	mov    $0xffffffff8020be82,%rdx
ffffffff8021fc7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc83:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fc89:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fc8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc90:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fc96:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fc9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fca0:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fca6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fcaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcae:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fcb4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fcb8:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff8021fcbf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fcc3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fcc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcca:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fcd0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fcd4:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff8021fcdb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fcdf:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fce2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fce6:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fcec:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fcef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcf3:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fcf9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8021fd00:	48 c7 c2 91 be 20 80 	mov    $0xffffffff8020be91,%rdx
ffffffff8021fd07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd0b:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fd11:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fd14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd18:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fd1e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fd24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd28:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fd2e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fd32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd36:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fd3c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fd40:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
ffffffff8021fd47:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fd4b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd52:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fd58:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fd5c:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
ffffffff8021fd63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fd67:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd6e:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fd74:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fd77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd7b:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fd81:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fd88:	48 c7 c2 a0 be 20 80 	mov    $0xffffffff8020bea0,%rdx
ffffffff8021fd8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd93:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fd99:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fd9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fda0:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fda6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fdac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdb0:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fdb6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fdba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdbe:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fdc4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fdc8:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021fdcf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fdd3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fdd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdda:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fde0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fde4:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021fdeb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fdef:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fdf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdf6:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fdfc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fdff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe03:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fe09:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8021fe10:	48 c7 c2 af be 20 80 	mov    $0xffffffff8020beaf,%rdx
ffffffff8021fe17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe1b:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fe21:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fe24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe28:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fe2e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fe34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe38:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fe3e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fe42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe46:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fe4c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fe50:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
ffffffff8021fe57:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fe5b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe62:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fe68:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fe6c:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
ffffffff8021fe73:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fe77:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe7e:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fe84:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fe87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe8b:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021fe91:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fe98:	48 c7 c2 be be 20 80 	mov    $0xffffffff8020bebe,%rdx
ffffffff8021fe9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fea3:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fea9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021feac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021feb0:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021feb6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021febc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fec0:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fec6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021feca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fece:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fed4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fed8:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff8021fedf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fee3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fee6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021feea:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021fef0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fef4:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff8021fefb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021feff:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff06:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021ff0c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ff0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff13:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021ff19:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8021ff20:	48 c7 c2 cd be 20 80 	mov    $0xffffffff8020becd,%rdx
ffffffff8021ff27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff2b:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021ff31:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ff34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff38:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021ff3e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ff44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff48:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021ff4e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ff52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff56:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021ff5c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ff60:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
ffffffff8021ff67:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ff6b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff72:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021ff78:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ff7c:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
ffffffff8021ff83:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ff87:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff8e:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021ff94:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ff97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff9b:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8021ffa1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ffa8:	48 c7 c2 dc be 20 80 	mov    $0xffffffff8020bedc,%rdx
ffffffff8021ffaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffb3:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ffb9:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ffbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffc0:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ffc6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ffcc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffd0:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ffd6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ffda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffde:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8021ffe4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ffe8:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff8021ffef:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fff3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fff6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fffa:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff80220000:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220004:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff8022000b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022000f:	48 89 c2             	mov    %rax,%rdx
ffffffff80220012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220016:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8022001c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022001f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220023:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff80220029:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80220030:	48 c7 c2 eb be 20 80 	mov    $0xffffffff8020beeb,%rdx
ffffffff80220037:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022003b:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220041:	66 89 10             	mov    %dx,(%rax)
ffffffff80220044:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220048:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8022004e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220054:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220058:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8022005e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220062:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220066:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8022006c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220070:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
ffffffff80220077:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022007b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022007e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220082:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220088:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022008c:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
ffffffff80220093:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220097:	48 89 c2             	mov    %rax,%rdx
ffffffff8022009a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022009e:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff802200a4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802200a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200ab:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff802200b1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802200b8:	48 c7 c2 fa be 20 80 	mov    $0xffffffff8020befa,%rdx
ffffffff802200bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200c3:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802200c9:	66 89 10             	mov    %dx,(%rax)
ffffffff802200cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200d0:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802200d6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802200dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200e0:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802200e6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802200ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200ee:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802200f4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802200f8:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff802200ff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220103:	48 89 c2             	mov    %rax,%rdx
ffffffff80220106:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022010a:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff80220110:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220114:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff8022011b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022011f:	48 89 c2             	mov    %rax,%rdx
ffffffff80220122:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220126:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8022012c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022012f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220133:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff80220139:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80220140:	48 c7 c2 09 bf 20 80 	mov    $0xffffffff8020bf09,%rdx
ffffffff80220147:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022014b:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220151:	66 89 10             	mov    %dx,(%rax)
ffffffff80220154:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220158:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8022015e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220164:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220168:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8022016e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220172:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220176:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8022017c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220180:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
ffffffff80220187:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022018b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022018e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220192:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220198:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022019c:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
ffffffff802201a3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802201a7:	48 89 c2             	mov    %rax,%rdx
ffffffff802201aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201ae:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802201b4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802201b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201bb:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802201c1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802201c8:	48 c7 c2 18 bf 20 80 	mov    $0xffffffff8020bf18,%rdx
ffffffff802201cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201d3:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802201d9:	66 89 10             	mov    %dx,(%rax)
ffffffff802201dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201e0:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802201e6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802201ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201f0:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802201f6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802201fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201fe:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220204:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220208:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff8022020f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220213:	48 89 c2             	mov    %rax,%rdx
ffffffff80220216:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022021a:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220220:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220224:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff8022022b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022022f:	48 89 c2             	mov    %rax,%rdx
ffffffff80220232:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220236:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff8022023c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022023f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220243:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220249:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80220250:	48 c7 c2 27 bf 20 80 	mov    $0xffffffff8020bf27,%rdx
ffffffff80220257:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022025b:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220261:	66 89 10             	mov    %dx,(%rax)
ffffffff80220264:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220268:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022026e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220274:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220278:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022027e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220282:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220286:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022028c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220290:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
ffffffff80220297:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022029b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022029e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202a2:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802202a8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802202ac:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
ffffffff802202b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802202b7:	48 89 c2             	mov    %rax,%rdx
ffffffff802202ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202be:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802202c4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802202c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202cb:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802202d1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802202d8:	48 c7 c2 36 bf 20 80 	mov    $0xffffffff8020bf36,%rdx
ffffffff802202df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202e3:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802202e9:	66 89 10             	mov    %dx,(%rax)
ffffffff802202ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202f0:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802202f6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802202fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220300:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220306:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022030a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022030e:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220314:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220318:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff8022031f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220323:	48 89 c2             	mov    %rax,%rdx
ffffffff80220326:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022032a:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220330:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220334:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff8022033b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022033f:	48 89 c2             	mov    %rax,%rdx
ffffffff80220342:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220346:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff8022034c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022034f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220353:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220359:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff80220360:	48 c7 c2 45 bf 20 80 	mov    $0xffffffff8020bf45,%rdx
ffffffff80220367:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022036b:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220371:	66 89 10             	mov    %dx,(%rax)
ffffffff80220374:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220378:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022037e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220384:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220388:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022038e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220392:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220396:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022039c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802203a0:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
ffffffff802203a7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802203ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802203ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203b2:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802203b8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802203bc:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
ffffffff802203c3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802203c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802203ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203ce:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802203d4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802203d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203db:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802203e1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802203e8:	48 c7 c2 54 bf 20 80 	mov    $0xffffffff8020bf54,%rdx
ffffffff802203ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203f3:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802203f9:	66 89 10             	mov    %dx,(%rax)
ffffffff802203fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220400:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220406:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022040c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220410:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220416:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022041a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022041e:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220424:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220428:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff8022042f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220433:	48 89 c2             	mov    %rax,%rdx
ffffffff80220436:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022043a:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220440:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220444:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff8022044b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022044f:	48 89 c2             	mov    %rax,%rdx
ffffffff80220452:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220456:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff8022045c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022045f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220463:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220469:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80220470:	48 c7 c2 63 bf 20 80 	mov    $0xffffffff8020bf63,%rdx
ffffffff80220477:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022047b:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220481:	66 89 10             	mov    %dx,(%rax)
ffffffff80220484:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220488:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022048e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220494:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220498:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022049e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802204a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204a6:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802204ac:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802204b0:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
ffffffff802204b7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802204bb:	48 89 c2             	mov    %rax,%rdx
ffffffff802204be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204c2:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802204c8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802204cc:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
ffffffff802204d3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802204d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802204da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204de:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802204e4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802204e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204eb:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802204f1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802204f8:	48 c7 c2 72 bf 20 80 	mov    $0xffffffff8020bf72,%rdx
ffffffff802204ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220503:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220509:	66 89 10             	mov    %dx,(%rax)
ffffffff8022050c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220510:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220516:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022051c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220520:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220526:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022052a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022052e:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220534:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220538:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff8022053f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220543:	48 89 c2             	mov    %rax,%rdx
ffffffff80220546:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022054a:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220550:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220554:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff8022055b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022055f:	48 89 c2             	mov    %rax,%rdx
ffffffff80220562:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220566:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff8022056c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022056f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220573:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220579:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80220580:	48 c7 c2 81 bf 20 80 	mov    $0xffffffff8020bf81,%rdx
ffffffff80220587:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022058b:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220591:	66 89 10             	mov    %dx,(%rax)
ffffffff80220594:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220598:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff8022059e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802205a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205a8:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802205ae:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802205b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205b6:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802205bc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802205c0:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
ffffffff802205c7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802205cb:	48 89 c2             	mov    %rax,%rdx
ffffffff802205ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205d2:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802205d8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802205dc:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
ffffffff802205e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802205e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802205ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205ee:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802205f4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802205f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205fb:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220601:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220608:	48 c7 c2 90 bf 20 80 	mov    $0xffffffff8020bf90,%rdx
ffffffff8022060f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220613:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220619:	66 89 10             	mov    %dx,(%rax)
ffffffff8022061c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220620:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220626:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022062c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220630:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220636:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022063a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022063e:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220644:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220648:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff8022064f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220653:	48 89 c2             	mov    %rax,%rdx
ffffffff80220656:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022065a:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220660:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220664:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff8022066b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022066f:	48 89 c2             	mov    %rax,%rdx
ffffffff80220672:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220676:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff8022067c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022067f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220683:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220689:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80220690:	48 c7 c2 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rdx
ffffffff80220697:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022069b:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802206a1:	66 89 10             	mov    %dx,(%rax)
ffffffff802206a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206a8:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802206ae:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802206b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206b8:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802206be:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802206c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206c6:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802206cc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802206d0:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
ffffffff802206d7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802206db:	48 89 c2             	mov    %rax,%rdx
ffffffff802206de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206e2:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802206e8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802206ec:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
ffffffff802206f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802206f7:	48 89 c2             	mov    %rax,%rdx
ffffffff802206fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206fe:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220704:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220707:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022070b:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220711:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220718:	48 c7 c2 ae bf 20 80 	mov    $0xffffffff8020bfae,%rdx
ffffffff8022071f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220723:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220729:	66 89 10             	mov    %dx,(%rax)
ffffffff8022072c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220730:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220736:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022073c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220740:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220746:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022074a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022074e:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220754:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220758:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff8022075f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220763:	48 89 c2             	mov    %rax,%rdx
ffffffff80220766:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022076a:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220770:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220774:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff8022077b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022077f:	48 89 c2             	mov    %rax,%rdx
ffffffff80220782:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220786:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022078c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022078f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220793:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220799:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff802207a0:	48 c7 c2 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rdx
ffffffff802207a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207ab:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802207b1:	66 89 10             	mov    %dx,(%rax)
ffffffff802207b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207b8:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802207be:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802207c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207c8:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802207ce:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802207d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207d6:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802207dc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802207e0:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
ffffffff802207e7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802207eb:	48 89 c2             	mov    %rax,%rdx
ffffffff802207ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207f2:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802207f8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802207fc:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
ffffffff80220803:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220807:	48 89 c2             	mov    %rax,%rdx
ffffffff8022080a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022080e:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220814:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220817:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022081b:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220821:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220828:	48 c7 c2 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rdx
ffffffff8022082f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220833:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220839:	66 89 10             	mov    %dx,(%rax)
ffffffff8022083c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220840:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220846:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022084c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220850:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220856:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022085a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022085e:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220864:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220868:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff8022086f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220873:	48 89 c2             	mov    %rax,%rdx
ffffffff80220876:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022087a:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220880:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220884:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff8022088b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022088f:	48 89 c2             	mov    %rax,%rdx
ffffffff80220892:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220896:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff8022089c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022089f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208a3:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff802208a9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff802208b0:	48 c7 c2 db bf 20 80 	mov    $0xffffffff8020bfdb,%rdx
ffffffff802208b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208bb:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802208c1:	66 89 10             	mov    %dx,(%rax)
ffffffff802208c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208c8:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802208ce:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802208d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208d8:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802208de:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802208e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208e6:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802208ec:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802208f0:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
ffffffff802208f7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802208fb:	48 89 c2             	mov    %rax,%rdx
ffffffff802208fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220902:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220908:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022090c:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
ffffffff80220913:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220917:	48 89 c2             	mov    %rax,%rdx
ffffffff8022091a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022091e:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220924:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220927:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022092b:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220931:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220938:	48 c7 c2 ea bf 20 80 	mov    $0xffffffff8020bfea,%rdx
ffffffff8022093f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220943:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220949:	66 89 10             	mov    %dx,(%rax)
ffffffff8022094c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220950:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220956:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022095c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220960:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220966:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022096a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022096e:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220974:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220978:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff8022097f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220983:	48 89 c2             	mov    %rax,%rdx
ffffffff80220986:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022098a:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220990:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220994:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff8022099b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022099f:	48 89 c2             	mov    %rax,%rdx
ffffffff802209a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209a6:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff802209ac:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802209af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209b3:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff802209b9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff802209c0:	48 c7 c2 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rdx
ffffffff802209c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209cb:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff802209d1:	66 89 10             	mov    %dx,(%rax)
ffffffff802209d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209d8:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff802209de:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802209e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209e8:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff802209ee:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802209f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209f6:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff802209fc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220a00:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
ffffffff80220a07:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220a0b:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a12:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220a18:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220a1c:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
ffffffff80220a23:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220a27:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a2e:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220a34:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220a37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a3b:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220a41:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220a48:	48 c7 c2 08 c0 20 80 	mov    $0xffffffff8020c008,%rdx
ffffffff80220a4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a53:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220a59:	66 89 10             	mov    %dx,(%rax)
ffffffff80220a5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a60:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220a66:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220a6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a70:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220a76:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220a7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a7e:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220a84:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220a88:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff80220a8f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220a93:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a9a:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220aa0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220aa4:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff80220aab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220aaf:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ab2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ab6:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220abc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220abf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ac3:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220ac9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80220ad0:	48 c7 c2 17 c0 20 80 	mov    $0xffffffff8020c017,%rdx
ffffffff80220ad7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220adb:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220ae1:	66 89 10             	mov    %dx,(%rax)
ffffffff80220ae4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ae8:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220aee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220af4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220af8:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220afe:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220b02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b06:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220b0c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220b10:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
ffffffff80220b17:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220b1b:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b22:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220b28:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220b2c:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
ffffffff80220b33:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220b37:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b3e:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220b44:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220b47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b4b:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220b51:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220b58:	48 c7 c2 26 c0 20 80 	mov    $0xffffffff8020c026,%rdx
ffffffff80220b5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b63:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b69:	66 89 10             	mov    %dx,(%rax)
ffffffff80220b6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b70:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b76:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220b7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b80:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b86:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220b8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b8e:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220b94:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220b98:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80220b9f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220ba3:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ba6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220baa:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220bb0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220bb4:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80220bbb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220bbf:	48 89 c2             	mov    %rax,%rdx
ffffffff80220bc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bc6:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220bcc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220bcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bd3:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220bd9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80220be0:	48 c7 c2 35 c0 20 80 	mov    $0xffffffff8020c035,%rdx
ffffffff80220be7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220beb:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220bf1:	66 89 10             	mov    %dx,(%rax)
ffffffff80220bf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bf8:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220bfe:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220c04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c08:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220c0e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220c12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c16:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220c1c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220c20:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
ffffffff80220c27:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220c2b:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c32:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220c38:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220c3c:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
ffffffff80220c43:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220c47:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c4e:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220c54:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220c57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c5b:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220c61:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220c68:	48 c7 c2 44 c0 20 80 	mov    $0xffffffff8020c044,%rdx
ffffffff80220c6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c73:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220c79:	66 89 10             	mov    %dx,(%rax)
ffffffff80220c7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c80:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220c86:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220c8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c90:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220c96:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220c9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c9e:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220ca4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220ca8:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80220caf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220cb3:	48 89 c2             	mov    %rax,%rdx
ffffffff80220cb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cba:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220cc0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220cc4:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80220ccb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220ccf:	48 89 c2             	mov    %rax,%rdx
ffffffff80220cd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cd6:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220cdc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220cdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ce3:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220ce9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80220cf0:	48 c7 c2 53 c0 20 80 	mov    $0xffffffff8020c053,%rdx
ffffffff80220cf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cfb:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220d01:	66 89 10             	mov    %dx,(%rax)
ffffffff80220d04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d08:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220d0e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220d14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d18:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220d1e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220d22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d26:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220d2c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220d30:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
ffffffff80220d37:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220d3b:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d42:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220d48:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220d4c:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
ffffffff80220d53:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220d57:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d5e:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220d64:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220d67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d6b:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220d71:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220d78:	48 c7 c2 62 c0 20 80 	mov    $0xffffffff8020c062,%rdx
ffffffff80220d7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d83:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220d89:	66 89 10             	mov    %dx,(%rax)
ffffffff80220d8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d90:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220d96:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220d9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220da0:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220da6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220daa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dae:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220db4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220db8:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff80220dbf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220dc3:	48 89 c2             	mov    %rax,%rdx
ffffffff80220dc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dca:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220dd0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220dd4:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff80220ddb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220ddf:	48 89 c2             	mov    %rax,%rdx
ffffffff80220de2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220de6:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220dec:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220def:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220df3:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220df9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80220e00:	48 c7 c2 71 c0 20 80 	mov    $0xffffffff8020c071,%rdx
ffffffff80220e07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e0b:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220e11:	66 89 10             	mov    %dx,(%rax)
ffffffff80220e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e18:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220e1e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220e24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e28:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220e2e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220e32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e36:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220e3c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220e40:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
ffffffff80220e47:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220e4b:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e52:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220e58:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220e5c:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
ffffffff80220e63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220e67:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e6e:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220e74:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220e77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e7b:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220e81:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220e88:	48 c7 c2 80 c0 20 80 	mov    $0xffffffff8020c080,%rdx
ffffffff80220e8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e93:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220e99:	66 89 10             	mov    %dx,(%rax)
ffffffff80220e9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ea0:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220ea6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220eac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220eb0:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220eb6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220eba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ebe:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220ec4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220ec8:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80220ecf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220ed3:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ed6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220eda:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220ee0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220ee4:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80220eeb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220eef:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ef2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ef6:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220efc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220eff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f03:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220f09:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80220f10:	48 c7 c2 8f c0 20 80 	mov    $0xffffffff8020c08f,%rdx
ffffffff80220f17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f1b:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220f21:	66 89 10             	mov    %dx,(%rax)
ffffffff80220f24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f28:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220f2e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220f34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f38:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220f3e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220f42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f46:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220f4c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220f50:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
ffffffff80220f57:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220f5b:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f62:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220f68:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220f6c:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
ffffffff80220f73:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220f77:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f7e:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220f84:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220f87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f8b:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80220f91:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220f98:	48 c7 c2 9e c0 20 80 	mov    $0xffffffff8020c09e,%rdx
ffffffff80220f9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fa3:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220fa9:	66 89 10             	mov    %dx,(%rax)
ffffffff80220fac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fb0:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220fb6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220fbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fc0:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220fc6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220fca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fce:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220fd4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220fd8:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff80220fdf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220fe3:	48 89 c2             	mov    %rax,%rdx
ffffffff80220fe6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fea:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80220ff0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220ff4:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff80220ffb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220fff:	48 89 c2             	mov    %rax,%rdx
ffffffff80221002:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221006:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff8022100c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022100f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221013:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff80221019:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80221020:	48 c7 c2 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rdx
ffffffff80221027:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022102b:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221031:	66 89 10             	mov    %dx,(%rax)
ffffffff80221034:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221038:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff8022103e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221044:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221048:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff8022104e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221052:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221056:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff8022105c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221060:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
ffffffff80221067:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022106b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022106e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221072:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221078:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022107c:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
ffffffff80221083:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221087:	48 89 c2             	mov    %rax,%rdx
ffffffff8022108a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022108e:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221094:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221097:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022109b:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff802210a1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802210a8:	48 c7 c2 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rdx
ffffffff802210af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210b3:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802210b9:	66 89 10             	mov    %dx,(%rax)
ffffffff802210bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210c0:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802210c6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802210cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210d0:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802210d6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802210da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210de:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802210e4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802210e8:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff802210ef:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802210f3:	48 89 c2             	mov    %rax,%rdx
ffffffff802210f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210fa:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80221100:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221104:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff8022110b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022110f:	48 89 c2             	mov    %rax,%rdx
ffffffff80221112:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221116:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff8022111c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022111f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221123:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff80221129:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80221130:	48 c7 c2 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rdx
ffffffff80221137:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022113b:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221141:	66 89 10             	mov    %dx,(%rax)
ffffffff80221144:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221148:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff8022114e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221154:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221158:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff8022115e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221162:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221166:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff8022116c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221170:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
ffffffff80221177:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022117b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022117e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221182:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221188:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022118c:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
ffffffff80221193:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221197:	48 89 c2             	mov    %rax,%rdx
ffffffff8022119a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022119e:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802211a4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802211a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211ab:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802211b1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802211b8:	48 c7 c2 da c0 20 80 	mov    $0xffffffff8020c0da,%rdx
ffffffff802211bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211c3:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802211c9:	66 89 10             	mov    %dx,(%rax)
ffffffff802211cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211d0:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802211d6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802211dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211e0:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802211e6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802211ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211ee:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802211f4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802211f8:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff802211ff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221203:	48 89 c2             	mov    %rax,%rdx
ffffffff80221206:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022120a:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221210:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221214:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff8022121b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022121f:	48 89 c2             	mov    %rax,%rdx
ffffffff80221222:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221226:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff8022122c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022122f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221233:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221239:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80221240:	48 c7 c2 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rdx
ffffffff80221247:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022124b:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221251:	66 89 10             	mov    %dx,(%rax)
ffffffff80221254:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221258:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff8022125e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221264:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221268:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff8022126e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221272:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221276:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff8022127c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221280:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
ffffffff80221287:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022128b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022128e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221292:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221298:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022129c:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
ffffffff802212a3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802212a7:	48 89 c2             	mov    %rax,%rdx
ffffffff802212aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212ae:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802212b4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802212b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212bb:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802212c1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802212c8:	48 c7 c2 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rdx
ffffffff802212cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212d3:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802212d9:	66 89 10             	mov    %dx,(%rax)
ffffffff802212dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212e0:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802212e6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802212ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212f0:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802212f6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802212fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212fe:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221304:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221308:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff8022130f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221313:	48 89 c2             	mov    %rax,%rdx
ffffffff80221316:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022131a:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221320:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221324:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff8022132b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022132f:	48 89 c2             	mov    %rax,%rdx
ffffffff80221332:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221336:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff8022133c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022133f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221343:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221349:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80221350:	48 c7 c2 07 c1 20 80 	mov    $0xffffffff8020c107,%rdx
ffffffff80221357:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022135b:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221361:	66 89 10             	mov    %dx,(%rax)
ffffffff80221364:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221368:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022136e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221374:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221378:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022137e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221382:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221386:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022138c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221390:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
ffffffff80221397:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022139b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022139e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213a2:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802213a8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802213ac:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
ffffffff802213b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802213b7:	48 89 c2             	mov    %rax,%rdx
ffffffff802213ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213be:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802213c4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802213c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213cb:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802213d1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802213d8:	48 c7 c2 16 c1 20 80 	mov    $0xffffffff8020c116,%rdx
ffffffff802213df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213e3:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802213e9:	66 89 10             	mov    %dx,(%rax)
ffffffff802213ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213f0:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802213f6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802213fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221400:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221406:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022140a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022140e:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221414:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221418:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff8022141f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221423:	48 89 c2             	mov    %rax,%rdx
ffffffff80221426:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022142a:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221430:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221434:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff8022143b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022143f:	48 89 c2             	mov    %rax,%rdx
ffffffff80221442:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221446:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff8022144c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022144f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221453:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221459:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80221460:	48 c7 c2 25 c1 20 80 	mov    $0xffffffff8020c125,%rdx
ffffffff80221467:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022146b:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221471:	66 89 10             	mov    %dx,(%rax)
ffffffff80221474:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221478:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022147e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221484:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221488:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022148e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221492:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221496:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022149c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802214a0:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
ffffffff802214a7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802214ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802214ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214b2:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802214b8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802214bc:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
ffffffff802214c3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802214c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802214ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214ce:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802214d4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802214d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214db:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802214e1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802214e8:	48 c7 c2 34 c1 20 80 	mov    $0xffffffff8020c134,%rdx
ffffffff802214ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214f3:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802214f9:	66 89 10             	mov    %dx,(%rax)
ffffffff802214fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221500:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221506:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022150c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221510:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221516:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022151a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022151e:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221524:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221528:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff8022152f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221533:	48 89 c2             	mov    %rax,%rdx
ffffffff80221536:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022153a:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221540:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221544:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff8022154b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022154f:	48 89 c2             	mov    %rax,%rdx
ffffffff80221552:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221556:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff8022155c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022155f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221563:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221569:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80221570:	48 c7 c2 43 c1 20 80 	mov    $0xffffffff8020c143,%rdx
ffffffff80221577:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022157b:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221581:	66 89 10             	mov    %dx,(%rax)
ffffffff80221584:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221588:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022158e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221594:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221598:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022159e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802215a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215a6:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802215ac:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802215b0:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
ffffffff802215b7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802215bb:	48 89 c2             	mov    %rax,%rdx
ffffffff802215be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215c2:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802215c8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802215cc:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
ffffffff802215d3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802215d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802215da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215de:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802215e4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802215e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215eb:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802215f1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802215f8:	48 c7 c2 52 c1 20 80 	mov    $0xffffffff8020c152,%rdx
ffffffff802215ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221603:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221609:	66 89 10             	mov    %dx,(%rax)
ffffffff8022160c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221610:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221616:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022161c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221620:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221626:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022162a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022162e:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221634:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221638:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff8022163f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221643:	48 89 c2             	mov    %rax,%rdx
ffffffff80221646:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022164a:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221650:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221654:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff8022165b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022165f:	48 89 c2             	mov    %rax,%rdx
ffffffff80221662:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221666:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff8022166c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022166f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221673:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221679:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80221680:	48 c7 c2 61 c1 20 80 	mov    $0xffffffff8020c161,%rdx
ffffffff80221687:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022168b:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221691:	66 89 10             	mov    %dx,(%rax)
ffffffff80221694:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221698:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff8022169e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802216a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216a8:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802216ae:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802216b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216b6:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802216bc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802216c0:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
ffffffff802216c7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802216cb:	48 89 c2             	mov    %rax,%rdx
ffffffff802216ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216d2:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802216d8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802216dc:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
ffffffff802216e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802216e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802216ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216ee:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802216f4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802216f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216fb:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221701:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221708:	48 c7 c2 70 c1 20 80 	mov    $0xffffffff8020c170,%rdx
ffffffff8022170f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221713:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221719:	66 89 10             	mov    %dx,(%rax)
ffffffff8022171c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221720:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221726:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022172c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221730:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221736:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022173a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022173e:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221744:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221748:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff8022174f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221753:	48 89 c2             	mov    %rax,%rdx
ffffffff80221756:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022175a:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221760:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221764:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff8022176b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022176f:	48 89 c2             	mov    %rax,%rdx
ffffffff80221772:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221776:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff8022177c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022177f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221783:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221789:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80221790:	48 c7 c2 7f c1 20 80 	mov    $0xffffffff8020c17f,%rdx
ffffffff80221797:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022179b:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802217a1:	66 89 10             	mov    %dx,(%rax)
ffffffff802217a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217a8:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802217ae:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802217b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217b8:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802217be:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802217c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217c6:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802217cc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802217d0:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff802217d7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802217db:	48 89 c2             	mov    %rax,%rdx
ffffffff802217de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217e2:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802217e8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802217ec:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff802217f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802217f7:	48 89 c2             	mov    %rax,%rdx
ffffffff802217fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217fe:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221804:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221807:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022180b:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221811:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221818:	48 c7 c2 8e c1 20 80 	mov    $0xffffffff8020c18e,%rdx
ffffffff8022181f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221823:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221829:	66 89 10             	mov    %dx,(%rax)
ffffffff8022182c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221830:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221836:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022183c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221840:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221846:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022184a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022184e:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221854:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221858:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff8022185f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221863:	48 89 c2             	mov    %rax,%rdx
ffffffff80221866:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022186a:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221870:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221874:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff8022187b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022187f:	48 89 c2             	mov    %rax,%rdx
ffffffff80221882:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221886:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022188c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022188f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221893:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221899:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff802218a0:	48 c7 c2 9d c1 20 80 	mov    $0xffffffff8020c19d,%rdx
ffffffff802218a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218ab:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802218b1:	66 89 10             	mov    %dx,(%rax)
ffffffff802218b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218b8:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802218be:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802218c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218c8:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802218ce:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802218d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218d6:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802218dc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802218e0:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
ffffffff802218e7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802218eb:	48 89 c2             	mov    %rax,%rdx
ffffffff802218ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218f2:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802218f8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802218fc:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
ffffffff80221903:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221907:	48 89 c2             	mov    %rax,%rdx
ffffffff8022190a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022190e:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221914:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221917:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022191b:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221921:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221928:	48 c7 c2 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rdx
ffffffff8022192f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221933:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221939:	66 89 10             	mov    %dx,(%rax)
ffffffff8022193c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221940:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221946:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022194c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221950:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221956:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022195a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022195e:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221964:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221968:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff8022196f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221973:	48 89 c2             	mov    %rax,%rdx
ffffffff80221976:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022197a:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221980:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221984:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff8022198b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022198f:	48 89 c2             	mov    %rax,%rdx
ffffffff80221992:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221996:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff8022199c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022199f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219a3:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff802219a9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff802219b0:	48 c7 c2 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rdx
ffffffff802219b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219bb:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff802219c1:	66 89 10             	mov    %dx,(%rax)
ffffffff802219c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219c8:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff802219ce:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802219d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219d8:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff802219de:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802219e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219e6:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff802219ec:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802219f0:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
ffffffff802219f7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802219fb:	48 89 c2             	mov    %rax,%rdx
ffffffff802219fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a02:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221a08:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221a0c:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
ffffffff80221a13:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221a17:	48 89 c2             	mov    %rax,%rdx
ffffffff80221a1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a1e:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221a24:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221a27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a2b:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221a31:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221a38:	48 c7 c2 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rdx
ffffffff80221a3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a43:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221a49:	66 89 10             	mov    %dx,(%rax)
ffffffff80221a4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a50:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221a56:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221a5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a60:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221a66:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221a6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a6e:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221a74:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221a78:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff80221a7f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221a83:	48 89 c2             	mov    %rax,%rdx
ffffffff80221a86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a8a:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221a90:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221a94:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff80221a9b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221a9f:	48 89 c2             	mov    %rax,%rdx
ffffffff80221aa2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221aa6:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221aac:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221aaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ab3:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221ab9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80221ac0:	48 c7 c2 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rdx
ffffffff80221ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221acb:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221ad1:	66 89 10             	mov    %dx,(%rax)
ffffffff80221ad4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ad8:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221ade:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221ae4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ae8:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221aee:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221af2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221af6:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221afc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221b00:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
ffffffff80221b07:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221b0b:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b12:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221b18:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221b1c:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
ffffffff80221b23:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221b27:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b2e:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221b34:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221b37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b3b:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221b41:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221b48:	48 c7 c2 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rdx
ffffffff80221b4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b53:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221b59:	66 89 10             	mov    %dx,(%rax)
ffffffff80221b5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b60:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221b66:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221b6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b70:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221b76:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221b7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b7e:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221b84:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221b88:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff80221b8f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221b93:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b9a:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221ba0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221ba4:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff80221bab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221baf:	48 89 c2             	mov    %rax,%rdx
ffffffff80221bb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bb6:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221bbc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221bbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bc3:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221bc9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80221bd0:	48 c7 c2 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rdx
ffffffff80221bd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bdb:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221be1:	66 89 10             	mov    %dx,(%rax)
ffffffff80221be4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221be8:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221bee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221bf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bf8:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221bfe:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221c02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c06:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221c0c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221c10:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
ffffffff80221c17:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221c1b:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c22:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221c28:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221c2c:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
ffffffff80221c33:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221c37:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c3e:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221c44:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221c47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c4b:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221c51:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221c58:	48 c7 c2 06 c2 20 80 	mov    $0xffffffff8020c206,%rdx
ffffffff80221c5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c63:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c69:	66 89 10             	mov    %dx,(%rax)
ffffffff80221c6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c70:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c76:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221c7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c80:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c86:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221c8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c8e:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221c94:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221c98:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff80221c9f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221ca3:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ca6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221caa:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221cb0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221cb4:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff80221cbb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221cbf:	48 89 c2             	mov    %rax,%rdx
ffffffff80221cc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cc6:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221ccc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221ccf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cd3:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221cd9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80221ce0:	48 c7 c2 15 c2 20 80 	mov    $0xffffffff8020c215,%rdx
ffffffff80221ce7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ceb:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221cf1:	66 89 10             	mov    %dx,(%rax)
ffffffff80221cf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cf8:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221cfe:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221d04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d08:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221d0e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221d12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d16:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221d1c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221d20:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
ffffffff80221d27:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221d2b:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d32:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221d38:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221d3c:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
ffffffff80221d43:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221d47:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d4e:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221d54:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221d57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d5b:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221d61:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221d68:	48 c7 c2 24 c2 20 80 	mov    $0xffffffff8020c224,%rdx
ffffffff80221d6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d73:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221d79:	66 89 10             	mov    %dx,(%rax)
ffffffff80221d7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d80:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221d86:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221d8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d90:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221d96:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221d9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d9e:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221da4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221da8:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff80221daf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221db3:	48 89 c2             	mov    %rax,%rdx
ffffffff80221db6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dba:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221dc0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221dc4:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff80221dcb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221dcf:	48 89 c2             	mov    %rax,%rdx
ffffffff80221dd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dd6:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221ddc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221ddf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221de3:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221de9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80221df0:	48 c7 c2 33 c2 20 80 	mov    $0xffffffff8020c233,%rdx
ffffffff80221df7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dfb:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221e01:	66 89 10             	mov    %dx,(%rax)
ffffffff80221e04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e08:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221e0e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e18:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221e1e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221e22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e26:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221e2c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221e30:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
ffffffff80221e37:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221e3b:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e42:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221e48:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221e4c:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
ffffffff80221e53:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221e57:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e5e:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221e64:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221e67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e6b:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221e71:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221e78:	48 c7 c2 42 c2 20 80 	mov    $0xffffffff8020c242,%rdx
ffffffff80221e7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e83:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221e89:	66 89 10             	mov    %dx,(%rax)
ffffffff80221e8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e90:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221e96:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221e9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ea0:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221ea6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221eaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221eae:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221eb4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221eb8:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80221ebf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221ec3:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ec6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221eca:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221ed0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221ed4:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80221edb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221edf:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ee2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ee6:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221eec:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221eef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ef3:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221ef9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80221f00:	48 c7 c2 51 c2 20 80 	mov    $0xffffffff8020c251,%rdx
ffffffff80221f07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f0b:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221f11:	66 89 10             	mov    %dx,(%rax)
ffffffff80221f14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f18:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221f1e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221f24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f28:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221f2e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221f32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f36:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221f3c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221f40:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
ffffffff80221f47:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221f4b:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f52:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221f58:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221f5c:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
ffffffff80221f63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221f67:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f6e:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221f74:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221f77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f7b:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80221f81:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221f88:	48 c7 c2 60 c2 20 80 	mov    $0xffffffff8020c260,%rdx
ffffffff80221f8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f93:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221f99:	66 89 10             	mov    %dx,(%rax)
ffffffff80221f9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fa0:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221fa6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221fac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fb0:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221fb6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221fba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fbe:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221fc4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221fc8:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff80221fcf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221fd3:	48 89 c2             	mov    %rax,%rdx
ffffffff80221fd6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fda:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221fe0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221fe4:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff80221feb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221fef:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ff2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ff6:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80221ffc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221fff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222003:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80222009:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80222010:	48 c7 c2 6f c2 20 80 	mov    $0xffffffff8020c26f,%rdx
ffffffff80222017:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022201b:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222021:	66 89 10             	mov    %dx,(%rax)
ffffffff80222024:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222028:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff8022202e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222034:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222038:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff8022203e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222042:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222046:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff8022204c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222050:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
ffffffff80222057:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022205b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022205e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222062:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222068:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022206c:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
ffffffff80222073:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222077:	48 89 c2             	mov    %rax,%rdx
ffffffff8022207a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022207e:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222084:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222087:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022208b:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222091:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222098:	48 c7 c2 7e c2 20 80 	mov    $0xffffffff8020c27e,%rdx
ffffffff8022209f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220a3:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802220a9:	66 89 10             	mov    %dx,(%rax)
ffffffff802220ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220b0:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802220b6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802220bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220c0:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802220c6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802220ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220ce:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802220d4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802220d8:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff802220df:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802220e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802220e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220ea:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802220f0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802220f4:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff802220fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802220ff:	48 89 c2             	mov    %rax,%rdx
ffffffff80222102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222106:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff8022210c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022210f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222113:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff80222119:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80222120:	48 c7 c2 8d c2 20 80 	mov    $0xffffffff8020c28d,%rdx
ffffffff80222127:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022212b:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222131:	66 89 10             	mov    %dx,(%rax)
ffffffff80222134:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222138:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff8022213e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222144:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222148:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff8022214e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222152:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222156:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff8022215c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222160:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
ffffffff80222167:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022216b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022216e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222172:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222178:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022217c:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
ffffffff80222183:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222187:	48 89 c2             	mov    %rax,%rdx
ffffffff8022218a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022218e:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222194:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222197:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022219b:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff802221a1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802221a8:	48 c7 c2 9c c2 20 80 	mov    $0xffffffff8020c29c,%rdx
ffffffff802221af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221b3:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802221b9:	66 89 10             	mov    %dx,(%rax)
ffffffff802221bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221c0:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802221c6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802221cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221d0:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802221d6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802221da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221de:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802221e4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802221e8:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff802221ef:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802221f3:	48 89 c2             	mov    %rax,%rdx
ffffffff802221f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221fa:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222200:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222204:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff8022220b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022220f:	48 89 c2             	mov    %rax,%rdx
ffffffff80222212:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222216:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff8022221c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022221f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222223:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff80222229:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80222230:	48 c7 c2 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rdx
ffffffff80222237:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022223b:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222241:	66 89 10             	mov    %dx,(%rax)
ffffffff80222244:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222248:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff8022224e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222254:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222258:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff8022225e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222262:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222266:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff8022226c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222270:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff80222277:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022227b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022227e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222282:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222288:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022228c:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff80222293:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222297:	48 89 c2             	mov    %rax,%rdx
ffffffff8022229a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022229e:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802222a4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802222a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222ab:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802222b1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802222b8:	48 c7 c2 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rdx
ffffffff802222bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222c3:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802222c9:	66 89 10             	mov    %dx,(%rax)
ffffffff802222cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222d0:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802222d6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802222dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222e0:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802222e6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802222ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222ee:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802222f4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802222f8:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff802222ff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222303:	48 89 c2             	mov    %rax,%rdx
ffffffff80222306:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022230a:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222310:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222314:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff8022231b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022231f:	48 89 c2             	mov    %rax,%rdx
ffffffff80222322:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222326:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff8022232c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022232f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222333:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222339:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80222340:	48 c7 c2 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rdx
ffffffff80222347:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022234b:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222351:	66 89 10             	mov    %dx,(%rax)
ffffffff80222354:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222358:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff8022235e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222364:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222368:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff8022236e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222372:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222376:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff8022237c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222380:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
ffffffff80222387:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022238b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022238e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222392:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222398:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022239c:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
ffffffff802223a3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802223a7:	48 89 c2             	mov    %rax,%rdx
ffffffff802223aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223ae:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802223b4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802223b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223bb:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802223c1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802223c8:	48 c7 c2 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rdx
ffffffff802223cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223d3:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802223d9:	66 89 10             	mov    %dx,(%rax)
ffffffff802223dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223e0:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802223e6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802223ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223f0:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802223f6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802223fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223fe:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222404:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222408:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff8022240f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222413:	48 89 c2             	mov    %rax,%rdx
ffffffff80222416:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022241a:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222420:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222424:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff8022242b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022242f:	48 89 c2             	mov    %rax,%rdx
ffffffff80222432:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222436:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff8022243c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022243f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222443:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222449:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80222450:	48 c7 c2 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rdx
ffffffff80222457:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022245b:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222461:	66 89 10             	mov    %dx,(%rax)
ffffffff80222464:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222468:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022246e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222474:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222478:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022247e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222482:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222486:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022248c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222490:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
ffffffff80222497:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022249b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022249e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224a2:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802224a8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802224ac:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
ffffffff802224b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802224b7:	48 89 c2             	mov    %rax,%rdx
ffffffff802224ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224be:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802224c4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802224c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224cb:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802224d1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802224d8:	48 c7 c2 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rdx
ffffffff802224df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224e3:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802224e9:	66 89 10             	mov    %dx,(%rax)
ffffffff802224ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224f0:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802224f6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802224fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222500:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222506:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022250a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022250e:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222514:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222518:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff8022251f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222523:	48 89 c2             	mov    %rax,%rdx
ffffffff80222526:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022252a:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222530:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222534:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff8022253b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022253f:	48 89 c2             	mov    %rax,%rdx
ffffffff80222542:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222546:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff8022254c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022254f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222553:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222559:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80222560:	48 c7 c2 05 c3 20 80 	mov    $0xffffffff8020c305,%rdx
ffffffff80222567:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022256b:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222571:	66 89 10             	mov    %dx,(%rax)
ffffffff80222574:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222578:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022257e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222584:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222588:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022258e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222592:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222596:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022259c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802225a0:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
ffffffff802225a7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802225ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802225ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225b2:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802225b8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802225bc:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
ffffffff802225c3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802225c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802225ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225ce:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802225d4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802225d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225db:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802225e1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802225e8:	48 c7 c2 14 c3 20 80 	mov    $0xffffffff8020c314,%rdx
ffffffff802225ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225f3:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802225f9:	66 89 10             	mov    %dx,(%rax)
ffffffff802225fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222600:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222606:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022260c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222610:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222616:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022261a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022261e:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222624:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222628:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff8022262f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222633:	48 89 c2             	mov    %rax,%rdx
ffffffff80222636:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022263a:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222640:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222644:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff8022264b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022264f:	48 89 c2             	mov    %rax,%rdx
ffffffff80222652:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222656:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff8022265c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022265f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222663:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222669:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80222670:	48 c7 c2 23 c3 20 80 	mov    $0xffffffff8020c323,%rdx
ffffffff80222677:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022267b:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222681:	66 89 10             	mov    %dx,(%rax)
ffffffff80222684:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222688:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022268e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222694:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222698:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022269e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802226a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226a6:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802226ac:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802226b0:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
ffffffff802226b7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802226bb:	48 89 c2             	mov    %rax,%rdx
ffffffff802226be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226c2:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802226c8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802226cc:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
ffffffff802226d3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802226d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802226da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226de:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802226e4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802226e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226eb:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802226f1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802226f8:	48 c7 c2 32 c3 20 80 	mov    $0xffffffff8020c332,%rdx
ffffffff802226ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222703:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222709:	66 89 10             	mov    %dx,(%rax)
ffffffff8022270c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222710:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222716:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022271c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222720:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222726:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022272a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022272e:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222734:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222738:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff8022273f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222743:	48 89 c2             	mov    %rax,%rdx
ffffffff80222746:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022274a:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222750:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222754:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff8022275b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022275f:	48 89 c2             	mov    %rax,%rdx
ffffffff80222762:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222766:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff8022276c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022276f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222773:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222779:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80222780:	48 c7 c2 41 c3 20 80 	mov    $0xffffffff8020c341,%rdx
ffffffff80222787:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022278b:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222791:	66 89 10             	mov    %dx,(%rax)
ffffffff80222794:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222798:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff8022279e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802227a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227a8:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802227ae:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802227b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227b6:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802227bc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802227c0:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
ffffffff802227c7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802227cb:	48 89 c2             	mov    %rax,%rdx
ffffffff802227ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227d2:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802227d8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802227dc:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
ffffffff802227e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802227e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802227ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227ee:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802227f4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802227f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227fb:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222801:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222808:	48 c7 c2 50 c3 20 80 	mov    $0xffffffff8020c350,%rdx
ffffffff8022280f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222813:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222819:	66 89 10             	mov    %dx,(%rax)
ffffffff8022281c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222820:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222826:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022282c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222830:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222836:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022283a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022283e:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222844:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222848:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff8022284f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222853:	48 89 c2             	mov    %rax,%rdx
ffffffff80222856:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022285a:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222860:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222864:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff8022286b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022286f:	48 89 c2             	mov    %rax,%rdx
ffffffff80222872:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222876:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff8022287c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022287f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222883:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222889:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80222890:	48 c7 c2 5f c3 20 80 	mov    $0xffffffff8020c35f,%rdx
ffffffff80222897:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022289b:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802228a1:	66 89 10             	mov    %dx,(%rax)
ffffffff802228a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228a8:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802228ae:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802228b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228b8:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802228be:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802228c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228c6:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802228cc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802228d0:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
ffffffff802228d7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802228db:	48 89 c2             	mov    %rax,%rdx
ffffffff802228de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228e2:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802228e8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802228ec:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
ffffffff802228f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802228f7:	48 89 c2             	mov    %rax,%rdx
ffffffff802228fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228fe:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222904:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222907:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022290b:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222911:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222918:	48 c7 c2 6e c3 20 80 	mov    $0xffffffff8020c36e,%rdx
ffffffff8022291f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222923:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222929:	66 89 10             	mov    %dx,(%rax)
ffffffff8022292c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222930:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222936:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022293c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222940:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222946:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022294a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022294e:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222954:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222958:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff8022295f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222963:	48 89 c2             	mov    %rax,%rdx
ffffffff80222966:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022296a:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222970:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222974:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff8022297b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022297f:	48 89 c2             	mov    %rax,%rdx
ffffffff80222982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222986:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff8022298c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022298f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222993:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222999:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff802229a0:	48 c7 c2 7d c3 20 80 	mov    $0xffffffff8020c37d,%rdx
ffffffff802229a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229ab:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff802229b1:	66 89 10             	mov    %dx,(%rax)
ffffffff802229b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229b8:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff802229be:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802229c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229c8:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff802229ce:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802229d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229d6:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff802229dc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802229e0:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
ffffffff802229e7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802229eb:	48 89 c2             	mov    %rax,%rdx
ffffffff802229ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229f2:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff802229f8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802229fc:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
ffffffff80222a03:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222a07:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a0e:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222a14:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222a17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a1b:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222a21:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222a28:	48 c7 c2 8c c3 20 80 	mov    $0xffffffff8020c38c,%rdx
ffffffff80222a2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a33:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222a39:	66 89 10             	mov    %dx,(%rax)
ffffffff80222a3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a40:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222a46:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222a4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a50:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222a56:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222a5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a5e:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222a64:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222a68:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff80222a6f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222a73:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a7a:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222a80:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222a84:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff80222a8b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222a8f:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a96:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222a9c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222a9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222aa3:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222aa9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80222ab0:	48 c7 c2 9b c3 20 80 	mov    $0xffffffff8020c39b,%rdx
ffffffff80222ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222abb:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222ac1:	66 89 10             	mov    %dx,(%rax)
ffffffff80222ac4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ac8:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222ace:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222ad4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ad8:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222ade:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222ae2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ae6:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222aec:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222af0:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
ffffffff80222af7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222afb:	48 89 c2             	mov    %rax,%rdx
ffffffff80222afe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b02:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222b08:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222b0c:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
ffffffff80222b13:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222b17:	48 89 c2             	mov    %rax,%rdx
ffffffff80222b1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b1e:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222b24:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222b27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b2b:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222b31:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222b38:	48 c7 c2 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rdx
ffffffff80222b3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b43:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222b49:	66 89 10             	mov    %dx,(%rax)
ffffffff80222b4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b50:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222b56:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222b5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b60:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222b66:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222b6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b6e:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222b74:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222b78:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80222b7f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222b83:	48 89 c2             	mov    %rax,%rdx
ffffffff80222b86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b8a:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222b90:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222b94:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80222b9b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222b9f:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ba2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ba6:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222bac:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222baf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bb3:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222bb9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80222bc0:	48 c7 c2 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rdx
ffffffff80222bc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bcb:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222bd1:	66 89 10             	mov    %dx,(%rax)
ffffffff80222bd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bd8:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222bde:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222be4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222be8:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222bee:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222bf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bf6:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222bfc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222c00:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
ffffffff80222c07:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222c0b:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c12:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222c18:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222c1c:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
ffffffff80222c23:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222c27:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c2e:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222c34:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222c37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c3b:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222c41:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222c48:	48 c7 c2 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rdx
ffffffff80222c4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c53:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222c59:	66 89 10             	mov    %dx,(%rax)
ffffffff80222c5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c60:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222c66:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222c6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c70:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222c76:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222c7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c7e:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222c84:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222c88:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80222c8f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222c93:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c9a:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222ca0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222ca4:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80222cab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222caf:	48 89 c2             	mov    %rax,%rdx
ffffffff80222cb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cb6:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222cbc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222cbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cc3:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222cc9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80222cd0:	48 c7 c2 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rdx
ffffffff80222cd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cdb:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222ce1:	66 89 10             	mov    %dx,(%rax)
ffffffff80222ce4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ce8:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222cee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222cf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cf8:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222cfe:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222d02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d06:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222d0c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222d10:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
ffffffff80222d17:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222d1b:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d22:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222d28:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222d2c:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
ffffffff80222d33:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222d37:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d3e:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222d44:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222d47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d4b:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222d51:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222d58:	48 c7 c2 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rdx
ffffffff80222d5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d63:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d69:	66 89 10             	mov    %dx,(%rax)
ffffffff80222d6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d70:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d76:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222d7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d80:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d86:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222d8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d8e:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222d94:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222d98:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80222d9f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222da3:	48 89 c2             	mov    %rax,%rdx
ffffffff80222da6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222daa:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222db0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222db4:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80222dbb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222dbf:	48 89 c2             	mov    %rax,%rdx
ffffffff80222dc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222dc6:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222dcc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222dcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222dd3:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222dd9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80222de0:	48 c7 c2 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rdx
ffffffff80222de7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222deb:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222df1:	66 89 10             	mov    %dx,(%rax)
ffffffff80222df4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222df8:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222dfe:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222e04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e08:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222e0e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222e12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e16:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222e1c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222e20:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
ffffffff80222e27:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222e2b:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e32:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222e38:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222e3c:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
ffffffff80222e43:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222e47:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e4e:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222e54:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222e57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e5b:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222e61:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222e68:	48 c7 c2 04 c4 20 80 	mov    $0xffffffff8020c404,%rdx
ffffffff80222e6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e73:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222e79:	66 89 10             	mov    %dx,(%rax)
ffffffff80222e7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e80:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222e86:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222e8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e90:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222e96:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222e9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e9e:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222ea4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222ea8:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80222eaf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222eb3:	48 89 c2             	mov    %rax,%rdx
ffffffff80222eb6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222eba:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222ec0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222ec4:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80222ecb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222ecf:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ed2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ed6:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222edc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222edf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ee3:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222ee9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80222ef0:	48 c7 c2 13 c4 20 80 	mov    $0xffffffff8020c413,%rdx
ffffffff80222ef7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222efb:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222f01:	66 89 10             	mov    %dx,(%rax)
ffffffff80222f04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f08:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222f0e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222f14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f18:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222f1e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222f22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f26:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222f2c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222f30:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
ffffffff80222f37:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222f3b:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f42:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222f48:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222f4c:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
ffffffff80222f53:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222f57:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f5e:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222f64:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222f67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f6b:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222f71:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222f78:	48 c7 c2 22 c4 20 80 	mov    $0xffffffff8020c422,%rdx
ffffffff80222f7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f83:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222f89:	66 89 10             	mov    %dx,(%rax)
ffffffff80222f8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f90:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222f96:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222f9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fa0:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222fa6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222faa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fae:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222fb4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222fb8:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff80222fbf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222fc3:	48 89 c2             	mov    %rax,%rdx
ffffffff80222fc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fca:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222fd0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222fd4:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff80222fdb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222fdf:	48 89 c2             	mov    %rax,%rdx
ffffffff80222fe2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fe6:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222fec:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222fef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ff3:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80222ff9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80223000:	48 c7 c2 31 c4 20 80 	mov    $0xffffffff8020c431,%rdx
ffffffff80223007:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022300b:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223011:	66 89 10             	mov    %dx,(%rax)
ffffffff80223014:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223018:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff8022301e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223024:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223028:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff8022302e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223032:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223036:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff8022303c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223040:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff80223047:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022304b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022304e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223052:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223058:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022305c:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff80223063:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223067:	48 89 c2             	mov    %rax,%rdx
ffffffff8022306a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022306e:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223074:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223077:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022307b:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223081:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223088:	48 c7 c2 40 c4 20 80 	mov    $0xffffffff8020c440,%rdx
ffffffff8022308f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223093:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80223099:	66 89 10             	mov    %dx,(%rax)
ffffffff8022309c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230a0:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802230a6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802230ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230b0:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802230b6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802230ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230be:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802230c4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802230c8:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff802230cf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802230d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802230d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230da:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802230e0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802230e4:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff802230eb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802230ef:	48 89 c2             	mov    %rax,%rdx
ffffffff802230f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230f6:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802230fc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802230ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223103:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80223109:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80223110:	48 c7 c2 4f c4 20 80 	mov    $0xffffffff8020c44f,%rdx
ffffffff80223117:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022311b:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223121:	66 89 10             	mov    %dx,(%rax)
ffffffff80223124:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223128:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff8022312e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223134:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223138:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff8022313e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223142:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223146:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff8022314c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223150:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
ffffffff80223157:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022315b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022315e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223162:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223168:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022316c:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
ffffffff80223173:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223177:	48 89 c2             	mov    %rax,%rdx
ffffffff8022317a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022317e:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223184:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223187:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022318b:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223191:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223198:	48 c7 c2 5e c4 20 80 	mov    $0xffffffff8020c45e,%rdx
ffffffff8022319f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231a3:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802231a9:	66 89 10             	mov    %dx,(%rax)
ffffffff802231ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231b0:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802231b6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802231bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231c0:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802231c6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802231ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231ce:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802231d4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802231d8:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff802231df:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802231e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802231e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231ea:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802231f0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802231f4:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff802231fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802231ff:	48 89 c2             	mov    %rax,%rdx
ffffffff80223202:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223206:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff8022320c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022320f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223213:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff80223219:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80223220:	48 c7 c2 6d c4 20 80 	mov    $0xffffffff8020c46d,%rdx
ffffffff80223227:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022322b:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223231:	66 89 10             	mov    %dx,(%rax)
ffffffff80223234:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223238:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff8022323e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223244:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223248:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff8022324e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223252:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223256:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff8022325c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223260:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
ffffffff80223267:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022326b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022326e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223272:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223278:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022327c:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
ffffffff80223283:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223287:	48 89 c2             	mov    %rax,%rdx
ffffffff8022328a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022328e:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223294:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223297:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022329b:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff802232a1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802232a8:	48 c7 c2 7c c4 20 80 	mov    $0xffffffff8020c47c,%rdx
ffffffff802232af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232b3:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802232b9:	66 89 10             	mov    %dx,(%rax)
ffffffff802232bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232c0:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802232c6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802232cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232d0:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802232d6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802232da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232de:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802232e4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802232e8:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff802232ef:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802232f3:	48 89 c2             	mov    %rax,%rdx
ffffffff802232f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232fa:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223300:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223304:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff8022330b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022330f:	48 89 c2             	mov    %rax,%rdx
ffffffff80223312:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223316:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff8022331c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022331f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223323:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff80223329:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80223330:	48 c7 c2 8b c4 20 80 	mov    $0xffffffff8020c48b,%rdx
ffffffff80223337:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022333b:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223341:	66 89 10             	mov    %dx,(%rax)
ffffffff80223344:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223348:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff8022334e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223354:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223358:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff8022335e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223362:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223366:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff8022336c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223370:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
ffffffff80223377:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022337b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022337e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223382:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223388:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022338c:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
ffffffff80223393:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223397:	48 89 c2             	mov    %rax,%rdx
ffffffff8022339a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022339e:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802233a4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802233a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233ab:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802233b1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802233b8:	48 c7 c2 9a c4 20 80 	mov    $0xffffffff8020c49a,%rdx
ffffffff802233bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233c3:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802233c9:	66 89 10             	mov    %dx,(%rax)
ffffffff802233cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233d0:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802233d6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802233dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233e0:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802233e6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802233ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233ee:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802233f4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802233f8:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff802233ff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223403:	48 89 c2             	mov    %rax,%rdx
ffffffff80223406:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022340a:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223410:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223414:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff8022341b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022341f:	48 89 c2             	mov    %rax,%rdx
ffffffff80223422:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223426:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff8022342c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022342f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223433:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223439:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80223440:	48 c7 c2 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rdx
ffffffff80223447:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022344b:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223451:	66 89 10             	mov    %dx,(%rax)
ffffffff80223454:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223458:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff8022345e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223464:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223468:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff8022346e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223472:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223476:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff8022347c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223480:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
ffffffff80223487:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022348b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022348e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223492:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223498:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022349c:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
ffffffff802234a3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802234a7:	48 89 c2             	mov    %rax,%rdx
ffffffff802234aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234ae:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802234b4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802234b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234bb:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802234c1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802234c8:	48 c7 c2 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rdx
ffffffff802234cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234d3:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802234d9:	66 89 10             	mov    %dx,(%rax)
ffffffff802234dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234e0:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802234e6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802234ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234f0:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802234f6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802234fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234fe:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223504:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223508:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff8022350f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223513:	48 89 c2             	mov    %rax,%rdx
ffffffff80223516:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022351a:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223520:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223524:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff8022352b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022352f:	48 89 c2             	mov    %rax,%rdx
ffffffff80223532:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223536:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff8022353c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022353f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223543:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223549:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80223550:	48 c7 c2 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rdx
ffffffff80223557:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022355b:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223561:	66 89 10             	mov    %dx,(%rax)
ffffffff80223564:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223568:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022356e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223574:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223578:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022357e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223582:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223586:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022358c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223590:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
ffffffff80223597:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022359b:	48 89 c2             	mov    %rax,%rdx
ffffffff8022359e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235a2:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802235a8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802235ac:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
ffffffff802235b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802235b7:	48 89 c2             	mov    %rax,%rdx
ffffffff802235ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235be:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802235c4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802235c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235cb:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802235d1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802235d8:	48 c7 c2 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rdx
ffffffff802235df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235e3:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802235e9:	66 89 10             	mov    %dx,(%rax)
ffffffff802235ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235f0:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802235f6:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802235fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223600:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223606:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022360a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022360e:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223614:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223618:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff8022361f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223623:	48 89 c2             	mov    %rax,%rdx
ffffffff80223626:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022362a:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223630:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223634:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff8022363b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022363f:	48 89 c2             	mov    %rax,%rdx
ffffffff80223642:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223646:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff8022364c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022364f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223653:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223659:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80223660:	48 c7 c2 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rdx
ffffffff80223667:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022366b:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223671:	66 89 10             	mov    %dx,(%rax)
ffffffff80223674:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223678:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022367e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223684:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223688:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022368e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223696:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022369c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802236a0:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
ffffffff802236a7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802236ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802236ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236b2:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802236b8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802236bc:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
ffffffff802236c3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802236c7:	48 89 c2             	mov    %rax,%rdx
ffffffff802236ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236ce:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802236d4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802236d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236db:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802236e1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802236e8:	48 c7 c2 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rdx
ffffffff802236ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236f3:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802236f9:	66 89 10             	mov    %dx,(%rax)
ffffffff802236fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223700:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223706:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022370c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223710:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223716:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022371a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022371e:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223724:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223728:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff8022372f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223733:	48 89 c2             	mov    %rax,%rdx
ffffffff80223736:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022373a:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223740:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223744:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff8022374b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022374f:	48 89 c2             	mov    %rax,%rdx
ffffffff80223752:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223756:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff8022375c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022375f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223763:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223769:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80223770:	48 c7 c2 03 c5 20 80 	mov    $0xffffffff8020c503,%rdx
ffffffff80223777:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022377b:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223781:	66 89 10             	mov    %dx,(%rax)
ffffffff80223784:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223788:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022378e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223794:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223798:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022379e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802237a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237a6:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802237ac:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802237b0:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
ffffffff802237b7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802237bb:	48 89 c2             	mov    %rax,%rdx
ffffffff802237be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237c2:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802237c8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802237cc:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
ffffffff802237d3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802237d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802237da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237de:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802237e4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802237e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237eb:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802237f1:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802237f8:	48 c7 c2 12 c5 20 80 	mov    $0xffffffff8020c512,%rdx
ffffffff802237ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223803:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223809:	66 89 10             	mov    %dx,(%rax)
ffffffff8022380c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223810:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223816:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022381c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223820:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223826:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022382a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022382e:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223834:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223838:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff8022383f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223843:	48 89 c2             	mov    %rax,%rdx
ffffffff80223846:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022384a:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223850:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223854:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff8022385b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022385f:	48 89 c2             	mov    %rax,%rdx
ffffffff80223862:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223866:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff8022386c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022386f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223873:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223879:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80223880:	48 c7 c2 21 c5 20 80 	mov    $0xffffffff8020c521,%rdx
ffffffff80223887:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022388b:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223891:	66 89 10             	mov    %dx,(%rax)
ffffffff80223894:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223898:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff8022389e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802238a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238a8:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802238ae:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802238b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238b6:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802238bc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802238c0:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
ffffffff802238c7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802238cb:	48 89 c2             	mov    %rax,%rdx
ffffffff802238ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238d2:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802238d8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802238dc:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
ffffffff802238e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802238e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802238ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238ee:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802238f4:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802238f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238fb:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223901:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223908:	48 c7 c2 30 c5 20 80 	mov    $0xffffffff8020c530,%rdx
ffffffff8022390f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223913:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223919:	66 89 10             	mov    %dx,(%rax)
ffffffff8022391c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223920:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223926:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022392c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223930:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223936:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022393a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022393e:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223944:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223948:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff8022394f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223953:	48 89 c2             	mov    %rax,%rdx
ffffffff80223956:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022395a:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223960:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223964:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff8022396b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022396f:	48 89 c2             	mov    %rax,%rdx
ffffffff80223972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223976:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff8022397c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022397f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223983:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223989:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80223990:	48 c7 c2 3c c5 20 80 	mov    $0xffffffff8020c53c,%rdx
ffffffff80223997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022399b:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff802239a1:	66 89 10             	mov    %dx,(%rax)
ffffffff802239a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239a8:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff802239ae:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802239b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239b8:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff802239be:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802239c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239c6:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff802239cc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802239d0:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
ffffffff802239d7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802239db:	48 89 c2             	mov    %rax,%rdx
ffffffff802239de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239e2:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff802239e8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802239ec:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
ffffffff802239f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802239f7:	48 89 c2             	mov    %rax,%rdx
ffffffff802239fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239fe:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223a04:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223a07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a0b:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223a11:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223a18:	48 c7 c2 48 c5 20 80 	mov    $0xffffffff8020c548,%rdx
ffffffff80223a1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a23:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223a29:	66 89 10             	mov    %dx,(%rax)
ffffffff80223a2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a30:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223a36:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223a3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a40:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223a46:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223a4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a4e:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223a54:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223a58:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff80223a5f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223a63:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a6a:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223a70:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223a74:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff80223a7b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223a7f:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a86:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223a8c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223a8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a93:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223a99:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80223aa0:	48 c7 c2 54 c5 20 80 	mov    $0xffffffff8020c554,%rdx
ffffffff80223aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223aab:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223ab1:	66 89 10             	mov    %dx,(%rax)
ffffffff80223ab4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ab8:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223abe:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223ac4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ac8:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223ace:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223ad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ad6:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223adc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223ae0:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
ffffffff80223ae7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223aeb:	48 89 c2             	mov    %rax,%rdx
ffffffff80223aee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223af2:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223af8:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223afc:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
ffffffff80223b03:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223b07:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b0e:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223b14:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223b17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b1b:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223b21:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223b28:	48 c7 c2 60 c5 20 80 	mov    $0xffffffff8020c560,%rdx
ffffffff80223b2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b33:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223b39:	66 89 10             	mov    %dx,(%rax)
ffffffff80223b3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b40:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223b46:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223b4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b50:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223b56:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223b5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b5e:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223b64:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223b68:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80223b6f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223b73:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b7a:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223b80:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223b84:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80223b8b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223b8f:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b96:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223b9c:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223b9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ba3:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223ba9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80223bb0:	48 c7 c2 6c c5 20 80 	mov    $0xffffffff8020c56c,%rdx
ffffffff80223bb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bbb:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223bc1:	66 89 10             	mov    %dx,(%rax)
ffffffff80223bc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bc8:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223bce:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223bd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bd8:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223bde:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223be2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223be6:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223bec:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223bf0:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
ffffffff80223bf7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223bfb:	48 89 c2             	mov    %rax,%rdx
ffffffff80223bfe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c02:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223c08:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223c0c:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
ffffffff80223c13:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223c17:	48 89 c2             	mov    %rax,%rdx
ffffffff80223c1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c1e:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223c24:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223c27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c2b:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223c31:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223c38:	48 c7 c2 78 c5 20 80 	mov    $0xffffffff8020c578,%rdx
ffffffff80223c3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c43:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223c49:	66 89 10             	mov    %dx,(%rax)
ffffffff80223c4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c50:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223c56:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223c5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c60:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223c66:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223c6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c6e:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223c74:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223c78:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80223c7f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223c83:	48 89 c2             	mov    %rax,%rdx
ffffffff80223c86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c8a:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223c90:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223c94:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80223c9b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223c9f:	48 89 c2             	mov    %rax,%rdx
ffffffff80223ca2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ca6:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223cac:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223caf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cb3:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223cb9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80223cc0:	48 c7 c2 84 c5 20 80 	mov    $0xffffffff8020c584,%rdx
ffffffff80223cc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ccb:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223cd1:	66 89 10             	mov    %dx,(%rax)
ffffffff80223cd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cd8:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223cde:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223ce4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ce8:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223cee:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223cf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cf6:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223cfc:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223d00:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
ffffffff80223d07:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223d0b:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d0e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d12:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223d18:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223d1c:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
ffffffff80223d23:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223d27:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d2e:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223d34:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223d37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d3b:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223d41:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223d48:	48 c7 c2 90 c5 20 80 	mov    $0xffffffff8020c590,%rdx
ffffffff80223d4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d53:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223d59:	66 89 10             	mov    %dx,(%rax)
ffffffff80223d5c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d60:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223d66:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223d6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d70:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223d76:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223d7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d7e:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223d84:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223d88:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80223d8f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223d93:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d9a:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223da0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223da4:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80223dab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223daf:	48 89 c2             	mov    %rax,%rdx
ffffffff80223db2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223db6:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223dbc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223dbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223dc3:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223dc9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80223dd0:	48 c7 c2 9c c5 20 80 	mov    $0xffffffff8020c59c,%rdx
ffffffff80223dd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ddb:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223de1:	66 89 10             	mov    %dx,(%rax)
ffffffff80223de4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223de8:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223dee:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223df4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223df8:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223dfe:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223e02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e06:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223e0c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223e10:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff80223e17:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223e1b:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e22:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223e28:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223e2c:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff80223e33:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223e37:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e3e:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223e44:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223e47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e4b:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223e51:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223e58:	48 c7 c2 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rdx
ffffffff80223e5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e63:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e69:	66 89 10             	mov    %dx,(%rax)
ffffffff80223e6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e70:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e76:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223e7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e80:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e86:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223e8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e8e:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223e94:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223e98:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80223e9f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223ea3:	48 89 c2             	mov    %rax,%rdx
ffffffff80223ea6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223eaa:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223eb0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223eb4:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80223ebb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223ebf:	48 89 c2             	mov    %rax,%rdx
ffffffff80223ec2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ec6:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223ecc:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223ecf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ed3:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223ed9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Replace systick handler with customized ones - spurious interrupts
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
ffffffff80223ee0:	48 8b 05 c9 f3 00 00 	mov    0xf3c9(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80223ee7:	48 85 c0             	test   %rax,%rax
ffffffff80223eea:	0f 85 88 00 00 00    	jne    ffffffff80223f78 <__RME_X64_CPU_Local_Init+0x81f2>
        RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff80223ef0:	48 c7 c2 63 c6 20 80 	mov    $0xffffffff8020c663,%rdx
ffffffff80223ef7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223efb:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223f01:	66 89 10             	mov    %dx,(%rax)
ffffffff80223f04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f08:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223f0e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223f14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f18:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223f1e:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223f22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f26:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223f2c:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223f30:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80223f37:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223f3b:	48 89 c2             	mov    %rax,%rdx
ffffffff80223f3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f42:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223f48:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223f4c:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80223f53:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223f57:	48 89 c2             	mov    %rax,%rdx
ffffffff80223f5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f5e:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223f64:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223f67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f6b:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223f71:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    /* Register SMP handlers */
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff80223f78:	48 c7 c2 09 c6 20 80 	mov    $0xffffffff8020c609,%rdx
ffffffff80223f7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f83:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223f89:	66 89 10             	mov    %dx,(%rax)
ffffffff80223f8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f90:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223f96:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223f9c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fa0:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223fa6:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223faa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fae:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223fb4:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223fb8:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
ffffffff80223fbf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223fc3:	48 89 c2             	mov    %rax,%rdx
ffffffff80223fc6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fca:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223fd0:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223fd4:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
ffffffff80223fdb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223fdf:	48 89 c2             	mov    %rax,%rdx
ffffffff80223fe2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fe6:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223fec:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223fef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ff3:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80223ff9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Load the IDT */
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff80224000:	66 c7 45 c6 ff 0f    	movw   $0xfff,-0x3a(%rbp)
    Desc[1]=(rme_ptr_t)IDT_Table;
ffffffff80224006:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022400a:	66 89 45 c8          	mov    %ax,-0x38(%rbp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff8022400e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224012:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80224016:	66 89 45 ca          	mov    %ax,-0x36(%rbp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff8022401a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022401e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80224022:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
ffffffff80224026:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022402a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8022402e:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80224032:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
ffffffff80224036:	48 89 c7             	mov    %rax,%rdi
ffffffff80224039:	e8 3b 78 fe ff       	call   ffffffff8020b879 <__RME_X64_IDT_Load>

    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff8022403e:	48 8b 05 0b f0 00 00 	mov    0xf00b(%rip),%rax        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff80224045:	48 8b 15 64 f2 00 00 	mov    0xf264(%rip),%rdx        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022404c:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80224050:	48 01 d0             	add    %rdx,%rax
ffffffff80224053:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff80224059:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff8022405d:	48 8b 05 ec ef 00 00 	mov    0xefec(%rip),%rax        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff80224064:	48 8b 15 45 f2 00 00 	mov    0xf245(%rip),%rdx        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022406b:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8022406f:	48 01 d0             	add    %rdx,%rax
ffffffff80224072:	48 05 80 10 00 00    	add    $0x1080,%rax
ffffffff80224078:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    /* Dummy entry */
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff8022407c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224080:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* Kernel code, DPL=0, R/X */
    GDT_Table[1]=0x0020980000000000ULL;
ffffffff80224087:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022408b:	48 83 c0 08          	add    $0x8,%rax
ffffffff8022408f:	48 b9 00 00 00 00 00 	movabs $0x20980000000000,%rcx
ffffffff80224096:	98 20 00 
ffffffff80224099:	48 89 08             	mov    %rcx,(%rax)
    /* Kernel data, DPL=0, W */
    GDT_Table[2]=0x0000920000000000ULL;
ffffffff8022409c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802240a0:	48 83 c0 10          	add    $0x10,%rax
ffffffff802240a4:	48 b9 00 00 00 00 00 	movabs $0x920000000000,%rcx
ffffffff802240ab:	92 00 00 
ffffffff802240ae:	48 89 08             	mov    %rcx,(%rax)
    /* Unused entry - this is for sysret instruction's requirement */
    GDT_Table[3]=0x0000000000000000ULL;
ffffffff802240b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802240b5:	48 83 c0 18          	add    $0x18,%rax
ffffffff802240b9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
ffffffff802240c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802240c4:	48 83 c0 20          	add    $0x20,%rax
ffffffff802240c8:	48 be 00 00 00 00 00 	movabs $0xf20000000000,%rsi
ffffffff802240cf:	f2 00 00 
ffffffff802240d2:	48 89 30             	mov    %rsi,(%rax)
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
ffffffff802240d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802240d9:	48 83 c0 28          	add    $0x28,%rax
ffffffff802240dd:	48 b9 00 00 00 00 00 	movabs $0x20f80000000000,%rcx
ffffffff802240e4:	f8 20 00 
ffffffff802240e7:	48 89 08             	mov    %rcx,(%rax)
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802240ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802240ee:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff802240f2:	48 89 c2             	mov    %rax,%rdx
ffffffff802240f5:	48 b8 00 00 ff ff ff 	movabs $0xffffff0000,%rax
ffffffff802240fc:	00 00 00 
ffffffff802240ff:	48 21 c2             	and    %rax,%rdx
ffffffff80224102:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224106:	48 c1 e8 18          	shr    $0x18,%rax
ffffffff8022410a:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8022410e:	48 89 d1             	mov    %rdx,%rcx
ffffffff80224111:	48 09 c1             	or     %rax,%rcx
ffffffff80224114:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224118:	48 83 c0 30          	add    $0x30,%rax
ffffffff8022411c:	48 ba 67 00 00 00 00 	movabs $0x890000000067,%rdx
ffffffff80224123:	89 00 00 
ffffffff80224126:	48 09 ca             	or     %rcx,%rdx
ffffffff80224129:	48 89 10             	mov    %rdx,(%rax)
    GDT_Table[7]=(TSS_Table>>32);
ffffffff8022412c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224130:	48 83 c0 38          	add    $0x38,%rax
ffffffff80224134:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80224138:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8022413c:	48 89 10             	mov    %rdx,(%rax)

    /* Load the GDT */
    Desc[0]=8*sizeof(rme_ptr_t)-1;
ffffffff8022413f:	66 c7 45 c6 3f 00    	movw   $0x3f,-0x3a(%rbp)
    Desc[1]=(rme_ptr_t)GDT_Table;
ffffffff80224145:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224149:	66 89 45 c8          	mov    %ax,-0x38(%rbp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff8022414d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224151:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80224155:	66 89 45 ca          	mov    %ax,-0x36(%rbp)
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff80224159:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022415d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80224161:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80224165:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224169:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8022416d:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80224171:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
ffffffff80224175:	48 89 c7             	mov    %rax,%rdi
ffffffff80224178:	e8 f8 76 fe ff       	call   ffffffff8020b875 <__RME_X64_GDT_Load>
    /* Set the RSP to TSS */
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff8022417d:	48 8b 05 14 f1 00 00 	mov    0xf114(%rip),%rax        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff80224184:	89 c6                	mov    %eax,%esi
ffffffff80224186:	48 8b 05 23 f1 00 00 	mov    0xf123(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022418d:	83 c0 01             	add    $0x1,%eax
ffffffff80224190:	c1 e0 14             	shl    $0x14,%eax
ffffffff80224193:	89 c2                	mov    %eax,%edx
ffffffff80224195:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224199:	48 83 c0 04          	add    $0x4,%rax
ffffffff8022419d:	48 89 c1             	mov    %rax,%rcx
ffffffff802241a0:	8d 04 16             	lea    (%rsi,%rdx,1),%eax
ffffffff802241a3:	89 01                	mov    %eax,(%rcx)
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff802241a5:	48 8b 05 ec f0 00 00 	mov    0xf0ec(%rip),%rax        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff802241ac:	48 8b 15 fd f0 00 00 	mov    0xf0fd(%rip),%rdx        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff802241b3:	48 83 c2 01          	add    $0x1,%rdx
ffffffff802241b7:	48 c1 e2 14          	shl    $0x14,%rdx
ffffffff802241bb:	48 01 d0             	add    %rdx,%rax
ffffffff802241be:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802241c2:	48 89 c2             	mov    %rax,%rdx
ffffffff802241c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802241c9:	48 83 c0 08          	add    $0x8,%rax
ffffffff802241cd:	89 10                	mov    %edx,(%rax)
    /* IO Map Base = End of TSS (What's this?) */
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
ffffffff802241cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802241d3:	48 83 c0 40          	add    $0x40,%rax
ffffffff802241d7:	c7 00 00 00 68 00    	movl   $0x680000,(%rax)
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff802241dd:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff802241e2:	e8 96 76 fe ff       	call   ffffffff8020b87d <__RME_X64_TSS_Load>

    /* Initialize the RME per-cpu data here */
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff802241e7:	48 8b 05 62 ee 00 00 	mov    0xee62(%rip),%rax        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff802241ee:	48 8b 15 bb f0 00 00 	mov    0xf0bb(%rip),%rdx        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff802241f5:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff802241f9:	48 01 d0             	add    %rdx,%rax
    		                          RME_POW2(RME_PGT_SIZE_4K)+
ffffffff802241fc:	48 05 00 14 00 00    	add    $0x1400,%rax
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff80224202:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
									  RME_POW2(RME_PGT_SIZE_1K));
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff80224206:	48 8b 15 a3 f0 00 00 	mov    0xf0a3(%rip),%rdx        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022420d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224211:	48 89 d6             	mov    %rdx,%rsi
ffffffff80224214:	48 89 c7             	mov    %rax,%rdi
ffffffff80224217:	e8 1c ea fe ff       	call   ffffffff80212c38 <_RME_CPU_Local_Init>

    /* Initialize x64 specific CPU-local data structure */
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff8022421c:	48 8b 05 2d ee 00 00 	mov    0xee2d(%rip),%rax        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff80224223:	48 8b 15 86 f0 00 00 	mov    0xf086(%rip),%rdx        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022422a:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8022422e:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80224232:	48 01 d0             	add    %rdx,%rax
ffffffff80224235:	48 83 e8 18          	sub    $0x18,%rax
ffffffff80224239:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
ffffffff8022423d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80224241:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80224245:	48 89 10             	mov    %rdx,(%rax)
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80224248:	48 8b 05 49 f0 00 00 	mov    0xf049(%rip),%rax        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff8022424f:	48 8b 15 5a f0 00 00 	mov    0xf05a(%rip),%rdx        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80224256:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8022425a:	48 c1 e2 14          	shl    $0x14,%rdx
ffffffff8022425e:	48 01 c2             	add    %rax,%rdx
ffffffff80224261:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80224265:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Temp->Temp_User_SP=0;
ffffffff80224269:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8022426d:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80224274:	00 

    /* Set the base of GS to this memory */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80224275:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224279:	48 89 c6             	mov    %rax,%rsi
ffffffff8022427c:	b8 02 01 00 c0       	mov    $0xc0000102,%eax
ffffffff80224281:	48 89 c7             	mov    %rax,%rdi
ffffffff80224284:	e8 a1 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80224289:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022428d:	48 89 c6             	mov    %rax,%rsi
ffffffff80224290:	b8 01 01 00 c0       	mov    $0xc0000101,%eax
ffffffff80224295:	48 89 c7             	mov    %rax,%rdi
ffffffff80224298:	e8 8d 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Enable SYSCALL/SYSRET */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff8022429d:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
ffffffff802242a2:	48 89 c7             	mov    %rax,%rdi
ffffffff802242a5:	e8 6c 75 fe ff       	call   ffffffff8020b816 <__RME_X64_Read_MSR>
ffffffff802242aa:	48 83 c8 01          	or     $0x1,%rax
ffffffff802242ae:	48 89 c6             	mov    %rax,%rsi
ffffffff802242b1:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
ffffffff802242b6:	48 89 c7             	mov    %rax,%rdi
ffffffff802242b9:	e8 6c 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Set up SYSCALL/SYSRET parameters */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (rme_ptr_t)SVC_Handler);
ffffffff802242be:	48 c7 c0 c2 c6 20 80 	mov    $0xffffffff8020c6c2,%rax
ffffffff802242c5:	48 89 c6             	mov    %rax,%rsi
ffffffff802242c8:	b8 82 00 00 c0       	mov    $0xc0000082,%eax
ffffffff802242cd:	48 89 c7             	mov    %rax,%rdi
ffffffff802242d0:	e8 55 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff802242d5:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff802242dc:	b8 84 00 00 c0       	mov    $0xc0000084,%eax
ffffffff802242e1:	48 89 c7             	mov    %rax,%rdi
ffffffff802242e4:	e8 41 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* The SYSRET, when returning to user mode in 64-bit, will load the SS from +8, and CS from +16.
     * The original place for CS is reserved for 32-bit usages and is thus not usable by 64-bit */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((rme_ptr_t)RME_X64_SEG_EMPTY)<<48)|(((rme_ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff802242e9:	48 b8 00 00 00 00 08 	movabs $0x1b000800000000,%rax
ffffffff802242f0:	00 1b 00 
ffffffff802242f3:	48 89 c6             	mov    %rax,%rsi
ffffffff802242f6:	b8 81 00 00 c0       	mov    $0xc0000081,%eax
ffffffff802242fb:	48 89 c7             	mov    %rax,%rdi
ffffffff802242fe:	e8 27 75 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
}
ffffffff80224303:	90                   	nop
ffffffff80224304:	c9                   	leave
ffffffff80224305:	c3                   	ret

ffffffff80224306 <__RME_X64_CPU_Local_Get_By_CPUID>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
struct RME_CPU_Local* __RME_X64_CPU_Local_Get_By_CPUID(rme_ptr_t CPUID)
{
ffffffff80224306:	f3 0f 1e fa          	endbr64
ffffffff8022430a:	55                   	push   %rbp
ffffffff8022430b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022430e:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80224312:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff80224316:	48 8b 05 33 ed 00 00 	mov    0xed33(%rip),%rax        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff8022431d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80224321:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80224325:	48 01 d0             	add    %rdx,%rax
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff80224328:	48 05 00 14 00 00    	add    $0x1400,%rax
								   RME_POW2(RME_PGT_SIZE_1K));
}
ffffffff8022432e:	c9                   	leave
ffffffff8022432f:	c3                   	ret

ffffffff80224330 <__RME_X64_LAPIC_Ack>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Ack(void)
{
ffffffff80224330:	f3 0f 1e fa          	endbr64
ffffffff80224334:	55                   	push   %rbp
ffffffff80224335:	48 89 e5             	mov    %rsp,%rbp
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff80224338:	48 8b 05 e1 ff 00 00 	mov    0xffe1(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff8022433f:	48 ba b0 00 00 00 00 	movabs $0xffff8000000000b0,%rdx
ffffffff80224346:	80 ff ff 
ffffffff80224349:	48 01 d0             	add    %rdx,%rax
ffffffff8022434c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
ffffffff80224352:	90                   	nop
ffffffff80224353:	5d                   	pop    %rbp
ffffffff80224354:	c3                   	ret

ffffffff80224355 <__RME_X64_LAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
ffffffff80224355:	f3 0f 1e fa          	endbr64
ffffffff80224359:	55                   	push   %rbp
ffffffff8022435a:	48 89 e5             	mov    %rsp,%rbp
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff8022435d:	48 8b 05 bc ff 00 00 	mov    0xffbc(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff80224364:	48 8b 05 b5 ff 00 00 	mov    0xffb5(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff8022436b:	48 ba f0 00 00 00 00 	movabs $0xffff8000000000f0,%rdx
ffffffff80224372:	80 ff ff 
ffffffff80224375:	48 01 d0             	add    %rdx,%rax
ffffffff80224378:	c7 00 80 01 00 00    	movl   $0x180,(%rax)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff8022437e:	48 8b 05 9b ff 00 00 	mov    0xff9b(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224385:	48 ba 50 03 00 00 00 	movabs $0xffff800000000350,%rdx
ffffffff8022438c:	80 ff ff 
ffffffff8022438f:	48 01 d0             	add    %rdx,%rax
ffffffff80224392:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff80224398:	48 8b 05 81 ff 00 00 	mov    0xff81(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff8022439f:	48 ba 60 03 00 00 00 	movabs $0xffff800000000360,%rdx
ffffffff802243a6:	80 ff ff 
ffffffff802243a9:	48 01 d0             	add    %rdx,%rax
ffffffff802243ac:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff802243b2:	48 8b 05 67 ff 00 00 	mov    0xff67(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802243b9:	48 ba 30 00 00 00 00 	movabs $0xffff800000000030,%rdx
ffffffff802243c0:	80 ff ff 
ffffffff802243c3:	48 01 d0             	add    %rdx,%rax
ffffffff802243c6:	8b 00                	mov    (%rax),%eax
ffffffff802243c8:	25 00 00 fc 00       	and    $0xfc0000,%eax
ffffffff802243cd:	85 c0                	test   %eax,%eax
ffffffff802243cf:	74 1a                	je     ffffffff802243eb <__RME_X64_LAPIC_Init+0x96>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff802243d1:	48 8b 05 48 ff 00 00 	mov    0xff48(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802243d8:	48 ba 40 03 00 00 00 	movabs $0xffff800000000340,%rdx
ffffffff802243df:	80 ff ff 
ffffffff802243e2:	48 01 d0             	add    %rdx,%rax
ffffffff802243e5:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff802243eb:	48 8b 05 2e ff 00 00 	mov    0xff2e(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802243f2:	48 ba 70 03 00 00 00 	movabs $0xffff800000000370,%rdx
ffffffff802243f9:	80 ff ff 
ffffffff802243fc:	48 01 d0             	add    %rdx,%rax
ffffffff802243ff:	c7 00 81 00 00 00    	movl   $0x81,(%rax)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff80224405:	48 8b 05 14 ff 00 00 	mov    0xff14(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff8022440c:	48 ba 80 02 00 00 00 	movabs $0xffff800000000280,%rdx
ffffffff80224413:	80 ff ff 
ffffffff80224416:	48 01 d0             	add    %rdx,%rax
ffffffff80224419:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff8022441f:	48 8b 05 fa fe 00 00 	mov    0xfefa(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224426:	48 ba 80 02 00 00 00 	movabs $0xffff800000000280,%rdx
ffffffff8022442d:	80 ff ff 
ffffffff80224430:	48 01 d0             	add    %rdx,%rax
ffffffff80224433:	c7 00 00 00 00 00    	movl   $0x0,(%rax)

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();
ffffffff80224439:	e8 f2 fe ff ff       	call   ffffffff80224330 <__RME_X64_LAPIC_Ack>

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff8022443e:	48 8b 05 db fe 00 00 	mov    0xfedb(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224445:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff8022444c:	80 ff ff 
ffffffff8022444f:	48 01 d0             	add    %rdx,%rax
ffffffff80224452:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff80224458:	48 8b 05 c1 fe 00 00 	mov    0xfec1(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff8022445f:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224466:	80 ff ff 
ffffffff80224469:	48 01 d0             	add    %rdx,%rax
ffffffff8022446c:	c7 00 00 85 08 00    	movl   $0x88500,(%rax)
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff80224472:	90                   	nop
ffffffff80224473:	48 8b 05 a6 fe 00 00 	mov    0xfea6(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff8022447a:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224481:	80 ff ff 
ffffffff80224484:	48 01 d0             	add    %rdx,%rax
ffffffff80224487:	8b 00                	mov    (%rax),%eax
ffffffff80224489:	25 00 10 00 00       	and    $0x1000,%eax
ffffffff8022448e:	85 c0                	test   %eax,%eax
ffffffff80224490:	75 e1                	jne    ffffffff80224473 <__RME_X64_LAPIC_Init+0x11e>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff80224492:	48 8b 05 87 fe 00 00 	mov    0xfe87(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224499:	48 ba 80 00 00 00 00 	movabs $0xffff800000000080,%rdx
ffffffff802244a0:	80 ff ff 
ffffffff802244a3:	48 01 d0             	add    %rdx,%rax
ffffffff802244a6:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
ffffffff802244ac:	90                   	nop
ffffffff802244ad:	5d                   	pop    %rbp
ffffffff802244ae:	c3                   	ret

ffffffff802244af <__RME_X64_PIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_PIC_Init(void)
{
ffffffff802244af:	f3 0f 1e fa          	endbr64
ffffffff802244b3:	55                   	push   %rbp
ffffffff802244b4:	48 89 e5             	mov    %rsp,%rbp
    /* Mask all interrupts */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff802244b7:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff802244bc:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802244c1:	e8 44 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff802244c6:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff802244cb:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802244d0:	e8 35 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Set up master (8259A-1) */
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff802244d5:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff802244da:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff802244df:	e8 26 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff802244e4:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff802244e9:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802244ee:	e8 17 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff802244f3:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff802244f8:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802244fd:	e8 08 73 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff80224502:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80224507:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8022450c:	e8 f9 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Set up slave (8259A-2) */
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff80224511:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80224516:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8022451b:	e8 ea 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff80224520:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff80224525:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8022452a:	e8 db 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff8022452f:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80224534:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80224539:	e8 cc 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff8022453e:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80224543:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80224548:	e8 bd 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff8022454d:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80224552:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80224557:	e8 ae 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff8022455c:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80224561:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80224566:	e8 9f 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff8022456b:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80224570:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80224575:	e8 90 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff8022457a:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff8022457f:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80224584:	e8 81 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Mask all interrupts - we do not use the PIC at all */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80224589:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8022458e:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80224593:	e8 72 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80224598:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff8022459d:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802245a2:	e8 63 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff802245a7:	90                   	nop
ffffffff802245a8:	5d                   	pop    %rbp
ffffffff802245a9:	c3                   	ret

ffffffff802245aa <__RME_X64_IOAPIC_Int_Enable>:
              rme_ptr_t CPUID - The CPU to enable this IRQ on.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Int_Enable(rme_ptr_t IRQ, rme_ptr_t CPUID)
{
ffffffff802245aa:	f3 0f 1e fa          	endbr64
ffffffff802245ae:	55                   	push   %rbp
ffffffff802245af:	48 89 e5             	mov    %rsp,%rbp
ffffffff802245b2:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802245b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802245ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_INT_USER(IRQ));
ffffffff802245be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802245c2:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff802245c5:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802245cc:	80 ff ff 
ffffffff802245cf:	83 c2 10             	add    $0x10,%edx
ffffffff802245d2:	89 10                	mov    %edx,(%rax)
ffffffff802245d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802245d8:	89 c2                	mov    %eax,%edx
ffffffff802245da:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802245e1:	80 ff ff 
ffffffff802245e4:	83 c2 20             	add    $0x20,%edx
ffffffff802245e7:	89 50 10             	mov    %edx,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,CPUID<<24);
ffffffff802245ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802245ee:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff802245f1:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802245f8:	80 ff ff 
ffffffff802245fb:	83 c2 11             	add    $0x11,%edx
ffffffff802245fe:	89 10                	mov    %edx,(%rax)
ffffffff80224600:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224604:	89 c2                	mov    %eax,%edx
ffffffff80224606:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022460d:	80 ff ff 
ffffffff80224610:	c1 e2 18             	shl    $0x18,%edx
ffffffff80224613:	89 50 10             	mov    %edx,0x10(%rax)
}
ffffffff80224616:	90                   	nop
ffffffff80224617:	c9                   	leave
ffffffff80224618:	c3                   	ret

ffffffff80224619 <__RME_X64_IOAPIC_Int_Disable>:
Input       : rme_ptr_t IRQ - The user vector to enable.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Int_Disable(rme_ptr_t IRQ)
{
ffffffff80224619:	f3 0f 1e fa          	endbr64
ffffffff8022461d:	55                   	push   %rbp
ffffffff8022461e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224621:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80224625:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_IOAPIC_INT_DISABLED|RME_X64_INT_USER(IRQ));
ffffffff80224629:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022462d:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff80224630:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224637:	80 ff ff 
ffffffff8022463a:	83 c2 10             	add    $0x10,%edx
ffffffff8022463d:	89 10                	mov    %edx,(%rax)
ffffffff8022463f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224643:	8d 50 20             	lea    0x20(%rax),%edx
ffffffff80224646:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022464d:	80 ff ff 
ffffffff80224650:	81 ca 00 00 01 00    	or     $0x10000,%edx
ffffffff80224656:	89 50 10             	mov    %edx,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff80224659:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022465d:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff80224660:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224667:	80 ff ff 
ffffffff8022466a:	83 c2 11             	add    $0x11,%edx
ffffffff8022466d:	89 10                	mov    %edx,(%rax)
ffffffff8022466f:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224676:	80 ff ff 
ffffffff80224679:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
}
ffffffff80224680:	90                   	nop
ffffffff80224681:	c9                   	leave
ffffffff80224682:	c3                   	ret

ffffffff80224683 <__RME_X64_IOAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Init(void)
{
ffffffff80224683:	f3 0f 1e fa          	endbr64
ffffffff80224687:	55                   	push   %rbp
ffffffff80224688:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022468b:	48 83 ec 20          	sub    $0x20,%rsp
    rme_ptr_t Max_Int;
    rme_ptr_t IOAPIC_ID;
    rme_cnt_t Count;
    /* IOAPIC initialization */
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff8022468f:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224696:	80 ff ff 
ffffffff80224699:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
ffffffff8022469f:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802246a6:	80 ff ff 
ffffffff802246a9:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff802246ac:	89 c0                	mov    %eax,%eax
ffffffff802246ae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff802246b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802246b6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802246ba:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff802246bf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    RME_DBG_S("\n\rMax interupt number is: ");
ffffffff802246c3:	48 c7 c7 b6 78 22 80 	mov    $0xffffffff802278b6,%rdi
ffffffff802246ca:	e8 5e 83 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(Max_Int);
ffffffff802246cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802246d3:	48 89 c7             	mov    %rax,%rdi
ffffffff802246d6:	e8 58 81 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_ID,IOAPIC_ID);
ffffffff802246db:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802246e2:	80 ff ff 
ffffffff802246e5:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
ffffffff802246eb:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802246f2:	80 ff ff 
ffffffff802246f5:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff802246f8:	89 c0                	mov    %eax,%eax
ffffffff802246fa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    IOAPIC_ID>>=24;
ffffffff802246fe:	48 c1 6d e8 18       	shrq   $0x18,-0x18(%rbp)
    /* This is not necessarily true when we have >1 IOAPICs */
    /* RME_ASSERT(IOAPIC_ID==RME_X64_IOAPIC_Info[0].IOAPIC_ID); */
    RME_DBG_S("\n\rIOAPIC ID is: ");
ffffffff80224703:	48 c7 c7 d1 78 22 80 	mov    $0xffffffff802278d1,%rdi
ffffffff8022470a:	e8 1e 83 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(IOAPIC_ID);
ffffffff8022470f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224713:	48 89 c7             	mov    %rax,%rdi
ffffffff80224716:	e8 18 81 fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    /* Disable all interrupts */
    for(Count=0;Count<=Max_Int;Count++)
ffffffff8022471b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224722:	00 
ffffffff80224723:	eb 11                	jmp    ffffffff80224736 <__RME_X64_IOAPIC_Init+0xb3>
        __RME_X64_IOAPIC_Int_Disable(Count);
ffffffff80224725:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224729:	48 89 c7             	mov    %rax,%rdi
ffffffff8022472c:	e8 e8 fe ff ff       	call   ffffffff80224619 <__RME_X64_IOAPIC_Int_Disable>
    for(Count=0;Count<=Max_Int;Count++)
ffffffff80224731:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224736:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022473a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8022473e:	73 e5                	jae    ffffffff80224725 <__RME_X64_IOAPIC_Init+0xa2>
}
ffffffff80224740:	90                   	nop
ffffffff80224741:	90                   	nop
ffffffff80224742:	c9                   	leave
ffffffff80224743:	c3                   	ret

ffffffff80224744 <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff80224744:	f3 0f 1e fa          	endbr64
ffffffff80224748:	55                   	push   %rbp
ffffffff80224749:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022474c:	48 83 ec 20          	sub    $0x20,%rsp
    rme_u8_t* Code;
    rme_cnt_t Count;
    rme_u16_t* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(rme_u8_t*)RME_X64_PA2VA(0x7000);
ffffffff80224750:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff80224757:	80 ff ff 
ffffffff8022475a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff8022475e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224765:	00 
ffffffff80224766:	eb 1f                	jmp    ffffffff80224787 <__RME_X64_SMP_Init+0x43>
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80224768:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022476c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224770:	48 01 c2             	add    %rax,%rdx
ffffffff80224773:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224777:	48 05 e0 76 22 80    	add    $0xffffffff802276e0,%rax
ffffffff8022477d:	0f b6 00             	movzbl (%rax),%eax
ffffffff80224780:	88 02                	mov    %al,(%rdx)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80224782:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224787:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022478b:	48 83 f8 61          	cmp    $0x61,%rax
ffffffff8022478f:	76 d7                	jbe    ffffffff80224768 <__RME_X64_SMP_Init+0x24>

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
ffffffff80224791:	48 c7 05 14 eb 00 00 	movq   $0x1,0xeb14(%rip)        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80224798:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff8022479c:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff802247a3:	00 
ffffffff802247a4:	e9 d1 01 00 00       	jmp    ffffffff8022497a <__RME_X64_SMP_Init+0x236>
    {
        RME_DBG_S("\n\rBooting CPU ");
ffffffff802247a9:	48 c7 c7 e2 78 22 80 	mov    $0xffffffff802278e2,%rdi
ffffffff802247b0:	e8 78 82 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_DBG_I(Count);
ffffffff802247b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802247b9:	48 89 c7             	mov    %rax,%rdi
ffffffff802247bc:	e8 72 80 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
        /* Temporary stack */
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff802247c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802247c5:	48 83 e8 04          	sub    $0x4,%rax
ffffffff802247c9:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff802247cf:	48 c7 c0 89 80 10 80 	mov    $0xffffffff80108089,%rax
ffffffff802247d6:	89 c2                	mov    %eax,%edx
ffffffff802247d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802247dc:	48 83 e8 08          	sub    $0x8,%rax
ffffffff802247e0:	81 c2 00 00 00 80    	add    $0x80000000,%edx
ffffffff802247e6:	89 10                	mov    %edx,(%rax)
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff802247e8:	48 8b 15 a9 ea 00 00 	mov    0xeaa9(%rip),%rdx        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff802247ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802247f3:	48 83 c0 01          	add    $0x1,%rax
ffffffff802247f7:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff802247fb:	48 89 c1             	mov    %rax,%rcx
ffffffff802247fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224802:	48 83 e8 10          	sub    $0x10,%rax
ffffffff80224806:	48 01 ca             	add    %rcx,%rdx
ffffffff80224809:	48 89 10             	mov    %rdx,(%rax)

        /* Initialize CMOS shutdown code to 0AH */
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff8022480c:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff80224811:	bf 70 00 00 00       	mov    $0x70,%edi
ffffffff80224816:	e8 ef 6f fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff8022481b:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80224820:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff80224825:	e8 e0 6f fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
        /* Warm reset vector point to AP code */
        Warm_Reset=(rme_u16_t*)RME_X64_PA2VA((0x40<<4|0x67));
ffffffff8022482a:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff80224831:	80 ff ff 
ffffffff80224834:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Warm_Reset[0]=0;
ffffffff80224838:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022483c:	66 c7 00 00 00       	movw   $0x0,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff80224841:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224845:	48 83 c0 02          	add    $0x2,%rax
ffffffff80224849:	66 c7 00 00 07       	movw   $0x700,(%rax)

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff8022484e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224852:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80224856:	48 05 c0 32 23 80    	add    $0xffffffff802332c0,%rax
ffffffff8022485c:	48 8b 00             	mov    (%rax),%rax
ffffffff8022485f:	89 c1                	mov    %eax,%ecx
ffffffff80224861:	48 8b 05 b8 fa 00 00 	mov    0xfab8(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224868:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff8022486f:	80 ff ff 
ffffffff80224872:	48 01 d0             	add    %rdx,%rax
ffffffff80224875:	48 89 c2             	mov    %rax,%rdx
ffffffff80224878:	89 c8                	mov    %ecx,%eax
ffffffff8022487a:	c1 e0 18             	shl    $0x18,%eax
ffffffff8022487d:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff8022487f:	48 8b 05 9a fa 00 00 	mov    0xfa9a(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224886:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff8022488d:	80 ff ff 
ffffffff80224890:	48 01 d0             	add    %rdx,%rax
ffffffff80224893:	c7 00 00 c5 00 00    	movl   $0xc500,(%rax)
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80224899:	48 8b 05 80 fa 00 00 	mov    0xfa80(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802248a0:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802248a7:	80 ff ff 
ffffffff802248aa:	48 01 d0             	add    %rdx,%rax
ffffffff802248ad:	c7 00 00 85 00 00    	movl   $0x8500,(%rax)
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802248b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802248b7:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802248bb:	48 05 c0 32 23 80    	add    $0xffffffff802332c0,%rax
ffffffff802248c1:	48 8b 00             	mov    (%rax),%rax
ffffffff802248c4:	89 c1                	mov    %eax,%ecx
ffffffff802248c6:	48 8b 05 53 fa 00 00 	mov    0xfa53(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802248cd:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff802248d4:	80 ff ff 
ffffffff802248d7:	48 01 d0             	add    %rdx,%rax
ffffffff802248da:	48 89 c2             	mov    %rax,%rdx
ffffffff802248dd:	89 c8                	mov    %ecx,%eax
ffffffff802248df:	c1 e0 18             	shl    $0x18,%eax
ffffffff802248e2:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802248e4:	48 8b 05 35 fa 00 00 	mov    0xfa35(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802248eb:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802248f2:	80 ff ff 
ffffffff802248f5:	48 01 d0             	add    %rdx,%rax
ffffffff802248f8:	c7 00 07 06 00 00    	movl   $0x607,(%rax)
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802248fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224902:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80224906:	48 05 c0 32 23 80    	add    $0xffffffff802332c0,%rax
ffffffff8022490c:	48 8b 00             	mov    (%rax),%rax
ffffffff8022490f:	89 c1                	mov    %eax,%ecx
ffffffff80224911:	48 8b 05 08 fa 00 00 	mov    0xfa08(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224918:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff8022491f:	80 ff ff 
ffffffff80224922:	48 01 d0             	add    %rdx,%rax
ffffffff80224925:	48 89 c2             	mov    %rax,%rdx
ffffffff80224928:	89 c8                	mov    %ecx,%eax
ffffffff8022492a:	c1 e0 18             	shl    $0x18,%eax
ffffffff8022492d:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff8022492f:	48 8b 05 ea f9 00 00 	mov    0xf9ea(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff80224936:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff8022493d:	80 ff ff 
ffffffff80224940:	48 01 d0             	add    %rdx,%rax
ffffffff80224943:	c7 00 07 06 00 00    	movl   $0x607,(%rax)
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff80224949:	90                   	nop
ffffffff8022494a:	48 8b 05 5f e9 00 00 	mov    0xe95f(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80224951:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80224955:	48 05 c8 32 23 80    	add    $0xffffffff802332c8,%rax
ffffffff8022495b:	48 8b 00             	mov    (%rax),%rax
ffffffff8022495e:	48 85 c0             	test   %rax,%rax
ffffffff80224961:	74 e7                	je     ffffffff8022494a <__RME_X64_SMP_Init+0x206>
        RME_X64_CPU_Cnt++;
ffffffff80224963:	48 8b 05 46 e9 00 00 	mov    0xe946(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022496a:	48 83 c0 01          	add    $0x1,%rax
ffffffff8022496e:	48 89 05 3b e9 00 00 	mov    %rax,0xe93b(%rip)        # ffffffff802332b0 <RME_X64_CPU_Cnt>
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80224975:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8022497a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022497e:	48 8b 05 23 e9 00 00 	mov    0xe923(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80224985:	48 39 c2             	cmp    %rax,%rdx
ffffffff80224988:	0f 82 1b fe ff ff    	jb     ffffffff802247a9 <__RME_X64_SMP_Init+0x65>
    }
}
ffffffff8022498e:	90                   	nop
ffffffff8022498f:	90                   	nop
ffffffff80224990:	c9                   	leave
ffffffff80224991:	c3                   	ret

ffffffff80224992 <__RME_X64_SMP_Tick>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
ffffffff80224992:	f3 0f 1e fa          	endbr64
ffffffff80224996:	55                   	push   %rbp
ffffffff80224997:	48 89 e5             	mov    %rsp,%rbp
    /* Is this a SMP? */
    if(RME_X64_Num_CPU>1)
ffffffff8022499a:	48 8b 05 07 e9 00 00 	mov    0xe907(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff802249a1:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802249a5:	76 34                	jbe    ffffffff802249db <__RME_X64_SMP_Tick+0x49>
    {
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff802249a7:	48 8b 05 72 f9 00 00 	mov    0xf972(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802249ae:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff802249b5:	80 ff ff 
ffffffff802249b8:	48 01 d0             	add    %rdx,%rax
ffffffff802249bb:	c7 00 00 00 00 ff    	movl   $0xff000000,(%rax)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff802249c1:	48 8b 05 58 f9 00 00 	mov    0xf958(%rip),%rax        # ffffffff80234320 <RME_X64_LAPIC_Addr>
ffffffff802249c8:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802249cf:	80 ff ff 
ffffffff802249d2:	48 01 d0             	add    %rdx,%rax
ffffffff802249d5:	c7 00 83 00 0c 00    	movl   $0xc0083,(%rax)
                                                 RME_X64_LAPIC_ICRLO_FIXED|
                                                 RME_X64_INT_SMP_SYSTICK);
    }
}
ffffffff802249db:	90                   	nop
ffffffff802249dc:	5d                   	pop    %rbp
ffffffff802249dd:	c3                   	ret

ffffffff802249de <__RME_X64_Timer_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_Timer_Init(void)
{
ffffffff802249de:	f3 0f 1e fa          	endbr64
ffffffff802249e2:	55                   	push   %rbp
ffffffff802249e3:	48 89 e5             	mov    %rsp,%rbp
    /* For timer interrupts, they will always be handled by core 1, and all the other
     * cores should receive a IPI for that, so their scheduler can look after their
     * threads. We are using square wave mode. */
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff802249e6:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff802249eb:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff802249f0:	e8 15 6e fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff802249f5:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff802249fa:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff802249ff:	e8 06 6e fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff80224a04:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80224a09:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80224a0e:	e8 f7 6d fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff80224a13:	90                   	nop
ffffffff80224a14:	5d                   	pop    %rbp
ffffffff80224a15:	c3                   	ret

ffffffff80224a16 <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Lowlvl_Init(void)
{
ffffffff80224a16:	f3 0f 1e fa          	endbr64
ffffffff80224a1a:	55                   	push   %rbp
ffffffff80224a1b:	48 89 e5             	mov    %rsp,%rbp
    /* We are here now ! */
    __RME_X64_UART_Init();
ffffffff80224a1e:	e8 5e 67 ff ff       	call   ffffffff8021b181 <__RME_X64_UART_Init>
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
ffffffff80224a23:	e8 a6 6d ff ff       	call   ffffffff8021b7ce <__RME_X64_ACPI_Init>
    /* Detect CPU features */
    __RME_X64_Feature_Get();
ffffffff80224a28:	e8 b0 6e ff ff       	call   ffffffff8021b8dd <__RME_X64_Feature_Get>
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80224a2d:	48 8b 05 f4 e5 00 00 	mov    0xe5f4(%rip),%rax        # ffffffff80233028 <RME_X64_MBInfo>
ffffffff80224a34:	8b 40 2c             	mov    0x2c(%rax),%eax
ffffffff80224a37:	89 c2                	mov    %eax,%edx
ffffffff80224a39:	48 8b 05 e8 e5 00 00 	mov    0xe5e8(%rip),%rax        # ffffffff80233028 <RME_X64_MBInfo>
ffffffff80224a40:	8b 40 30             	mov    0x30(%rax),%eax
ffffffff80224a43:	89 c0                	mov    %eax,%eax
ffffffff80224a45:	48 89 d6             	mov    %rdx,%rsi
ffffffff80224a48:	48 89 c7             	mov    %rax,%rdi
ffffffff80224a4b:	e8 06 70 ff ff       	call   ffffffff8021ba56 <__RME_X64_Mem_Init>

    return 0;
ffffffff80224a50:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80224a55:	5d                   	pop    %rbp
ffffffff80224a56:	c3                   	ret

ffffffff80224a57 <__RME_Pgt_Kom_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Kom_Init(void)
{
ffffffff80224a57:	f3 0f 1e fa          	endbr64
ffffffff80224a5b:	55                   	push   %rbp
ffffffff80224a5c:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224a5f:	48 83 ec 30          	sub    $0x30,%rsp
    rme_cnt_t PDE_Cnt;
    rme_cnt_t Addr_Cnt;
    struct __RME_X64_Mem* Mem;

    /* Now initialize the kernel object allocation table */
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff80224a63:	48 8b 05 de e5 00 00 	mov    0xe5de(%rip),%rax        # ffffffff80233048 <RME_X64_Layout+0x8>
ffffffff80224a6a:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80224a6e:	48 89 c7             	mov    %rax,%rdi
ffffffff80224a71:	e8 6c d8 fe ff       	call   ffffffff802122e2 <_RME_Kot_Init>
    /* Reset PCID counter */
    RME_X64_PCID_Inc=0;
ffffffff80224a76:	48 c7 05 cf fc 00 00 	movq   $0x0,0xfccf(%rip)        # ffffffff80234750 <RME_X64_PCID_Inc>
ffffffff80224a7d:	00 00 00 00 

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224a81:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224a88:	00 
ffffffff80224a89:	e9 87 00 00 00       	jmp    ffffffff80224b15 <__RME_Pgt_Kom_Init+0xbe>
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff80224a8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224a92:	48 83 c0 01          	add    $0x1,%rax
ffffffff80224a96:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80224a9a:	48 05 00 90 10 80    	add    $0xffffffff80109000,%rax
ffffffff80224aa0:	48 89 c2             	mov    %rax,%rdx
ffffffff80224aa3:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff80224aa8:	48 01 c2             	add    %rax,%rdx
ffffffff80224aab:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224ab2:	ff 0f 00 
ffffffff80224ab5:	48 21 d0             	and    %rdx,%rax
ffffffff80224ab8:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff80224abe:	48 89 c2             	mov    %rax,%rdx
ffffffff80224ac1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224ac5:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff80224acb:	48 89 14 c5 00 90 10 	mov    %rdx,-0x7fef7000(,%rax,8)
ffffffff80224ad2:	80 
        		                    RME_X64_MMU_KERN_PML4;

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80224ad3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80224ada:	00 
ffffffff80224adb:	eb 29                	jmp    ffffffff80224b06 <__RME_Pgt_Kom_Init+0xaf>
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff80224add:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224ae1:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224ae5:	48 89 c2             	mov    %rax,%rdx
ffffffff80224ae8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224aec:	48 01 d0             	add    %rdx,%rax
ffffffff80224aef:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224af5:	48 c7 04 c5 00 90 10 	movq   $0x102,-0x7fef7000(,%rax,8)
ffffffff80224afc:	80 02 01 00 00 
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80224b01:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80224b06:	48 81 7d f0 ff 01 00 	cmpq   $0x1ff,-0x10(%rbp)
ffffffff80224b0d:	00 
ffffffff80224b0e:	7e cd                	jle    ffffffff80224add <__RME_Pgt_Kom_Init+0x86>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224b10:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224b15:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff80224b1c:	00 
ffffffff80224b1d:	0f 8e 6b ff ff ff    	jle    ffffffff80224a8e <__RME_Pgt_Kom_Init+0x37>
    }

    /* Map in the first 4GB as linear mappings as always, 4 super pages, including the device hole.
     * We need to detect whether the 1GB page is supported. If not, we just map the initial tables
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff80224b23:	48 8b 05 5e fa 00 00 	mov    0xfa5e(%rip),%rax        # ffffffff80234588 <RME_X64_Feature+0x248>
ffffffff80224b2a:	25 00 00 00 04       	and    $0x4000000,%eax
ffffffff80224b2f:	48 85 c0             	test   %rax,%rax
ffffffff80224b32:	0f 84 97 00 00 00    	je     ffffffff80224bcf <__RME_Pgt_Kom_Init+0x178>
    {
        /* Can use 1GB pages */
        RME_DBG_S("\n\rThis CPU have 1GB superpage support");
ffffffff80224b38:	48 c7 c7 f8 78 22 80 	mov    $0xffffffff802278f8,%rdi
ffffffff80224b3f:	e8 e9 7e fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224b44:	48 8b 05 b5 54 ee ff 	mov    -0x11ab4b(%rip),%rax        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80224b4b:	0c 81                	or     $0x81,%al
ffffffff80224b4d:	48 89 05 ac 54 ee ff 	mov    %rax,-0x11ab54(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224b54:	48 8b 05 ad 54 ee ff 	mov    -0x11ab53(%rip),%rax        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80224b5b:	48 0d 81 00 00 40    	or     $0x40000081,%rax
ffffffff80224b61:	48 89 05 a0 54 ee ff 	mov    %rax,-0x11ab60(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224b68:	48 8b 05 a1 54 ee ff 	mov    -0x11ab5f(%rip),%rax        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80224b6f:	ba 81 00 00 80       	mov    $0x80000081,%edx
ffffffff80224b74:	48 09 d0             	or     %rdx,%rax
ffffffff80224b77:	48 89 05 92 54 ee ff 	mov    %rax,-0x11ab6e(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        /* We need to mark the device hole as unbufferable */
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224b7e:	48 8b 05 93 54 ee ff 	mov    -0x11ab6d(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224b85:	ba 81 00 00 c0       	mov    $0xc0000081,%edx
ffffffff80224b8a:	48 09 d0             	or     %rdx,%rax
ffffffff80224b8d:	48 89 05 84 54 ee ff 	mov    %rax,-0x11ab7c(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff80224b94:	48 8b 05 7d 54 ee ff 	mov    -0x11ab83(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224b9b:	48 83 c8 18          	or     $0x18,%rax
ffffffff80224b9f:	48 89 05 72 54 ee ff 	mov    %rax,-0x11ab8e(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224ba6:	48 8b 05 43 54 fe ff 	mov    -0x1abbd(%rip),%rax        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80224bad:	0c 81                	or     $0x81,%al
ffffffff80224baf:	48 89 05 3a 54 fe ff 	mov    %rax,-0x1abc6(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224bb6:	48 8b 05 3b 54 fe ff 	mov    -0x1abc5(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224bbd:	48 0d 81 00 00 40    	or     $0x40000081,%rax
ffffffff80224bc3:	48 89 05 2e 54 fe ff 	mov    %rax,-0x1abd2(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224bca:	e9 84 00 00 00       	jmp    ffffffff80224c53 <__RME_Pgt_Kom_Init+0x1fc>
    }
    else
    {
        RME_DBG_S("\n\rThis CPU do not have 1GB superpage support");
ffffffff80224bcf:	48 c7 c7 20 79 22 80 	mov    $0xffffffff80227920,%rdi
ffffffff80224bd6:	e8 52 7e fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        /* Cannot use 1GB pages, we revert to 2MB pages used during kernel startup */
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff80224bdb:	48 8b 05 1e 54 ee ff 	mov    -0x11abe2(%rip),%rax        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80224be2:	48 0d 01 40 10 00    	or     $0x104001,%rax
ffffffff80224be8:	48 89 05 11 54 ee ff 	mov    %rax,-0x11abef(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=0x105000|RME_X64_MMU_P;
ffffffff80224bef:	48 8b 05 12 54 ee ff 	mov    -0x11abee(%rip),%rax        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80224bf6:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80224bfc:	48 89 05 05 54 ee ff 	mov    %rax,-0x11abfb(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=0x106000|RME_X64_MMU_P;
ffffffff80224c03:	48 8b 05 06 54 ee ff 	mov    -0x11abfa(%rip),%rax        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80224c0a:	48 0d 01 60 10 00    	or     $0x106001,%rax
ffffffff80224c10:	48 89 05 f9 53 ee ff 	mov    %rax,-0x11ac07(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        RME_X64_Kpgt.PDP[0][3]|=0x107000|RME_X64_MMU_PCD|RME_X64_MMU_PWT|RME_X64_MMU_P;
ffffffff80224c17:	48 8b 05 fa 53 ee ff 	mov    -0x11ac06(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224c1e:	48 0d 19 70 10 00    	or     $0x107019,%rax
ffffffff80224c24:	48 89 05 ed 53 ee ff 	mov    %rax,-0x11ac13(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff80224c2b:	48 8b 05 be 53 fe ff 	mov    -0x1ac42(%rip),%rax        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80224c32:	48 0d 01 40 10 00    	or     $0x104001,%rax
ffffffff80224c38:	48 89 05 b1 53 fe ff 	mov    %rax,-0x1ac4f(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80224c3f:	48 8b 05 b2 53 fe ff 	mov    -0x1ac4e(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224c46:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80224c4c:	48 89 05 a5 53 fe ff 	mov    %rax,-0x1ac5b(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff80224c53:	48 8b 05 a6 63 00 00 	mov    0x63a6(%rip),%rax        # ffffffff8022b000 <RME_X64_Phys_Mem>
ffffffff80224c5a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224c5e:	eb 26                	jmp    ffffffff80224c86 <__RME_Pgt_Kom_Init+0x22f>
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
ffffffff80224c60:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c64:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224c68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c6c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224c70:	48 01 d0             	add    %rdx,%rax
ffffffff80224c73:	48 3d 00 00 00 01    	cmp    $0x1000000,%rax
ffffffff80224c79:	77 17                	ja     ffffffff80224c92 <__RME_Pgt_Kom_Init+0x23b>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224c7b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224c7f:	48 8b 00             	mov    (%rax),%rax
ffffffff80224c82:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224c86:	48 81 7d d8 00 b0 22 	cmpq   $0xffffffff8022b000,-0x28(%rbp)
ffffffff80224c8d:	80 
ffffffff80224c8e:	75 d0                	jne    ffffffff80224c60 <__RME_Pgt_Kom_Init+0x209>
ffffffff80224c90:	eb 01                	jmp    ffffffff80224c93 <__RME_Pgt_Kom_Init+0x23c>
        else
            break;
ffffffff80224c92:	90                   	nop
    }

    /* The first Kom1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80224c93:	48 8b 15 b6 e3 00 00 	mov    0xe3b6(%rip),%rdx        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff80224c9a:	48 8b 05 b7 e3 00 00 	mov    0xe3b7(%rip),%rax        # ffffffff80233058 <RME_X64_Layout+0x18>
ffffffff80224ca1:	48 01 d0             	add    %rdx,%rax
ffffffff80224ca4:	48 89 05 cd e3 00 00 	mov    %rax,0xe3cd(%rip)        # ffffffff80233078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80224cab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224caf:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224cb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224cb7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224cbb:	48 01 c2             	add    %rax,%rdx
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80224cbe:	48 8b 05 b3 e3 00 00 	mov    0xe3b3(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80224cc5:	48 29 c2             	sub    %rax,%rdx
ffffffff80224cc8:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff80224ccf:	7f ff ff 
ffffffff80224cd2:	48 01 d0             	add    %rdx,%rax
ffffffff80224cd5:	48 89 05 9c e4 00 00 	mov    %rax,0xe49c(%rip)        # ffffffff80233178 <RME_X64_Layout+0x138>

    /* Add the rest of Kom1 into the array */
    Addr_Cnt=1;
ffffffff80224cdc:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
ffffffff80224ce3:	00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224ce4:	e9 d8 00 00 00       	jmp    ffffffff80224dc1 <__RME_Pgt_Kom_Init+0x36a>
    {
        /* Add all segments under 4GB to Kom1 */
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224ce9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ced:	48 8b 00             	mov    (%rax),%rax
ffffffff80224cf0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        /* If detected anything above 4GB, then this is not Kom1, exiting */
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80224cf4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224cf8:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224cfc:	ba ff ff ff ff       	mov    $0xffffffff,%edx
ffffffff80224d01:	48 39 c2             	cmp    %rax,%rdx
ffffffff80224d04:	0f 82 c7 00 00 00    	jb     ffffffff80224dd1 <__RME_Pgt_Kom_Init+0x37a>
            break;
        /* If this memory trunk have less than 4MB, drop it */
        if(Mem->Length<RME_POW2(RME_PGT_SIZE_4M))
ffffffff80224d0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d0e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224d12:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80224d18:	77 3a                	ja     ffffffff80224d54 <__RME_Pgt_Kom_Init+0x2fd>
        {
            RME_DBG_S("\n\rAbandoning physical memory below 4G: addr 0x");
ffffffff80224d1a:	48 c7 c7 50 79 22 80 	mov    $0xffffffff80227950,%rdi
ffffffff80224d21:	e8 07 7d fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_DBG_H(Mem->Start_Addr);
ffffffff80224d26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d2a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224d2e:	48 89 c7             	mov    %rax,%rdi
ffffffff80224d31:	e8 35 7c fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
            RME_DBG_S(", length 0x");
ffffffff80224d36:	48 c7 c7 7f 79 22 80 	mov    $0xffffffff8022797f,%rdi
ffffffff80224d3d:	e8 eb 7c fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_DBG_H(Mem->Length);
ffffffff80224d42:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d46:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224d4a:	48 89 c7             	mov    %rax,%rdi
ffffffff80224d4d:	e8 19 7c fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
            continue;
ffffffff80224d52:	eb 6d                	jmp    ffffffff80224dc1 <__RME_Pgt_Kom_Init+0x36a>
        }
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
ffffffff80224d54:	48 83 7d e0 1f       	cmpq   $0x1f,-0x20(%rbp)
ffffffff80224d59:	7e 0c                	jle    ffffffff80224d67 <__RME_Pgt_Kom_Init+0x310>
        {
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
ffffffff80224d5b:	48 c7 c7 90 79 22 80 	mov    $0xffffffff80227990,%rdi
ffffffff80224d62:	e8 c6 7c fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_ASSERT(0);
        }
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff80224d67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d6b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224d6f:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80224d75:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224d7b:	48 89 c2             	mov    %rax,%rdx
ffffffff80224d7e:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80224d85:	80 ff ff 
ffffffff80224d88:	48 01 c2             	add    %rax,%rdx
ffffffff80224d8b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224d8f:	48 83 c0 06          	add    $0x6,%rax
ffffffff80224d93:	48 89 14 c5 48 30 23 	mov    %rdx,-0x7fdccfb8(,%rax,8)
ffffffff80224d9a:	80 
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff80224d9b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d9f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224da3:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224da9:	48 89 c2             	mov    %rax,%rdx
ffffffff80224dac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224db0:	48 83 c0 26          	add    $0x26,%rax
ffffffff80224db4:	48 89 14 c5 48 30 23 	mov    %rdx,-0x7fdccfb8(,%rax,8)
ffffffff80224dbb:	80 
        Addr_Cnt++;
ffffffff80224dbc:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224dc1:	48 81 7d d8 00 b0 22 	cmpq   $0xffffffff8022b000,-0x28(%rbp)
ffffffff80224dc8:	80 
ffffffff80224dc9:	0f 85 1a ff ff ff    	jne    ffffffff80224ce9 <__RME_Pgt_Kom_Init+0x292>
ffffffff80224dcf:	eb 01                	jmp    ffffffff80224dd2 <__RME_Pgt_Kom_Init+0x37b>
            break;
ffffffff80224dd1:	90                   	nop
    }
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff80224dd2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224dd6:	48 89 05 93 e2 00 00 	mov    %rax,0xe293(%rip)        # ffffffff80233070 <RME_X64_Layout+0x30>

    /* This is the hole */
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff80224ddd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224de1:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224de5:	48 83 c0 06          	add    $0x6,%rax
ffffffff80224de9:	48 8b 14 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rdx
ffffffff80224df0:	80 
ffffffff80224df1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224df5:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224df9:	48 83 c0 26          	add    $0x26,%rax
ffffffff80224dfd:	48 8b 04 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rax
ffffffff80224e04:	80 
ffffffff80224e05:	48 01 d0             	add    %rdx,%rax
ffffffff80224e08:	48 89 05 69 e4 00 00 	mov    %rax,0xe469(%rip)        # ffffffff80233278 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff80224e0f:	48 8b 05 62 e4 00 00 	mov    0xe462(%rip),%rax        # ffffffff80233278 <RME_X64_Layout+0x238>
ffffffff80224e16:	48 ba 00 00 00 00 01 	movabs $0xffff800100000000,%rdx
ffffffff80224e1d:	80 ff ff 
ffffffff80224e20:	48 29 c2             	sub    %rax,%rdx
ffffffff80224e23:	48 89 15 56 e4 00 00 	mov    %rdx,0xe456(%rip)        # ffffffff80233280 <RME_X64_Layout+0x240>

    /* Create kernel page mappings for memory above 4GB - we assume only one segment below 4GB */
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff80224e2a:	48 8b 05 47 e2 00 00 	mov    0xe247(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff80224e31:	48 89 05 28 e2 00 00 	mov    %rax,0xe228(%rip)        # ffffffff80233060 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff80224e38:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff80224e3f:	80 ff ff 
ffffffff80224e42:	48 89 05 3f e4 00 00 	mov    %rax,0xe43f(%rip)        # ffffffff80233288 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff80224e49:	48 c7 05 3c e4 00 00 	movq   $0x0,0xe43c(%rip)        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff80224e50:	00 00 00 00 

    /* We have filled the first 4 1GB superpages */
    PML4_Cnt=0;
ffffffff80224e54:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224e5b:	00 
    PDP_Cnt=3;
ffffffff80224e5c:	48 c7 45 f0 03 00 00 	movq   $0x3,-0x10(%rbp)
ffffffff80224e63:	00 
    PDE_Cnt=511;
ffffffff80224e64:	48 c7 45 e8 ff 01 00 	movq   $0x1ff,-0x18(%rbp)
ffffffff80224e6b:	00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224e6c:	e9 d5 01 00 00       	jmp    ffffffff80225046 <__RME_Pgt_Kom_Init+0x5ef>
    {
        /* Throw away small segments */
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224e71:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e75:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e79:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80224e7f:	77 48                	ja     ffffffff80224ec9 <__RME_Pgt_Kom_Init+0x472>
        {
            RME_DBG_S("\n\rAbandoning physical memory above 4G: addr 0x");
ffffffff80224e81:	48 c7 c7 c8 79 22 80 	mov    $0xffffffff802279c8,%rdi
ffffffff80224e88:	e8 a0 7b fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_DBG_H(Mem->Start_Addr);
ffffffff80224e8d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e91:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224e95:	48 89 c7             	mov    %rax,%rdi
ffffffff80224e98:	e8 ce 7a fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
            RME_DBG_S(", length 0x");
ffffffff80224e9d:	48 c7 c7 7f 79 22 80 	mov    $0xffffffff8022797f,%rdi
ffffffff80224ea4:	e8 84 7b fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
            RME_DBG_H(Mem->Length);
ffffffff80224ea9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ead:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224eb1:	48 89 c7             	mov    %rax,%rdi
ffffffff80224eb4:	e8 b2 7a fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224eb9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ebd:	48 8b 00             	mov    (%rax),%rax
ffffffff80224ec0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            continue;
ffffffff80224ec4:	e9 7d 01 00 00       	jmp    ffffffff80225046 <__RME_Pgt_Kom_Init+0x5ef>
        }

        /* Align the memory segment to 2MB */
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80224ec9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ecd:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224ed1:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80224ed7:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224edd:	48 89 c2             	mov    %rax,%rdx
ffffffff80224ee0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ee4:	48 89 50 10          	mov    %rdx,0x10(%rax)
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80224ee8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224eec:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224ef0:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224ef4:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224efa:	48 89 c2             	mov    %rax,%rdx
ffffffff80224efd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224f01:	48 89 50 18          	mov    %rdx,0x18(%rax)

        /* Add these pages into the kernel at addresses above 4GB offset as 2MB pages */
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224f05:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80224f0c:	00 
ffffffff80224f0d:	e9 14 01 00 00       	jmp    ffffffff80225026 <__RME_Pgt_Kom_Init+0x5cf>
        {
            PDE_Cnt++;
ffffffff80224f12:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
            if(PDE_Cnt==512)
ffffffff80224f17:	48 81 7d e8 00 02 00 	cmpq   $0x200,-0x18(%rbp)
ffffffff80224f1e:	00 
ffffffff80224f1f:	0f 85 8f 00 00 00    	jne    ffffffff80224fb4 <__RME_Pgt_Kom_Init+0x55d>
            {
                PDE_Cnt=0;
ffffffff80224f25:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80224f2c:	00 
                PDP_Cnt++;
ffffffff80224f2d:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
                if(PDP_Cnt==512)
ffffffff80224f32:	48 81 7d f0 00 02 00 	cmpq   $0x200,-0x10(%rbp)
ffffffff80224f39:	00 
ffffffff80224f3a:	75 0d                	jne    ffffffff80224f49 <__RME_Pgt_Kom_Init+0x4f2>
                {
                    PDP_Cnt=0;
ffffffff80224f3c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80224f43:	00 
                    PML4_Cnt++;
ffffffff80224f44:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff80224f49:	48 8b 05 28 e1 00 00 	mov    0xe128(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff80224f50:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80224f57:	80 00 00 
ffffffff80224f5a:	48 01 c2             	add    %rax,%rdx
ffffffff80224f5d:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224f64:	ff 0f 00 
ffffffff80224f67:	48 21 d0             	and    %rdx,%rax
ffffffff80224f6a:	48 83 c8 01          	or     $0x1,%rax
ffffffff80224f6e:	48 89 c2             	mov    %rax,%rdx
ffffffff80224f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224f75:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224f79:	48 89 c1             	mov    %rax,%rcx
ffffffff80224f7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224f80:	48 01 c8             	add    %rcx,%rax
ffffffff80224f83:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224f89:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80224f90:	80 
ffffffff80224f91:	48 09 c2             	or     %rax,%rdx
ffffffff80224f94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224f98:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224f9c:	48 89 c1             	mov    %rax,%rcx
ffffffff80224f9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224fa3:	48 01 c8             	add    %rcx,%rax
ffffffff80224fa6:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224fac:	48 89 14 c5 00 90 10 	mov    %rdx,-0x7fef7000(,%rax,8)
ffffffff80224fb3:	80 
            }

            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80224fb4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224fb8:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224fbc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224fc0:	48 01 c2             	add    %rax,%rdx
ffffffff80224fc3:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224fca:	ff 0f 00 
ffffffff80224fcd:	48 21 d0             	and    %rdx,%rax
ffffffff80224fd0:	48 8b 15 a1 e0 00 00 	mov    0xe0a1(%rip),%rdx        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff80224fd7:	48 0d 83 01 00 00    	or     $0x183,%rax
ffffffff80224fdd:	48 89 02             	mov    %rax,(%rdx)
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
ffffffff80224fe0:	48 8b 05 91 e0 00 00 	mov    0xe091(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff80224fe7:	48 83 c0 08          	add    $0x8,%rax
ffffffff80224feb:	48 89 05 86 e0 00 00 	mov    %rax,0xe086(%rip)        # ffffffff80233078 <RME_X64_Layout+0x38>
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
ffffffff80224ff2:	48 8b 05 7f e1 00 00 	mov    0xe17f(%rip),%rax        # ffffffff80233178 <RME_X64_Layout+0x138>
ffffffff80224ff9:	48 83 e8 08          	sub    $0x8,%rax
ffffffff80224ffd:	48 89 05 74 e1 00 00 	mov    %rax,0xe174(%rip)        # ffffffff80233178 <RME_X64_Layout+0x138>
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
ffffffff80225004:	48 8b 05 85 e2 00 00 	mov    0xe285(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff8022500b:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80225011:	48 89 05 78 e2 00 00 	mov    %rax,0xe278(%rip)        # ffffffff80233290 <RME_X64_Layout+0x250>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80225018:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022501c:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80225022:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80225026:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022502a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8022502e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80225032:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225035:	0f 82 d7 fe ff ff    	jb     ffffffff80224f12 <__RME_Pgt_Kom_Init+0x4bb>
        }

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff8022503b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022503f:	48 8b 00             	mov    (%rax),%rax
ffffffff80225042:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80225046:	48 81 7d d8 00 b0 22 	cmpq   $0xffffffff8022b000,-0x28(%rbp)
ffffffff8022504d:	80 
ffffffff8022504e:	0f 85 1d fe ff ff    	jne    ffffffff80224e71 <__RME_Pgt_Kom_Init+0x41a>
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80225054:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8022505b:	00 
ffffffff8022505c:	eb 33                	jmp    ffffffff80225091 <__RME_Pgt_Kom_Init+0x63a>
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff8022505e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225062:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80225069:	00 
ffffffff8022506a:	48 b8 00 18 10 00 00 	movabs $0xffff800000101800,%rax
ffffffff80225071:	80 ff ff 
ffffffff80225074:	48 01 c2             	add    %rax,%rdx
ffffffff80225077:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022507b:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff80225081:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80225088:	80 
ffffffff80225089:	48 89 02             	mov    %rax,(%rdx)
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff8022508c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80225091:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff80225098:	00 
ffffffff80225099:	7e c3                	jle    ffffffff8022505e <__RME_Pgt_Kom_Init+0x607>

    /* Page table allocation finished. Now need to align Kom1 to 2MB page boundary */
    RME_X64_Layout.Kom1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kom1_Start[0],RME_PGT_SIZE_2M);
ffffffff8022509b:	48 8b 05 d6 df 00 00 	mov    0xdfd6(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff802250a2:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff802250a8:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff802250ae:	48 89 05 c3 df 00 00 	mov    %rax,0xdfc3(%rip)        # ffffffff80233078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Size[0]-1,RME_PGT_SIZE_2M);
ffffffff802250b5:	48 8b 05 bc e0 00 00 	mov    0xe0bc(%rip),%rax        # ffffffff80233178 <RME_X64_Layout+0x138>
ffffffff802250bc:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802250c0:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff802250c6:	48 89 05 ab e0 00 00 	mov    %rax,0xe0ab(%rip)        # ffffffff80233178 <RME_X64_Layout+0x138>

    /* All memory is mapped. Now figure out the size of kernel stacks */
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kom1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff802250cd:	48 8b 15 a4 df 00 00 	mov    0xdfa4(%rip),%rdx        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff802250d4:	48 8b 05 85 df 00 00 	mov    0xdf85(%rip),%rax        # ffffffff80233060 <RME_X64_Layout+0x20>
ffffffff802250db:	48 29 c2             	sub    %rax,%rdx
ffffffff802250de:	48 89 15 83 df 00 00 	mov    %rdx,0xdf83(%rip)        # ffffffff80233068 <RME_X64_Layout+0x28>

    /* See if we are allocating the stack from Kom2 or Kom1 */
    if(RME_X64_Layout.Kom2_Size==0)
ffffffff802250e5:	48 8b 05 a4 e1 00 00 	mov    0xe1a4(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff802250ec:	48 85 c0             	test   %rax,%rax
ffffffff802250ef:	75 54                	jne    ffffffff80225145 <__RME_Pgt_Kom_Init+0x6ee>
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Start[0]+RME_X64_Layout.Kom1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff802250f1:	48 8b 15 80 df 00 00 	mov    0xdf80(%rip),%rdx        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff802250f8:	48 8b 05 79 e0 00 00 	mov    0xe079(%rip),%rax        # ffffffff80233178 <RME_X64_Layout+0x138>
ffffffff802250ff:	48 01 d0             	add    %rdx,%rax
ffffffff80225102:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80225106:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff8022510c:	48 89 05 85 e1 00 00 	mov    %rax,0xe185(%rip)        # ffffffff80233298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80225113:	48 8b 05 86 e1 00 00 	mov    0xe186(%rip),%rax        # ffffffff802332a0 <RME_X64_Layout+0x260>
ffffffff8022511a:	48 8b 15 77 e1 00 00 	mov    0xe177(%rip),%rdx        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff80225121:	48 29 c2             	sub    %rax,%rdx
ffffffff80225124:	48 89 15 6d e1 00 00 	mov    %rdx,0xe16d(%rip)        # ffffffff80233298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom1_Start[0];
ffffffff8022512b:	48 8b 15 66 e1 00 00 	mov    0xe166(%rip),%rdx        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff80225132:	48 8b 05 3f df 00 00 	mov    0xdf3f(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff80225139:	48 29 c2             	sub    %rax,%rdx
ffffffff8022513c:	48 89 15 35 e0 00 00 	mov    %rdx,0xe035(%rip)        # ffffffff80233178 <RME_X64_Layout+0x138>
ffffffff80225143:	eb 52                	jmp    ffffffff80225197 <__RME_Pgt_Kom_Init+0x740>
    }


    else
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff80225145:	48 8b 15 3c e1 00 00 	mov    0xe13c(%rip),%rdx        # ffffffff80233288 <RME_X64_Layout+0x248>
ffffffff8022514c:	48 8b 05 3d e1 00 00 	mov    0xe13d(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff80225153:	48 01 d0             	add    %rdx,%rax
ffffffff80225156:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8022515a:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80225160:	48 89 05 31 e1 00 00 	mov    %rax,0xe131(%rip)        # ffffffff80233298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80225167:	48 8b 05 32 e1 00 00 	mov    0xe132(%rip),%rax        # ffffffff802332a0 <RME_X64_Layout+0x260>
ffffffff8022516e:	48 8b 15 23 e1 00 00 	mov    0xe123(%rip),%rdx        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff80225175:	48 29 c2             	sub    %rax,%rdx
ffffffff80225178:	48 89 15 19 e1 00 00 	mov    %rdx,0xe119(%rip)        # ffffffff80233298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
ffffffff8022517f:	48 8b 15 12 e1 00 00 	mov    0xe112(%rip),%rdx        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff80225186:	48 8b 05 fb e0 00 00 	mov    0xe0fb(%rip),%rax        # ffffffff80233288 <RME_X64_Layout+0x248>
ffffffff8022518d:	48 29 c2             	sub    %rax,%rdx
ffffffff80225190:	48 89 15 f9 e0 00 00 	mov    %rdx,0xe0f9(%rip)        # ffffffff80233290 <RME_X64_Layout+0x250>
    }

    /* Now report all mapping info */
    RME_DBG_S("\n\r\n\rKot_Start:     0x");
ffffffff80225197:	48 c7 c7 f7 79 22 80 	mov    $0xffffffff802279f7,%rdi
ffffffff8022519e:	e8 8a 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kot_Start);
ffffffff802251a3:	48 8b 05 96 de 00 00 	mov    0xde96(%rip),%rax        # ffffffff80233040 <RME_X64_Layout>
ffffffff802251aa:	48 89 c7             	mov    %rax,%rdi
ffffffff802251ad:	e8 b9 77 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rKot_Size:      0x");
ffffffff802251b2:	48 c7 c7 0d 7a 22 80 	mov    $0xffffffff80227a0d,%rdi
ffffffff802251b9:	e8 6f 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kot_Size);
ffffffff802251be:	48 8b 05 83 de 00 00 	mov    0xde83(%rip),%rax        # ffffffff80233048 <RME_X64_Layout+0x8>
ffffffff802251c5:	48 89 c7             	mov    %rax,%rdi
ffffffff802251c8:	e8 9e 77 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rPerCPU_Start:    0x");
ffffffff802251cd:	48 c7 c7 21 7a 22 80 	mov    $0xffffffff80227a21,%rdi
ffffffff802251d4:	e8 54 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.PerCPU_Start);
ffffffff802251d9:	48 8b 05 70 de 00 00 	mov    0xde70(%rip),%rax        # ffffffff80233050 <RME_X64_Layout+0x10>
ffffffff802251e0:	48 89 c7             	mov    %rax,%rdi
ffffffff802251e3:	e8 83 77 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rPerCPU_Size:     0x");
ffffffff802251e8:	48 c7 c7 37 7a 22 80 	mov    $0xffffffff80227a37,%rdi
ffffffff802251ef:	e8 39 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.PerCPU_Size);
ffffffff802251f4:	48 8b 05 5d de 00 00 	mov    0xde5d(%rip),%rax        # ffffffff80233058 <RME_X64_Layout+0x18>
ffffffff802251fb:	48 89 c7             	mov    %rax,%rdi
ffffffff802251fe:	e8 68 77 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
ffffffff80225203:	48 c7 c7 4d 7a 22 80 	mov    $0xffffffff80227a4d,%rdi
ffffffff8022520a:	e8 1e 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kpgtbl_Start);
ffffffff8022520f:	48 8b 05 4a de 00 00 	mov    0xde4a(%rip),%rax        # ffffffff80233060 <RME_X64_Layout+0x20>
ffffffff80225216:	48 89 c7             	mov    %rax,%rdi
ffffffff80225219:	e8 4d 77 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
ffffffff8022521e:	48 c7 c7 63 7a 22 80 	mov    $0xffffffff80227a63,%rdi
ffffffff80225225:	e8 03 78 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kpgtbl_Size);
ffffffff8022522a:	48 8b 05 37 de 00 00 	mov    0xde37(%rip),%rax        # ffffffff80233068 <RME_X64_Layout+0x28>
ffffffff80225231:	48 89 c7             	mov    %rax,%rdi
ffffffff80225234:	e8 32 77 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff80225239:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80225240:	00 
ffffffff80225241:	eb 7d                	jmp    ffffffff802252c0 <__RME_Pgt_Kom_Init+0x869>
    {
        RME_DBG_S("\n\rKom1_Start[");
ffffffff80225243:	48 c7 c7 79 7a 22 80 	mov    $0xffffffff80227a79,%rdi
ffffffff8022524a:	e8 de 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff8022524f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225253:	48 89 c7             	mov    %rax,%rdi
ffffffff80225256:	e8 d8 75 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
        RME_DBG_S("]:  0x");
ffffffff8022525b:	48 c7 c7 87 7a 22 80 	mov    $0xffffffff80227a87,%rdi
ffffffff80225262:	e8 c6 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_DBG_H(RME_X64_Layout.Kom1_Start[Addr_Cnt]);
ffffffff80225267:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022526b:	48 83 c0 06          	add    $0x6,%rax
ffffffff8022526f:	48 8b 04 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rax
ffffffff80225276:	80 
ffffffff80225277:	48 89 c7             	mov    %rax,%rdi
ffffffff8022527a:	e8 ec 76 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
        RME_DBG_S("\n\rKom1_Size[");
ffffffff8022527f:	48 c7 c7 8e 7a 22 80 	mov    $0xffffffff80227a8e,%rdi
ffffffff80225286:	e8 a2 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff8022528b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022528f:	48 89 c7             	mov    %rax,%rdi
ffffffff80225292:	e8 9c 75 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
        RME_DBG_S("]:   0x");
ffffffff80225297:	48 c7 c7 9b 7a 22 80 	mov    $0xffffffff80227a9b,%rdi
ffffffff8022529e:	e8 8a 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
        RME_DBG_H(RME_X64_Layout.Kom1_Size[Addr_Cnt]);
ffffffff802252a3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802252a7:	48 83 c0 26          	add    $0x26,%rax
ffffffff802252ab:	48 8b 04 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rax
ffffffff802252b2:	80 
ffffffff802252b3:	48 89 c7             	mov    %rax,%rdi
ffffffff802252b6:	e8 b0 76 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff802252bb:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
ffffffff802252c0:	48 8b 05 a9 dd 00 00 	mov    0xdda9(%rip),%rax        # ffffffff80233070 <RME_X64_Layout+0x30>
ffffffff802252c7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802252cb:	48 39 c2             	cmp    %rax,%rdx
ffffffff802252ce:	0f 82 6f ff ff ff    	jb     ffffffff80225243 <__RME_Pgt_Kom_Init+0x7ec>
    }
    RME_DBG_S("\n\rHole_Start:      0x");
ffffffff802252d4:	48 c7 c7 a3 7a 22 80 	mov    $0xffffffff80227aa3,%rdi
ffffffff802252db:	e8 4d 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Hole_Start);
ffffffff802252e0:	48 8b 05 91 df 00 00 	mov    0xdf91(%rip),%rax        # ffffffff80233278 <RME_X64_Layout+0x238>
ffffffff802252e7:	48 89 c7             	mov    %rax,%rdi
ffffffff802252ea:	e8 7c 76 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rHole_Size:       0x");
ffffffff802252ef:	48 c7 c7 b9 7a 22 80 	mov    $0xffffffff80227ab9,%rdi
ffffffff802252f6:	e8 32 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Hole_Size);
ffffffff802252fb:	48 8b 05 7e df 00 00 	mov    0xdf7e(%rip),%rax        # ffffffff80233280 <RME_X64_Layout+0x240>
ffffffff80225302:	48 89 c7             	mov    %rax,%rdi
ffffffff80225305:	e8 61 76 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rKom2_Start:     0x");
ffffffff8022530a:	48 c7 c7 cf 7a 22 80 	mov    $0xffffffff80227acf,%rdi
ffffffff80225311:	e8 17 77 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Start);
ffffffff80225316:	48 8b 05 6b df 00 00 	mov    0xdf6b(%rip),%rax        # ffffffff80233288 <RME_X64_Layout+0x248>
ffffffff8022531d:	48 89 c7             	mov    %rax,%rdi
ffffffff80225320:	e8 46 76 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rKom2_Size:      0x");
ffffffff80225325:	48 c7 c7 e4 7a 22 80 	mov    $0xffffffff80227ae4,%rdi
ffffffff8022532c:	e8 fc 76 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Size);
ffffffff80225331:	48 8b 05 58 df 00 00 	mov    0xdf58(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff80225338:	48 89 c7             	mov    %rax,%rdi
ffffffff8022533b:	e8 2b 76 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rStack_Start:     0x");
ffffffff80225340:	48 c7 c7 f9 7a 22 80 	mov    $0xffffffff80227af9,%rdi
ffffffff80225347:	e8 e1 76 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Stack_Start);
ffffffff8022534c:	48 8b 05 45 df 00 00 	mov    0xdf45(%rip),%rax        # ffffffff80233298 <RME_X64_Layout+0x258>
ffffffff80225353:	48 89 c7             	mov    %rax,%rdi
ffffffff80225356:	e8 10 76 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rStack_Size:      0x");
ffffffff8022535b:	48 c7 c7 0f 7b 22 80 	mov    $0xffffffff80227b0f,%rdi
ffffffff80225362:	e8 c6 76 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Stack_Size);
ffffffff80225367:	48 8b 05 32 df 00 00 	mov    0xdf32(%rip),%rax        # ffffffff802332a0 <RME_X64_Layout+0x260>
ffffffff8022536e:	48 89 c7             	mov    %rax,%rdi
ffffffff80225371:	e8 f5 75 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>

    return 0;
ffffffff80225376:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8022537b:	c9                   	leave
ffffffff8022537c:	c3                   	ret

ffffffff8022537d <__RME_SMP_Low_Level_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
rme_ptr_t __RME_SMP_Low_Level_Init(void)
{
ffffffff8022537d:	f3 0f 1e fa          	endbr64
ffffffff80225381:	55                   	push   %rbp
ffffffff80225382:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225385:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_CPU_Local* CPU_Local;

    /* Initialize all vector tables */
    __RME_X64_CPU_Local_Init();
ffffffff80225389:	e8 f8 69 ff ff       	call   ffffffff8021bd86 <__RME_X64_CPU_Local_Init>
    /* Initialize LAPIC */
    __RME_X64_LAPIC_Init();
ffffffff8022538e:	e8 c2 ef ff ff       	call   ffffffff80224355 <__RME_X64_LAPIC_Init>

    /* Check to see if we are booting this correctly */
    CPU_Local=RME_CPU_LOCAL();
ffffffff80225393:	e8 a7 64 fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80225398:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_ASSERT(CPU_Local->CPUID==RME_X64_CPU_Cnt);
ffffffff8022539c:	48 8b 05 0d df 00 00 	mov    0xdf0d(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>

    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff802253a3:	48 8b 05 06 df 00 00 	mov    0xdf06(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff802253aa:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802253ae:	48 05 c8 32 23 80    	add    $0xffffffff802332c8,%rax
ffffffff802253b4:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    /* Spin until the global CPU counter is zero again, which means the booting
     * processor has done booting and we can proceed now */
    while(RME_X64_CPU_Cnt!=0);
ffffffff802253bb:	90                   	nop
ffffffff802253bc:	48 8b 05 ed de 00 00 	mov    0xdeed(%rip),%rax        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff802253c3:	48 85 c0             	test   %rax,%rax
ffffffff802253c6:	75 f4                	jne    ffffffff802253bc <__RME_SMP_Low_Level_Init+0x3f>
    RME_ASSERT(CPU_Local->Thd_Cur!=0);
    RME_ASSERT(CPU_Local->Sig_Tim!=0);
    RME_ASSERT(CPU_Local->Sig_Vct!=0);

    /* Change page tables */
    __RME_Pgt_Set(RME_CAP_GETOBJ((CPU_Local->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff802253c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802253cc:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802253d0:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff802253d4:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802253d8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802253dc:	48 89 c7             	mov    %rax,%rdi
ffffffff802253df:	e8 ec 13 00 00       	call   ffffffff802267d0 <__RME_Pgt_Set>
    /* Boot into the init thread - never returns */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPU_Local->CPUID), CPU_Local->CPUID);
ffffffff802253e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802253e8:	48 8b 00             	mov    (%rax),%rax
ffffffff802253eb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802253ef:	48 8b 12             	mov    (%rdx),%rdx
ffffffff802253f2:	48 81 c2 01 04 00 00 	add    $0x401,%rdx
ffffffff802253f9:	48 89 d1             	mov    %rdx,%rcx
ffffffff802253fc:	48 c1 e1 0b          	shl    $0xb,%rcx
ffffffff80225400:	48 89 c2             	mov    %rax,%rdx
ffffffff80225403:	48 89 ce             	mov    %rcx,%rsi
ffffffff80225406:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff8022540b:	e8 b0 64 fe ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>

    return 0;
ffffffff80225410:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80225415:	c9                   	leave
ffffffff80225416:	c3                   	ret

ffffffff80225417 <__RME_Boot>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Boot(void)
{
ffffffff80225417:	f3 0f 1e fa          	endbr64
ffffffff8022541b:	55                   	push   %rbp
ffffffff8022541c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022541f:	48 83 ec 40          	sub    $0x40,%rsp
    rme_ptr_t Phys_Addr;
    rme_ptr_t Page_Ptr;
    struct RME_Cap_Cpt* Cpt;
    struct RME_CPU_Local* CPU_Local;
    /* Initialize our own CPU-local data structures */
    RME_X64_CPU_Cnt = 0;
ffffffff80225423:	48 c7 05 82 de 00 00 	movq   $0x0,0xde82(%rip)        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff8022542a:	00 00 00 00 
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff8022542e:	48 c7 c7 25 7b 22 80 	mov    $0xffffffff80227b25,%rdi
ffffffff80225435:	e8 f3 75 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    __RME_X64_CPU_Local_Init();
ffffffff8022543a:	e8 47 69 ff ff       	call   ffffffff8021bd86 <__RME_X64_CPU_Local_Init>
    /* Initialize interrupt controllers (PIC, LAPIC, IOAPIC) */
    RME_DBG_S("\r\nCPU 0 LAPIC init");
ffffffff8022543f:	48 c7 c7 40 7b 22 80 	mov    $0xffffffff80227b40,%rdi
ffffffff80225446:	e8 e2 75 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    __RME_X64_LAPIC_Init();
ffffffff8022544b:	e8 05 ef ff ff       	call   ffffffff80224355 <__RME_X64_LAPIC_Init>
    RME_DBG_S("\r\nPIC init");
ffffffff80225450:	48 c7 c7 53 7b 22 80 	mov    $0xffffffff80227b53,%rdi
ffffffff80225457:	e8 d1 75 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    __RME_X64_PIC_Init();
ffffffff8022545c:	e8 4e f0 ff ff       	call   ffffffff802244af <__RME_X64_PIC_Init>
    RME_DBG_S("\r\nIOAPIC init");
ffffffff80225461:	48 c7 c7 5e 7b 22 80 	mov    $0xffffffff80227b5e,%rdi
ffffffff80225468:	e8 c0 75 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    __RME_X64_IOAPIC_Init();
ffffffff8022546d:	e8 11 f2 ff ff       	call   ffffffff80224683 <__RME_X64_IOAPIC_Init>
    /* Start other processors, if there are any. They will keep spinning until
     * the booting processor finish all its work. */
    __RME_X64_SMP_Init();
ffffffff80225472:	e8 cd f2 ff ff       	call   ffffffff80224744 <__RME_X64_SMP_Init>

    /* Create all initial tables in Kom1, which is sure to be present. We reserve 16
     * pages at the start to load the init process */
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff80225477:	48 8b 05 fa db 00 00 	mov    0xdbfa(%rip),%rax        # ffffffff80233078 <RME_X64_Layout+0x38>
ffffffff8022547e:	48 05 00 00 00 02    	add    $0x2000000,%rax
ffffffff80225484:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_DBG_S("\r\nKot registration start offset: 0x");
ffffffff80225488:	48 c7 c7 70 7b 22 80 	mov    $0xffffffff80227b70,%rdi
ffffffff8022548f:	e8 99 75 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80225494:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8022549b:	80 00 00 
ffffffff8022549e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802254a2:	48 01 d0             	add    %rdx,%rax
ffffffff802254a5:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff802254a9:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff802254ad:	48 89 c7             	mov    %rax,%rdi
ffffffff802254b0:	e8 b6 74 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>

    /* Create the capability table for the init process - always 16 */
    Cpt=(struct RME_Cap_Cpt*)Cur_Addr;
ffffffff802254b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802254b9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff802254bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802254c1:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff802254c6:	48 89 c6             	mov    %rax,%rsi
ffffffff802254c9:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff802254ce:	e8 b4 85 fe ff       	call   ffffffff8020da87 <_RME_Cpt_Boot_Init>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(16));
ffffffff802254d3:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff802254da:	00 
    /* Create the capability table for initial page tables - now we are only
     * adding 2MB pages. There will be 1 PML4, 16 PDP, and 16*512=8192 PGD.
     * This should provide support for up to 4TB of memory, which will be sufficient
     * for at least a decade. These data structures will eat 32MB of memory, which
     * is fine */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff802254db:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802254df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802254e3:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff802254e9:	48 89 d1             	mov    %rdx,%rcx
ffffffff802254ec:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802254f1:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802254f6:	48 89 c7             	mov    %rax,%rdi
ffffffff802254f9:	e8 78 86 fe ff       	call   ffffffff8020db76 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(1+16+8192));
ffffffff802254fe:	48 81 45 f8 00 10 08 	addq   $0x81000,-0x8(%rbp)
ffffffff80225505:	00 

    /* Align the address to 4096 to prepare for page table creation */
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80225506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022550a:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225510:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225516:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Create PML4 */
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8022551a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022551e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225522:	6a 09                	push   $0x9
ffffffff80225524:	6a 27                	push   $0x27
ffffffff80225526:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff8022552c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff80225532:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225535:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8022553a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8022553f:	48 89 c7             	mov    %rax,%rdi
ffffffff80225542:	e8 2f a4 fe ff       	call   ffffffff8020f976 <_RME_Pgt_Boot_Crt>
ffffffff80225547:	48 83 c4 10          	add    $0x10,%rsp
                                   Cur_Addr, 0, RME_PGT_TOP, RME_PGT_SIZE_512G, RME_PGT_NUM_512)==0);
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff8022554b:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225552:	00 
    /* Create all our 16 PDPs, and cons them into the PML4 */
    for(Count=0;Count<16;Count++)
ffffffff80225553:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8022555a:	00 
ffffffff8022555b:	eb 73                	jmp    ffffffff802255d0 <__RME_Boot+0x1b9>
    {
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff8022555d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225561:	48 8d 70 01          	lea    0x1(%rax),%rsi
ffffffff80225565:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225569:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022556d:	6a 09                	push   $0x9
ffffffff8022556f:	6a 1e                	push   $0x1e
ffffffff80225571:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff80225577:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff8022557d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225580:	48 89 f2             	mov    %rsi,%rdx
ffffffff80225583:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80225588:	48 89 c7             	mov    %rax,%rdi
ffffffff8022558b:	e8 e6 a3 fe ff       	call   ffffffff8020f976 <_RME_Pgt_Boot_Crt>
ffffffff80225590:	48 83 c4 10          	add    $0x10,%rsp
                                       Cur_Addr, 0, RME_PGT_NOM, RME_PGT_SIZE_1G, RME_PGT_NUM_512)==0);
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff80225594:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff8022559b:	00 
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4), Count,
ffffffff8022559c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802255a0:	48 83 c0 01          	add    $0x1,%rax
ffffffff802255a4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802255a7:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff802255ad:	48 89 c1             	mov    %rax,%rcx
ffffffff802255b0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802255b4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802255b8:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff802255be:	be 00 80 01 00       	mov    $0x18000,%esi
ffffffff802255c3:	48 89 c7             	mov    %rax,%rdi
ffffffff802255c6:	e8 64 aa fe ff       	call   ffffffff8021002f <_RME_Pgt_Boot_Con>
    for(Count=0;Count<16;Count++)
ffffffff802255cb:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff802255d0:	48 83 7d f0 0f       	cmpq   $0xf,-0x10(%rbp)
ffffffff802255d5:	7e 86                	jle    ffffffff8022555d <__RME_Boot+0x146>
                                       RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count)), RME_PGT_ALL_PERM)==0);
    }

    /* Create 8192 PDEs, and cons them into their respective PDPs */
    for(Count=0;Count<8192;Count++)
ffffffff802255d7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802255de:	00 
ffffffff802255df:	e9 8e 00 00 00       	jmp    ffffffff80225672 <__RME_Boot+0x25b>
    {
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff802255e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802255e8:	48 8d 70 11          	lea    0x11(%rax),%rsi
ffffffff802255ec:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802255f0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802255f4:	6a 09                	push   $0x9
ffffffff802255f6:	6a 15                	push   $0x15
ffffffff802255f8:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff802255fe:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff80225604:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225607:	48 89 f2             	mov    %rsi,%rdx
ffffffff8022560a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8022560f:	48 89 c7             	mov    %rax,%rdi
ffffffff80225612:	e8 5f a3 fe ff       	call   ffffffff8020f976 <_RME_Pgt_Boot_Crt>
ffffffff80225617:	48 83 c4 10          	add    $0x10,%rsp
                                       Cur_Addr, 0, RME_PGT_NOM, RME_PGT_SIZE_2M, RME_PGT_NUM_512)==0);
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8022561b:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225622:	00 
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff80225623:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225627:	48 83 c0 11          	add    $0x11,%rax
ffffffff8022562b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8022562e:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff80225634:	48 89 c1             	mov    %rax,%rcx
ffffffff80225637:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022563b:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80225640:	48 89 c2             	mov    %rax,%rdx
ffffffff80225643:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225647:	48 c1 f8 09          	sar    $0x9,%rax
ffffffff8022564b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8022564f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80225652:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff80225658:	48 89 c6             	mov    %rax,%rsi
ffffffff8022565b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022565f:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80225665:	48 89 c7             	mov    %rax,%rdi
ffffffff80225668:	e8 c2 a9 fe ff       	call   ffffffff8021002f <_RME_Pgt_Boot_Con>
    for(Count=0;Count<8192;Count++)
ffffffff8022566d:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225672:	48 81 7d f0 ff 1f 00 	cmpq   $0x1fff,-0x10(%rbp)
ffffffff80225679:	00 
ffffffff8022567a:	0f 8e 64 ff ff ff    	jle    ffffffff802255e4 <__RME_Boot+0x1cd>
                                       RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Count)), RME_PGT_ALL_PERM)==0);
    }

    /* Map all the Kom1 that we have into it */
    Page_Ptr=0;
ffffffff80225680:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80225687:	00 
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff80225688:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8022568f:	00 
ffffffff80225690:	e9 a1 00 00 00       	jmp    ffffffff80225736 <__RME_Boot+0x31f>
    {
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80225695:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8022569c:	00 
ffffffff8022569d:	eb 75                	jmp    ffffffff80225714 <__RME_Boot+0x2fd>
        {
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff8022569f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802256a3:	48 83 c0 06          	add    $0x6,%rax
ffffffff802256a7:	48 8b 14 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rdx
ffffffff802256ae:	80 
ffffffff802256af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802256b3:	48 01 c2             	add    %rax,%rdx
ffffffff802256b6:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff802256bd:	80 00 00 
ffffffff802256c0:	48 01 d0             	add    %rdx,%rax
ffffffff802256c3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802256c7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802256cb:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff802256d0:	48 89 c1             	mov    %rax,%rcx
ffffffff802256d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802256d7:	48 c1 e8 09          	shr    $0x9,%rax
ffffffff802256db:	48 83 c0 11          	add    $0x11,%rax
ffffffff802256df:	0f b7 c0             	movzwl %ax,%eax
ffffffff802256e2:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff802256e8:	48 89 c6             	mov    %rax,%rsi
ffffffff802256eb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802256ef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802256f3:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff802256f9:	48 89 c7             	mov    %rax,%rdi
ffffffff802256fc:	e8 a1 a6 fe ff       	call   ffffffff8020fda2 <_RME_Pgt_Boot_Add>
                                           Phys_Addr, Page_Ptr&0x1FF, RME_PGT_ALL_PERM)==0);
            Page_Ptr++;
ffffffff80225701:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80225706:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022570a:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80225710:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80225714:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80225718:	48 83 c0 26          	add    $0x26,%rax
ffffffff8022571c:	48 8b 04 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rax
ffffffff80225723:	80 
ffffffff80225724:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225728:	48 39 c2             	cmp    %rax,%rdx
ffffffff8022572b:	0f 82 6e ff ff ff    	jb     ffffffff8022569f <__RME_Boot+0x288>
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff80225731:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff80225736:	48 8b 05 33 d9 00 00 	mov    0xd933(%rip),%rax        # ffffffff80233070 <RME_X64_Layout+0x30>
ffffffff8022573d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80225741:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225744:	0f 82 4b ff ff ff    	jb     ffffffff80225695 <__RME_Boot+0x27e>
        }
    }
    RME_DBG_S("\r\nKom1 pages: 0x");
ffffffff8022574a:	48 c7 c7 94 7b 22 80 	mov    $0xffffffff80227b94,%rdi
ffffffff80225751:	e8 d7 72 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(Page_Ptr);
ffffffff80225756:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022575a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022575d:	e8 09 72 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S(", [0x0, 0x");
ffffffff80225762:	48 c7 c7 a5 7b 22 80 	mov    $0xffffffff80227ba5,%rdi
ffffffff80225769:	e8 bf 72 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff8022576e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225772:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80225776:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff8022577c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022577f:	e8 e7 71 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("]");
ffffffff80225784:	48 c7 c7 b0 7b 22 80 	mov    $0xffffffff80227bb0,%rdi
ffffffff8022578b:	e8 9d 72 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>

    /* Map the Kom2 in - don't want lookups, we know where they are. Offset by 2048 because they are mapped above 4G */
    RME_DBG_S("\r\nKom2 pages: 0x");
ffffffff80225790:	48 c7 c7 b2 7b 22 80 	mov    $0xffffffff80227bb2,%rdi
ffffffff80225797:	e8 91 72 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M));
ffffffff8022579c:	48 8b 05 ed da 00 00 	mov    0xdaed(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff802257a3:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff802257a7:	48 89 c7             	mov    %rax,%rdi
ffffffff802257aa:	e8 bc 71 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S(", [0x");
ffffffff802257af:	48 c7 c7 c3 7b 22 80 	mov    $0xffffffff80227bc3,%rdi
ffffffff802257b6:	e8 72 72 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M));
ffffffff802257bb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802257bf:	48 83 c0 01          	add    $0x1,%rax
ffffffff802257c3:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff802257c7:	48 89 c7             	mov    %rax,%rdi
ffffffff802257ca:	e8 9c 71 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S(", 0x");
ffffffff802257cf:	48 c7 c7 95 78 22 80 	mov    $0xffffffff80227895,%rdi
ffffffff802257d6:	e8 52 72 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff802257db:	48 c7 45 f0 00 08 00 	movq   $0x800,-0x10(%rbp)
ffffffff802257e2:	00 
ffffffff802257e3:	e9 bb 00 00 00       	jmp    ffffffff802258a3 <__RME_Boot+0x48c>
    {
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff802257e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802257ec:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff802257f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802257f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802257f7:	48 c1 f8 09          	sar    $0x9,%rax
ffffffff802257fb:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80225800:	48 c1 e2 09          	shl    $0x9,%rdx
ffffffff80225804:	48 01 d0             	add    %rdx,%rax
ffffffff80225807:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8022580d:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80225814:	80 
ffffffff80225815:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff8022581c:	ff 0f 00 
ffffffff8022581f:	48 21 c2             	and    %rax,%rdx
ffffffff80225822:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80225829:	80 ff ff 
ffffffff8022582c:	48 01 d0             	add    %rdx,%rax
ffffffff8022582f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff80225833:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225837:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff8022583c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80225843:	00 
ffffffff80225844:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80225848:	48 01 d0             	add    %rdx,%rax
ffffffff8022584b:	48 8b 00             	mov    (%rax),%rax
ffffffff8022584e:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff80225855:	ff 0f 00 
ffffffff80225858:	48 21 d0             	and    %rdx,%rax
ffffffff8022585b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8022585f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225863:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80225868:	48 89 c1             	mov    %rax,%rcx
ffffffff8022586b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022586f:	48 c1 e8 09          	shr    $0x9,%rax
ffffffff80225873:	48 83 c0 11          	add    $0x11,%rax
ffffffff80225877:	0f b7 c0             	movzwl %ax,%eax
ffffffff8022587a:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff80225880:	48 89 c6             	mov    %rax,%rsi
ffffffff80225883:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80225887:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022588b:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80225891:	48 89 c7             	mov    %rax,%rdi
ffffffff80225894:	e8 09 a5 fe ff       	call   ffffffff8020fda2 <_RME_Pgt_Boot_Add>
                                       Phys_Addr, Page_Ptr&0x1FF, RME_PGT_ALL_PERM)==0);
        Page_Ptr++;
ffffffff80225899:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff8022589e:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff802258a3:	48 8b 05 e6 d9 00 00 	mov    0xd9e6(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff802258aa:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff802258ae:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff802258b4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802258b8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802258bb:	0f 82 27 ff ff ff    	jb     ffffffff802257e8 <__RME_Boot+0x3d1>
    }
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff802258c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802258c5:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff802258c9:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff802258cf:	48 89 c7             	mov    %rax,%rdi
ffffffff802258d2:	e8 94 70 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("]");
ffffffff802258d7:	48 c7 c7 b0 7b 22 80 	mov    $0xffffffff80227bb0,%rdi
ffffffff802258de:	e8 4a 71 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>

    /* Activate the first process - This process cannot be deleted */
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff802258e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802258e7:	41 b8 00 80 01 00    	mov    $0x18000,%r8d
ffffffff802258ed:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff802258f2:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff802258f7:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802258fc:	48 89 c7             	mov    %rax,%rdi
ffffffff802258ff:	e8 e4 d7 fe ff       	call   ffffffff802130e8 <_RME_Prc_Boot_Crt>
                                  RME_BOOT_INIT_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4))==0);

    /* Create the initial kernel function capability */
    RME_ASSERT(_RME_Kfn_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_KERN)==0);
ffffffff80225904:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225908:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8022590d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225912:	48 89 c7             	mov    %rax,%rdi
ffffffff80225915:	e8 38 52 ff ff       	call   ffffffff8021ab52 <_RME_Kfn_Boot_Crt>

    /* Create a capability table for initial kernel memory capabilities. We need a few for Kom1, and another one for Kom2 */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_KOM, Cur_Addr, RME_X64_KOM1_MAXSEGS+1)==0);
ffffffff8022591a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022591e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225922:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff80225928:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022592b:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff80225930:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225935:	48 89 c7             	mov    %rax,%rdi
ffffffff80225938:	e8 39 82 fe ff       	call   ffffffff8020db76 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff8022593d:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225944:	00 
    /* Create Kom1 capabilities - can create page tables here */
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff80225945:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8022594c:	00 
ffffffff8022594d:	eb 57                	jmp    ffffffff802259a6 <__RME_Boot+0x58f>
    {
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff8022594f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225953:	48 83 c0 06          	add    $0x6,%rax
ffffffff80225957:	48 8b 14 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rdx
ffffffff8022595e:	80 
ffffffff8022595f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225963:	48 83 c0 26          	add    $0x26,%rax
ffffffff80225967:	48 8b 04 c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rax
ffffffff8022596e:	80 
ffffffff8022596f:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
ffffffff80225973:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225977:	48 83 c0 06          	add    $0x6,%rax
ffffffff8022597b:	48 8b 0c c5 48 30 23 	mov    -0x7fdccfb8(,%rax,8),%rcx
ffffffff80225982:	80 
ffffffff80225983:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225987:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022598b:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff80225991:	49 89 f0             	mov    %rsi,%r8
ffffffff80225994:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80225999:	48 89 c7             	mov    %rax,%rdi
ffffffff8022599c:	e8 65 cf fe ff       	call   ffffffff80212906 <_RME_Kom_Boot_Crt>
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff802259a1:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff802259a6:	48 8b 05 c3 d6 00 00 	mov    0xd6c3(%rip),%rax        # ffffffff80233070 <RME_X64_Layout+0x30>
ffffffff802259ad:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802259b1:	48 39 c2             	cmp    %rax,%rdx
ffffffff802259b4:	72 99                	jb     ffffffff8022594f <__RME_Boot+0x538>
                                      RME_X64_Layout.Kom1_Start[Count],
                                      RME_X64_Layout.Kom1_Start[Count]+RME_X64_Layout.Kom1_Size[Count],
                                      RME_KOM_FLAG_ALL)==0);
    }
    /* Create Kom2 capability - cannot create page tables here */
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff802259b6:	48 8b 15 cb d8 00 00 	mov    0xd8cb(%rip),%rdx        # ffffffff80233288 <RME_X64_Layout+0x248>
ffffffff802259bd:	48 8b 05 cc d8 00 00 	mov    0xd8cc(%rip),%rax        # ffffffff80233290 <RME_X64_Layout+0x250>
ffffffff802259c4:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff802259c8:	48 8b 15 b9 d8 00 00 	mov    0xd8b9(%rip),%rdx        # ffffffff80233288 <RME_X64_Layout+0x248>
ffffffff802259cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802259d3:	41 b9 0d 00 00 00    	mov    $0xd,%r9d
ffffffff802259d9:	49 89 c8             	mov    %rcx,%r8
ffffffff802259dc:	48 89 d1             	mov    %rdx,%rcx
ffffffff802259df:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff802259e4:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff802259e9:	48 89 c7             	mov    %rax,%rdi
ffffffff802259ec:	e8 15 cf fe ff       	call   ffffffff80212906 <_RME_Kom_Boot_Crt>
                                  RME_X64_Layout.Kom2_Start,
                                  RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size,
                                  RME_KOM_FLAG_CPT|RME_KOM_FLAG_THD|RME_KOM_FLAG_INV)==0);

    /* Create the initial kernel endpoints for timer ticks */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff802259f1:	48 8b 0d b0 d8 00 00 	mov    0xd8b0(%rip),%rcx        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff802259f8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802259fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a00:	49 89 c8             	mov    %rcx,%r8
ffffffff80225a03:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225a06:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff80225a0b:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225a10:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a13:	e8 5e 81 fe ff       	call   ffffffff8020db76 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225a18:	48 8b 05 89 d8 00 00 	mov    0xd889(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225a1f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225a23:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225a29:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225a2f:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225a33:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225a3a:	00 
ffffffff80225a3b:	eb 51                	jmp    ffffffff80225a8e <__RME_Boot+0x677>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225a3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225a41:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a44:	e8 bd e8 ff ff       	call   ffffffff80224306 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225a49:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff80225a4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225a51:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225a55:	48 89 c2             	mov    %rax,%rdx
ffffffff80225a58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a5c:	48 05 80 01 00 00    	add    $0x180,%rax
ffffffff80225a62:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225a66:	48 01 d0             	add    %rdx,%rax
ffffffff80225a69:	48 89 c2             	mov    %rax,%rdx
ffffffff80225a6c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80225a70:	48 89 50 10          	mov    %rdx,0x10(%rax)
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff80225a74:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225a78:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a7c:	be 06 00 00 00       	mov    $0x6,%esi
ffffffff80225a81:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a84:	e8 e1 29 ff ff       	call   ffffffff8021846a <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225a89:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225a8e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225a92:	48 8b 05 0f d8 00 00 	mov    0xd80f(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225a99:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225a9c:	72 9f                	jb     ffffffff80225a3d <__RME_Boot+0x626>
    }

    /* Create the initial kernel endpoints for all other interrupts */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80225a9e:	48 8b 0d 03 d8 00 00 	mov    0xd803(%rip),%rcx        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225aa5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225aa9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225aad:	49 89 c8             	mov    %rcx,%r8
ffffffff80225ab0:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225ab3:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80225ab8:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225abd:	48 89 c7             	mov    %rax,%rdi
ffffffff80225ac0:	e8 b1 80 fe ff       	call   ffffffff8020db76 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225ac5:	48 8b 05 dc d7 00 00 	mov    0xd7dc(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225acc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225ad0:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225ad6:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225adc:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225ae0:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225ae7:	00 
ffffffff80225ae8:	eb 51                	jmp    ffffffff80225b3b <__RME_Boot+0x724>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225aea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225aee:	48 89 c7             	mov    %rax,%rdi
ffffffff80225af1:	e8 10 e8 ff ff       	call   ffffffff80224306 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225af6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff80225afa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225afe:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225b02:	48 89 c2             	mov    %rax,%rdx
ffffffff80225b05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225b09:	48 05 c0 01 00 00    	add    $0x1c0,%rax
ffffffff80225b0f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225b13:	48 01 d0             	add    %rdx,%rax
ffffffff80225b16:	48 89 c2             	mov    %rax,%rdx
ffffffff80225b19:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80225b1d:	48 89 50 18          	mov    %rdx,0x18(%rax)
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff80225b21:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225b25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225b29:	be 07 00 00 00       	mov    $0x7,%esi
ffffffff80225b2e:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b31:	e8 34 29 ff ff       	call   ffffffff8021846a <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225b36:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225b3b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225b3f:	48 8b 05 62 d7 00 00 	mov    0xd762(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225b46:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225b49:	72 9f                	jb     ffffffff80225aea <__RME_Boot+0x6d3>
    }

    /* Activate the first thread, and set its priority */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80225b4b:	48 8b 0d 56 d7 00 00 	mov    0xd756(%rip),%rcx        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225b52:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225b56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225b5a:	49 89 c8             	mov    %rcx,%r8
ffffffff80225b5d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225b60:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80225b65:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225b6a:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b6d:	e8 04 80 fe ff       	call   ffffffff8020db76 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225b72:	48 8b 05 2f d7 00 00 	mov    0xd72f(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225b79:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225b7d:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225b83:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225b89:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225b8d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225b94:	00 
ffffffff80225b95:	eb 4f                	jmp    ffffffff80225be6 <__RME_Boot+0x7cf>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225b97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225b9b:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b9e:	e8 63 e7 ff ff       	call   ffffffff80224306 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225ba3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff80225ba7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80225bab:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225baf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225bb3:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80225bb7:	ff 75 d0             	push   -0x30(%rbp)
ffffffff80225bba:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff80225bc0:	49 89 c8             	mov    %rcx,%r8
ffffffff80225bc3:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80225bc8:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80225bcd:	48 89 c7             	mov    %rax,%rdi
ffffffff80225bd0:	e8 7a f1 fe ff       	call   ffffffff80214d4f <_RME_Thd_Boot_Crt>
ffffffff80225bd5:	48 83 c4 10          	add    $0x10,%rsp
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_THD_SIZE(Count));
ffffffff80225bd9:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225be0:	00 
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225be1:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225be6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225bea:	48 8b 05 b7 d6 00 00 	mov    0xd6b7(%rip),%rax        # ffffffff802332a8 <RME_X64_Num_CPU>
ffffffff80225bf1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225bf4:	72 a1                	jb     ffffffff80225b97 <__RME_Boot+0x780>
    }

    RME_DBG_S("\r\nKot registration end offset: 0x");
ffffffff80225bf6:	48 c7 c7 d0 7b 22 80 	mov    $0xffffffff80227bd0,%rdi
ffffffff80225bfd:	e8 2b 6e fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80225c02:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80225c09:	80 00 00 
ffffffff80225c0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225c10:	48 01 d0             	add    %rdx,%rax
ffffffff80225c13:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80225c17:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80225c1b:	48 89 c7             	mov    %rax,%rdi
ffffffff80225c1e:	e8 48 6d fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\r\nKom1 frontier: 0x");
ffffffff80225c23:	48 c7 c7 f2 7b 22 80 	mov    $0xffffffff80227bf2,%rdi
ffffffff80225c2a:	e8 fe 6d fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_H(Cur_Addr);
ffffffff80225c2f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225c33:	48 89 c7             	mov    %rax,%rdi
ffffffff80225c36:	e8 30 6d fe ff       	call   ffffffff8020c96b <RME_Hex_Print>

    /* Print sizes and halt */
    RME_DBG_S("\r\nThread object size: ");
ffffffff80225c3b:	48 c7 c7 06 7c 22 80 	mov    $0xffffffff80227c06,%rdi
ffffffff80225c42:	e8 e6 6d fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Thd_Struct)/sizeof(rme_ptr_t));
ffffffff80225c47:	bf 16 00 00 00       	mov    $0x16,%edi
ffffffff80225c4c:	e8 e2 6b fe ff       	call   ffffffff8020c833 <RME_Int_Print>
    RME_DBG_S("\r\nInvocation object size: ");
ffffffff80225c51:	48 c7 c7 1d 7c 22 80 	mov    $0xffffffff80227c1d,%rdi
ffffffff80225c58:	e8 d0 6d fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Inv_Struct)/sizeof(rme_ptr_t));
ffffffff80225c5d:	bf 09 00 00 00       	mov    $0x9,%edi
ffffffff80225c62:	e8 cc 6b fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    /* Initialize the timer and start its interrupt routing */
    RME_DBG_S("\r\nTimer init\r\n");
ffffffff80225c67:	48 c7 c7 38 7c 22 80 	mov    $0xffffffff80227c38,%rdi
ffffffff80225c6e:	e8 ba 6d fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    __RME_X64_Timer_Init();
ffffffff80225c73:	e8 66 ed ff ff       	call   ffffffff802249de <__RME_X64_Timer_Init>
    __RME_X64_IOAPIC_Int_Enable(2,0);
ffffffff80225c78:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225c7d:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff80225c82:	e8 23 e9 ff ff       	call   ffffffff802245aa <__RME_X64_IOAPIC_Int_Enable>
    /* Change page tables */
    __RME_Pgt_Set(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80225c87:	e8 b3 5b fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80225c8c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80225c90:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80225c94:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80225c98:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225c9c:	48 89 c7             	mov    %rax,%rdi
ffffffff80225c9f:	e8 2c 0b 00 00       	call   ffffffff802267d0 <__RME_Pgt_Set>

    /* Load the init process to address 0x00 - It should be smaller than 2MB */
    extern const unsigned char UVM_Init[];
    _RME_Memcpy(0,(void*)UVM_Init,RME_POW2(RME_PGT_SIZE_2M));
ffffffff80225ca4:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff80225ca9:	48 c7 c6 00 90 22 80 	mov    $0xffffffff80229000,%rsi
ffffffff80225cb0:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225cb5:	e8 33 72 fe ff       	call   ffffffff8020ceed <_RME_Memcpy>

    /* Now other non-booting processors may proceed and go into their threads */
    RME_X64_CPU_Cnt=0;
ffffffff80225cba:	48 c7 05 eb d5 00 00 	movq   $0x0,0xd5eb(%rip)        # ffffffff802332b0 <RME_X64_CPU_Cnt>
ffffffff80225cc1:	00 00 00 00 
    /* Boot into the init thread */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff80225cc5:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80225cca:	be 00 08 20 00       	mov    $0x200800,%esi
ffffffff80225ccf:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225cd4:	e8 e7 5b fe ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
    return 0;
ffffffff80225cd9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80225cde:	c9                   	leave
ffffffff80225cdf:	c3                   	ret

ffffffff80225ce0 <__RME_Reboot>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Reboot(void)
{
ffffffff80225ce0:	f3 0f 1e fa          	endbr64
ffffffff80225ce4:	55                   	push   %rbp
ffffffff80225ce5:	48 89 e5             	mov    %rsp,%rbp
    /* Currently we cannot parse th FADT yet. We need these info to shutdown the machine */
    /* outportb(FADT->ResetReg.Address, FADT->ResetValue); */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff80225ce8:	90                   	nop
ffffffff80225ce9:	5d                   	pop    %rbp
ffffffff80225cea:	c3                   	ret

ffffffff80225ceb <__RME_Shutdown>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Shutdown(void)
{
ffffffff80225ceb:	f3 0f 1e fa          	endbr64
ffffffff80225cef:	55                   	push   %rbp
ffffffff80225cf0:	48 89 e5             	mov    %rsp,%rbp
    /* Currently we cannot parse th DSDT yet. We need these info to shutdown the machine */
    /* outw(PM1a_CNT,SLP_TYPa|SLP_EN) */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff80225cf3:	90                   	nop
ffffffff80225cf4:	5d                   	pop    %rbp
ffffffff80225cf5:	c3                   	ret

ffffffff80225cf6 <__RME_Get_Syscall_Param>:
              rme_ptr_t* Capid - The capability ID number.
              rme_ptr_t* Param - The parameters.
Return      : None.
******************************************************************************/
void __RME_Get_Syscall_Param(struct RME_Reg_Struct* Reg, rme_ptr_t* Svc, rme_ptr_t* Capid, rme_ptr_t* Param)
{
ffffffff80225cf6:	f3 0f 1e fa          	endbr64
ffffffff80225cfa:	55                   	push   %rbp
ffffffff80225cfb:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225cfe:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80225d02:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225d06:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80225d0a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80225d0e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    *Svc=(Reg->RDI)>>32;
ffffffff80225d12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d16:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80225d1a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80225d1e:	48 89 c2             	mov    %rax,%rdx
ffffffff80225d21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225d25:	48 89 10             	mov    %rdx,(%rax)
    *Capid=(Reg->RDI)&0xFFFFFFFF;
ffffffff80225d28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d2c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80225d30:	89 c2                	mov    %eax,%edx
ffffffff80225d32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80225d36:	48 89 10             	mov    %rdx,(%rax)
    Param[0]=Reg->RSI;
ffffffff80225d39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d3d:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80225d41:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225d45:	48 89 10             	mov    %rdx,(%rax)
    Param[1]=Reg->RDX;
ffffffff80225d48:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225d4c:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80225d50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d54:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225d58:	48 89 02             	mov    %rax,(%rdx)
    Param[2]=Reg->R8;
ffffffff80225d5b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225d5f:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff80225d63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d67:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80225d6b:	48 89 02             	mov    %rax,(%rdx)
}
ffffffff80225d6e:	90                   	nop
ffffffff80225d6f:	c9                   	leave
ffffffff80225d70:	c3                   	ret

ffffffff80225d71 <__RME_Set_Syscall_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Syscall_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff80225d71:	f3 0f 1e fa          	endbr64
ffffffff80225d75:	55                   	push   %rbp
ffffffff80225d76:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225d79:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225d7d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225d81:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff80225d85:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225d89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d8d:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff80225d90:	90                   	nop
ffffffff80225d91:	c9                   	leave
ffffffff80225d92:	c3                   	ret

ffffffff80225d93 <__RME_Thd_Reg_Init>:
              rme_ptr_t Param - The parameter to pass to it.
Output      : struct RME_Reg_Struct* Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Init(rme_ptr_t Attr,rme_ptr_t Entry, rme_ptr_t Stack, rme_ptr_t Param, struct RME_Reg_Struct* Reg)
{
ffffffff80225d93:	f3 0f 1e fa          	endbr64
ffffffff80225d97:	55                   	push   %rbp
ffffffff80225d98:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225d9b:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80225d9f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225da3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80225da7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80225dab:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff80225daf:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    /* We use the SYSRET path on creation if possible */
    Reg->INT_NUM=0x10000;
ffffffff80225db3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225db7:	48 c7 40 78 00 00 01 	movq   $0x10000,0x78(%rax)
ffffffff80225dbe:	00 
    Reg->ERROR_CODE=0;
ffffffff80225dbf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225dc3:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
ffffffff80225dca:	00 00 00 00 
    Reg->RIP=Entry;
ffffffff80225dce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225dd2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225dd6:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff80225ddd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225de1:	48 c7 80 90 00 00 00 	movq   $0x2b,0x90(%rax)
ffffffff80225de8:	2b 00 00 00 
    /* IOPL 3, IF */
    Reg->RFLAGS=0x3200;
ffffffff80225dec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225df0:	48 c7 80 98 00 00 00 	movq   $0x3200,0x98(%rax)
ffffffff80225df7:	00 32 00 00 
    Reg->RSP=Stack;
ffffffff80225dfb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225dff:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80225e03:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
    Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff80225e0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225e0e:	48 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%rax)
ffffffff80225e15:	23 00 00 00 
    /* Pass the parameter */
    Reg->RDI=Param;
ffffffff80225e19:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225e1d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80225e21:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff80225e25:	90                   	nop
ffffffff80225e26:	c9                   	leave
ffffffff80225e27:	c3                   	ret

ffffffff80225e28 <__RME_Thd_Reg_Copy>:
Input       : struct RME_Reg_Struct* Src - The source register set.
Output      : struct RME_Reg_Struct* Dst - The destination register set.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Copy(struct RME_Reg_Struct* Dst, struct RME_Reg_Struct* Src)
{
ffffffff80225e28:	f3 0f 1e fa          	endbr64
ffffffff80225e2c:	55                   	push   %rbp
ffffffff80225e2d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225e30:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225e34:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225e38:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Make sure that the ordering is the same so the compiler can optimize */
    Dst->RAX=Src->RAX;
ffffffff80225e3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e40:	48 8b 10             	mov    (%rax),%rdx
ffffffff80225e43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e47:	48 89 10             	mov    %rdx,(%rax)
    Dst->RBX=Src->RBX;
ffffffff80225e4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e4e:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80225e52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e56:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Dst->RCX=Src->RCX;
ffffffff80225e5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e5e:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80225e62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e66:	48 89 50 10          	mov    %rdx,0x10(%rax)
    Dst->RDX=Src->RDX;
ffffffff80225e6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e6e:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff80225e72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e76:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Dst->RSI=Src->RSI;
ffffffff80225e7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e7e:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80225e82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e86:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Dst->RDI=Src->RDI;
ffffffff80225e8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e8e:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80225e92:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e96:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Dst->RBP=Src->RBP;
ffffffff80225e9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e9e:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80225ea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ea6:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Dst->R8=Src->R8;
ffffffff80225eaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225eae:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff80225eb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225eb6:	48 89 50 38          	mov    %rdx,0x38(%rax)
    Dst->R9=Src->R9;
ffffffff80225eba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ebe:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80225ec2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ec6:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Dst->R10=Src->R10;
ffffffff80225eca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ece:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80225ed2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ed6:	48 89 50 48          	mov    %rdx,0x48(%rax)
    Dst->R11=Src->R11;
ffffffff80225eda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ede:	48 8b 50 50          	mov    0x50(%rax),%rdx
ffffffff80225ee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ee6:	48 89 50 50          	mov    %rdx,0x50(%rax)
    Dst->R12=Src->R12;
ffffffff80225eea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225eee:	48 8b 50 58          	mov    0x58(%rax),%rdx
ffffffff80225ef2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ef6:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Dst->R13=Src->R13;
ffffffff80225efa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225efe:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80225f02:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f06:	48 89 50 60          	mov    %rdx,0x60(%rax)
    Dst->R14=Src->R14;
ffffffff80225f0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f0e:	48 8b 50 68          	mov    0x68(%rax),%rdx
ffffffff80225f12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f16:	48 89 50 68          	mov    %rdx,0x68(%rax)
    Dst->R15=Src->R15;
ffffffff80225f1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f1e:	48 8b 50 70          	mov    0x70(%rax),%rdx
ffffffff80225f22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f26:	48 89 50 70          	mov    %rdx,0x70(%rax)
    /* Don't worry about user modifying INTNUM. If he or she did that it will corrupt userspace */
    Dst->INT_NUM=Src->INT_NUM;
ffffffff80225f2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f2e:	48 8b 50 78          	mov    0x78(%rax),%rdx
ffffffff80225f32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f36:	48 89 50 78          	mov    %rdx,0x78(%rax)
    Dst->ERROR_CODE=Src->ERROR_CODE;
ffffffff80225f3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f3e:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
ffffffff80225f45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f49:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
    /* This will always be canonical upon SYSRET, because we will truncate in on return */
    Dst->RIP=Src->RIP;
ffffffff80225f50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f54:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
ffffffff80225f5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f5f:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Dst->CS=Src->CS;
ffffffff80225f66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f6a:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
ffffffff80225f71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f75:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    Dst->RFLAGS=Src->RFLAGS;
ffffffff80225f7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f80:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80225f87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f8b:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    Dst->RSP=Src->RSP;
ffffffff80225f92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f96:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
ffffffff80225f9d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fa1:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
    Dst->SS=Src->SS;
ffffffff80225fa8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fac:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
ffffffff80225fb3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fb7:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
ffffffff80225fbe:	90                   	nop
ffffffff80225fbf:	c9                   	leave
ffffffff80225fc0:	c3                   	ret

ffffffff80225fc1 <__RME_Thd_Cop_Init>:
Input       : struct RME_Reg_Struct* Reg - The register struct to help initialize the coprocessor.
Output      : struct RME_Reg_Cop_Struct* Cop_Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Init(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80225fc1:	f3 0f 1e fa          	endbr64
ffffffff80225fc5:	55                   	push   %rbp
ffffffff80225fc6:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225fc9:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225fcd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225fd1:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Empty function, return immediately. The FPU contents is not predictable */
}
ffffffff80225fd5:	90                   	nop
ffffffff80225fd6:	c9                   	leave
ffffffff80225fd7:	c3                   	ret

ffffffff80225fd8 <__RME_Thd_Cop_Save>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Save(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80225fd8:	f3 0f 1e fa          	endbr64
ffffffff80225fdc:	55                   	push   %rbp
ffffffff80225fdd:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225fe0:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225fe4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225fe8:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not used for now */
}
ffffffff80225fec:	90                   	nop
ffffffff80225fed:	c9                   	leave
ffffffff80225fee:	c3                   	ret

ffffffff80225fef <__RME_Thd_Cop_Restore>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Restore(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80225fef:	f3 0f 1e fa          	endbr64
ffffffff80225ff3:	55                   	push   %rbp
ffffffff80225ff4:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225ff7:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225ffb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225fff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not used for now */
}
ffffffff80226003:	90                   	nop
ffffffff80226004:	c9                   	leave
ffffffff80226005:	c3                   	ret

ffffffff80226006 <__RME_Inv_Reg_Save>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Iret_Struct* Ret - The invocation return register context.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Save(struct RME_Iret_Struct* Ret, struct RME_Reg_Struct* Reg)
{
ffffffff80226006:	f3 0f 1e fa          	endbr64
ffffffff8022600a:	55                   	push   %rbp
ffffffff8022600b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022600e:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226012:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226016:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Ret->RIP=Reg->RIP;
ffffffff8022601a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022601e:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
ffffffff80226025:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226029:	48 89 10             	mov    %rdx,(%rax)
    Ret->RSP=Reg->RSP;
ffffffff8022602c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226030:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
ffffffff80226037:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022603b:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff8022603f:	90                   	nop
ffffffff80226040:	c9                   	leave
ffffffff80226041:	c3                   	ret

ffffffff80226042 <__RME_Inv_Reg_Restore>:
Input       : struct RME_Iret_Struct* Ret - The invocation return register context.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Restore(struct RME_Reg_Struct* Reg, struct RME_Iret_Struct* Ret)
{
ffffffff80226042:	f3 0f 1e fa          	endbr64
ffffffff80226046:	55                   	push   %rbp
ffffffff80226047:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022604a:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022604e:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226052:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RIP=Ret->RIP;
ffffffff80226056:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022605a:	48 8b 10             	mov    (%rax),%rdx
ffffffff8022605d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226061:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Reg->RSP=Ret->RSP;
ffffffff80226068:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022606c:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80226070:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226074:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
}
ffffffff8022607b:	90                   	nop
ffffffff8022607c:	c9                   	leave
ffffffff8022607d:	c3                   	ret

ffffffff8022607e <__RME_Set_Inv_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Inv_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff8022607e:	f3 0f 1e fa          	endbr64
ffffffff80226082:	55                   	push   %rbp
ffffffff80226083:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226086:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022608a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022608e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff80226092:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226096:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022609a:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff8022609e:	90                   	nop
ffffffff8022609f:	c9                   	leave
ffffffff802260a0:	c3                   	ret

ffffffff802260a1 <write_string>:
/* End Function:__RME_Set_Inv_Retval *****************************************/

/* Crap for test */
void write_string( int colour, const char *string, rme_ptr_t pos)
{
ffffffff802260a1:	f3 0f 1e fa          	endbr64
ffffffff802260a5:	55                   	push   %rbp
ffffffff802260a6:	48 89 e5             	mov    %rsp,%rbp
ffffffff802260a9:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff802260ad:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff802260b0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff802260b4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff802260b8:	48 ba 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rdx
ffffffff802260bf:	80 ff ff 
ffffffff802260c2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802260c6:	48 01 d0             	add    %rdx,%rax
ffffffff802260c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while( *string != 0 )
ffffffff802260cd:	eb 2e                	jmp    ffffffff802260fd <write_string+0x5c>
    {
        *video++ = *string++;
ffffffff802260cf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802260d3:	48 8d 42 01          	lea    0x1(%rdx),%rax
ffffffff802260d7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802260db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802260df:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff802260e3:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff802260e7:	0f b6 12             	movzbl (%rdx),%edx
ffffffff802260ea:	88 10                	mov    %dl,(%rax)
        *video++ = colour;
ffffffff802260ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802260f0:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff802260f4:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff802260f8:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff802260fb:	88 10                	mov    %dl,(%rax)
    while( *string != 0 )
ffffffff802260fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226101:	0f b6 00             	movzbl (%rax),%eax
ffffffff80226104:	84 c0                	test   %al,%al
ffffffff80226106:	75 c7                	jne    ffffffff802260cf <write_string+0x2e>
    }
}
ffffffff80226108:	90                   	nop
ffffffff80226109:	90                   	nop
ffffffff8022610a:	c9                   	leave
ffffffff8022610b:	c3                   	ret

ffffffff8022610c <NDBG>:

void NDBG(void)
{
ffffffff8022610c:	f3 0f 1e fa          	endbr64
ffffffff80226110:	55                   	push   %rbp
ffffffff80226111:	48 89 e5             	mov    %rsp,%rbp
    write_string( 0x07, "Here", 0);
ffffffff80226114:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226119:	48 c7 c6 47 7c 22 80 	mov    $0xffffffff80227c47,%rsi
ffffffff80226120:	bf 07 00 00 00       	mov    $0x7,%edi
ffffffff80226125:	e8 77 ff ff ff       	call   ffffffff802260a1 <write_string>
}
ffffffff8022612a:	90                   	nop
ffffffff8022612b:	5d                   	pop    %rbp
ffffffff8022612c:	c3                   	ret

ffffffff8022612d <__RME_Kern_Func_Handler>:
Output      : None.
Return      : rme_ret_t - The value that the function returned.
******************************************************************************/
rme_ret_t __RME_Kern_Func_Handler(struct RME_Cap_Cpt* Cpt, struct RME_Reg_Struct* Reg,
                                  rme_ptr_t Func_ID, rme_ptr_t Sub_ID, rme_ptr_t Param1, rme_ptr_t Param2)
{
ffffffff8022612d:	f3 0f 1e fa          	endbr64
ffffffff80226131:	55                   	push   %rbp
ffffffff80226132:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226135:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80226139:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8022613d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226141:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80226145:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff80226149:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff8022614d:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    /* Now always call the HALT */
    char String[16];

    String[0]=Param1/10000000+'0';
ffffffff80226151:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226155:	48 ba bd 42 7a e5 d5 	movabs $0xd6bf94d5e57a42bd,%rdx
ffffffff8022615c:	94 bf d6 
ffffffff8022615f:	48 f7 e2             	mul    %rdx
ffffffff80226162:	48 89 d0             	mov    %rdx,%rax
ffffffff80226165:	48 c1 e8 17          	shr    $0x17,%rax
ffffffff80226169:	83 c0 30             	add    $0x30,%eax
ffffffff8022616c:	88 45 f0             	mov    %al,-0x10(%rbp)
    String[1]=(Param1/1000000)%10+'0';
ffffffff8022616f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226173:	48 ba db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rdx
ffffffff8022617a:	de 1b 43 
ffffffff8022617d:	48 f7 e2             	mul    %rdx
ffffffff80226180:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226183:	48 c1 e9 12          	shr    $0x12,%rcx
ffffffff80226187:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff8022618e:	cc cc cc 
ffffffff80226191:	48 89 c8             	mov    %rcx,%rax
ffffffff80226194:	48 f7 e2             	mul    %rdx
ffffffff80226197:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8022619b:	48 89 d0             	mov    %rdx,%rax
ffffffff8022619e:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802261a2:	48 01 d0             	add    %rdx,%rax
ffffffff802261a5:	48 01 c0             	add    %rax,%rax
ffffffff802261a8:	48 29 c1             	sub    %rax,%rcx
ffffffff802261ab:	48 89 ca             	mov    %rcx,%rdx
ffffffff802261ae:	89 d0                	mov    %edx,%eax
ffffffff802261b0:	83 c0 30             	add    $0x30,%eax
ffffffff802261b3:	88 45 f1             	mov    %al,-0xf(%rbp)
    String[2]=(Param1/100000)%10+'0';
ffffffff802261b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802261ba:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff802261be:	48 ba 43 78 b4 71 c4 	movabs $0xa7c5ac471b47843,%rdx
ffffffff802261c5:	5a 7c 0a 
ffffffff802261c8:	48 f7 e2             	mul    %rdx
ffffffff802261cb:	48 89 d1             	mov    %rdx,%rcx
ffffffff802261ce:	48 c1 e9 07          	shr    $0x7,%rcx
ffffffff802261d2:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802261d9:	cc cc cc 
ffffffff802261dc:	48 89 c8             	mov    %rcx,%rax
ffffffff802261df:	48 f7 e2             	mul    %rdx
ffffffff802261e2:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802261e6:	48 89 d0             	mov    %rdx,%rax
ffffffff802261e9:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802261ed:	48 01 d0             	add    %rdx,%rax
ffffffff802261f0:	48 01 c0             	add    %rax,%rax
ffffffff802261f3:	48 29 c1             	sub    %rax,%rcx
ffffffff802261f6:	48 89 ca             	mov    %rcx,%rdx
ffffffff802261f9:	89 d0                	mov    %edx,%eax
ffffffff802261fb:	83 c0 30             	add    $0x30,%eax
ffffffff802261fe:	88 45 f2             	mov    %al,-0xe(%rbp)
    String[3]=(Param1/10000)%10+'0';
ffffffff80226201:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226205:	48 ba 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rdx
ffffffff8022620c:	c5 6d 34 
ffffffff8022620f:	48 f7 e2             	mul    %rdx
ffffffff80226212:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226215:	48 c1 e9 0b          	shr    $0xb,%rcx
ffffffff80226219:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226220:	cc cc cc 
ffffffff80226223:	48 89 c8             	mov    %rcx,%rax
ffffffff80226226:	48 f7 e2             	mul    %rdx
ffffffff80226229:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8022622d:	48 89 d0             	mov    %rdx,%rax
ffffffff80226230:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226234:	48 01 d0             	add    %rdx,%rax
ffffffff80226237:	48 01 c0             	add    %rax,%rax
ffffffff8022623a:	48 29 c1             	sub    %rax,%rcx
ffffffff8022623d:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226240:	89 d0                	mov    %edx,%eax
ffffffff80226242:	83 c0 30             	add    $0x30,%eax
ffffffff80226245:	88 45 f3             	mov    %al,-0xd(%rbp)
    String[4]=(Param1/1000)%10+'0';
ffffffff80226248:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8022624c:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80226250:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
ffffffff80226257:	9b c4 20 
ffffffff8022625a:	48 f7 e2             	mul    %rdx
ffffffff8022625d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226260:	48 c1 e9 04          	shr    $0x4,%rcx
ffffffff80226264:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff8022626b:	cc cc cc 
ffffffff8022626e:	48 89 c8             	mov    %rcx,%rax
ffffffff80226271:	48 f7 e2             	mul    %rdx
ffffffff80226274:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226278:	48 89 d0             	mov    %rdx,%rax
ffffffff8022627b:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8022627f:	48 01 d0             	add    %rdx,%rax
ffffffff80226282:	48 01 c0             	add    %rax,%rax
ffffffff80226285:	48 29 c1             	sub    %rax,%rcx
ffffffff80226288:	48 89 ca             	mov    %rcx,%rdx
ffffffff8022628b:	89 d0                	mov    %edx,%eax
ffffffff8022628d:	83 c0 30             	add    $0x30,%eax
ffffffff80226290:	88 45 f4             	mov    %al,-0xc(%rbp)
    String[5]=(Param1/100)%10+'0';
ffffffff80226293:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226297:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff8022629b:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
ffffffff802262a2:	c2 f5 28 
ffffffff802262a5:	48 f7 e2             	mul    %rdx
ffffffff802262a8:	48 89 d1             	mov    %rdx,%rcx
ffffffff802262ab:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff802262af:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802262b6:	cc cc cc 
ffffffff802262b9:	48 89 c8             	mov    %rcx,%rax
ffffffff802262bc:	48 f7 e2             	mul    %rdx
ffffffff802262bf:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802262c3:	48 89 d0             	mov    %rdx,%rax
ffffffff802262c6:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802262ca:	48 01 d0             	add    %rdx,%rax
ffffffff802262cd:	48 01 c0             	add    %rax,%rax
ffffffff802262d0:	48 29 c1             	sub    %rax,%rcx
ffffffff802262d3:	48 89 ca             	mov    %rcx,%rdx
ffffffff802262d6:	89 d0                	mov    %edx,%eax
ffffffff802262d8:	83 c0 30             	add    $0x30,%eax
ffffffff802262db:	88 45 f5             	mov    %al,-0xb(%rbp)
    String[6]=(Param1/10)%10+'0';
ffffffff802262de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802262e2:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802262e9:	cc cc cc 
ffffffff802262ec:	48 f7 e2             	mul    %rdx
ffffffff802262ef:	48 89 d1             	mov    %rdx,%rcx
ffffffff802262f2:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff802262f6:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802262fd:	cc cc cc 
ffffffff80226300:	48 89 c8             	mov    %rcx,%rax
ffffffff80226303:	48 f7 e2             	mul    %rdx
ffffffff80226306:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8022630a:	48 89 d0             	mov    %rdx,%rax
ffffffff8022630d:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226311:	48 01 d0             	add    %rdx,%rax
ffffffff80226314:	48 01 c0             	add    %rax,%rax
ffffffff80226317:	48 29 c1             	sub    %rax,%rcx
ffffffff8022631a:	48 89 ca             	mov    %rcx,%rdx
ffffffff8022631d:	89 d0                	mov    %edx,%eax
ffffffff8022631f:	83 c0 30             	add    $0x30,%eax
ffffffff80226322:	88 45 f6             	mov    %al,-0xa(%rbp)
    String[7]=(Param1)%10+'0';
ffffffff80226325:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80226329:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226330:	cc cc cc 
ffffffff80226333:	48 89 c8             	mov    %rcx,%rax
ffffffff80226336:	48 f7 e2             	mul    %rdx
ffffffff80226339:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8022633d:	48 89 d0             	mov    %rdx,%rax
ffffffff80226340:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226344:	48 01 d0             	add    %rdx,%rax
ffffffff80226347:	48 01 c0             	add    %rax,%rax
ffffffff8022634a:	48 29 c1             	sub    %rax,%rcx
ffffffff8022634d:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226350:	89 d0                	mov    %edx,%eax
ffffffff80226352:	83 c0 30             	add    $0x30,%eax
ffffffff80226355:	88 45 f7             	mov    %al,-0x9(%rbp)
    String[8]='\0';
ffffffff80226358:	c6 45 f8 00          	movb   $0x0,-0x8(%rbp)
    write_string(Func_ID, (const char *)String, Sub_ID);
ffffffff8022635c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226360:	89 c1                	mov    %eax,%ecx
ffffffff80226362:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80226366:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
ffffffff8022636a:	48 89 c6             	mov    %rax,%rsi
ffffffff8022636d:	89 cf                	mov    %ecx,%edi
ffffffff8022636f:	e8 2d fd ff ff       	call   ffffffff802260a1 <write_string>

    //__RME_X64_Halt();
    return 0;
ffffffff80226374:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226379:	c9                   	leave
ffffffff8022637a:	c3                   	ret

ffffffff8022637b <__RME_X64_Fault_Handler>:
              rme_ptr_t Reason - The fault source.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Fault_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Reason)
{
ffffffff8022637b:	f3 0f 1e fa          	endbr64
ffffffff8022637f:	55                   	push   %rbp
ffffffff80226380:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226383:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226387:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022638b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not handling faults */
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff8022638f:	48 c7 c7 4c 7c 22 80 	mov    $0xffffffff80227c4c,%rdi
ffffffff80226396:	e8 92 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022639b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022639f:	48 89 c7             	mov    %rax,%rdi
ffffffff802263a2:	e8 8c 64 fe ff       	call   ffffffff8020c833 <RME_Int_Print>
ffffffff802263a7:	48 c7 c7 5c 7c 22 80 	mov    $0xffffffff80227c5c,%rdi
ffffffff802263ae:	e8 7a 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    /* When handling debug exceptions, note CVE 2018-8897, we may get something at
     * kernel level - If this is what we have, the user must have touched SS + INT */
    /* Print reason */
    switch(Reason)
ffffffff802263b3:	48 83 7d f0 14       	cmpq   $0x14,-0x10(%rbp)
ffffffff802263b8:	0f 87 4d 01 00 00    	ja     ffffffff8022650b <__RME_X64_Fault_Handler+0x190>
ffffffff802263be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802263c2:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff802263c6:	48 05 c0 7f 22 80    	add    $0xffffffff80227fc0,%rax
ffffffff802263cc:	48 8b 00             	mov    (%rax),%rax
ffffffff802263cf:	3e ff e0             	notrack jmp *%rax
    {
        case RME_X64_FAULT_DE:RME_DBG_S("Divide error");break;
ffffffff802263d2:	48 c7 c7 60 7c 22 80 	mov    $0xffffffff80227c60,%rdi
ffffffff802263d9:	e8 4f 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802263de:	e9 35 01 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_DB:RME_DBG_S("Debug exception");break;
ffffffff802263e3:	48 c7 c7 6d 7c 22 80 	mov    $0xffffffff80227c6d,%rdi
ffffffff802263ea:	e8 3e 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802263ef:	e9 24 01 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_INT_NMI:RME_DBG_S("NMI error");break;
ffffffff802263f4:	48 c7 c7 7d 7c 22 80 	mov    $0xffffffff80227c7d,%rdi
ffffffff802263fb:	e8 2d 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226400:	e9 13 01 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_BP:RME_DBG_S("Debug breakpoint");break;
ffffffff80226405:	48 c7 c7 87 7c 22 80 	mov    $0xffffffff80227c87,%rdi
ffffffff8022640c:	e8 1c 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226411:	e9 02 01 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_OF:RME_DBG_S("Overflow exception");break;
ffffffff80226416:	48 c7 c7 98 7c 22 80 	mov    $0xffffffff80227c98,%rdi
ffffffff8022641d:	e8 0b 66 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226422:	e9 f1 00 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_BR:RME_DBG_S("Bound range exception");break;
ffffffff80226427:	48 c7 c7 ab 7c 22 80 	mov    $0xffffffff80227cab,%rdi
ffffffff8022642e:	e8 fa 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226433:	e9 e0 00 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_UD:RME_DBG_S("Undefined instruction");break;
ffffffff80226438:	48 c7 c7 c1 7c 22 80 	mov    $0xffffffff80227cc1,%rdi
ffffffff8022643f:	e8 e9 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226444:	e9 cf 00 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_NM:RME_DBG_S("Device not available");break;
ffffffff80226449:	48 c7 c7 d7 7c 22 80 	mov    $0xffffffff80227cd7,%rdi
ffffffff80226450:	e8 d8 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226455:	e9 be 00 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_DF:RME_DBG_S("Double(nested) fault exception");break;
ffffffff8022645a:	48 c7 c7 f0 7c 22 80 	mov    $0xffffffff80227cf0,%rdi
ffffffff80226461:	e8 c7 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226466:	e9 ad 00 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_OLD_MF:RME_DBG_S("Coprocessor overrun - not used later on");break;
ffffffff8022646b:	48 c7 c7 10 7d 22 80 	mov    $0xffffffff80227d10,%rdi
ffffffff80226472:	e8 b6 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226477:	e9 9c 00 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_TS:RME_DBG_S("Invalid TSS exception");break;
ffffffff8022647c:	48 c7 c7 38 7d 22 80 	mov    $0xffffffff80227d38,%rdi
ffffffff80226483:	e8 a5 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226488:	e9 8b 00 00 00       	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_NP:RME_DBG_S("Segment not present");break;
ffffffff8022648d:	48 c7 c7 4e 7d 22 80 	mov    $0xffffffff80227d4e,%rdi
ffffffff80226494:	e8 94 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226499:	eb 7d                	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_SS:RME_DBG_S("Stack fault exception");break;
ffffffff8022649b:	48 c7 c7 62 7d 22 80 	mov    $0xffffffff80227d62,%rdi
ffffffff802264a2:	e8 86 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264a7:	eb 6f                	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_GP:RME_DBG_S("General protection exception");break;
ffffffff802264a9:	48 c7 c7 78 7d 22 80 	mov    $0xffffffff80227d78,%rdi
ffffffff802264b0:	e8 78 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264b5:	eb 61                	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_PF:RME_DBG_S("Page fault exception");break;
ffffffff802264b7:	48 c7 c7 95 7d 22 80 	mov    $0xffffffff80227d95,%rdi
ffffffff802264be:	e8 6a 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264c3:	eb 53                	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_MF:RME_DBG_S("X87 FPU floating-point error:");break;
ffffffff802264c5:	48 c7 c7 aa 7d 22 80 	mov    $0xffffffff80227daa,%rdi
ffffffff802264cc:	e8 5c 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264d1:	eb 45                	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_AC:RME_DBG_S("Alignment check exception");break;
ffffffff802264d3:	48 c7 c7 c8 7d 22 80 	mov    $0xffffffff80227dc8,%rdi
ffffffff802264da:	e8 4e 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264df:	eb 37                	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_MC:RME_DBG_S("Machine check exception");break;
ffffffff802264e1:	48 c7 c7 e2 7d 22 80 	mov    $0xffffffff80227de2,%rdi
ffffffff802264e8:	e8 40 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264ed:	eb 29                	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_XM:RME_DBG_S("SIMD floating-point exception");break;
ffffffff802264ef:	48 c7 c7 fa 7d 22 80 	mov    $0xffffffff80227dfa,%rdi
ffffffff802264f6:	e8 32 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802264fb:	eb 1b                	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_VE:RME_DBG_S("Virtualization exception");break;
ffffffff802264fd:	48 c7 c7 18 7e 22 80 	mov    $0xffffffff80227e18,%rdi
ffffffff80226504:	e8 24 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226509:	eb 0d                	jmp    ffffffff80226518 <__RME_X64_Fault_Handler+0x19d>
        default:RME_DBG_S("Unknown exception");break;
ffffffff8022650b:	48 c7 c7 31 7e 22 80 	mov    $0xffffffff80227e31,%rdi
ffffffff80226512:	e8 16 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226517:	90                   	nop
    }
    /* Print all registers */
    RME_DBG_S("\n\rRAX:        0x");RME_DBG_H(Reg->RAX);
ffffffff80226518:	48 c7 c7 43 7e 22 80 	mov    $0xffffffff80227e43,%rdi
ffffffff8022651f:	e8 09 65 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226524:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226528:	48 8b 00             	mov    (%rax),%rax
ffffffff8022652b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022652e:	e8 38 64 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rRBX:        0x");RME_DBG_H(Reg->RBX);
ffffffff80226533:	48 c7 c7 54 7e 22 80 	mov    $0xffffffff80227e54,%rdi
ffffffff8022653a:	e8 ee 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022653f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226543:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80226547:	48 89 c7             	mov    %rax,%rdi
ffffffff8022654a:	e8 1c 64 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rRCX:        0x");RME_DBG_H(Reg->RCX);
ffffffff8022654f:	48 c7 c7 65 7e 22 80 	mov    $0xffffffff80227e65,%rdi
ffffffff80226556:	e8 d2 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022655b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022655f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80226563:	48 89 c7             	mov    %rax,%rdi
ffffffff80226566:	e8 00 64 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rRDX:        0x");RME_DBG_H(Reg->RDX);
ffffffff8022656b:	48 c7 c7 76 7e 22 80 	mov    $0xffffffff80227e76,%rdi
ffffffff80226572:	e8 b6 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022657b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8022657f:	48 89 c7             	mov    %rax,%rdi
ffffffff80226582:	e8 e4 63 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rRSI:        0x");RME_DBG_H(Reg->RSI);
ffffffff80226587:	48 c7 c7 87 7e 22 80 	mov    $0xffffffff80227e87,%rdi
ffffffff8022658e:	e8 9a 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226593:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226597:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8022659b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022659e:	e8 c8 63 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rRDI:        0x");RME_DBG_H(Reg->RDI);
ffffffff802265a3:	48 c7 c7 98 7e 22 80 	mov    $0xffffffff80227e98,%rdi
ffffffff802265aa:	e8 7e 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802265af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802265b3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802265b7:	48 89 c7             	mov    %rax,%rdi
ffffffff802265ba:	e8 ac 63 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rRBP:        0x");RME_DBG_H(Reg->RBP);
ffffffff802265bf:	48 c7 c7 a9 7e 22 80 	mov    $0xffffffff80227ea9,%rdi
ffffffff802265c6:	e8 62 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802265cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802265cf:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802265d3:	48 89 c7             	mov    %rax,%rdi
ffffffff802265d6:	e8 90 63 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rR8:         0x");RME_DBG_H(Reg->R8);
ffffffff802265db:	48 c7 c7 ba 7e 22 80 	mov    $0xffffffff80227eba,%rdi
ffffffff802265e2:	e8 46 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802265e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802265eb:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802265ef:	48 89 c7             	mov    %rax,%rdi
ffffffff802265f2:	e8 74 63 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rR9:         0x");RME_DBG_H(Reg->R9);
ffffffff802265f7:	48 c7 c7 cb 7e 22 80 	mov    $0xffffffff80227ecb,%rdi
ffffffff802265fe:	e8 2a 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226603:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226607:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff8022660b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022660e:	e8 58 63 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rR10:        0x");RME_DBG_H(Reg->R10);
ffffffff80226613:	48 c7 c7 dc 7e 22 80 	mov    $0xffffffff80227edc,%rdi
ffffffff8022661a:	e8 0e 64 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022661f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226623:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80226627:	48 89 c7             	mov    %rax,%rdi
ffffffff8022662a:	e8 3c 63 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rR11:        0x");RME_DBG_H(Reg->R11);
ffffffff8022662f:	48 c7 c7 ed 7e 22 80 	mov    $0xffffffff80227eed,%rdi
ffffffff80226636:	e8 f2 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022663b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022663f:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff80226643:	48 89 c7             	mov    %rax,%rdi
ffffffff80226646:	e8 20 63 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rR12:        0x");RME_DBG_H(Reg->R12);
ffffffff8022664b:	48 c7 c7 fe 7e 22 80 	mov    $0xffffffff80227efe,%rdi
ffffffff80226652:	e8 d6 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226657:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022665b:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8022665f:	48 89 c7             	mov    %rax,%rdi
ffffffff80226662:	e8 04 63 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rR13:        0x");RME_DBG_H(Reg->R13);
ffffffff80226667:	48 c7 c7 0f 7f 22 80 	mov    $0xffffffff80227f0f,%rdi
ffffffff8022666e:	e8 ba 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226673:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226677:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff8022667b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022667e:	e8 e8 62 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rR14:        0x");RME_DBG_H(Reg->R14);
ffffffff80226683:	48 c7 c7 20 7f 22 80 	mov    $0xffffffff80227f20,%rdi
ffffffff8022668a:	e8 9e 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022668f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226693:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80226697:	48 89 c7             	mov    %rax,%rdi
ffffffff8022669a:	e8 cc 62 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rR15:        0x");RME_DBG_H(Reg->R15);
ffffffff8022669f:	48 c7 c7 31 7f 22 80 	mov    $0xffffffff80227f31,%rdi
ffffffff802266a6:	e8 82 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802266ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266af:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff802266b3:	48 89 c7             	mov    %rax,%rdi
ffffffff802266b6:	e8 b0 62 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rINT_NUM:    0x");RME_DBG_H(Reg->INT_NUM);
ffffffff802266bb:	48 c7 c7 42 7f 22 80 	mov    $0xffffffff80227f42,%rdi
ffffffff802266c2:	e8 66 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802266c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266cb:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff802266cf:	48 89 c7             	mov    %rax,%rdi
ffffffff802266d2:	e8 94 62 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rERROR_CODE: 0x");RME_DBG_H(Reg->ERROR_CODE);
ffffffff802266d7:	48 c7 c7 53 7f 22 80 	mov    $0xffffffff80227f53,%rdi
ffffffff802266de:	e8 4a 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff802266e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266e7:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff802266ee:	48 89 c7             	mov    %rax,%rdi
ffffffff802266f1:	e8 75 62 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rRIP:        0x");RME_DBG_H(Reg->RIP);
ffffffff802266f6:	48 c7 c7 64 7f 22 80 	mov    $0xffffffff80227f64,%rdi
ffffffff802266fd:	e8 2b 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226702:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226706:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff8022670d:	48 89 c7             	mov    %rax,%rdi
ffffffff80226710:	e8 56 62 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rCS:         0x");RME_DBG_H(Reg->CS);
ffffffff80226715:	48 c7 c7 75 7f 22 80 	mov    $0xffffffff80227f75,%rdi
ffffffff8022671c:	e8 0c 63 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226721:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226725:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff8022672c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022672f:	e8 37 62 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rRFLAGS:     0x");RME_DBG_H(Reg->RFLAGS);
ffffffff80226734:	48 c7 c7 86 7f 22 80 	mov    $0xffffffff80227f86,%rdi
ffffffff8022673b:	e8 ed 62 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff80226740:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226744:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8022674b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022674e:	e8 18 62 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rRSP:        0x");RME_DBG_H(Reg->RSP);
ffffffff80226753:	48 c7 c7 97 7f 22 80 	mov    $0xffffffff80227f97,%rdi
ffffffff8022675a:	e8 ce 62 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022675f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226763:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
ffffffff8022676a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022676d:	e8 f9 61 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rSS:         0x");RME_DBG_H(Reg->SS);
ffffffff80226772:	48 c7 c7 a8 7f 22 80 	mov    $0xffffffff80227fa8,%rdi
ffffffff80226779:	e8 af 62 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
ffffffff8022677e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226782:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff80226789:	48 89 c7             	mov    %rax,%rdi
ffffffff8022678c:	e8 da 61 fe ff       	call   ffffffff8020c96b <RME_Hex_Print>
    RME_DBG_S("\n\rHang");
ffffffff80226791:	48 c7 c7 b9 7f 22 80 	mov    $0xffffffff80227fb9,%rdi
ffffffff80226798:	e8 90 62 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>

    while(1);
ffffffff8022679d:	90                   	nop
ffffffff8022679e:	eb fd                	jmp    ffffffff8022679d <__RME_X64_Fault_Handler+0x422>

ffffffff802267a0 <__RME_X64_Generic_Handler>:
              rme_ptr_t Int_Num - The interrupt number.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Generic_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Int_Num)
{
ffffffff802267a0:	f3 0f 1e fa          	endbr64
ffffffff802267a4:	55                   	push   %rbp
ffffffff802267a5:	48 89 e5             	mov    %rsp,%rbp
ffffffff802267a8:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802267ac:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802267b0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not handling interrupts */
    RME_DBG_S("\r\nGeneral int:");
ffffffff802267b4:	48 c7 c7 68 80 22 80 	mov    $0xffffffff80228068,%rdi
ffffffff802267bb:	e8 6d 62 fe ff       	call   ffffffff8020ca2d <RME_Str_Print>
    RME_DBG_I(Int_Num);
ffffffff802267c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802267c4:	48 89 c7             	mov    %rax,%rdi
ffffffff802267c7:	e8 67 60 fe ff       	call   ffffffff8020c833 <RME_Int_Print>

    switch(Int_Num)
    {
        /* Is this a generic IPI from other processors? */

        default:break;
ffffffff802267cc:	90                   	nop
    }
    /* Remember to perform context switch after any kernel sends */
}
ffffffff802267cd:	90                   	nop
ffffffff802267ce:	c9                   	leave
ffffffff802267cf:	c3                   	ret

ffffffff802267d0 <__RME_Pgt_Set>:
Input       : rme_ptr_t Pgt - The virtual address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgt_Set(rme_ptr_t Pgt)
{
ffffffff802267d0:	f3 0f 1e fa          	endbr64
ffffffff802267d4:	55                   	push   %rbp
ffffffff802267d5:	48 89 e5             	mov    %rsp,%rbp
ffffffff802267d8:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802267dc:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff802267e0:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802267e7:	80 00 00 
ffffffff802267ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802267ee:	48 01 d0             	add    %rdx,%rax
ffffffff802267f1:	48 89 c7             	mov    %rax,%rdi
ffffffff802267f4:	e8 b0 50 fe ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
}
ffffffff802267f9:	90                   	nop
ffffffff802267fa:	c9                   	leave
ffffffff802267fb:	c3                   	ret

ffffffff802267fc <__RME_Pgt_Check>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Check(rme_ptr_t Base_Addr, rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order, rme_ptr_t Num_Order, rme_ptr_t Vaddr)
{
ffffffff802267fc:	f3 0f 1e fa          	endbr64
ffffffff80226800:	55                   	push   %rbp
ffffffff80226801:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226804:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80226808:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022680c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80226810:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80226814:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff80226818:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    /* Is the table address aligned to 4kB? */
    if((Vaddr&0xFFF)!=0)
ffffffff8022681c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226820:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff80226825:	48 85 c0             	test   %rax,%rax
ffffffff80226828:	74 09                	je     ffffffff80226833 <__RME_Pgt_Check+0x37>
        return RME_ERR_HAL_FAIL;
ffffffff8022682a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226831:	eb 59                	jmp    ffffffff8022688c <__RME_Pgt_Check+0x90>

    /* Is the size order allowed? */
    if((Size_Order!=RME_PGT_SIZE_512G)&&(Size_Order!=RME_PGT_SIZE_1G)&&
ffffffff80226833:	48 83 7d e8 27       	cmpq   $0x27,-0x18(%rbp)
ffffffff80226838:	74 1e                	je     ffffffff80226858 <__RME_Pgt_Check+0x5c>
ffffffff8022683a:	48 83 7d e8 1e       	cmpq   $0x1e,-0x18(%rbp)
ffffffff8022683f:	74 17                	je     ffffffff80226858 <__RME_Pgt_Check+0x5c>
ffffffff80226841:	48 83 7d e8 15       	cmpq   $0x15,-0x18(%rbp)
ffffffff80226846:	74 10                	je     ffffffff80226858 <__RME_Pgt_Check+0x5c>
       (Size_Order!=RME_PGT_SIZE_2M)&&(Size_Order!=RME_PGT_SIZE_4K))
ffffffff80226848:	48 83 7d e8 0c       	cmpq   $0xc,-0x18(%rbp)
ffffffff8022684d:	74 09                	je     ffffffff80226858 <__RME_Pgt_Check+0x5c>
        return RME_ERR_HAL_FAIL;
ffffffff8022684f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226856:	eb 34                	jmp    ffffffff8022688c <__RME_Pgt_Check+0x90>

    /* Is the top-level relationship correct? */
    if(((Size_Order==RME_PGT_SIZE_512G)^(Is_Top!=0))!=0)
ffffffff80226858:	48 83 7d e8 27       	cmpq   $0x27,-0x18(%rbp)
ffffffff8022685d:	0f 94 c2             	sete   %dl
ffffffff80226860:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226865:	0f 95 c0             	setne  %al
ffffffff80226868:	31 d0                	xor    %edx,%eax
ffffffff8022686a:	84 c0                	test   %al,%al
ffffffff8022686c:	74 09                	je     ffffffff80226877 <__RME_Pgt_Check+0x7b>
        return RME_ERR_HAL_FAIL;
ffffffff8022686e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226875:	eb 15                	jmp    ffffffff8022688c <__RME_Pgt_Check+0x90>

    /* Is the number order allowed? */
    if(Num_Order!=RME_PGT_NUM_512)
ffffffff80226877:	48 83 7d e0 09       	cmpq   $0x9,-0x20(%rbp)
ffffffff8022687c:	74 09                	je     ffffffff80226887 <__RME_Pgt_Check+0x8b>
        return RME_ERR_HAL_FAIL;
ffffffff8022687e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226885:	eb 05                	jmp    ffffffff8022688c <__RME_Pgt_Check+0x90>

    return 0;
ffffffff80226887:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8022688c:	c9                   	leave
ffffffff8022688d:	c3                   	ret

ffffffff8022688e <__RME_Pgt_Init>:
Input       : struct RME_Cap_Pgt* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Init(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff8022688e:	f3 0f 1e fa          	endbr64
ffffffff80226892:	55                   	push   %rbp
ffffffff80226893:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226896:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8022689a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_cnt_t Count;
    rme_ptr_t* Ptr;
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff8022689e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802268a2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802268a6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
ffffffff802268aa:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802268b1:	00 
ffffffff802268b2:	eb 1f                	jmp    ffffffff802268d3 <__RME_Pgt_Init+0x45>
        Ptr[Count]=0;
ffffffff802268b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802268b8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802268bf:	00 
ffffffff802268c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802268c4:	48 01 d0             	add    %rdx,%rax
ffffffff802268c7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0;Count<256;Count++)
ffffffff802268ce:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802268d3:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff802268da:	00 
ffffffff802268db:	7e d7                	jle    ffffffff802268b4 <__RME_Pgt_Init+0x26>

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgt_Op->Base&RME_PGT_TOP)!=0)
ffffffff802268dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802268e1:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802268e5:	83 e0 01             	and    $0x1,%eax
ffffffff802268e8:	48 85 c0             	test   %rax,%rax
ffffffff802268eb:	74 62                	je     ffffffff8022694f <__RME_Pgt_Init+0xc1>
    {
        for(;Count<512;Count++)
ffffffff802268ed:	eb 35                	jmp    ffffffff80226924 <__RME_Pgt_Init+0x96>
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff802268ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802268f3:	48 8d 88 00 ff ff ff 	lea    -0x100(%rax),%rcx
ffffffff802268fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802268fe:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226905:	00 
ffffffff80226906:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022690a:	48 01 c2             	add    %rax,%rdx
ffffffff8022690d:	48 8d 81 00 01 00 00 	lea    0x100(%rcx),%rax
ffffffff80226914:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff8022691b:	80 
ffffffff8022691c:	48 89 02             	mov    %rax,(%rdx)
        for(;Count<512;Count++)
ffffffff8022691f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80226924:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
ffffffff8022692b:	00 
ffffffff8022692c:	7e c1                	jle    ffffffff802268ef <__RME_Pgt_Init+0x61>
ffffffff8022692e:	eb 29                	jmp    ffffffff80226959 <__RME_Pgt_Init+0xcb>
    }
    else
    {
        for(;Count<512;Count++)
            Ptr[Count]=0;
ffffffff80226930:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226934:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8022693b:	00 
ffffffff8022693c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226940:	48 01 d0             	add    %rdx,%rax
ffffffff80226943:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        for(;Count<512;Count++)
ffffffff8022694a:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8022694f:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
ffffffff80226956:	00 
ffffffff80226957:	7e d7                	jle    ffffffff80226930 <__RME_Pgt_Init+0xa2>
    }

    return 0;
ffffffff80226959:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8022695e:	c9                   	leave
ffffffff8022695f:	c3                   	ret

ffffffff80226960 <__RME_Pgt_Del_Check>:
Input       : struct RME_Cap_Pgt Pgt_Op* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If can be deleted, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Del_Check(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff80226960:	f3 0f 1e fa          	endbr64
ffffffff80226964:	55                   	push   %rbp
ffffffff80226965:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226968:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8022696c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

    return 0;
ffffffff80226970:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226975:	c9                   	leave
ffffffff80226976:	c3                   	ret

ffffffff80226977 <__RME_Pgt_Page_Map>:
                                architecture specific page table's settings.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Map(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Paddr, rme_ptr_t Pos, rme_ptr_t Flags)
{
ffffffff80226977:	f3 0f 1e fa          	endbr64
ffffffff8022697b:	55                   	push   %rbp
ffffffff8022697c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022697f:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80226983:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226987:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8022698b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8022698f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff80226993:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226997:	83 e0 01             	and    $0x1,%eax
ffffffff8022699a:	48 85 c0             	test   %rax,%rax
ffffffff8022699d:	75 0c                	jne    ffffffff802269ab <__RME_Pgt_Page_Map+0x34>
        return RME_ERR_HAL_FAIL;
ffffffff8022699f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802269a6:	e9 d5 00 00 00       	jmp    ffffffff80226a80 <__RME_Pgt_Page_Map+0x109>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff802269ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802269af:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802269b3:	83 e0 01             	and    $0x1,%eax
ffffffff802269b6:	48 85 c0             	test   %rax,%rax
ffffffff802269b9:	74 16                	je     ffffffff802269d1 <__RME_Pgt_Page_Map+0x5a>
ffffffff802269bb:	48 81 7d d8 ff 00 00 	cmpq   $0xff,-0x28(%rbp)
ffffffff802269c2:	00 
ffffffff802269c3:	76 0c                	jbe    ffffffff802269d1 <__RME_Pgt_Page_Map+0x5a>
        return RME_ERR_HAL_FAIL;
ffffffff802269c5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802269cc:	e9 af 00 00 00       	jmp    ffffffff80226a80 <__RME_Pgt_Page_Map+0x109>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff802269d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802269d5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802269d9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Generate flags */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff802269dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802269e1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802269e5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802269e9:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff802269ed:	75 2d                	jne    ffffffff80226a1c <__RME_Pgt_Page_Map+0xa5>
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff802269ef:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff802269f6:	ff 0f 00 
ffffffff802269f9:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff802269fd:	48 89 c2             	mov    %rax,%rdx
ffffffff80226a00:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226a04:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226a07:	48 8b 04 c5 60 75 22 	mov    -0x7fdd8aa0(,%rax,8),%rax
ffffffff80226a0e:	80 
ffffffff80226a0f:	48 09 d0             	or     %rdx,%rax
ffffffff80226a12:	48 83 c8 04          	or     $0x4,%rax
ffffffff80226a16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80226a1a:	eb 29                	jmp    ffffffff80226a45 <__RME_Pgt_Page_Map+0xce>
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff80226a1c:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226a23:	ff 0f 00 
ffffffff80226a26:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff80226a2a:	48 89 c2             	mov    %rax,%rdx
ffffffff80226a2d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226a31:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226a34:	48 8b 04 c5 60 75 22 	mov    -0x7fdd8aa0(,%rax,8),%rax
ffffffff80226a3b:	80 
ffffffff80226a3c:	48 09 d0             	or     %rdx,%rax
ffffffff80226a3f:	0c 84                	or     $0x84,%al
ffffffff80226a41:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Try to map it in */
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff80226a45:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226a49:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226a50:	00 
ffffffff80226a51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226a55:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226a59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226a5d:	48 89 c2             	mov    %rax,%rdx
ffffffff80226a60:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80226a65:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226a68:	e8 2d 46 ff ff       	call   ffffffff8021b09a <_RME_X64_Comp_Swap>
ffffffff80226a6d:	48 85 c0             	test   %rax,%rax
ffffffff80226a70:	75 09                	jne    ffffffff80226a7b <__RME_Pgt_Page_Map+0x104>
        return RME_ERR_HAL_FAIL;
ffffffff80226a72:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226a79:	eb 05                	jmp    ffffffff80226a80 <__RME_Pgt_Page_Map+0x109>

    return 0;
ffffffff80226a7b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226a80:	c9                   	leave
ffffffff80226a81:	c3                   	ret

ffffffff80226a82 <__RME_Pgt_Page_Unmap>:
              rme_ptr_t Pos - The position in the page table.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Unmap(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos)
{
ffffffff80226a82:	f3 0f 1e fa          	endbr64
ffffffff80226a86:	55                   	push   %rbp
ffffffff80226a87:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226a8a:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80226a8e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226a92:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226a96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226a9a:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226a9e:	83 e0 01             	and    $0x1,%eax
ffffffff80226aa1:	48 85 c0             	test   %rax,%rax
ffffffff80226aa4:	74 16                	je     ffffffff80226abc <__RME_Pgt_Page_Unmap+0x3a>
ffffffff80226aa6:	48 81 7d e0 ff 00 00 	cmpq   $0xff,-0x20(%rbp)
ffffffff80226aad:	00 
ffffffff80226aae:	76 0c                	jbe    ffffffff80226abc <__RME_Pgt_Page_Unmap+0x3a>
        return RME_ERR_HAL_FAIL;
ffffffff80226ab0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ab7:	e9 9a 00 00 00       	jmp    ffffffff80226b56 <__RME_Pgt_Page_Unmap+0xd4>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226abc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226ac0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226ac4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Make sure that there is something */
    Temp=Table[Pos];
ffffffff80226ac8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226acc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226ad3:	00 
ffffffff80226ad4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226ad8:	48 01 d0             	add    %rdx,%rax
ffffffff80226adb:	48 8b 00             	mov    (%rax),%rax
ffffffff80226ade:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Temp==0)
ffffffff80226ae2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226ae7:	75 09                	jne    ffffffff80226af2 <__RME_Pgt_Page_Unmap+0x70>
        return RME_ERR_HAL_FAIL;
ffffffff80226ae9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226af0:	eb 64                	jmp    ffffffff80226b56 <__RME_Pgt_Page_Unmap+0xd4>

    /* Is this a page directory? We cannot unmap page directories like this */
    if((RME_PGT_SIZEORD(Pgt_Op->Order)!=RME_PGT_SIZE_4K)&&((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff80226af2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226af6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226afa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226afe:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226b02:	74 17                	je     ffffffff80226b1b <__RME_Pgt_Page_Unmap+0x99>
ffffffff80226b04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226b08:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226b0d:	48 85 c0             	test   %rax,%rax
ffffffff80226b10:	75 09                	jne    ffffffff80226b1b <__RME_Pgt_Page_Unmap+0x99>
        return RME_ERR_HAL_FAIL;
ffffffff80226b12:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226b19:	eb 3b                	jmp    ffffffff80226b56 <__RME_Pgt_Page_Unmap+0xd4>

    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
ffffffff80226b1b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226b1f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226b26:	00 
ffffffff80226b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226b2b:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226b2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226b33:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226b38:	48 89 c6             	mov    %rax,%rsi
ffffffff80226b3b:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226b3e:	e8 57 45 ff ff       	call   ffffffff8021b09a <_RME_X64_Comp_Swap>
ffffffff80226b43:	48 85 c0             	test   %rax,%rax
ffffffff80226b46:	75 09                	jne    ffffffff80226b51 <__RME_Pgt_Page_Unmap+0xcf>
        return RME_ERR_HAL_FAIL;
ffffffff80226b48:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226b4f:	eb 05                	jmp    ffffffff80226b56 <__RME_Pgt_Page_Unmap+0xd4>

    return 0;
ffffffff80226b51:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226b56:	c9                   	leave
ffffffff80226b57:	c3                   	ret

ffffffff80226b58 <__RME_Pgt_Pgdir_Map>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Map(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                struct RME_Cap_Pgt* Pgt_Child, rme_ptr_t Flags)
{
ffffffff80226b58:	f3 0f 1e fa          	endbr64
ffffffff80226b5c:	55                   	push   %rbp
ffffffff80226b5d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226b60:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80226b64:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80226b68:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80226b6c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80226b70:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff80226b74:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226b78:	83 e0 01             	and    $0x1,%eax
ffffffff80226b7b:	48 85 c0             	test   %rax,%rax
ffffffff80226b7e:	75 0c                	jne    ffffffff80226b8c <__RME_Pgt_Pgdir_Map+0x34>
        return RME_ERR_HAL_FAIL;
ffffffff80226b80:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226b87:	e9 b1 00 00 00       	jmp    ffffffff80226c3d <__RME_Pgt_Pgdir_Map+0xe5>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226b8c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226b90:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226b94:	83 e0 01             	and    $0x1,%eax
ffffffff80226b97:	48 85 c0             	test   %rax,%rax
ffffffff80226b9a:	74 16                	je     ffffffff80226bb2 <__RME_Pgt_Pgdir_Map+0x5a>
ffffffff80226b9c:	48 81 7d d0 ff 00 00 	cmpq   $0xff,-0x30(%rbp)
ffffffff80226ba3:	00 
ffffffff80226ba4:	76 0c                	jbe    ffffffff80226bb2 <__RME_Pgt_Pgdir_Map+0x5a>
        return RME_ERR_HAL_FAIL;
ffffffff80226ba6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226bad:	e9 8b 00 00 00       	jmp    ffffffff80226c3d <__RME_Pgt_Pgdir_Map+0xe5>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
ffffffff80226bb2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226bb6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226bba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Child_Table=RME_CAP_GETOBJ(Pgt_Child,rme_ptr_t*);
ffffffff80226bbe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226bc2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226bc6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff80226bca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226bce:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80226bd5:	80 00 00 
ffffffff80226bd8:	48 01 c2             	add    %rax,%rdx
ffffffff80226bdb:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226be2:	ff 0f 00 
ffffffff80226be5:	48 21 c2             	and    %rax,%rdx
ffffffff80226be8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226bec:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226bef:	48 8b 04 c5 60 75 22 	mov    -0x7fdd8aa0(,%rax,8),%rax
ffffffff80226bf6:	80 
ffffffff80226bf7:	48 09 d0             	or     %rdx,%rax
ffffffff80226bfa:	48 83 c8 04          	or     $0x4,%rax
ffffffff80226bfe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    /* Try to map it in - may need to increase some count */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff80226c02:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226c06:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226c0d:	00 
ffffffff80226c0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226c12:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226c16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226c1a:	48 89 c2             	mov    %rax,%rdx
ffffffff80226c1d:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80226c22:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226c25:	e8 70 44 ff ff       	call   ffffffff8021b09a <_RME_X64_Comp_Swap>
ffffffff80226c2a:	48 85 c0             	test   %rax,%rax
ffffffff80226c2d:	75 09                	jne    ffffffff80226c38 <__RME_Pgt_Pgdir_Map+0xe0>
        return RME_ERR_HAL_FAIL;
ffffffff80226c2f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c36:	eb 05                	jmp    ffffffff80226c3d <__RME_Pgt_Pgdir_Map+0xe5>

    return 0;
ffffffff80226c38:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226c3d:	c9                   	leave
ffffffff80226c3e:	c3                   	ret

ffffffff80226c3f <__RME_Pgt_Pgdir_Unmap>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Unmap(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                  struct RME_Cap_Pgt* Pgt_Child)
{
ffffffff80226c3f:	f3 0f 1e fa          	endbr64
ffffffff80226c43:	55                   	push   %rbp
ffffffff80226c44:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226c47:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80226c4b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80226c4f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80226c53:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226c57:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226c5b:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226c5f:	83 e0 01             	and    $0x1,%eax
ffffffff80226c62:	48 85 c0             	test   %rax,%rax
ffffffff80226c65:	74 16                	je     ffffffff80226c7d <__RME_Pgt_Pgdir_Unmap+0x3e>
ffffffff80226c67:	48 81 7d d0 ff 00 00 	cmpq   $0xff,-0x30(%rbp)
ffffffff80226c6e:	00 
ffffffff80226c6f:	76 0c                	jbe    ffffffff80226c7d <__RME_Pgt_Pgdir_Unmap+0x3e>
        return RME_ERR_HAL_FAIL;
ffffffff80226c71:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c78:	e9 c4 00 00 00       	jmp    ffffffff80226d41 <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
ffffffff80226c7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226c81:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226c85:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Make sure that there is something */
    Temp=Parent_Table[Pos];
ffffffff80226c89:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226c8d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226c94:	00 
ffffffff80226c95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226c99:	48 01 d0             	add    %rdx,%rax
ffffffff80226c9c:	48 8b 00             	mov    (%rax),%rax
ffffffff80226c9f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Temp==0)
ffffffff80226ca3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226ca8:	75 0c                	jne    ffffffff80226cb6 <__RME_Pgt_Pgdir_Unmap+0x77>
        return RME_ERR_HAL_FAIL;
ffffffff80226caa:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226cb1:	e9 8b 00 00 00       	jmp    ffffffff80226d41 <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Is this a page? We cannot unmap pages like this */
    if((RME_PGT_SIZEORD(Pgt_Parent->Order)==RME_PGT_SIZE_4K)||((Temp&RME_X64_MMU_PDE_SUP)!=0))
ffffffff80226cb6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226cba:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226cbe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226cc2:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226cc6:	74 0e                	je     ffffffff80226cd6 <__RME_Pgt_Pgdir_Unmap+0x97>
ffffffff80226cc8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226ccc:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226cd1:	48 85 c0             	test   %rax,%rax
ffffffff80226cd4:	74 09                	je     ffffffff80226cdf <__RME_Pgt_Pgdir_Unmap+0xa0>
        return RME_ERR_HAL_FAIL;
ffffffff80226cd6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226cdd:	eb 62                	jmp    ffffffff80226d41 <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Is this child table mapped here? - check that in the future */

    Child_Table=(rme_ptr_t*)Temp;
ffffffff80226cdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226ce3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    rme_ptr_t* Expected_Child_Table = RME_CAP_GETOBJ(Pgt_Child, rme_ptr_t*);
ffffffff80226ce7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226ceb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226cef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (Child_Table != Expected_Child_Table)
ffffffff80226cf3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226cf7:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80226cfb:	74 09                	je     ffffffff80226d06 <__RME_Pgt_Pgdir_Unmap+0xc7>
        return RME_ERR_HAL_FAIL;
ffffffff80226cfd:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d04:	eb 3b                	jmp    ffffffff80226d41 <__RME_Pgt_Pgdir_Unmap+0x102>
    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),Temp,0)==0)
ffffffff80226d06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226d0a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226d11:	00 
ffffffff80226d12:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226d16:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226d1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226d1e:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226d23:	48 89 c6             	mov    %rax,%rsi
ffffffff80226d26:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226d29:	e8 6c 43 ff ff       	call   ffffffff8021b09a <_RME_X64_Comp_Swap>
ffffffff80226d2e:	48 85 c0             	test   %rax,%rax
ffffffff80226d31:	75 09                	jne    ffffffff80226d3c <__RME_Pgt_Pgdir_Unmap+0xfd>
        return RME_ERR_HAL_FAIL;
ffffffff80226d33:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d3a:	eb 05                	jmp    ffffffff80226d41 <__RME_Pgt_Pgdir_Unmap+0x102>

    return 0;
ffffffff80226d3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226d41:	c9                   	leave
ffffffff80226d42:	c3                   	ret

ffffffff80226d43 <__RME_Pgt_Lookup>:
Output      : rme_ptr_t* Paddr - The physical address of the page.
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Lookup(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos, rme_ptr_t* Paddr, rme_ptr_t* Flags)
{
ffffffff80226d43:	f3 0f 1e fa          	endbr64
ffffffff80226d47:	55                   	push   %rbp
ffffffff80226d48:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226d4b:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80226d4f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226d53:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226d57:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80226d5b:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
ffffffff80226d5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226d63:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226d67:	89 c2                	mov    %eax,%edx
ffffffff80226d69:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226d6d:	89 d1                	mov    %edx,%ecx
ffffffff80226d6f:	48 d3 e8             	shr    %cl,%rax
ffffffff80226d72:	48 85 c0             	test   %rax,%rax
ffffffff80226d75:	74 0c                	je     ffffffff80226d83 <__RME_Pgt_Lookup+0x40>
        return RME_ERR_HAL_FAIL;
ffffffff80226d77:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d7e:	e9 d8 00 00 00       	jmp    ffffffff80226e5b <__RME_Pgt_Lookup+0x118>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226d83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226d87:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226d8b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Get the position requested - atomic read */
    Temp=Table[Pos];
ffffffff80226d8f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226d93:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226d9a:	00 
ffffffff80226d9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226d9f:	48 01 d0             	add    %rdx,%rax
ffffffff80226da2:	48 8b 00             	mov    (%rax),%rax
ffffffff80226da5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Start lookup - is this a terminal page, or? */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff80226da9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226dad:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226db1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226db5:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226db9:	75 18                	jne    ffffffff80226dd3 <__RME_Pgt_Lookup+0x90>
    {
        if((Temp&RME_X64_MMU_P)==0)
ffffffff80226dbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226dbf:	83 e0 01             	and    $0x1,%eax
ffffffff80226dc2:	48 85 c0             	test   %rax,%rax
ffffffff80226dc5:	75 2f                	jne    ffffffff80226df6 <__RME_Pgt_Lookup+0xb3>
            return RME_ERR_HAL_FAIL;
ffffffff80226dc7:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226dce:	e9 88 00 00 00       	jmp    ffffffff80226e5b <__RME_Pgt_Lookup+0x118>
    }
    else
    {
        if(((Temp&RME_X64_MMU_P)==0)||((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff80226dd3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226dd7:	83 e0 01             	and    $0x1,%eax
ffffffff80226dda:	48 85 c0             	test   %rax,%rax
ffffffff80226ddd:	74 0e                	je     ffffffff80226ded <__RME_Pgt_Lookup+0xaa>
ffffffff80226ddf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226de3:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226de8:	48 85 c0             	test   %rax,%rax
ffffffff80226deb:	75 09                	jne    ffffffff80226df6 <__RME_Pgt_Lookup+0xb3>
            return RME_ERR_HAL_FAIL;
ffffffff80226ded:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226df4:	eb 65                	jmp    ffffffff80226e5b <__RME_Pgt_Lookup+0x118>
    }

    /* This is a page. Return the physical address and flags */
    if(Paddr!=0)
ffffffff80226df6:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80226dfb:	74 18                	je     ffffffff80226e15 <__RME_Pgt_Lookup+0xd2>
        *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff80226dfd:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226e04:	ff 0f 00 
ffffffff80226e07:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80226e0b:	48 89 c2             	mov    %rax,%rdx
ffffffff80226e0e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226e12:	48 89 10             	mov    %rdx,(%rax)

    if(Flags!=0)
ffffffff80226e15:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80226e1a:	74 3a                	je     ffffffff80226e56 <__RME_Pgt_Lookup+0x113>
        *Flags=RME_X64_PGFLG_NAT2RME(Temp);
ffffffff80226e1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226e20:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff80226e24:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226e2b:	00 
ffffffff80226e2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226e30:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80226e34:	83 e0 06             	and    $0x6,%eax
ffffffff80226e37:	48 09 c2             	or     %rax,%rdx
ffffffff80226e3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226e3e:	48 d1 e8             	shr    $1,%rax
ffffffff80226e41:	83 e0 01             	and    $0x1,%eax
ffffffff80226e44:	48 09 d0             	or     %rdx,%rax
ffffffff80226e47:	48 8b 14 c5 60 76 22 	mov    -0x7fdd89a0(,%rax,8),%rdx
ffffffff80226e4e:	80 
ffffffff80226e4f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226e53:	48 89 10             	mov    %rdx,(%rax)

    return 0;
ffffffff80226e56:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226e5b:	c9                   	leave
ffffffff80226e5c:	c3                   	ret

ffffffff80226e5d <__RME_Pgt_Walk>:
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Walk(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Vaddr, rme_ptr_t* Pgt,
                           rme_ptr_t* Map_Vaddr, rme_ptr_t* Paddr, rme_ptr_t* Size_Order, rme_ptr_t* Num_Order, rme_ptr_t* Flags)
{
ffffffff80226e5d:	f3 0f 1e fa          	endbr64
ffffffff80226e61:	55                   	push   %rbp
ffffffff80226e62:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226e65:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80226e69:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80226e6d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80226e71:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80226e75:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80226e79:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80226e7d:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Flags_Accum;
    /* No execute bit - this bit is ORed */
    rme_ptr_t No_Execute;

    /* Check if this is the top-level page table */
    if(((Pgt_Op->Base)&RME_PGT_TOP)==0)
ffffffff80226e81:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226e85:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226e89:	83 e0 01             	and    $0x1,%eax
ffffffff80226e8c:	48 85 c0             	test   %rax,%rax
ffffffff80226e8f:	75 0c                	jne    ffffffff80226e9d <__RME_Pgt_Walk+0x40>
        return RME_ERR_HAL_FAIL;
ffffffff80226e91:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226e98:	e9 c8 01 00 00       	jmp    ffffffff80227065 <__RME_Pgt_Walk+0x208>

    /* Are we attempting a kernel or non-canonical lookup? If yes, stop immediately */
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff80226e9d:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffe,%rax
ffffffff80226ea4:	7f 00 00 
ffffffff80226ea7:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff80226eab:	73 0c                	jae    ffffffff80226eb9 <__RME_Pgt_Walk+0x5c>
        return RME_ERR_HAL_FAIL;
ffffffff80226ead:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226eb4:	e9 ac 01 00 00       	jmp    ffffffff80227065 <__RME_Pgt_Walk+0x208>

    /* Get the table and start lookup */
    Table=RME_CAP_GETOBJ(Pgt_Op, rme_ptr_t*);
ffffffff80226eb9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226ebd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226ec1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Do lookup recursively */
    Size_Cnt=RME_PGT_SIZE_512G;
ffffffff80226ec5:	48 c7 45 f0 27 00 00 	movq   $0x27,-0x10(%rbp)
ffffffff80226ecc:	00 
    Flags_Accum=0xFFF;
ffffffff80226ecd:	48 c7 45 e8 ff 0f 00 	movq   $0xfff,-0x18(%rbp)
ffffffff80226ed4:	00 
    No_Execute=0;
ffffffff80226ed5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80226edc:	00 
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff80226edd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226ee1:	89 c2                	mov    %eax,%edx
ffffffff80226ee3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226ee7:	89 d1                	mov    %edx,%ecx
ffffffff80226ee9:	48 d3 e8             	shr    %cl,%rax
ffffffff80226eec:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80226ef1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        /* Atomic read */
        Temp=Table[Pos];
ffffffff80226ef5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226ef9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226f00:	00 
ffffffff80226f01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226f05:	48 01 d0             	add    %rdx,%rax
ffffffff80226f08:	48 8b 00             	mov    (%rax),%rax
ffffffff80226f0b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Temp&RME_X64_MMU_P)==0)
ffffffff80226f0f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226f13:	83 e0 01             	and    $0x1,%eax
ffffffff80226f16:	48 85 c0             	test   %rax,%rax
ffffffff80226f19:	75 0c                	jne    ffffffff80226f27 <__RME_Pgt_Walk+0xca>
            return RME_ERR_HAL_FAIL;
ffffffff80226f1b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226f22:	e9 3e 01 00 00       	jmp    ffffffff80227065 <__RME_Pgt_Walk+0x208>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff80226f27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226f2b:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226f30:	48 85 c0             	test   %rax,%rax
ffffffff80226f33:	75 0b                	jne    ffffffff80226f40 <__RME_Pgt_Walk+0xe3>
ffffffff80226f35:	48 83 7d f0 0c       	cmpq   $0xc,-0x10(%rbp)
ffffffff80226f3a:	0f 85 dc 00 00 00    	jne    ffffffff8022701c <__RME_Pgt_Walk+0x1bf>
        {
            /* This is a page - we found it */
            if(Pgt!=0)
ffffffff80226f40:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff80226f45:	74 0b                	je     ffffffff80226f52 <__RME_Pgt_Walk+0xf5>
                *Pgt=(rme_ptr_t)Table;
ffffffff80226f47:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80226f4b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80226f4f:	48 89 10             	mov    %rdx,(%rax)
            if(Map_Vaddr!=0)
ffffffff80226f52:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80226f57:	74 21                	je     ffffffff80226f7a <__RME_Pgt_Walk+0x11d>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff80226f59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226f5d:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80226f64:	89 c1                	mov    %eax,%ecx
ffffffff80226f66:	48 d3 e2             	shl    %cl,%rdx
ffffffff80226f69:	48 89 d0             	mov    %rdx,%rax
ffffffff80226f6c:	48 23 45 c0          	and    -0x40(%rbp),%rax
ffffffff80226f70:	48 89 c2             	mov    %rax,%rdx
ffffffff80226f73:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80226f77:	48 89 10             	mov    %rdx,(%rax)
            if(Paddr!=0)
ffffffff80226f7a:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
ffffffff80226f7f:	74 18                	je     ffffffff80226f99 <__RME_Pgt_Walk+0x13c>
                *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff80226f81:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226f88:	ff 0f 00 
ffffffff80226f8b:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80226f8f:	48 89 c2             	mov    %rax,%rdx
ffffffff80226f92:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80226f96:	48 89 10             	mov    %rdx,(%rax)
            if(Size_Order!=0)
ffffffff80226f99:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff80226f9e:	74 0b                	je     ffffffff80226fab <__RME_Pgt_Walk+0x14e>
                *Size_Order=Size_Cnt;
ffffffff80226fa0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80226fa4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226fa8:	48 89 10             	mov    %rdx,(%rax)
            if(Num_Order!=0)
ffffffff80226fab:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff80226fb0:	74 0b                	je     ffffffff80226fbd <__RME_Pgt_Walk+0x160>
                *Num_Order=RME_PGT_NUM_512;
ffffffff80226fb2:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80226fb6:	48 c7 00 09 00 00 00 	movq   $0x9,(%rax)
            if(Flags!=0)
ffffffff80226fbd:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
ffffffff80226fc2:	0f 84 97 00 00 00    	je     ffffffff8022705f <__RME_Pgt_Walk+0x202>
                *Flags=RME_X64_PGFLG_NAT2RME(No_Execute|(Temp&Flags_Accum));
ffffffff80226fc8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226fcc:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80226fd0:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80226fd4:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff80226fd8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226fdf:	00 
ffffffff80226fe0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226fe4:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80226fe8:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80226fec:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80226ff0:	83 e0 06             	and    $0x6,%eax
ffffffff80226ff3:	48 09 c2             	or     %rax,%rdx
ffffffff80226ff6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226ffa:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80226ffe:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff80227002:	48 d1 e8             	shr    $1,%rax
ffffffff80227005:	83 e0 01             	and    $0x1,%eax
ffffffff80227008:	48 09 d0             	or     %rdx,%rax
ffffffff8022700b:	48 8b 14 c5 60 76 22 	mov    -0x7fdd89a0(,%rax,8),%rdx
ffffffff80227012:	80 
ffffffff80227013:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80227017:	48 89 10             	mov    %rdx,(%rax)

            break;
ffffffff8022701a:	eb 43                	jmp    ffffffff8022705f <__RME_Pgt_Walk+0x202>
        }
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Flags_Accum&=Temp;
ffffffff8022701c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80227020:	48 21 45 e8          	and    %rax,-0x18(%rbp)
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff80227024:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff8022702b:	00 00 80 
ffffffff8022702e:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80227032:	48 09 45 e0          	or     %rax,-0x20(%rbp)
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff80227036:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff8022703d:	ff 0f 00 
ffffffff80227040:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80227044:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8022704b:	80 ff ff 
ffffffff8022704e:	48 01 d0             	add    %rdx,%rax
ffffffff80227051:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        }

        /* The size order always decreases by 512 */
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff80227055:	48 83 6d f0 09       	subq   $0x9,-0x10(%rbp)
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8022705a:	e9 7e fe ff ff       	jmp    ffffffff80226edd <__RME_Pgt_Walk+0x80>
            break;
ffffffff8022705f:	90                   	nop
    }

    return 0;
ffffffff80227060:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80227065:	c9                   	leave
ffffffff80227066:	c3                   	ret

ffffffff80227067 <__RME_Svc_Param_Get>:

/*Function:__RME_Svc_Param_Get*/

void __RME_Svc_Param_Get(struct RME_Reg_Struct* Reg,rme_ptr_t* Svc,rme_ptr_t* Cid,rme_ptr_t* Param)
{
ffffffff80227067:	f3 0f 1e fa          	endbr64
ffffffff8022706b:	55                   	push   %rbp
ffffffff8022706c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022706f:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80227073:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80227077:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8022707b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8022707f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    *Svc=(Reg->RDI)>>32;
ffffffff80227083:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227087:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8022708b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022708f:	48 89 c2             	mov    %rax,%rdx
ffffffff80227092:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80227096:	48 89 10             	mov    %rdx,(%rax)
    *Cid=(Reg->RDI)&0xFFFFFFFF;
ffffffff80227099:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022709d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802270a1:	89 c2                	mov    %eax,%edx
ffffffff802270a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802270a7:	48 89 10             	mov    %rdx,(%rax)
    Param[0]=Reg->RSI;
ffffffff802270aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802270ae:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff802270b2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802270b6:	48 89 10             	mov    %rdx,(%rax)
    Param[1]=Reg->RDX;
ffffffff802270b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802270bd:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff802270c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802270c5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802270c9:	48 89 02             	mov    %rax,(%rdx)
    Param[2]=Reg->R8;
ffffffff802270cc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802270d0:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff802270d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802270d8:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802270dc:	48 89 02             	mov    %rax,(%rdx)
}
ffffffff802270df:	90                   	nop
ffffffff802270e0:	c9                   	leave
ffffffff802270e1:	c3                   	ret

ffffffff802270e2 <__RME_Svc_Retval_Set>:
/*End Function:__RME_Svc_Param_Get*/

/*Function:__RME_Svc_Retval_Set*/

void __RME_Svc_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff802270e2:	f3 0f 1e fa          	endbr64
ffffffff802270e6:	55                   	push   %rbp
ffffffff802270e7:	48 89 e5             	mov    %rsp,%rbp
ffffffff802270ea:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802270ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802270f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff802270f6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802270fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802270fe:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff80227101:	90                   	nop
ffffffff80227102:	c9                   	leave
ffffffff80227103:	c3                   	ret

ffffffff80227104 <__RME_Inv_Retval_Set>:

/*End Function:__RME_Svc_Retval_Set*/

void __RME_Inv_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff80227104:	f3 0f 1e fa          	endbr64
ffffffff80227108:	55                   	push   %rbp
ffffffff80227109:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022710c:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80227110:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80227114:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff80227118:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8022711c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227120:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff80227124:	90                   	nop
ffffffff80227125:	c9                   	leave
ffffffff80227126:	c3                   	ret

ffffffff80227127 <__RME_List_Crt>:

void __RME_List_Crt(volatile struct RME_List* Head)
{
ffffffff80227127:	f3 0f 1e fa          	endbr64
ffffffff8022712b:	55                   	push   %rbp
ffffffff8022712c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022712f:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80227133:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    Head->Next=Head;
ffffffff80227137:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022713b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022713f:	48 89 10             	mov    %rdx,(%rax)
    Head->Prev=Head;
ffffffff80227142:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227146:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022714a:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff8022714e:	90                   	nop
ffffffff8022714f:	c9                   	leave
ffffffff80227150:	c3                   	ret

ffffffff80227151 <__RME_List_Ins>:

void __RME_List_Ins(volatile struct RME_List* New,volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff80227151:	f3 0f 1e fa          	endbr64
ffffffff80227155:	55                   	push   %rbp
ffffffff80227156:	48 89 e5             	mov    %rsp,%rbp
ffffffff80227159:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8022715d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80227161:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80227165:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    New->Prev=Prev;
ffffffff80227169:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022716d:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80227171:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=New;
ffffffff80227175:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80227179:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022717d:	48 89 10             	mov    %rdx,(%rax)
    New->Next=Next;
ffffffff80227180:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227184:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80227188:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev=New;
ffffffff8022718b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022718f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80227193:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80227197:	90                   	nop
ffffffff80227198:	c9                   	leave
ffffffff80227199:	c3                   	ret

ffffffff8022719a <__RME_List_Del>:

void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff8022719a:	f3 0f 1e fa          	endbr64
ffffffff8022719e:	55                   	push   %rbp
ffffffff8022719f:	48 89 e5             	mov    %rsp,%rbp
ffffffff802271a2:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802271a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802271aa:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Prev->Next = Next;
ffffffff802271ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802271b2:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802271b6:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev = Prev;
ffffffff802271b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802271bd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802271c1:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff802271c5:	90                   	nop
ffffffff802271c6:	c9                   	leave
ffffffff802271c7:	c3                   	ret
