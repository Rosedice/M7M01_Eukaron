
./Object/RME：     文件格式 elf64-x86-64


Disassembly of section .text:

ffffffff80100000 <__RME_X64_Mboot_Header>:
ffffffff80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80100006:	01 00                	add    %eax,(%rax)
ffffffff80100008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010000b:	e4 00                	in     $0x0,%al
ffffffff8010000d:	00 10                	add    %dl,(%rax)
ffffffff8010000f:	00 00                	add    %al,(%rax)
ffffffff80100011:	00 10                	add    %dl,(%rax)
ffffffff80100013:	00 00                	add    %al,(%rax)
ffffffff80100015:	a0 22 00 58 37 23 00 	movabs 0x8000002337580022,%al
ffffffff8010001c:	00 80 
ffffffff8010001e:	10 00                	adc    %al,(%rax)
ffffffff80100020:	90                   	nop
ffffffff80100021:	e9 da 0f 00 00       	jmp    ffffffff80101000 <__RME_X64_Mboot_Header+0x1000>
ffffffff80100026:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010002d:	00 00 00 00 
ffffffff80100031:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100038:	00 00 00 00 
ffffffff8010003c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100043:	00 00 00 00 
ffffffff80100047:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010004e:	00 00 00 00 
ffffffff80100052:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100059:	00 00 00 00 
ffffffff8010005d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100064:	00 00 00 00 
ffffffff80100068:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010006f:	00 00 00 00 
ffffffff80100073:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010007a:	00 00 00 00 
ffffffff8010007e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100085:	00 00 00 00 
ffffffff80100089:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100090:	00 00 00 00 
ffffffff80100094:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010009b:	00 00 00 00 
ffffffff8010009f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000a6:	00 00 00 00 
ffffffff801000aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000b1:	00 00 00 00 
ffffffff801000b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000bc:	00 00 00 00 
ffffffff801000c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000c7:	00 00 00 00 
ffffffff801000cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000d2:	00 00 00 00 
ffffffff801000d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000dd:	00 00 00 00 
ffffffff801000e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000e8:	00 00 00 00 
ffffffff801000ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000f3:	00 00 00 00 
ffffffff801000f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801000fe:	00 00 00 00 
ffffffff80100102:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100109:	00 00 00 00 
ffffffff8010010d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100114:	00 00 00 00 
ffffffff80100118:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010011f:	00 00 00 00 
ffffffff80100123:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010012a:	00 00 00 00 
ffffffff8010012e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100135:	00 00 00 00 
ffffffff80100139:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100140:	00 00 00 00 
ffffffff80100144:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010014b:	00 00 00 00 
ffffffff8010014f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100156:	00 00 00 00 
ffffffff8010015a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100161:	00 00 00 00 
ffffffff80100165:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010016c:	00 00 00 00 
ffffffff80100170:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100177:	00 00 00 00 
ffffffff8010017b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100182:	00 00 00 00 
ffffffff80100186:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010018d:	00 00 00 00 
ffffffff80100191:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100198:	00 00 00 00 
ffffffff8010019c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001a3:	00 00 00 00 
ffffffff801001a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001ae:	00 00 00 00 
ffffffff801001b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001b9:	00 00 00 00 
ffffffff801001bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001c4:	00 00 00 00 
ffffffff801001c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001cf:	00 00 00 00 
ffffffff801001d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001da:	00 00 00 00 
ffffffff801001de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001e5:	00 00 00 00 
ffffffff801001e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001f0:	00 00 00 00 
ffffffff801001f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801001fb:	00 00 00 00 
ffffffff801001ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100206:	00 00 00 00 
ffffffff8010020a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100211:	00 00 00 00 
ffffffff80100215:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010021c:	00 00 00 00 
ffffffff80100220:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100227:	00 00 00 00 
ffffffff8010022b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100232:	00 00 00 00 
ffffffff80100236:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010023d:	00 00 00 00 
ffffffff80100241:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100248:	00 00 00 00 
ffffffff8010024c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100253:	00 00 00 00 
ffffffff80100257:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010025e:	00 00 00 00 
ffffffff80100262:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100269:	00 00 00 00 
ffffffff8010026d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100274:	00 00 00 00 
ffffffff80100278:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010027f:	00 00 00 00 
ffffffff80100283:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010028a:	00 00 00 00 
ffffffff8010028e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100295:	00 00 00 00 
ffffffff80100299:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002a0:	00 00 00 00 
ffffffff801002a4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ab:	00 00 00 00 
ffffffff801002af:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002b6:	00 00 00 00 
ffffffff801002ba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002c1:	00 00 00 00 
ffffffff801002c5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002cc:	00 00 00 00 
ffffffff801002d0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002d7:	00 00 00 00 
ffffffff801002db:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002e2:	00 00 00 00 
ffffffff801002e6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002ed:	00 00 00 00 
ffffffff801002f1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801002f8:	00 00 00 00 
ffffffff801002fc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100303:	00 00 00 00 
ffffffff80100307:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010030e:	00 00 00 00 
ffffffff80100312:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100319:	00 00 00 00 
ffffffff8010031d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100324:	00 00 00 00 
ffffffff80100328:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010032f:	00 00 00 00 
ffffffff80100333:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010033a:	00 00 00 00 
ffffffff8010033e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100345:	00 00 00 00 
ffffffff80100349:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100350:	00 00 00 00 
ffffffff80100354:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010035b:	00 00 00 00 
ffffffff8010035f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100366:	00 00 00 00 
ffffffff8010036a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100371:	00 00 00 00 
ffffffff80100375:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010037c:	00 00 00 00 
ffffffff80100380:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100387:	00 00 00 00 
ffffffff8010038b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100392:	00 00 00 00 
ffffffff80100396:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010039d:	00 00 00 00 
ffffffff801003a1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003a8:	00 00 00 00 
ffffffff801003ac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003b3:	00 00 00 00 
ffffffff801003b7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003be:	00 00 00 00 
ffffffff801003c2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003c9:	00 00 00 00 
ffffffff801003cd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003d4:	00 00 00 00 
ffffffff801003d8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003df:	00 00 00 00 
ffffffff801003e3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003ea:	00 00 00 00 
ffffffff801003ee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801003f5:	00 00 00 00 
ffffffff801003f9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100400:	00 00 00 00 
ffffffff80100404:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010040b:	00 00 00 00 
ffffffff8010040f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100416:	00 00 00 00 
ffffffff8010041a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100421:	00 00 00 00 
ffffffff80100425:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010042c:	00 00 00 00 
ffffffff80100430:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100437:	00 00 00 00 
ffffffff8010043b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100442:	00 00 00 00 
ffffffff80100446:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010044d:	00 00 00 00 
ffffffff80100451:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100458:	00 00 00 00 
ffffffff8010045c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100463:	00 00 00 00 
ffffffff80100467:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010046e:	00 00 00 00 
ffffffff80100472:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100479:	00 00 00 00 
ffffffff8010047d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100484:	00 00 00 00 
ffffffff80100488:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010048f:	00 00 00 00 
ffffffff80100493:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010049a:	00 00 00 00 
ffffffff8010049e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004a5:	00 00 00 00 
ffffffff801004a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004b0:	00 00 00 00 
ffffffff801004b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004bb:	00 00 00 00 
ffffffff801004bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004c6:	00 00 00 00 
ffffffff801004ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004d1:	00 00 00 00 
ffffffff801004d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004dc:	00 00 00 00 
ffffffff801004e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004e7:	00 00 00 00 
ffffffff801004eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004f2:	00 00 00 00 
ffffffff801004f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801004fd:	00 00 00 00 
ffffffff80100501:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100508:	00 00 00 00 
ffffffff8010050c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100513:	00 00 00 00 
ffffffff80100517:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010051e:	00 00 00 00 
ffffffff80100522:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100529:	00 00 00 00 
ffffffff8010052d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100534:	00 00 00 00 
ffffffff80100538:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010053f:	00 00 00 00 
ffffffff80100543:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010054a:	00 00 00 00 
ffffffff8010054e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100555:	00 00 00 00 
ffffffff80100559:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100560:	00 00 00 00 
ffffffff80100564:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010056b:	00 00 00 00 
ffffffff8010056f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100576:	00 00 00 00 
ffffffff8010057a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100581:	00 00 00 00 
ffffffff80100585:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010058c:	00 00 00 00 
ffffffff80100590:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100597:	00 00 00 00 
ffffffff8010059b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005a2:	00 00 00 00 
ffffffff801005a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ad:	00 00 00 00 
ffffffff801005b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005b8:	00 00 00 00 
ffffffff801005bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005c3:	00 00 00 00 
ffffffff801005c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ce:	00 00 00 00 
ffffffff801005d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005d9:	00 00 00 00 
ffffffff801005dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005e4:	00 00 00 00 
ffffffff801005e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005ef:	00 00 00 00 
ffffffff801005f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801005fa:	00 00 00 00 
ffffffff801005fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100605:	00 00 00 00 
ffffffff80100609:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100610:	00 00 00 00 
ffffffff80100614:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010061b:	00 00 00 00 
ffffffff8010061f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100626:	00 00 00 00 
ffffffff8010062a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100631:	00 00 00 00 
ffffffff80100635:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010063c:	00 00 00 00 
ffffffff80100640:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100647:	00 00 00 00 
ffffffff8010064b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100652:	00 00 00 00 
ffffffff80100656:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010065d:	00 00 00 00 
ffffffff80100661:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100668:	00 00 00 00 
ffffffff8010066c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100673:	00 00 00 00 
ffffffff80100677:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010067e:	00 00 00 00 
ffffffff80100682:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100689:	00 00 00 00 
ffffffff8010068d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100694:	00 00 00 00 
ffffffff80100698:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010069f:	00 00 00 00 
ffffffff801006a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006aa:	00 00 00 00 
ffffffff801006ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006b5:	00 00 00 00 
ffffffff801006b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006c0:	00 00 00 00 
ffffffff801006c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006cb:	00 00 00 00 
ffffffff801006cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006d6:	00 00 00 00 
ffffffff801006da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006e1:	00 00 00 00 
ffffffff801006e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006ec:	00 00 00 00 
ffffffff801006f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801006f7:	00 00 00 00 
ffffffff801006fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100702:	00 00 00 00 
ffffffff80100706:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010070d:	00 00 00 00 
ffffffff80100711:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100718:	00 00 00 00 
ffffffff8010071c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100723:	00 00 00 00 
ffffffff80100727:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010072e:	00 00 00 00 
ffffffff80100732:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100739:	00 00 00 00 
ffffffff8010073d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100744:	00 00 00 00 
ffffffff80100748:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010074f:	00 00 00 00 
ffffffff80100753:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010075a:	00 00 00 00 
ffffffff8010075e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100765:	00 00 00 00 
ffffffff80100769:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100770:	00 00 00 00 
ffffffff80100774:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010077b:	00 00 00 00 
ffffffff8010077f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100786:	00 00 00 00 
ffffffff8010078a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100791:	00 00 00 00 
ffffffff80100795:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010079c:	00 00 00 00 
ffffffff801007a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007a7:	00 00 00 00 
ffffffff801007ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007b2:	00 00 00 00 
ffffffff801007b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007bd:	00 00 00 00 
ffffffff801007c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007c8:	00 00 00 00 
ffffffff801007cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007d3:	00 00 00 00 
ffffffff801007d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007de:	00 00 00 00 
ffffffff801007e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007e9:	00 00 00 00 
ffffffff801007ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007f4:	00 00 00 00 
ffffffff801007f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801007ff:	00 00 00 00 
ffffffff80100803:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010080a:	00 00 00 00 
ffffffff8010080e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100815:	00 00 00 00 
ffffffff80100819:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100820:	00 00 00 00 
ffffffff80100824:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010082b:	00 00 00 00 
ffffffff8010082f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100836:	00 00 00 00 
ffffffff8010083a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100841:	00 00 00 00 
ffffffff80100845:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010084c:	00 00 00 00 
ffffffff80100850:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100857:	00 00 00 00 
ffffffff8010085b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100862:	00 00 00 00 
ffffffff80100866:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010086d:	00 00 00 00 
ffffffff80100871:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100878:	00 00 00 00 
ffffffff8010087c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100883:	00 00 00 00 
ffffffff80100887:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010088e:	00 00 00 00 
ffffffff80100892:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100899:	00 00 00 00 
ffffffff8010089d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008a4:	00 00 00 00 
ffffffff801008a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008af:	00 00 00 00 
ffffffff801008b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008ba:	00 00 00 00 
ffffffff801008be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008c5:	00 00 00 00 
ffffffff801008c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008d0:	00 00 00 00 
ffffffff801008d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008db:	00 00 00 00 
ffffffff801008df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008e6:	00 00 00 00 
ffffffff801008ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008f1:	00 00 00 00 
ffffffff801008f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801008fc:	00 00 00 00 
ffffffff80100900:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100907:	00 00 00 00 
ffffffff8010090b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100912:	00 00 00 00 
ffffffff80100916:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010091d:	00 00 00 00 
ffffffff80100921:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100928:	00 00 00 00 
ffffffff8010092c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100933:	00 00 00 00 
ffffffff80100937:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010093e:	00 00 00 00 
ffffffff80100942:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100949:	00 00 00 00 
ffffffff8010094d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100954:	00 00 00 00 
ffffffff80100958:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010095f:	00 00 00 00 
ffffffff80100963:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010096a:	00 00 00 00 
ffffffff8010096e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100975:	00 00 00 00 
ffffffff80100979:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100980:	00 00 00 00 
ffffffff80100984:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010098b:	00 00 00 00 
ffffffff8010098f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100996:	00 00 00 00 
ffffffff8010099a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009a1:	00 00 00 00 
ffffffff801009a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ac:	00 00 00 00 
ffffffff801009b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009b7:	00 00 00 00 
ffffffff801009bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009c2:	00 00 00 00 
ffffffff801009c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009cd:	00 00 00 00 
ffffffff801009d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009d8:	00 00 00 00 
ffffffff801009dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009e3:	00 00 00 00 
ffffffff801009e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009ee:	00 00 00 00 
ffffffff801009f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801009f9:	00 00 00 00 
ffffffff801009fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a04:	00 00 00 00 
ffffffff80100a08:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a0f:	00 00 00 00 
ffffffff80100a13:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a1a:	00 00 00 00 
ffffffff80100a1e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a25:	00 00 00 00 
ffffffff80100a29:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a30:	00 00 00 00 
ffffffff80100a34:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a3b:	00 00 00 00 
ffffffff80100a3f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a46:	00 00 00 00 
ffffffff80100a4a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a51:	00 00 00 00 
ffffffff80100a55:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a5c:	00 00 00 00 
ffffffff80100a60:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a67:	00 00 00 00 
ffffffff80100a6b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a72:	00 00 00 00 
ffffffff80100a76:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a7d:	00 00 00 00 
ffffffff80100a81:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a88:	00 00 00 00 
ffffffff80100a8c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a93:	00 00 00 00 
ffffffff80100a97:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100a9e:	00 00 00 00 
ffffffff80100aa2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aa9:	00 00 00 00 
ffffffff80100aad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ab4:	00 00 00 00 
ffffffff80100ab8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100abf:	00 00 00 00 
ffffffff80100ac3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aca:	00 00 00 00 
ffffffff80100ace:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ad5:	00 00 00 00 
ffffffff80100ad9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ae0:	00 00 00 00 
ffffffff80100ae4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100aeb:	00 00 00 00 
ffffffff80100aef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100af6:	00 00 00 00 
ffffffff80100afa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b01:	00 00 00 00 
ffffffff80100b05:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b0c:	00 00 00 00 
ffffffff80100b10:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b17:	00 00 00 00 
ffffffff80100b1b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b22:	00 00 00 00 
ffffffff80100b26:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b2d:	00 00 00 00 
ffffffff80100b31:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b38:	00 00 00 00 
ffffffff80100b3c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b43:	00 00 00 00 
ffffffff80100b47:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b4e:	00 00 00 00 
ffffffff80100b52:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b59:	00 00 00 00 
ffffffff80100b5d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b64:	00 00 00 00 
ffffffff80100b68:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b6f:	00 00 00 00 
ffffffff80100b73:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b7a:	00 00 00 00 
ffffffff80100b7e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b85:	00 00 00 00 
ffffffff80100b89:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b90:	00 00 00 00 
ffffffff80100b94:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100b9b:	00 00 00 00 
ffffffff80100b9f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ba6:	00 00 00 00 
ffffffff80100baa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bb1:	00 00 00 00 
ffffffff80100bb5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bbc:	00 00 00 00 
ffffffff80100bc0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bc7:	00 00 00 00 
ffffffff80100bcb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bd2:	00 00 00 00 
ffffffff80100bd6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bdd:	00 00 00 00 
ffffffff80100be1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100be8:	00 00 00 00 
ffffffff80100bec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bf3:	00 00 00 00 
ffffffff80100bf7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100bfe:	00 00 00 00 
ffffffff80100c02:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c09:	00 00 00 00 
ffffffff80100c0d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c14:	00 00 00 00 
ffffffff80100c18:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c1f:	00 00 00 00 
ffffffff80100c23:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c2a:	00 00 00 00 
ffffffff80100c2e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c35:	00 00 00 00 
ffffffff80100c39:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c40:	00 00 00 00 
ffffffff80100c44:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c4b:	00 00 00 00 
ffffffff80100c4f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c56:	00 00 00 00 
ffffffff80100c5a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c61:	00 00 00 00 
ffffffff80100c65:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c6c:	00 00 00 00 
ffffffff80100c70:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c77:	00 00 00 00 
ffffffff80100c7b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c82:	00 00 00 00 
ffffffff80100c86:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c8d:	00 00 00 00 
ffffffff80100c91:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100c98:	00 00 00 00 
ffffffff80100c9c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ca3:	00 00 00 00 
ffffffff80100ca7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cae:	00 00 00 00 
ffffffff80100cb2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cb9:	00 00 00 00 
ffffffff80100cbd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cc4:	00 00 00 00 
ffffffff80100cc8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ccf:	00 00 00 00 
ffffffff80100cd3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cda:	00 00 00 00 
ffffffff80100cde:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ce5:	00 00 00 00 
ffffffff80100ce9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cf0:	00 00 00 00 
ffffffff80100cf4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100cfb:	00 00 00 00 
ffffffff80100cff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d06:	00 00 00 00 
ffffffff80100d0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d11:	00 00 00 00 
ffffffff80100d15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d1c:	00 00 00 00 
ffffffff80100d20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d27:	00 00 00 00 
ffffffff80100d2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d32:	00 00 00 00 
ffffffff80100d36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d3d:	00 00 00 00 
ffffffff80100d41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d48:	00 00 00 00 
ffffffff80100d4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d53:	00 00 00 00 
ffffffff80100d57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d5e:	00 00 00 00 
ffffffff80100d62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d69:	00 00 00 00 
ffffffff80100d6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d74:	00 00 00 00 
ffffffff80100d78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d7f:	00 00 00 00 
ffffffff80100d83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d8a:	00 00 00 00 
ffffffff80100d8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100d95:	00 00 00 00 
ffffffff80100d99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100da0:	00 00 00 00 
ffffffff80100da4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dab:	00 00 00 00 
ffffffff80100daf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100db6:	00 00 00 00 
ffffffff80100dba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dc1:	00 00 00 00 
ffffffff80100dc5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dcc:	00 00 00 00 
ffffffff80100dd0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100dd7:	00 00 00 00 
ffffffff80100ddb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100de2:	00 00 00 00 
ffffffff80100de6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ded:	00 00 00 00 
ffffffff80100df1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100df8:	00 00 00 00 
ffffffff80100dfc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e03:	00 00 00 00 
ffffffff80100e07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e0e:	00 00 00 00 
ffffffff80100e12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e19:	00 00 00 00 
ffffffff80100e1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e24:	00 00 00 00 
ffffffff80100e28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e2f:	00 00 00 00 
ffffffff80100e33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e3a:	00 00 00 00 
ffffffff80100e3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e45:	00 00 00 00 
ffffffff80100e49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e50:	00 00 00 00 
ffffffff80100e54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e5b:	00 00 00 00 
ffffffff80100e5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e66:	00 00 00 00 
ffffffff80100e6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e71:	00 00 00 00 
ffffffff80100e75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e7c:	00 00 00 00 
ffffffff80100e80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e87:	00 00 00 00 
ffffffff80100e8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e92:	00 00 00 00 
ffffffff80100e96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100e9d:	00 00 00 00 
ffffffff80100ea1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ea8:	00 00 00 00 
ffffffff80100eac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eb3:	00 00 00 00 
ffffffff80100eb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ebe:	00 00 00 00 
ffffffff80100ec2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ec9:	00 00 00 00 
ffffffff80100ecd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ed4:	00 00 00 00 
ffffffff80100ed8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100edf:	00 00 00 00 
ffffffff80100ee3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100eea:	00 00 00 00 
ffffffff80100eee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ef5:	00 00 00 00 
ffffffff80100ef9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f00:	00 00 00 00 
ffffffff80100f04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f0b:	00 00 00 00 
ffffffff80100f0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f16:	00 00 00 00 
ffffffff80100f1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f21:	00 00 00 00 
ffffffff80100f25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f2c:	00 00 00 00 
ffffffff80100f30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f37:	00 00 00 00 
ffffffff80100f3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f42:	00 00 00 00 
ffffffff80100f46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f4d:	00 00 00 00 
ffffffff80100f51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f58:	00 00 00 00 
ffffffff80100f5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f63:	00 00 00 00 
ffffffff80100f67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f6e:	00 00 00 00 
ffffffff80100f72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f79:	00 00 00 00 
ffffffff80100f7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f84:	00 00 00 00 
ffffffff80100f88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f8f:	00 00 00 00 
ffffffff80100f93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100f9a:	00 00 00 00 
ffffffff80100f9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fa5:	00 00 00 00 
ffffffff80100fa9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fb0:	00 00 00 00 
ffffffff80100fb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fbb:	00 00 00 00 
ffffffff80100fbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fc6:	00 00 00 00 
ffffffff80100fca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fd1:	00 00 00 00 
ffffffff80100fd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fdc:	00 00 00 00 
ffffffff80100fe0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100fe7:	00 00 00 00 
ffffffff80100feb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80100ff2:	00 00 00 00 
ffffffff80100ff6:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
ffffffff80100ffd:	00 00 00 
	...

ffffffff80108000 <__RME_X64_Mboot_Entry>:
/* The entry point after the bootloader finishes *****************************/
    .code32
    .align              16
__RME_X64_Mboot_Entry:
     /* EBX contains Multiboot data structure, let's relocate it to some other places */
     MOV                %EBX,%ESI
ffffffff80108000:	89 de                	mov    %ebx,%esi
     /* Zero 7 pages for our bootstrap page tables, PML4 @ 0x101000 */
     CLD
ffffffff80108002:	fc                   	cld
     XOR                %EAX,%EAX
ffffffff80108003:	31 c0                	xor    %eax,%eax
     MOV                $0x101000,%EDI
ffffffff80108005:	bf 00 10 10 00       	mov    $0x101000,%edi
     MOV                $0x7000,%ECX
ffffffff8010800a:	b9 00 70 00 00       	mov    $0x7000,%ecx
     REP STOSB
ffffffff8010800f:	f3 aa                	rep stos %al,%es:(%rdi)
     /* PML4[0] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff80108011:	b8 03 20 10 00       	mov    $0x102003,%eax
     MOV                %EAX,0x101000
ffffffff80108016:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff8010801d:	20 10 
     /* PML4[256] -> PDP-A @ 0x102000 */
     MOV                $(0x102000|3),%EAX
ffffffff8010801f:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
     MOV                %EAX,0x101800
     /* PML4[511] -> PDP-B @ 0x103000 */
     MOV                $(0x103000|3),%EAX
ffffffff80108025:	b8 03 30 10 00       	mov    $0x103003,%eax
     MOV                %EAX,0x101FF8
ffffffff8010802a:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff80108031:	40 10 
     /* PDP-A[0] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff80108033:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
     MOV                %EAX,0x102000
     /* PDP-A[1] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108039:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x102008
ffffffff8010803e:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80108045:	60 10 
     /* PDP-A[2] -> PDE-C @ 0x106000 */
     MOV                $(0x106000|3),%EAX
ffffffff80108047:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
     MOV                %EAX,0x102010
     /* PDP-A[3] -> PDE-D @ 0x107000 unbufferable uncacheable */
     MOV                $(0x107000|3|0x18),%EAX
ffffffff8010804d:	b8 1b 70 10 00       	mov    $0x10701b,%eax
     MOV                %EAX,0x102018
ffffffff80108052:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80108059:	40 10 
     /* PDP-B[510] -> PDE-A @ 0x104000 */
     MOV                $(0x104000|3),%EAX
ffffffff8010805b:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
     MOV                %EAX,0x103FF0
     /* PDP-B[511] -> PDE-B @ 0x105000 */
     MOV                $(0x105000|3),%EAX
ffffffff80108061:	b8 03 50 10 00       	mov    $0x105003,%eax
     MOV                %EAX,0x103FF8
ffffffff80108066:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff8010806d:	00 00 
     /* PDE-A/B/C/D [0..511/0...511/0..511/0..511] -> 0..4094MB */
     MOV                $(0x83),%EAX
ffffffff8010806f:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
     MOV                $0x104000,%EBX
     MOV                $(512*4),%ECX
ffffffff80108075:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff8010807a <PDE_Loop>:
PDE_Loop:
     MOV                %EAX,(%EBX)
ffffffff8010807a:	89 03                	mov    %eax,(%rbx)
     ADD                $0x200000,%EAX
ffffffff8010807c:	05 00 00 20 00       	add    $0x200000,%eax
     ADD                $0x8,%EBX
ffffffff80108081:	83 c3 08             	add    $0x8,%ebx
     DEC                %ECX
ffffffff80108084:	49 75 f3             	rex.WB jne ffffffff8010807a <PDE_Loop>
     JNZ                PDE_Loop
	 /* Clear ebx for initial processor boot.
      * When secondary processors boot, they'll call through
      * __RME_X64_SMP_Boot, but with a nonzero ebx.
      * We'll reuse these bootstrap pagetables and GDT. */
     XOR                %EBX,%EBX
ffffffff80108087:	31 db                	xor    %ebx,%ebx

ffffffff80108089 <__RME_X64_SMP_Boot_32>:
     /* SMP boot will run directly from here */
__RME_X64_SMP_Boot_32:
     /* CR3 -> PML4 @ 0x101000 */
     MOV                $0x101000,%EAX
ffffffff80108089:	b8 00 10 10 00       	mov    $0x101000,%eax
     MOV                %EAX,%CR3
ffffffff8010808e:	0f 22 d8             	mov    %rax,%cr3
     /* Load GDT */
     LGDT               (Boot_GDT_Desc-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff80108091:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802101c0 <_RME_Pgt_Boot_Con+0x16a>
     /* Enable PAE - CR4.PAE=1 */
     MOV                %CR4,%EAX
ffffffff80108098:	0f 20 e0             	mov    %cr4,%rax
     BTS                $5,%EAX
ffffffff8010809b:	0f ba e8 05          	bts    $0x5,%eax
     MOV                %EAX,%CR4
ffffffff8010809f:	0f 22 e0             	mov    %rax,%cr4
     /* Enable long mode and no execute bit - EFER.LME=1, EFER.NXE=1 */
     MOV                $0xC0000080,%ECX
ffffffff801080a2:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
     RDMSR
ffffffff801080a7:	0f 32                	rdmsr
     BTS                $8,%EAX
ffffffff801080a9:	0f ba e8 08          	bts    $0x8,%eax
     BTS                $11,%EAX
ffffffff801080ad:	0f ba e8 0b          	bts    $0xb,%eax
     WRMSR
ffffffff801080b1:	0f 30                	wrmsr
     /* Enable paging */
     MOV                %CR0,%EAX
ffffffff801080b3:	0f 20 c0             	mov    %cr0,%rax
     BTS                $31,%EAX
ffffffff801080b6:	0f ba e8 1f          	bts    $0x1f,%eax
     MOV                %EAX,%CR0
ffffffff801080ba:	0f 22 c0             	mov    %rax,%cr0
     /* Enable PCID - CR4.PCIDE=1 FIXME: this made things slower - due to extra logic for PCID processing *//*
     MOV                %CR4,%EAX
     BTS                $17,%EAX
     MOV                %EAX,%CR4 */
     /* shift to 64bit segment */
     LJMP               $8,$(Boot_Low_64-__RME_X64_Mboot_Header+__RME_X64_Mboot_Load_Addr)
ffffffff801080bd:	ea                   	(bad)
ffffffff801080be:	d0 80 10 00 08 00    	rolb   $1,0x80010(%rax)
ffffffff801080c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801080cb:	00 00 00 00 
ffffffff801080cf:	90                   	nop

ffffffff801080d0 <Boot_Low_64>:

/* Now we are in 64-bit mode *************************************************/
    .align              16
    .code64
Boot_Low_64:
    movq                $Boot_High_64,%RAX
ffffffff801080d0:	48 c7 c0 d9 80 10 80 	mov    $0xffffffff801080d9,%rax
    jmp                 *%RAX
ffffffff801080d7:	ff e0                	jmp    *%rax

ffffffff801080d9 <_start>:
_start:
Boot_High_64:
    /* ensure data segment registers are sane - zero out all of them */
    XOR                 %RAX,%RAX
ffffffff801080d9:	48 31 c0             	xor    %rax,%rax
    /* Below are all 16-bit moves */
    MOV                 %AX,%SS
ffffffff801080dc:	8e d0                	mov    %eax,%ss
    MOV                 %AX,%DS
ffffffff801080de:	8e d8                	mov    %eax,%ds
    MOV                 %AX,%ES
ffffffff801080e0:	8e c0                	mov    %eax,%es
    MOV                 %AX,%FS
ffffffff801080e2:	8e e0                	mov    %eax,%fs
    MOV                 %AX,%GS
ffffffff801080e4:	8e e8                	mov    %eax,%gs
    /* Check to see if we're booting a secondary core */
    TEST                %EBX,%EBX
ffffffff801080e6:	85 db                	test   %ebx,%ebx
    JNZ                 Boot_SMP_64
ffffffff801080e8:	75 14                	jne    ffffffff801080fe <Boot_SMP_64>
    /* Setup initial stack - this is hard-coded at low memory */
    MOV                 $__RME_X64_Kern_Boot_Stack,%RAX
ffffffff801080ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
    MOV                 %RAX,%RSP
ffffffff801080f1:	48 89 c4             	mov    %rax,%rsp
    /* Pass the physical address of RSI to it */
    MOV                 %RSI,%RDI
ffffffff801080f4:	48 89 f7             	mov    %rsi,%rdi
    JMP                 main
ffffffff801080f7:	e9 c6 30 11 00       	jmp    ffffffff8021b1c2 <main>
    JMP                 .
ffffffff801080fc:	eb fe                	jmp    ffffffff801080fc <_start+0x23>

ffffffff801080fe <Boot_SMP_64>:
Boot_SMP_64:
    MOV                 $0x7000,%RAX
ffffffff801080fe:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
    MOV                 -16(%RAX),%RSP
ffffffff80108105:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
    JMP                 __RME_SMP_Low_Level_Init
ffffffff80108109:	e9 62 d3 11 00       	jmp    ffffffff80225470 <__RME_SMP_Low_Level_Init>
    JMP                 .
ffffffff8010810e:	eb fe                	jmp    ffffffff8010810e <Boot_SMP_64+0x10>

ffffffff80108110 <Boot_GDT>:
	...
ffffffff8010811c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80108122:	00 00                	add    %al,(%rax)
ffffffff80108124:	00                   	.byte 0
ffffffff80108125:	90                   	nop
	...

ffffffff80108128 <Boot_GDT_Desc>:
ffffffff80108128:	17                   	(bad)
ffffffff80108129:	00 10                	add    %dl,(%rax)
ffffffff8010812b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80108131:	00 90 66 66 2e 0f    	add    %dl,0xf2e6666(%rax)
ffffffff80108137:	1f                   	(bad)
ffffffff80108138:	84 00                	test   %al,(%rax)
ffffffff8010813a:	00 00                	add    %al,(%rax)
ffffffff8010813c:	00 00                	add    %al,(%rax)
ffffffff8010813e:	66 90                	xchg   %ax,%ax
ffffffff80108140:	90                   	nop
ffffffff80108141:	e9 ba 0e 00 00       	jmp    ffffffff80109000 <RME_X64_Kpgt>
ffffffff80108146:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010814d:	00 00 00 00 
ffffffff80108151:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108158:	00 00 00 00 
ffffffff8010815c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108163:	00 00 00 00 
ffffffff80108167:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010816e:	00 00 00 00 
ffffffff80108172:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108179:	00 00 00 00 
ffffffff8010817d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108184:	00 00 00 00 
ffffffff80108188:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010818f:	00 00 00 00 
ffffffff80108193:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010819a:	00 00 00 00 
ffffffff8010819e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081a5:	00 00 00 00 
ffffffff801081a9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081b0:	00 00 00 00 
ffffffff801081b4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081bb:	00 00 00 00 
ffffffff801081bf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081c6:	00 00 00 00 
ffffffff801081ca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081d1:	00 00 00 00 
ffffffff801081d5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081dc:	00 00 00 00 
ffffffff801081e0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081e7:	00 00 00 00 
ffffffff801081eb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081f2:	00 00 00 00 
ffffffff801081f6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801081fd:	00 00 00 00 
ffffffff80108201:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108208:	00 00 00 00 
ffffffff8010820c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108213:	00 00 00 00 
ffffffff80108217:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010821e:	00 00 00 00 
ffffffff80108222:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108229:	00 00 00 00 
ffffffff8010822d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108234:	00 00 00 00 
ffffffff80108238:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010823f:	00 00 00 00 
ffffffff80108243:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010824a:	00 00 00 00 
ffffffff8010824e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108255:	00 00 00 00 
ffffffff80108259:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108260:	00 00 00 00 
ffffffff80108264:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010826b:	00 00 00 00 
ffffffff8010826f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108276:	00 00 00 00 
ffffffff8010827a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108281:	00 00 00 00 
ffffffff80108285:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010828c:	00 00 00 00 
ffffffff80108290:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108297:	00 00 00 00 
ffffffff8010829b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082a2:	00 00 00 00 
ffffffff801082a6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ad:	00 00 00 00 
ffffffff801082b1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082b8:	00 00 00 00 
ffffffff801082bc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082c3:	00 00 00 00 
ffffffff801082c7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ce:	00 00 00 00 
ffffffff801082d2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082d9:	00 00 00 00 
ffffffff801082dd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082e4:	00 00 00 00 
ffffffff801082e8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082ef:	00 00 00 00 
ffffffff801082f3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801082fa:	00 00 00 00 
ffffffff801082fe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108305:	00 00 00 00 
ffffffff80108309:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108310:	00 00 00 00 
ffffffff80108314:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010831b:	00 00 00 00 
ffffffff8010831f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108326:	00 00 00 00 
ffffffff8010832a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108331:	00 00 00 00 
ffffffff80108335:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010833c:	00 00 00 00 
ffffffff80108340:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108347:	00 00 00 00 
ffffffff8010834b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108352:	00 00 00 00 
ffffffff80108356:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010835d:	00 00 00 00 
ffffffff80108361:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108368:	00 00 00 00 
ffffffff8010836c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108373:	00 00 00 00 
ffffffff80108377:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010837e:	00 00 00 00 
ffffffff80108382:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108389:	00 00 00 00 
ffffffff8010838d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108394:	00 00 00 00 
ffffffff80108398:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010839f:	00 00 00 00 
ffffffff801083a3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083aa:	00 00 00 00 
ffffffff801083ae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083b5:	00 00 00 00 
ffffffff801083b9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083c0:	00 00 00 00 
ffffffff801083c4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083cb:	00 00 00 00 
ffffffff801083cf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083d6:	00 00 00 00 
ffffffff801083da:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083e1:	00 00 00 00 
ffffffff801083e5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083ec:	00 00 00 00 
ffffffff801083f0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801083f7:	00 00 00 00 
ffffffff801083fb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108402:	00 00 00 00 
ffffffff80108406:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010840d:	00 00 00 00 
ffffffff80108411:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108418:	00 00 00 00 
ffffffff8010841c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108423:	00 00 00 00 
ffffffff80108427:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010842e:	00 00 00 00 
ffffffff80108432:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108439:	00 00 00 00 
ffffffff8010843d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108444:	00 00 00 00 
ffffffff80108448:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010844f:	00 00 00 00 
ffffffff80108453:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010845a:	00 00 00 00 
ffffffff8010845e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108465:	00 00 00 00 
ffffffff80108469:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108470:	00 00 00 00 
ffffffff80108474:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010847b:	00 00 00 00 
ffffffff8010847f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108486:	00 00 00 00 
ffffffff8010848a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108491:	00 00 00 00 
ffffffff80108495:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010849c:	00 00 00 00 
ffffffff801084a0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084a7:	00 00 00 00 
ffffffff801084ab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084b2:	00 00 00 00 
ffffffff801084b6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084bd:	00 00 00 00 
ffffffff801084c1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084c8:	00 00 00 00 
ffffffff801084cc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084d3:	00 00 00 00 
ffffffff801084d7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084de:	00 00 00 00 
ffffffff801084e2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084e9:	00 00 00 00 
ffffffff801084ed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084f4:	00 00 00 00 
ffffffff801084f8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801084ff:	00 00 00 00 
ffffffff80108503:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010850a:	00 00 00 00 
ffffffff8010850e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108515:	00 00 00 00 
ffffffff80108519:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108520:	00 00 00 00 
ffffffff80108524:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010852b:	00 00 00 00 
ffffffff8010852f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108536:	00 00 00 00 
ffffffff8010853a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108541:	00 00 00 00 
ffffffff80108545:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010854c:	00 00 00 00 
ffffffff80108550:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108557:	00 00 00 00 
ffffffff8010855b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108562:	00 00 00 00 
ffffffff80108566:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010856d:	00 00 00 00 
ffffffff80108571:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108578:	00 00 00 00 
ffffffff8010857c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108583:	00 00 00 00 
ffffffff80108587:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010858e:	00 00 00 00 
ffffffff80108592:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108599:	00 00 00 00 
ffffffff8010859d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085a4:	00 00 00 00 
ffffffff801085a8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085af:	00 00 00 00 
ffffffff801085b3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085ba:	00 00 00 00 
ffffffff801085be:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085c5:	00 00 00 00 
ffffffff801085c9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085d0:	00 00 00 00 
ffffffff801085d4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085db:	00 00 00 00 
ffffffff801085df:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085e6:	00 00 00 00 
ffffffff801085ea:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085f1:	00 00 00 00 
ffffffff801085f5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801085fc:	00 00 00 00 
ffffffff80108600:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108607:	00 00 00 00 
ffffffff8010860b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108612:	00 00 00 00 
ffffffff80108616:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010861d:	00 00 00 00 
ffffffff80108621:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108628:	00 00 00 00 
ffffffff8010862c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108633:	00 00 00 00 
ffffffff80108637:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010863e:	00 00 00 00 
ffffffff80108642:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108649:	00 00 00 00 
ffffffff8010864d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108654:	00 00 00 00 
ffffffff80108658:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010865f:	00 00 00 00 
ffffffff80108663:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010866a:	00 00 00 00 
ffffffff8010866e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108675:	00 00 00 00 
ffffffff80108679:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108680:	00 00 00 00 
ffffffff80108684:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010868b:	00 00 00 00 
ffffffff8010868f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108696:	00 00 00 00 
ffffffff8010869a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086a1:	00 00 00 00 
ffffffff801086a5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ac:	00 00 00 00 
ffffffff801086b0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086b7:	00 00 00 00 
ffffffff801086bb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086c2:	00 00 00 00 
ffffffff801086c6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086cd:	00 00 00 00 
ffffffff801086d1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086d8:	00 00 00 00 
ffffffff801086dc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086e3:	00 00 00 00 
ffffffff801086e7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086ee:	00 00 00 00 
ffffffff801086f2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801086f9:	00 00 00 00 
ffffffff801086fd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108704:	00 00 00 00 
ffffffff80108708:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010870f:	00 00 00 00 
ffffffff80108713:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010871a:	00 00 00 00 
ffffffff8010871e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108725:	00 00 00 00 
ffffffff80108729:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108730:	00 00 00 00 
ffffffff80108734:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010873b:	00 00 00 00 
ffffffff8010873f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108746:	00 00 00 00 
ffffffff8010874a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108751:	00 00 00 00 
ffffffff80108755:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010875c:	00 00 00 00 
ffffffff80108760:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108767:	00 00 00 00 
ffffffff8010876b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108772:	00 00 00 00 
ffffffff80108776:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010877d:	00 00 00 00 
ffffffff80108781:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108788:	00 00 00 00 
ffffffff8010878c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108793:	00 00 00 00 
ffffffff80108797:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010879e:	00 00 00 00 
ffffffff801087a2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087a9:	00 00 00 00 
ffffffff801087ad:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087b4:	00 00 00 00 
ffffffff801087b8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087bf:	00 00 00 00 
ffffffff801087c3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087ca:	00 00 00 00 
ffffffff801087ce:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087d5:	00 00 00 00 
ffffffff801087d9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087e0:	00 00 00 00 
ffffffff801087e4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087eb:	00 00 00 00 
ffffffff801087ef:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801087f6:	00 00 00 00 
ffffffff801087fa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108801:	00 00 00 00 
ffffffff80108805:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010880c:	00 00 00 00 
ffffffff80108810:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108817:	00 00 00 00 
ffffffff8010881b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108822:	00 00 00 00 
ffffffff80108826:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010882d:	00 00 00 00 
ffffffff80108831:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108838:	00 00 00 00 
ffffffff8010883c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108843:	00 00 00 00 
ffffffff80108847:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010884e:	00 00 00 00 
ffffffff80108852:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108859:	00 00 00 00 
ffffffff8010885d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108864:	00 00 00 00 
ffffffff80108868:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010886f:	00 00 00 00 
ffffffff80108873:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010887a:	00 00 00 00 
ffffffff8010887e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108885:	00 00 00 00 
ffffffff80108889:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108890:	00 00 00 00 
ffffffff80108894:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010889b:	00 00 00 00 
ffffffff8010889f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088a6:	00 00 00 00 
ffffffff801088aa:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088b1:	00 00 00 00 
ffffffff801088b5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088bc:	00 00 00 00 
ffffffff801088c0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088c7:	00 00 00 00 
ffffffff801088cb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088d2:	00 00 00 00 
ffffffff801088d6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088dd:	00 00 00 00 
ffffffff801088e1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088e8:	00 00 00 00 
ffffffff801088ec:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088f3:	00 00 00 00 
ffffffff801088f7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801088fe:	00 00 00 00 
ffffffff80108902:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108909:	00 00 00 00 
ffffffff8010890d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108914:	00 00 00 00 
ffffffff80108918:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010891f:	00 00 00 00 
ffffffff80108923:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010892a:	00 00 00 00 
ffffffff8010892e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108935:	00 00 00 00 
ffffffff80108939:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108940:	00 00 00 00 
ffffffff80108944:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010894b:	00 00 00 00 
ffffffff8010894f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108956:	00 00 00 00 
ffffffff8010895a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108961:	00 00 00 00 
ffffffff80108965:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010896c:	00 00 00 00 
ffffffff80108970:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108977:	00 00 00 00 
ffffffff8010897b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108982:	00 00 00 00 
ffffffff80108986:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff8010898d:	00 00 00 00 
ffffffff80108991:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108998:	00 00 00 00 
ffffffff8010899c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089a3:	00 00 00 00 
ffffffff801089a7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089ae:	00 00 00 00 
ffffffff801089b2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089b9:	00 00 00 00 
ffffffff801089bd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089c4:	00 00 00 00 
ffffffff801089c8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089cf:	00 00 00 00 
ffffffff801089d3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089da:	00 00 00 00 
ffffffff801089de:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089e5:	00 00 00 00 
ffffffff801089e9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089f0:	00 00 00 00 
ffffffff801089f4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff801089fb:	00 00 00 00 
ffffffff801089ff:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a06:	00 00 00 00 
ffffffff80108a0a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a11:	00 00 00 00 
ffffffff80108a15:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a1c:	00 00 00 00 
ffffffff80108a20:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a27:	00 00 00 00 
ffffffff80108a2b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a32:	00 00 00 00 
ffffffff80108a36:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a3d:	00 00 00 00 
ffffffff80108a41:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a48:	00 00 00 00 
ffffffff80108a4c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a53:	00 00 00 00 
ffffffff80108a57:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a5e:	00 00 00 00 
ffffffff80108a62:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a69:	00 00 00 00 
ffffffff80108a6d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a74:	00 00 00 00 
ffffffff80108a78:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a7f:	00 00 00 00 
ffffffff80108a83:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a8a:	00 00 00 00 
ffffffff80108a8e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108a95:	00 00 00 00 
ffffffff80108a99:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aa0:	00 00 00 00 
ffffffff80108aa4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aab:	00 00 00 00 
ffffffff80108aaf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ab6:	00 00 00 00 
ffffffff80108aba:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ac1:	00 00 00 00 
ffffffff80108ac5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108acc:	00 00 00 00 
ffffffff80108ad0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ad7:	00 00 00 00 
ffffffff80108adb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ae2:	00 00 00 00 
ffffffff80108ae6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108aed:	00 00 00 00 
ffffffff80108af1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108af8:	00 00 00 00 
ffffffff80108afc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b03:	00 00 00 00 
ffffffff80108b07:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b0e:	00 00 00 00 
ffffffff80108b12:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b19:	00 00 00 00 
ffffffff80108b1d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b24:	00 00 00 00 
ffffffff80108b28:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b2f:	00 00 00 00 
ffffffff80108b33:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b3a:	00 00 00 00 
ffffffff80108b3e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b45:	00 00 00 00 
ffffffff80108b49:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b50:	00 00 00 00 
ffffffff80108b54:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b5b:	00 00 00 00 
ffffffff80108b5f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b66:	00 00 00 00 
ffffffff80108b6a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b71:	00 00 00 00 
ffffffff80108b75:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b7c:	00 00 00 00 
ffffffff80108b80:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b87:	00 00 00 00 
ffffffff80108b8b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b92:	00 00 00 00 
ffffffff80108b96:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108b9d:	00 00 00 00 
ffffffff80108ba1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ba8:	00 00 00 00 
ffffffff80108bac:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bb3:	00 00 00 00 
ffffffff80108bb7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bbe:	00 00 00 00 
ffffffff80108bc2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bc9:	00 00 00 00 
ffffffff80108bcd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bd4:	00 00 00 00 
ffffffff80108bd8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bdf:	00 00 00 00 
ffffffff80108be3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bea:	00 00 00 00 
ffffffff80108bee:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108bf5:	00 00 00 00 
ffffffff80108bf9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c00:	00 00 00 00 
ffffffff80108c04:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c0b:	00 00 00 00 
ffffffff80108c0f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c16:	00 00 00 00 
ffffffff80108c1a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c21:	00 00 00 00 
ffffffff80108c25:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c2c:	00 00 00 00 
ffffffff80108c30:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c37:	00 00 00 00 
ffffffff80108c3b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c42:	00 00 00 00 
ffffffff80108c46:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c4d:	00 00 00 00 
ffffffff80108c51:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c58:	00 00 00 00 
ffffffff80108c5c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c63:	00 00 00 00 
ffffffff80108c67:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c6e:	00 00 00 00 
ffffffff80108c72:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c79:	00 00 00 00 
ffffffff80108c7d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c84:	00 00 00 00 
ffffffff80108c88:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c8f:	00 00 00 00 
ffffffff80108c93:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108c9a:	00 00 00 00 
ffffffff80108c9e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ca5:	00 00 00 00 
ffffffff80108ca9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cb0:	00 00 00 00 
ffffffff80108cb4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cbb:	00 00 00 00 
ffffffff80108cbf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cc6:	00 00 00 00 
ffffffff80108cca:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cd1:	00 00 00 00 
ffffffff80108cd5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cdc:	00 00 00 00 
ffffffff80108ce0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ce7:	00 00 00 00 
ffffffff80108ceb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cf2:	00 00 00 00 
ffffffff80108cf6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108cfd:	00 00 00 00 
ffffffff80108d01:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d08:	00 00 00 00 
ffffffff80108d0c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d13:	00 00 00 00 
ffffffff80108d17:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d1e:	00 00 00 00 
ffffffff80108d22:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d29:	00 00 00 00 
ffffffff80108d2d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d34:	00 00 00 00 
ffffffff80108d38:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d3f:	00 00 00 00 
ffffffff80108d43:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d4a:	00 00 00 00 
ffffffff80108d4e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d55:	00 00 00 00 
ffffffff80108d59:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d60:	00 00 00 00 
ffffffff80108d64:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d6b:	00 00 00 00 
ffffffff80108d6f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d76:	00 00 00 00 
ffffffff80108d7a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d81:	00 00 00 00 
ffffffff80108d85:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d8c:	00 00 00 00 
ffffffff80108d90:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108d97:	00 00 00 00 
ffffffff80108d9b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108da2:	00 00 00 00 
ffffffff80108da6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dad:	00 00 00 00 
ffffffff80108db1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108db8:	00 00 00 00 
ffffffff80108dbc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dc3:	00 00 00 00 
ffffffff80108dc7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dce:	00 00 00 00 
ffffffff80108dd2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dd9:	00 00 00 00 
ffffffff80108ddd:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108de4:	00 00 00 00 
ffffffff80108de8:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108def:	00 00 00 00 
ffffffff80108df3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108dfa:	00 00 00 00 
ffffffff80108dfe:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e05:	00 00 00 00 
ffffffff80108e09:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e10:	00 00 00 00 
ffffffff80108e14:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e1b:	00 00 00 00 
ffffffff80108e1f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e26:	00 00 00 00 
ffffffff80108e2a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e31:	00 00 00 00 
ffffffff80108e35:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e3c:	00 00 00 00 
ffffffff80108e40:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e47:	00 00 00 00 
ffffffff80108e4b:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e52:	00 00 00 00 
ffffffff80108e56:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e5d:	00 00 00 00 
ffffffff80108e61:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e68:	00 00 00 00 
ffffffff80108e6c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e73:	00 00 00 00 
ffffffff80108e77:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e7e:	00 00 00 00 
ffffffff80108e82:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e89:	00 00 00 00 
ffffffff80108e8d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e94:	00 00 00 00 
ffffffff80108e98:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108e9f:	00 00 00 00 
ffffffff80108ea3:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eaa:	00 00 00 00 
ffffffff80108eae:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eb5:	00 00 00 00 
ffffffff80108eb9:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ec0:	00 00 00 00 
ffffffff80108ec4:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ecb:	00 00 00 00 
ffffffff80108ecf:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ed6:	00 00 00 00 
ffffffff80108eda:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ee1:	00 00 00 00 
ffffffff80108ee5:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108eec:	00 00 00 00 
ffffffff80108ef0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ef7:	00 00 00 00 
ffffffff80108efb:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f02:	00 00 00 00 
ffffffff80108f06:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f0d:	00 00 00 00 
ffffffff80108f11:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f18:	00 00 00 00 
ffffffff80108f1c:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f23:	00 00 00 00 
ffffffff80108f27:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f2e:	00 00 00 00 
ffffffff80108f32:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f39:	00 00 00 00 
ffffffff80108f3d:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f44:	00 00 00 00 
ffffffff80108f48:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f4f:	00 00 00 00 
ffffffff80108f53:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f5a:	00 00 00 00 
ffffffff80108f5e:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f65:	00 00 00 00 
ffffffff80108f69:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f70:	00 00 00 00 
ffffffff80108f74:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f7b:	00 00 00 00 
ffffffff80108f7f:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f86:	00 00 00 00 
ffffffff80108f8a:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f91:	00 00 00 00 
ffffffff80108f95:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108f9c:	00 00 00 00 
ffffffff80108fa0:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fa7:	00 00 00 00 
ffffffff80108fab:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fb2:	00 00 00 00 
ffffffff80108fb6:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fbd:	00 00 00 00 
ffffffff80108fc1:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fc8:	00 00 00 00 
ffffffff80108fcc:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fd3:	00 00 00 00 
ffffffff80108fd7:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fde:	00 00 00 00 
ffffffff80108fe2:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108fe9:	00 00 00 00 
ffffffff80108fed:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
ffffffff80108ff4:	00 00 00 00 
ffffffff80108ff8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80108fff:	00 

ffffffff80109000 <RME_X64_Kpgt>:
	...

ffffffff8020b800 <__RME_X64_In>:
Input       : ptr_t Port - The port to output to.
Output      : None.
Return      : ptr_t - The data received from that port.
******************************************************************************/
__RME_X64_In:
    PUSHQ               %RDX
ffffffff8020b800:	52                   	push   %rdx
    MOVQ                %RDI,%RDX
ffffffff8020b801:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RAX,%RAX
ffffffff8020b804:	48 89 c0             	mov    %rax,%rax
    INB                 (%DX),%AL
ffffffff8020b807:	ec                   	in     (%dx),%al
    POPQ                %RDX
ffffffff8020b808:	5a                   	pop    %rdx
    RETQ
ffffffff8020b809:	c3                   	ret

ffffffff8020b80a <__RME_X64_Out>:
                 ptr_t Data - The data to send to that port.
Output         : None.
Return         : None.
******************************************************************************/
__RME_X64_Out:
    PUSHQ               %RDX
ffffffff8020b80a:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b80b:	50                   	push   %rax
    MOVQ                %RDI,%RDX
ffffffff8020b80c:	48 89 fa             	mov    %rdi,%rdx
    MOVQ                %RSI,%RAX
ffffffff8020b80f:	48 89 f0             	mov    %rsi,%rax
    OUTB                %AL,(%DX)
ffffffff8020b812:	ee                   	out    %al,(%dx)
    POPQ                %RAX
ffffffff8020b813:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b814:	5a                   	pop    %rdx
    RETQ
ffffffff8020b815:	c3                   	ret

ffffffff8020b816 <__RME_X64_Read_MSR>:
Input       : ptr_t MSR - The MSR to read.
Output      : None.
Return      : ptr_t - The content of the MSR.
******************************************************************************/
__RME_X64_Read_MSR:
    PUSHQ               %RCX
ffffffff8020b816:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b817:	52                   	push   %rdx
    MOVQ                %RDI,%RCX
ffffffff8020b818:	48 89 f9             	mov    %rdi,%rcx
    XORQ                %RAX,%RAX
ffffffff8020b81b:	48 31 c0             	xor    %rax,%rax
    RDMSR
ffffffff8020b81e:	0f 32                	rdmsr
    SHLQ                $32,%RDX
ffffffff8020b820:	48 c1 e2 20          	shl    $0x20,%rdx
    ADDQ                %RDX,%RAX
ffffffff8020b824:	48 01 d0             	add    %rdx,%rax
    POPQ                %RDX
ffffffff8020b827:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b828:	59                   	pop    %rcx
    RETQ
ffffffff8020b829:	c3                   	ret

ffffffff8020b82a <__RME_X64_Write_MSR>:
              ptr_t Value - The value to write to it.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_MSR:
    PUSHQ               %RCX
ffffffff8020b82a:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b82b:	52                   	push   %rdx
    PUSHQ               %RAX
ffffffff8020b82c:	50                   	push   %rax
    MOVQ                %RDI,%RCX
ffffffff8020b82d:	48 89 f9             	mov    %rdi,%rcx
    MOVL                %ESI,%EAX
ffffffff8020b830:	89 f0                	mov    %esi,%eax
    MOVQ                %RSI,%RDX
ffffffff8020b832:	48 89 f2             	mov    %rsi,%rdx
    SHR                 $32,%RDX
ffffffff8020b835:	48 c1 ea 20          	shr    $0x20,%rdx
    WRMSR
ffffffff8020b839:	0f 30                	wrmsr
    POPQ                %RAX
ffffffff8020b83b:	58                   	pop    %rax
    POPQ                %RDX
ffffffff8020b83c:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b83d:	59                   	pop    %rcx
    RETQ
ffffffff8020b83e:	c3                   	ret

ffffffff8020b83f <__RME_X64_CPU_Local_Get>:
Input       : None.
Output      : None.
Return      : struct RME_CPU_Local* - The CPU-local data structures.
******************************************************************************/
__RME_X64_CPU_Local_Get:
    MOVQ                %GS:(8192-8*3),%RAX
ffffffff8020b83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020b846:	00 00 
    RETQ
ffffffff8020b848:	c3                   	ret

ffffffff8020b849 <__RME_X64_CPUID_Get>:
              ptr_t* ECX - The ECX info.
              ptr_t* EDX - The EDX info.
Return      : ptr_t - The maximum number for CPUID instruction.
******************************************************************************/
__RME_X64_CPUID_Get:
    PUSHQ               %R8
ffffffff8020b849:	41 50                	push   %r8
    PUSHQ               %R9
ffffffff8020b84b:	41 51                	push   %r9
    PUSHQ               %RBX
ffffffff8020b84d:	53                   	push   %rbx
    PUSHQ               %RCX
ffffffff8020b84e:	51                   	push   %rcx
    PUSHQ               %RDX
ffffffff8020b84f:	52                   	push   %rdx

    MOVQ                %RDI,%RAX
ffffffff8020b850:	48 89 f8             	mov    %rdi,%rax
    MOVQ                %RDX,%R8
ffffffff8020b853:	49 89 d0             	mov    %rdx,%r8
    MOVQ                %RCX,%R9
ffffffff8020b856:	49 89 c9             	mov    %rcx,%r9

    MOVQ                (%RSI),%RBX
ffffffff8020b859:	48 8b 1e             	mov    (%rsi),%rbx
    MOVQ                (%R8),%RCX
ffffffff8020b85c:	49 8b 08             	mov    (%r8),%rcx
    MOVQ                (%R9),%RDX
ffffffff8020b85f:	49 8b 11             	mov    (%r9),%rdx
    CPUID
ffffffff8020b862:	0f a2                	cpuid
    MOVQ                %RBX,(%RSI)
ffffffff8020b864:	48 89 1e             	mov    %rbx,(%rsi)
    MOVQ                %RCX,(%R8)
ffffffff8020b867:	49 89 08             	mov    %rcx,(%r8)
    MOVQ                %RDX,(%R9)
ffffffff8020b86a:	49 89 11             	mov    %rdx,(%r9)

    POPQ                %RDX
ffffffff8020b86d:	5a                   	pop    %rdx
    POPQ                %RCX
ffffffff8020b86e:	59                   	pop    %rcx
    POPQ                %RBX
ffffffff8020b86f:	5b                   	pop    %rbx
    POPQ                %R9
ffffffff8020b870:	41 59                	pop    %r9
    POPQ                %R8
ffffffff8020b872:	41 58                	pop    %r8
    RETQ
ffffffff8020b874:	c3                   	ret

ffffffff8020b875 <__RME_X64_GDT_Load>:
Input       : ptr_t* GDTR - The pointer to the GDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_GDT_Load:
    LGDT                (%RDI)
ffffffff8020b875:	0f 01 17             	lgdt   (%rdi)
    RETQ
ffffffff8020b878:	c3                   	ret

ffffffff8020b879 <__RME_X64_IDT_Load>:
Input       : ptr_t* IDTR - The pointer to the IDT descriptor.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_IDT_Load:
    LIDT                (%RDI)
ffffffff8020b879:	0f 01 1f             	lidt   (%rdi)
    RETQ
ffffffff8020b87c:	c3                   	ret

ffffffff8020b87d <__RME_X64_TSS_Load>:
Input       : ptr_t TSS - The TSS's position in GDT.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_TSS_Load:
    LTR                 %DI
ffffffff8020b87d:	0f 00 df             	ltr    %edi
    RETQ
ffffffff8020b880:	c3                   	ret

ffffffff8020b881 <__RME_X64_Comp_Swap>:
              ptr_t New - The new value.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - If successful, 1; else 0.
******************************************************************************/
__RME_X64_Comp_Swap:
    MOVQ                %RSI,%RAX
ffffffff8020b881:	48 89 f0             	mov    %rsi,%rax
    XOR                 %RSI,%RSI
ffffffff8020b884:	48 31 f6             	xor    %rsi,%rsi
    /* In x86, locked instructions act as a fence */
    LOCK CMPXCHGQ       %RDX,(%RDI)
ffffffff8020b887:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
    /* Set the bit if ZF is set */
    SETZ                %SIL
ffffffff8020b88c:	40 0f 94 c6          	sete   %sil
    MOVQ                %RSI,%RAX
ffffffff8020b890:	48 89 f0             	mov    %rsi,%rax
    RETQ
ffffffff8020b893:	c3                   	ret

ffffffff8020b894 <__RME_X64_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_X64_Fetch_Add:
    MOVQ                %RSI,%RAX
ffffffff8020b894:	48 89 f0             	mov    %rsi,%rax
    /* In x86, locked instructions act as a fence */
    LOCK XADDQ          %RAX,(%RDI)
ffffffff8020b897:	f0 48 0f c1 07       	lock xadd %rax,(%rdi)
    RETQ
ffffffff8020b89c:	c3                   	ret

ffffffff8020b89d <__RME_X64_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_X64_Fetch_And:
    MOVQ                (%RDI),%RAX
ffffffff8020b89d:	48 8b 07             	mov    (%rdi),%rax
    /* In x86, locked instructions act as a fence */
    LOCK ANDQ           %RSI,(%RDI)
ffffffff8020b8a0:	f0 48 21 37          	lock and %rsi,(%rdi)
    RETQ
ffffffff8020b8a4:	c3                   	ret

ffffffff8020b8a5 <__RME_X64_Write_Release>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Write_Release:
    MFENCE
ffffffff8020b8a5:	0f ae f0             	mfence
    RETQ
ffffffff8020b8a8:	c3                   	ret

ffffffff8020b8a9 <__RME_X64_Pgt_Set>:
Input       : ptr_t Pgt - The physical address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Pgt_Set:
    MOV                 %RDI,%CR3
ffffffff8020b8a9:	0f 22 df             	mov    %rdi,%cr3
    RETQ
ffffffff8020b8ac:	c3                   	ret

ffffffff8020b8ad <__RME_Disable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Disable_Int:
    /* Disable all interrupts */
    CLI
ffffffff8020b8ad:	fa                   	cli
    RETQ
ffffffff8020b8ae:	c3                   	ret

ffffffff8020b8af <__RME_Enable_Int>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enable_Int:
    /* Enable all interrupts */
    STI
ffffffff8020b8af:	fb                   	sti
    RETQ
ffffffff8020b8b0:	c3                   	ret

ffffffff8020b8b1 <__RME_X64_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_X64_Halt:
    /* Wait for interrupt */
    HLT
ffffffff8020b8b1:	f4                   	hlt
    RETQ
ffffffff8020b8b2:	c3                   	ret

ffffffff8020b8b3 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOVQ                %RDI,%RSP
ffffffff8020b8b3:	48 89 fc             	mov    %rdi,%rsp
    JMP                 RME_Kmain
ffffffff8020b8b6:	e9 a2 16 00 00       	jmp    ffffffff8020cf5d <RME_Kmain>

ffffffff8020b8bb <__RME_X64_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_X64_MSB_Get:
    BSRQ                %RDI,%RAX
ffffffff8020b8bb:	48 0f bd c7          	bsr    %rdi,%rax
    RETQ
ffffffff8020b8bf:	c3                   	ret

ffffffff8020b8c0 <__RME_Enter_User_Mode>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Enter_User_Mode:
    MOVQ                %RDI,%RCX           /* Entry */
ffffffff8020b8c0:	48 89 f9             	mov    %rdi,%rcx
    MOVQ                %RSI,%RSP           /* Stack */
ffffffff8020b8c3:	48 89 f4             	mov    %rsi,%rsp
    MOVQ                $0x3200,%R11        /* Flags - IOPL 3, IF */
ffffffff8020b8c6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
    MOVQ                %RDX,%RDI           /* CPUID */
ffffffff8020b8cd:	48 89 d7             	mov    %rdx,%rdi
    SYSRETQ
ffffffff8020b8d0:	48 0f 07             	sysretq

ffffffff8020b8d3 <__RME_X64_FAULT_DE_Handler>:
    PUSHQ               $\REASON
    JMP                 Fault_Handler
.endm

/* Fault handlers */
FAULT_HANDLER NAME=__RME_X64_FAULT_DE_Handler ERRCODE=0 REASON=0
ffffffff8020b8d3:	0f 01 f8             	swapgs
ffffffff8020b8d6:	6a 00                	push   $0x0
ffffffff8020b8d8:	6a 00                	push   $0x0
ffffffff8020b8da:	e9 a6 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8df <__RME_X64_TRAP_DB_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_DB_Handler ERRCODE=0 REASON=1
ffffffff8020b8df:	0f 01 f8             	swapgs
ffffffff8020b8e2:	6a 00                	push   $0x0
ffffffff8020b8e4:	6a 01                	push   $0x1
ffffffff8020b8e6:	e9 9a 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8eb <__RME_X64_INT_NMI_Handler>:
FAULT_HANDLER NAME=__RME_X64_INT_NMI_Handler ERRCODE=0 REASON=2
ffffffff8020b8eb:	0f 01 f8             	swapgs
ffffffff8020b8ee:	6a 00                	push   $0x0
ffffffff8020b8f0:	6a 02                	push   $0x2
ffffffff8020b8f2:	e9 8e 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b8f7 <__RME_X64_TRAP_BP_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_BP_Handler ERRCODE=0 REASON=3
ffffffff8020b8f7:	0f 01 f8             	swapgs
ffffffff8020b8fa:	6a 00                	push   $0x0
ffffffff8020b8fc:	6a 03                	push   $0x3
ffffffff8020b8fe:	e9 82 00 00 00       	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b903 <__RME_X64_TRAP_OF_Handler>:
FAULT_HANDLER NAME=__RME_X64_TRAP_OF_Handler ERRCODE=0 REASON=4
ffffffff8020b903:	0f 01 f8             	swapgs
ffffffff8020b906:	6a 00                	push   $0x0
ffffffff8020b908:	6a 04                	push   $0x4
ffffffff8020b90a:	eb 79                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b90c <__RME_X64_FAULT_BR_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_BR_Handler ERRCODE=0 REASON=5
ffffffff8020b90c:	0f 01 f8             	swapgs
ffffffff8020b90f:	6a 00                	push   $0x0
ffffffff8020b911:	6a 05                	push   $0x5
ffffffff8020b913:	eb 70                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b915 <__RME_X64_FAULT_UD_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_UD_Handler ERRCODE=0 REASON=6
ffffffff8020b915:	0f 01 f8             	swapgs
ffffffff8020b918:	6a 00                	push   $0x0
ffffffff8020b91a:	6a 06                	push   $0x6
ffffffff8020b91c:	eb 67                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b91e <__RME_X64_FAULT_NM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NM_Handler ERRCODE=0 REASON=7
ffffffff8020b91e:	0f 01 f8             	swapgs
ffffffff8020b921:	6a 00                	push   $0x0
ffffffff8020b923:	6a 07                	push   $0x7
ffffffff8020b925:	eb 5e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b927 <__RME_X64_ABORT_DF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_DF_Handler ERRCODE=1 REASON=8
ffffffff8020b927:	0f 01 f8             	swapgs
ffffffff8020b92a:	6a 08                	push   $0x8
ffffffff8020b92c:	eb 57                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b92e <__RME_X64_ABORT_OLD_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_OLD_MF_Handler ERRCODE=0 REASON=9
ffffffff8020b92e:	0f 01 f8             	swapgs
ffffffff8020b931:	6a 00                	push   $0x0
ffffffff8020b933:	6a 09                	push   $0x9
ffffffff8020b935:	eb 4e                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b937 <__RME_X64_FAULT_TS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_TS_Handler ERRCODE=1 REASON=10
ffffffff8020b937:	0f 01 f8             	swapgs
ffffffff8020b93a:	6a 0a                	push   $0xa
ffffffff8020b93c:	eb 47                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b93e <__RME_X64_FAULT_NP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_NP_Handler ERRCODE=1 REASON=11
ffffffff8020b93e:	0f 01 f8             	swapgs
ffffffff8020b941:	6a 0b                	push   $0xb
ffffffff8020b943:	eb 40                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b945 <__RME_X64_FAULT_SS_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_SS_Handler ERRCODE=1 REASON=12
ffffffff8020b945:	0f 01 f8             	swapgs
ffffffff8020b948:	6a 0c                	push   $0xc
ffffffff8020b94a:	eb 39                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b94c <__RME_X64_FAULT_GP_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_GP_Handler ERRCODE=1 REASON=13
ffffffff8020b94c:	0f 01 f8             	swapgs
ffffffff8020b94f:	6a 0d                	push   $0xd
ffffffff8020b951:	eb 32                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b953 <__RME_X64_FAULT_PF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_PF_Handler ERRCODE=1 REASON=14
ffffffff8020b953:	0f 01 f8             	swapgs
ffffffff8020b956:	6a 0e                	push   $0xe
ffffffff8020b958:	eb 2b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b95a <__RME_X64_FAULT_MF_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_MF_Handler ERRCODE=0 REASON=16
ffffffff8020b95a:	0f 01 f8             	swapgs
ffffffff8020b95d:	6a 00                	push   $0x0
ffffffff8020b95f:	6a 10                	push   $0x10
ffffffff8020b961:	eb 22                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b963 <__RME_X64_FAULT_AC_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_AC_Handler ERRCODE=1 REASON=17
ffffffff8020b963:	0f 01 f8             	swapgs
ffffffff8020b966:	6a 11                	push   $0x11
ffffffff8020b968:	eb 1b                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b96a <__RME_X64_ABORT_MC_Handler>:
FAULT_HANDLER NAME=__RME_X64_ABORT_MC_Handler ERRCODE=0 REASON=18
ffffffff8020b96a:	0f 01 f8             	swapgs
ffffffff8020b96d:	6a 00                	push   $0x0
ffffffff8020b96f:	6a 12                	push   $0x12
ffffffff8020b971:	eb 12                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b973 <__RME_X64_FAULT_XM_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_XM_Handler ERRCODE=0 REASON=19
ffffffff8020b973:	0f 01 f8             	swapgs
ffffffff8020b976:	6a 00                	push   $0x0
ffffffff8020b978:	6a 13                	push   $0x13
ffffffff8020b97a:	eb 09                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b97c <__RME_X64_FAULT_VE_Handler>:
FAULT_HANDLER NAME=__RME_X64_FAULT_VE_Handler ERRCODE=0 REASON=20
ffffffff8020b97c:	0f 01 f8             	swapgs
ffffffff8020b97f:	6a 00                	push   $0x0
ffffffff8020b981:	6a 14                	push   $0x14
ffffffff8020b983:	eb 00                	jmp    ffffffff8020b985 <Fault_Handler>

ffffffff8020b985 <Fault_Handler>:
/* Common function body for fault handlers - reduce I-Cache usage */
Fault_Handler:
    SAVE_GP_REGS
ffffffff8020b985:	41 57                	push   %r15
ffffffff8020b987:	41 56                	push   %r14
ffffffff8020b989:	41 55                	push   %r13
ffffffff8020b98b:	41 54                	push   %r12
ffffffff8020b98d:	41 53                	push   %r11
ffffffff8020b98f:	41 52                	push   %r10
ffffffff8020b991:	41 51                	push   %r9
ffffffff8020b993:	41 50                	push   %r8
ffffffff8020b995:	55                   	push   %rbp
ffffffff8020b996:	57                   	push   %rdi
ffffffff8020b997:	56                   	push   %rsi
ffffffff8020b998:	52                   	push   %rdx
ffffffff8020b999:	51                   	push   %rcx
ffffffff8020b99a:	53                   	push   %rbx
ffffffff8020b99b:	50                   	push   %rax
ffffffff8020b99c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020b9a0:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020b9a2:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020b9a5:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Fault_Handler
ffffffff8020b9aa:	e8 bf aa 01 00       	call   ffffffff8022646e <__RME_X64_Fault_Handler>

    RESTORE_GP_REGS
ffffffff8020b9af:	0f 01 f8             	swapgs
ffffffff8020b9b2:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020b9b6:	8e d8                	mov    %eax,%ds
ffffffff8020b9b8:	58                   	pop    %rax
ffffffff8020b9b9:	5b                   	pop    %rbx
ffffffff8020b9ba:	59                   	pop    %rcx
ffffffff8020b9bb:	5a                   	pop    %rdx
ffffffff8020b9bc:	5e                   	pop    %rsi
ffffffff8020b9bd:	5f                   	pop    %rdi
ffffffff8020b9be:	5d                   	pop    %rbp
ffffffff8020b9bf:	41 58                	pop    %r8
ffffffff8020b9c1:	41 59                	pop    %r9
ffffffff8020b9c3:	41 5a                	pop    %r10
ffffffff8020b9c5:	41 5b                	pop    %r11
ffffffff8020b9c7:	41 5c                	pop    %r12
ffffffff8020b9c9:	41 5d                	pop    %r13
ffffffff8020b9cb:	41 5e                	pop    %r14
ffffffff8020b9cd:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020b9cf:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020b9d3:	48 cf                	iretq

ffffffff8020b9d5 <__RME_X64_USER32_Handler>:
    PUSHQ               $0                  /* Make a dummy error code */
    PUSHQ               $\VECTNUM           /* Interrupt number */
    JMP                 User_Handler
.endm
/* User handlers */
USER_HANDLER NAME=__RME_X64_USER32_Handler VECTNUM=32
ffffffff8020b9d5:	0f 01 f8             	swapgs
ffffffff8020b9d8:	6a 00                	push   $0x0
ffffffff8020b9da:	6a 20                	push   $0x20
ffffffff8020b9dc:	e9 d3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9e1 <__RME_X64_USER33_Handler>:
USER_HANDLER NAME=__RME_X64_USER33_Handler VECTNUM=33
ffffffff8020b9e1:	0f 01 f8             	swapgs
ffffffff8020b9e4:	6a 00                	push   $0x0
ffffffff8020b9e6:	6a 21                	push   $0x21
ffffffff8020b9e8:	e9 c7 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9ed <__RME_X64_USER34_Handler>:
USER_HANDLER NAME=__RME_X64_USER34_Handler VECTNUM=34
ffffffff8020b9ed:	0f 01 f8             	swapgs
ffffffff8020b9f0:	6a 00                	push   $0x0
ffffffff8020b9f2:	6a 22                	push   $0x22
ffffffff8020b9f4:	e9 bb 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020b9f9 <__RME_X64_USER35_Handler>:
USER_HANDLER NAME=__RME_X64_USER35_Handler VECTNUM=35
ffffffff8020b9f9:	0f 01 f8             	swapgs
ffffffff8020b9fc:	6a 00                	push   $0x0
ffffffff8020b9fe:	6a 23                	push   $0x23
ffffffff8020ba00:	e9 af 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba05 <__RME_X64_USER36_Handler>:
USER_HANDLER NAME=__RME_X64_USER36_Handler VECTNUM=36
ffffffff8020ba05:	0f 01 f8             	swapgs
ffffffff8020ba08:	6a 00                	push   $0x0
ffffffff8020ba0a:	6a 24                	push   $0x24
ffffffff8020ba0c:	e9 a3 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba11 <__RME_X64_USER37_Handler>:
USER_HANDLER NAME=__RME_X64_USER37_Handler VECTNUM=37
ffffffff8020ba11:	0f 01 f8             	swapgs
ffffffff8020ba14:	6a 00                	push   $0x0
ffffffff8020ba16:	6a 25                	push   $0x25
ffffffff8020ba18:	e9 97 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba1d <__RME_X64_USER38_Handler>:
USER_HANDLER NAME=__RME_X64_USER38_Handler VECTNUM=38
ffffffff8020ba1d:	0f 01 f8             	swapgs
ffffffff8020ba20:	6a 00                	push   $0x0
ffffffff8020ba22:	6a 26                	push   $0x26
ffffffff8020ba24:	e9 8b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba29 <__RME_X64_USER39_Handler>:
USER_HANDLER NAME=__RME_X64_USER39_Handler VECTNUM=39
ffffffff8020ba29:	0f 01 f8             	swapgs
ffffffff8020ba2c:	6a 00                	push   $0x0
ffffffff8020ba2e:	6a 27                	push   $0x27
ffffffff8020ba30:	e9 7f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba35 <__RME_X64_USER40_Handler>:

USER_HANDLER NAME=__RME_X64_USER40_Handler VECTNUM=40
ffffffff8020ba35:	0f 01 f8             	swapgs
ffffffff8020ba38:	6a 00                	push   $0x0
ffffffff8020ba3a:	6a 28                	push   $0x28
ffffffff8020ba3c:	e9 73 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba41 <__RME_X64_USER41_Handler>:
USER_HANDLER NAME=__RME_X64_USER41_Handler VECTNUM=41
ffffffff8020ba41:	0f 01 f8             	swapgs
ffffffff8020ba44:	6a 00                	push   $0x0
ffffffff8020ba46:	6a 29                	push   $0x29
ffffffff8020ba48:	e9 67 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba4d <__RME_X64_USER42_Handler>:
USER_HANDLER NAME=__RME_X64_USER42_Handler VECTNUM=42
ffffffff8020ba4d:	0f 01 f8             	swapgs
ffffffff8020ba50:	6a 00                	push   $0x0
ffffffff8020ba52:	6a 2a                	push   $0x2a
ffffffff8020ba54:	e9 5b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba59 <__RME_X64_USER43_Handler>:
USER_HANDLER NAME=__RME_X64_USER43_Handler VECTNUM=43
ffffffff8020ba59:	0f 01 f8             	swapgs
ffffffff8020ba5c:	6a 00                	push   $0x0
ffffffff8020ba5e:	6a 2b                	push   $0x2b
ffffffff8020ba60:	e9 4f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba65 <__RME_X64_USER44_Handler>:
USER_HANDLER NAME=__RME_X64_USER44_Handler VECTNUM=44
ffffffff8020ba65:	0f 01 f8             	swapgs
ffffffff8020ba68:	6a 00                	push   $0x0
ffffffff8020ba6a:	6a 2c                	push   $0x2c
ffffffff8020ba6c:	e9 43 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba71 <__RME_X64_USER45_Handler>:
USER_HANDLER NAME=__RME_X64_USER45_Handler VECTNUM=45
ffffffff8020ba71:	0f 01 f8             	swapgs
ffffffff8020ba74:	6a 00                	push   $0x0
ffffffff8020ba76:	6a 2d                	push   $0x2d
ffffffff8020ba78:	e9 37 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba7d <__RME_X64_USER46_Handler>:
USER_HANDLER NAME=__RME_X64_USER46_Handler VECTNUM=46
ffffffff8020ba7d:	0f 01 f8             	swapgs
ffffffff8020ba80:	6a 00                	push   $0x0
ffffffff8020ba82:	6a 2e                	push   $0x2e
ffffffff8020ba84:	e9 2b 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba89 <__RME_X64_USER47_Handler>:
USER_HANDLER NAME=__RME_X64_USER47_Handler VECTNUM=47
ffffffff8020ba89:	0f 01 f8             	swapgs
ffffffff8020ba8c:	6a 00                	push   $0x0
ffffffff8020ba8e:	6a 2f                	push   $0x2f
ffffffff8020ba90:	e9 1f 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020ba95 <__RME_X64_USER48_Handler>:
USER_HANDLER NAME=__RME_X64_USER48_Handler VECTNUM=48
ffffffff8020ba95:	0f 01 f8             	swapgs
ffffffff8020ba98:	6a 00                	push   $0x0
ffffffff8020ba9a:	6a 30                	push   $0x30
ffffffff8020ba9c:	e9 13 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baa1 <__RME_X64_USER49_Handler>:
USER_HANDLER NAME=__RME_X64_USER49_Handler VECTNUM=49
ffffffff8020baa1:	0f 01 f8             	swapgs
ffffffff8020baa4:	6a 00                	push   $0x0
ffffffff8020baa6:	6a 31                	push   $0x31
ffffffff8020baa8:	e9 07 0b 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baad <__RME_X64_USER50_Handler>:

USER_HANDLER NAME=__RME_X64_USER50_Handler VECTNUM=50
ffffffff8020baad:	0f 01 f8             	swapgs
ffffffff8020bab0:	6a 00                	push   $0x0
ffffffff8020bab2:	6a 32                	push   $0x32
ffffffff8020bab4:	e9 fb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bab9 <__RME_X64_USER51_Handler>:
USER_HANDLER NAME=__RME_X64_USER51_Handler VECTNUM=51
ffffffff8020bab9:	0f 01 f8             	swapgs
ffffffff8020babc:	6a 00                	push   $0x0
ffffffff8020babe:	6a 33                	push   $0x33
ffffffff8020bac0:	e9 ef 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bac5 <__RME_X64_USER52_Handler>:
USER_HANDLER NAME=__RME_X64_USER52_Handler VECTNUM=52
ffffffff8020bac5:	0f 01 f8             	swapgs
ffffffff8020bac8:	6a 00                	push   $0x0
ffffffff8020baca:	6a 34                	push   $0x34
ffffffff8020bacc:	e9 e3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bad1 <__RME_X64_USER53_Handler>:
USER_HANDLER NAME=__RME_X64_USER53_Handler VECTNUM=53
ffffffff8020bad1:	0f 01 f8             	swapgs
ffffffff8020bad4:	6a 00                	push   $0x0
ffffffff8020bad6:	6a 35                	push   $0x35
ffffffff8020bad8:	e9 d7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020badd <__RME_X64_USER54_Handler>:
USER_HANDLER NAME=__RME_X64_USER54_Handler VECTNUM=54
ffffffff8020badd:	0f 01 f8             	swapgs
ffffffff8020bae0:	6a 00                	push   $0x0
ffffffff8020bae2:	6a 36                	push   $0x36
ffffffff8020bae4:	e9 cb 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bae9 <__RME_X64_USER55_Handler>:
USER_HANDLER NAME=__RME_X64_USER55_Handler VECTNUM=55
ffffffff8020bae9:	0f 01 f8             	swapgs
ffffffff8020baec:	6a 00                	push   $0x0
ffffffff8020baee:	6a 37                	push   $0x37
ffffffff8020baf0:	e9 bf 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020baf5 <__RME_X64_USER56_Handler>:
USER_HANDLER NAME=__RME_X64_USER56_Handler VECTNUM=56
ffffffff8020baf5:	0f 01 f8             	swapgs
ffffffff8020baf8:	6a 00                	push   $0x0
ffffffff8020bafa:	6a 38                	push   $0x38
ffffffff8020bafc:	e9 b3 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb01 <__RME_X64_USER57_Handler>:
USER_HANDLER NAME=__RME_X64_USER57_Handler VECTNUM=57
ffffffff8020bb01:	0f 01 f8             	swapgs
ffffffff8020bb04:	6a 00                	push   $0x0
ffffffff8020bb06:	6a 39                	push   $0x39
ffffffff8020bb08:	e9 a7 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb0d <__RME_X64_USER58_Handler>:
USER_HANDLER NAME=__RME_X64_USER58_Handler VECTNUM=58
ffffffff8020bb0d:	0f 01 f8             	swapgs
ffffffff8020bb10:	6a 00                	push   $0x0
ffffffff8020bb12:	6a 3a                	push   $0x3a
ffffffff8020bb14:	e9 9b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb19 <__RME_X64_USER59_Handler>:
USER_HANDLER NAME=__RME_X64_USER59_Handler VECTNUM=59
ffffffff8020bb19:	0f 01 f8             	swapgs
ffffffff8020bb1c:	6a 00                	push   $0x0
ffffffff8020bb1e:	6a 3b                	push   $0x3b
ffffffff8020bb20:	e9 8f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb25 <__RME_X64_USER60_Handler>:

USER_HANDLER NAME=__RME_X64_USER60_Handler VECTNUM=60
ffffffff8020bb25:	0f 01 f8             	swapgs
ffffffff8020bb28:	6a 00                	push   $0x0
ffffffff8020bb2a:	6a 3c                	push   $0x3c
ffffffff8020bb2c:	e9 83 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb31 <__RME_X64_USER61_Handler>:
USER_HANDLER NAME=__RME_X64_USER61_Handler VECTNUM=61
ffffffff8020bb31:	0f 01 f8             	swapgs
ffffffff8020bb34:	6a 00                	push   $0x0
ffffffff8020bb36:	6a 3d                	push   $0x3d
ffffffff8020bb38:	e9 77 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb3d <__RME_X64_USER62_Handler>:
USER_HANDLER NAME=__RME_X64_USER62_Handler VECTNUM=62
ffffffff8020bb3d:	0f 01 f8             	swapgs
ffffffff8020bb40:	6a 00                	push   $0x0
ffffffff8020bb42:	6a 3e                	push   $0x3e
ffffffff8020bb44:	e9 6b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb49 <__RME_X64_USER63_Handler>:
USER_HANDLER NAME=__RME_X64_USER63_Handler VECTNUM=63
ffffffff8020bb49:	0f 01 f8             	swapgs
ffffffff8020bb4c:	6a 00                	push   $0x0
ffffffff8020bb4e:	6a 3f                	push   $0x3f
ffffffff8020bb50:	e9 5f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb55 <__RME_X64_USER64_Handler>:
USER_HANDLER NAME=__RME_X64_USER64_Handler VECTNUM=64
ffffffff8020bb55:	0f 01 f8             	swapgs
ffffffff8020bb58:	6a 00                	push   $0x0
ffffffff8020bb5a:	6a 40                	push   $0x40
ffffffff8020bb5c:	e9 53 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb61 <__RME_X64_USER65_Handler>:
USER_HANDLER NAME=__RME_X64_USER65_Handler VECTNUM=65
ffffffff8020bb61:	0f 01 f8             	swapgs
ffffffff8020bb64:	6a 00                	push   $0x0
ffffffff8020bb66:	6a 41                	push   $0x41
ffffffff8020bb68:	e9 47 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb6d <__RME_X64_USER66_Handler>:
USER_HANDLER NAME=__RME_X64_USER66_Handler VECTNUM=66
ffffffff8020bb6d:	0f 01 f8             	swapgs
ffffffff8020bb70:	6a 00                	push   $0x0
ffffffff8020bb72:	6a 42                	push   $0x42
ffffffff8020bb74:	e9 3b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb79 <__RME_X64_USER67_Handler>:
USER_HANDLER NAME=__RME_X64_USER67_Handler VECTNUM=67
ffffffff8020bb79:	0f 01 f8             	swapgs
ffffffff8020bb7c:	6a 00                	push   $0x0
ffffffff8020bb7e:	6a 43                	push   $0x43
ffffffff8020bb80:	e9 2f 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb85 <__RME_X64_USER68_Handler>:
USER_HANDLER NAME=__RME_X64_USER68_Handler VECTNUM=68
ffffffff8020bb85:	0f 01 f8             	swapgs
ffffffff8020bb88:	6a 00                	push   $0x0
ffffffff8020bb8a:	6a 44                	push   $0x44
ffffffff8020bb8c:	e9 23 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb91 <__RME_X64_USER69_Handler>:
USER_HANDLER NAME=__RME_X64_USER69_Handler VECTNUM=69
ffffffff8020bb91:	0f 01 f8             	swapgs
ffffffff8020bb94:	6a 00                	push   $0x0
ffffffff8020bb96:	6a 45                	push   $0x45
ffffffff8020bb98:	e9 17 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bb9d <__RME_X64_USER70_Handler>:

USER_HANDLER NAME=__RME_X64_USER70_Handler VECTNUM=70
ffffffff8020bb9d:	0f 01 f8             	swapgs
ffffffff8020bba0:	6a 00                	push   $0x0
ffffffff8020bba2:	6a 46                	push   $0x46
ffffffff8020bba4:	e9 0b 0a 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bba9 <__RME_X64_USER71_Handler>:
USER_HANDLER NAME=__RME_X64_USER71_Handler VECTNUM=71
ffffffff8020bba9:	0f 01 f8             	swapgs
ffffffff8020bbac:	6a 00                	push   $0x0
ffffffff8020bbae:	6a 47                	push   $0x47
ffffffff8020bbb0:	e9 ff 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbb5 <__RME_X64_USER72_Handler>:
USER_HANDLER NAME=__RME_X64_USER72_Handler VECTNUM=72
ffffffff8020bbb5:	0f 01 f8             	swapgs
ffffffff8020bbb8:	6a 00                	push   $0x0
ffffffff8020bbba:	6a 48                	push   $0x48
ffffffff8020bbbc:	e9 f3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbc1 <__RME_X64_USER73_Handler>:
USER_HANDLER NAME=__RME_X64_USER73_Handler VECTNUM=73
ffffffff8020bbc1:	0f 01 f8             	swapgs
ffffffff8020bbc4:	6a 00                	push   $0x0
ffffffff8020bbc6:	6a 49                	push   $0x49
ffffffff8020bbc8:	e9 e7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbcd <__RME_X64_USER74_Handler>:
USER_HANDLER NAME=__RME_X64_USER74_Handler VECTNUM=74
ffffffff8020bbcd:	0f 01 f8             	swapgs
ffffffff8020bbd0:	6a 00                	push   $0x0
ffffffff8020bbd2:	6a 4a                	push   $0x4a
ffffffff8020bbd4:	e9 db 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbd9 <__RME_X64_USER75_Handler>:
USER_HANDLER NAME=__RME_X64_USER75_Handler VECTNUM=75
ffffffff8020bbd9:	0f 01 f8             	swapgs
ffffffff8020bbdc:	6a 00                	push   $0x0
ffffffff8020bbde:	6a 4b                	push   $0x4b
ffffffff8020bbe0:	e9 cf 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbe5 <__RME_X64_USER76_Handler>:
USER_HANDLER NAME=__RME_X64_USER76_Handler VECTNUM=76
ffffffff8020bbe5:	0f 01 f8             	swapgs
ffffffff8020bbe8:	6a 00                	push   $0x0
ffffffff8020bbea:	6a 4c                	push   $0x4c
ffffffff8020bbec:	e9 c3 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbf1 <__RME_X64_USER77_Handler>:
USER_HANDLER NAME=__RME_X64_USER77_Handler VECTNUM=77
ffffffff8020bbf1:	0f 01 f8             	swapgs
ffffffff8020bbf4:	6a 00                	push   $0x0
ffffffff8020bbf6:	6a 4d                	push   $0x4d
ffffffff8020bbf8:	e9 b7 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bbfd <__RME_X64_USER78_Handler>:
USER_HANDLER NAME=__RME_X64_USER78_Handler VECTNUM=78
ffffffff8020bbfd:	0f 01 f8             	swapgs
ffffffff8020bc00:	6a 00                	push   $0x0
ffffffff8020bc02:	6a 4e                	push   $0x4e
ffffffff8020bc04:	e9 ab 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc09 <__RME_X64_USER79_Handler>:
USER_HANDLER NAME=__RME_X64_USER79_Handler VECTNUM=79
ffffffff8020bc09:	0f 01 f8             	swapgs
ffffffff8020bc0c:	6a 00                	push   $0x0
ffffffff8020bc0e:	6a 4f                	push   $0x4f
ffffffff8020bc10:	e9 9f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc15 <__RME_X64_USER80_Handler>:

USER_HANDLER NAME=__RME_X64_USER80_Handler VECTNUM=80
ffffffff8020bc15:	0f 01 f8             	swapgs
ffffffff8020bc18:	6a 00                	push   $0x0
ffffffff8020bc1a:	6a 50                	push   $0x50
ffffffff8020bc1c:	e9 93 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc21 <__RME_X64_USER81_Handler>:
USER_HANDLER NAME=__RME_X64_USER81_Handler VECTNUM=81
ffffffff8020bc21:	0f 01 f8             	swapgs
ffffffff8020bc24:	6a 00                	push   $0x0
ffffffff8020bc26:	6a 51                	push   $0x51
ffffffff8020bc28:	e9 87 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc2d <__RME_X64_USER82_Handler>:
USER_HANDLER NAME=__RME_X64_USER82_Handler VECTNUM=82
ffffffff8020bc2d:	0f 01 f8             	swapgs
ffffffff8020bc30:	6a 00                	push   $0x0
ffffffff8020bc32:	6a 52                	push   $0x52
ffffffff8020bc34:	e9 7b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc39 <__RME_X64_USER83_Handler>:
USER_HANDLER NAME=__RME_X64_USER83_Handler VECTNUM=83
ffffffff8020bc39:	0f 01 f8             	swapgs
ffffffff8020bc3c:	6a 00                	push   $0x0
ffffffff8020bc3e:	6a 53                	push   $0x53
ffffffff8020bc40:	e9 6f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc45 <__RME_X64_USER84_Handler>:
USER_HANDLER NAME=__RME_X64_USER84_Handler VECTNUM=84
ffffffff8020bc45:	0f 01 f8             	swapgs
ffffffff8020bc48:	6a 00                	push   $0x0
ffffffff8020bc4a:	6a 54                	push   $0x54
ffffffff8020bc4c:	e9 63 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc51 <__RME_X64_USER85_Handler>:
USER_HANDLER NAME=__RME_X64_USER85_Handler VECTNUM=85
ffffffff8020bc51:	0f 01 f8             	swapgs
ffffffff8020bc54:	6a 00                	push   $0x0
ffffffff8020bc56:	6a 55                	push   $0x55
ffffffff8020bc58:	e9 57 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc5d <__RME_X64_USER86_Handler>:
USER_HANDLER NAME=__RME_X64_USER86_Handler VECTNUM=86
ffffffff8020bc5d:	0f 01 f8             	swapgs
ffffffff8020bc60:	6a 00                	push   $0x0
ffffffff8020bc62:	6a 56                	push   $0x56
ffffffff8020bc64:	e9 4b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc69 <__RME_X64_USER87_Handler>:
USER_HANDLER NAME=__RME_X64_USER87_Handler VECTNUM=87
ffffffff8020bc69:	0f 01 f8             	swapgs
ffffffff8020bc6c:	6a 00                	push   $0x0
ffffffff8020bc6e:	6a 57                	push   $0x57
ffffffff8020bc70:	e9 3f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc75 <__RME_X64_USER88_Handler>:
USER_HANDLER NAME=__RME_X64_USER88_Handler VECTNUM=88
ffffffff8020bc75:	0f 01 f8             	swapgs
ffffffff8020bc78:	6a 00                	push   $0x0
ffffffff8020bc7a:	6a 58                	push   $0x58
ffffffff8020bc7c:	e9 33 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc81 <__RME_X64_USER89_Handler>:
USER_HANDLER NAME=__RME_X64_USER89_Handler VECTNUM=89
ffffffff8020bc81:	0f 01 f8             	swapgs
ffffffff8020bc84:	6a 00                	push   $0x0
ffffffff8020bc86:	6a 59                	push   $0x59
ffffffff8020bc88:	e9 27 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc8d <__RME_X64_USER90_Handler>:

USER_HANDLER NAME=__RME_X64_USER90_Handler VECTNUM=90
ffffffff8020bc8d:	0f 01 f8             	swapgs
ffffffff8020bc90:	6a 00                	push   $0x0
ffffffff8020bc92:	6a 5a                	push   $0x5a
ffffffff8020bc94:	e9 1b 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bc99 <__RME_X64_USER91_Handler>:
USER_HANDLER NAME=__RME_X64_USER91_Handler VECTNUM=91
ffffffff8020bc99:	0f 01 f8             	swapgs
ffffffff8020bc9c:	6a 00                	push   $0x0
ffffffff8020bc9e:	6a 5b                	push   $0x5b
ffffffff8020bca0:	e9 0f 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bca5 <__RME_X64_USER92_Handler>:
USER_HANDLER NAME=__RME_X64_USER92_Handler VECTNUM=92
ffffffff8020bca5:	0f 01 f8             	swapgs
ffffffff8020bca8:	6a 00                	push   $0x0
ffffffff8020bcaa:	6a 5c                	push   $0x5c
ffffffff8020bcac:	e9 03 09 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcb1 <__RME_X64_USER93_Handler>:
USER_HANDLER NAME=__RME_X64_USER93_Handler VECTNUM=93
ffffffff8020bcb1:	0f 01 f8             	swapgs
ffffffff8020bcb4:	6a 00                	push   $0x0
ffffffff8020bcb6:	6a 5d                	push   $0x5d
ffffffff8020bcb8:	e9 f7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcbd <__RME_X64_USER94_Handler>:
USER_HANDLER NAME=__RME_X64_USER94_Handler VECTNUM=94
ffffffff8020bcbd:	0f 01 f8             	swapgs
ffffffff8020bcc0:	6a 00                	push   $0x0
ffffffff8020bcc2:	6a 5e                	push   $0x5e
ffffffff8020bcc4:	e9 eb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcc9 <__RME_X64_USER95_Handler>:
USER_HANDLER NAME=__RME_X64_USER95_Handler VECTNUM=95
ffffffff8020bcc9:	0f 01 f8             	swapgs
ffffffff8020bccc:	6a 00                	push   $0x0
ffffffff8020bcce:	6a 5f                	push   $0x5f
ffffffff8020bcd0:	e9 df 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcd5 <__RME_X64_USER96_Handler>:
USER_HANDLER NAME=__RME_X64_USER96_Handler VECTNUM=96
ffffffff8020bcd5:	0f 01 f8             	swapgs
ffffffff8020bcd8:	6a 00                	push   $0x0
ffffffff8020bcda:	6a 60                	push   $0x60
ffffffff8020bcdc:	e9 d3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bce1 <__RME_X64_USER97_Handler>:
USER_HANDLER NAME=__RME_X64_USER97_Handler VECTNUM=97
ffffffff8020bce1:	0f 01 f8             	swapgs
ffffffff8020bce4:	6a 00                	push   $0x0
ffffffff8020bce6:	6a 61                	push   $0x61
ffffffff8020bce8:	e9 c7 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bced <__RME_X64_USER98_Handler>:
USER_HANDLER NAME=__RME_X64_USER98_Handler VECTNUM=98
ffffffff8020bced:	0f 01 f8             	swapgs
ffffffff8020bcf0:	6a 00                	push   $0x0
ffffffff8020bcf2:	6a 62                	push   $0x62
ffffffff8020bcf4:	e9 bb 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bcf9 <__RME_X64_USER99_Handler>:
USER_HANDLER NAME=__RME_X64_USER99_Handler VECTNUM=99
ffffffff8020bcf9:	0f 01 f8             	swapgs
ffffffff8020bcfc:	6a 00                	push   $0x0
ffffffff8020bcfe:	6a 63                	push   $0x63
ffffffff8020bd00:	e9 af 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd05 <__RME_X64_USER100_Handler>:

USER_HANDLER NAME=__RME_X64_USER100_Handler VECTNUM=100
ffffffff8020bd05:	0f 01 f8             	swapgs
ffffffff8020bd08:	6a 00                	push   $0x0
ffffffff8020bd0a:	6a 64                	push   $0x64
ffffffff8020bd0c:	e9 a3 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd11 <__RME_X64_USER101_Handler>:
USER_HANDLER NAME=__RME_X64_USER101_Handler VECTNUM=101
ffffffff8020bd11:	0f 01 f8             	swapgs
ffffffff8020bd14:	6a 00                	push   $0x0
ffffffff8020bd16:	6a 65                	push   $0x65
ffffffff8020bd18:	e9 97 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd1d <__RME_X64_USER102_Handler>:
USER_HANDLER NAME=__RME_X64_USER102_Handler VECTNUM=102
ffffffff8020bd1d:	0f 01 f8             	swapgs
ffffffff8020bd20:	6a 00                	push   $0x0
ffffffff8020bd22:	6a 66                	push   $0x66
ffffffff8020bd24:	e9 8b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd29 <__RME_X64_USER103_Handler>:
USER_HANDLER NAME=__RME_X64_USER103_Handler VECTNUM=103
ffffffff8020bd29:	0f 01 f8             	swapgs
ffffffff8020bd2c:	6a 00                	push   $0x0
ffffffff8020bd2e:	6a 67                	push   $0x67
ffffffff8020bd30:	e9 7f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd35 <__RME_X64_USER104_Handler>:
USER_HANDLER NAME=__RME_X64_USER104_Handler VECTNUM=104
ffffffff8020bd35:	0f 01 f8             	swapgs
ffffffff8020bd38:	6a 00                	push   $0x0
ffffffff8020bd3a:	6a 68                	push   $0x68
ffffffff8020bd3c:	e9 73 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd41 <__RME_X64_USER105_Handler>:
USER_HANDLER NAME=__RME_X64_USER105_Handler VECTNUM=105
ffffffff8020bd41:	0f 01 f8             	swapgs
ffffffff8020bd44:	6a 00                	push   $0x0
ffffffff8020bd46:	6a 69                	push   $0x69
ffffffff8020bd48:	e9 67 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd4d <__RME_X64_USER106_Handler>:
USER_HANDLER NAME=__RME_X64_USER106_Handler VECTNUM=106
ffffffff8020bd4d:	0f 01 f8             	swapgs
ffffffff8020bd50:	6a 00                	push   $0x0
ffffffff8020bd52:	6a 6a                	push   $0x6a
ffffffff8020bd54:	e9 5b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd59 <__RME_X64_USER107_Handler>:
USER_HANDLER NAME=__RME_X64_USER107_Handler VECTNUM=107
ffffffff8020bd59:	0f 01 f8             	swapgs
ffffffff8020bd5c:	6a 00                	push   $0x0
ffffffff8020bd5e:	6a 6b                	push   $0x6b
ffffffff8020bd60:	e9 4f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd65 <__RME_X64_USER108_Handler>:
USER_HANDLER NAME=__RME_X64_USER108_Handler VECTNUM=108
ffffffff8020bd65:	0f 01 f8             	swapgs
ffffffff8020bd68:	6a 00                	push   $0x0
ffffffff8020bd6a:	6a 6c                	push   $0x6c
ffffffff8020bd6c:	e9 43 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd71 <__RME_X64_USER109_Handler>:
USER_HANDLER NAME=__RME_X64_USER109_Handler VECTNUM=109
ffffffff8020bd71:	0f 01 f8             	swapgs
ffffffff8020bd74:	6a 00                	push   $0x0
ffffffff8020bd76:	6a 6d                	push   $0x6d
ffffffff8020bd78:	e9 37 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd7d <__RME_X64_USER110_Handler>:

USER_HANDLER NAME=__RME_X64_USER110_Handler VECTNUM=110
ffffffff8020bd7d:	0f 01 f8             	swapgs
ffffffff8020bd80:	6a 00                	push   $0x0
ffffffff8020bd82:	6a 6e                	push   $0x6e
ffffffff8020bd84:	e9 2b 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd89 <__RME_X64_USER111_Handler>:
USER_HANDLER NAME=__RME_X64_USER111_Handler VECTNUM=111
ffffffff8020bd89:	0f 01 f8             	swapgs
ffffffff8020bd8c:	6a 00                	push   $0x0
ffffffff8020bd8e:	6a 6f                	push   $0x6f
ffffffff8020bd90:	e9 1f 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bd95 <__RME_X64_USER112_Handler>:
USER_HANDLER NAME=__RME_X64_USER112_Handler VECTNUM=112
ffffffff8020bd95:	0f 01 f8             	swapgs
ffffffff8020bd98:	6a 00                	push   $0x0
ffffffff8020bd9a:	6a 70                	push   $0x70
ffffffff8020bd9c:	e9 13 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bda1 <__RME_X64_USER113_Handler>:
USER_HANDLER NAME=__RME_X64_USER113_Handler VECTNUM=113
ffffffff8020bda1:	0f 01 f8             	swapgs
ffffffff8020bda4:	6a 00                	push   $0x0
ffffffff8020bda6:	6a 71                	push   $0x71
ffffffff8020bda8:	e9 07 08 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdad <__RME_X64_USER114_Handler>:
USER_HANDLER NAME=__RME_X64_USER114_Handler VECTNUM=114
ffffffff8020bdad:	0f 01 f8             	swapgs
ffffffff8020bdb0:	6a 00                	push   $0x0
ffffffff8020bdb2:	6a 72                	push   $0x72
ffffffff8020bdb4:	e9 fb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdb9 <__RME_X64_USER115_Handler>:
USER_HANDLER NAME=__RME_X64_USER115_Handler VECTNUM=115
ffffffff8020bdb9:	0f 01 f8             	swapgs
ffffffff8020bdbc:	6a 00                	push   $0x0
ffffffff8020bdbe:	6a 73                	push   $0x73
ffffffff8020bdc0:	e9 ef 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdc5 <__RME_X64_USER116_Handler>:
USER_HANDLER NAME=__RME_X64_USER116_Handler VECTNUM=116
ffffffff8020bdc5:	0f 01 f8             	swapgs
ffffffff8020bdc8:	6a 00                	push   $0x0
ffffffff8020bdca:	6a 74                	push   $0x74
ffffffff8020bdcc:	e9 e3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdd1 <__RME_X64_USER117_Handler>:
USER_HANDLER NAME=__RME_X64_USER117_Handler VECTNUM=117
ffffffff8020bdd1:	0f 01 f8             	swapgs
ffffffff8020bdd4:	6a 00                	push   $0x0
ffffffff8020bdd6:	6a 75                	push   $0x75
ffffffff8020bdd8:	e9 d7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bddd <__RME_X64_USER118_Handler>:
USER_HANDLER NAME=__RME_X64_USER118_Handler VECTNUM=118
ffffffff8020bddd:	0f 01 f8             	swapgs
ffffffff8020bde0:	6a 00                	push   $0x0
ffffffff8020bde2:	6a 76                	push   $0x76
ffffffff8020bde4:	e9 cb 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bde9 <__RME_X64_USER119_Handler>:
USER_HANDLER NAME=__RME_X64_USER119_Handler VECTNUM=119
ffffffff8020bde9:	0f 01 f8             	swapgs
ffffffff8020bdec:	6a 00                	push   $0x0
ffffffff8020bdee:	6a 77                	push   $0x77
ffffffff8020bdf0:	e9 bf 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bdf5 <__RME_X64_USER120_Handler>:

USER_HANDLER NAME=__RME_X64_USER120_Handler VECTNUM=120
ffffffff8020bdf5:	0f 01 f8             	swapgs
ffffffff8020bdf8:	6a 00                	push   $0x0
ffffffff8020bdfa:	6a 78                	push   $0x78
ffffffff8020bdfc:	e9 b3 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be01 <__RME_X64_USER121_Handler>:
USER_HANDLER NAME=__RME_X64_USER121_Handler VECTNUM=121
ffffffff8020be01:	0f 01 f8             	swapgs
ffffffff8020be04:	6a 00                	push   $0x0
ffffffff8020be06:	6a 79                	push   $0x79
ffffffff8020be08:	e9 a7 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be0d <__RME_X64_USER122_Handler>:
USER_HANDLER NAME=__RME_X64_USER122_Handler VECTNUM=122
ffffffff8020be0d:	0f 01 f8             	swapgs
ffffffff8020be10:	6a 00                	push   $0x0
ffffffff8020be12:	6a 7a                	push   $0x7a
ffffffff8020be14:	e9 9b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be19 <__RME_X64_USER123_Handler>:
USER_HANDLER NAME=__RME_X64_USER123_Handler VECTNUM=123
ffffffff8020be19:	0f 01 f8             	swapgs
ffffffff8020be1c:	6a 00                	push   $0x0
ffffffff8020be1e:	6a 7b                	push   $0x7b
ffffffff8020be20:	e9 8f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be25 <__RME_X64_USER124_Handler>:
USER_HANDLER NAME=__RME_X64_USER124_Handler VECTNUM=124
ffffffff8020be25:	0f 01 f8             	swapgs
ffffffff8020be28:	6a 00                	push   $0x0
ffffffff8020be2a:	6a 7c                	push   $0x7c
ffffffff8020be2c:	e9 83 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be31 <__RME_X64_USER125_Handler>:
USER_HANDLER NAME=__RME_X64_USER125_Handler VECTNUM=125
ffffffff8020be31:	0f 01 f8             	swapgs
ffffffff8020be34:	6a 00                	push   $0x0
ffffffff8020be36:	6a 7d                	push   $0x7d
ffffffff8020be38:	e9 77 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be3d <__RME_X64_USER126_Handler>:
USER_HANDLER NAME=__RME_X64_USER126_Handler VECTNUM=126
ffffffff8020be3d:	0f 01 f8             	swapgs
ffffffff8020be40:	6a 00                	push   $0x0
ffffffff8020be42:	6a 7e                	push   $0x7e
ffffffff8020be44:	e9 6b 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be49 <__RME_X64_USER127_Handler>:
USER_HANDLER NAME=__RME_X64_USER127_Handler VECTNUM=127
ffffffff8020be49:	0f 01 f8             	swapgs
ffffffff8020be4c:	6a 00                	push   $0x0
ffffffff8020be4e:	6a 7f                	push   $0x7f
ffffffff8020be50:	e9 5f 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be55 <__RME_X64_USER128_Handler>:
USER_HANDLER NAME=__RME_X64_USER128_Handler VECTNUM=128
ffffffff8020be55:	0f 01 f8             	swapgs
ffffffff8020be58:	6a 00                	push   $0x0
ffffffff8020be5a:	68 80 00 00 00       	push   $0x80
ffffffff8020be5f:	e9 50 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be64 <__RME_X64_USER129_Handler>:
USER_HANDLER NAME=__RME_X64_USER129_Handler VECTNUM=129
ffffffff8020be64:	0f 01 f8             	swapgs
ffffffff8020be67:	6a 00                	push   $0x0
ffffffff8020be69:	68 81 00 00 00       	push   $0x81
ffffffff8020be6e:	e9 41 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be73 <__RME_X64_USER130_Handler>:

USER_HANDLER NAME=__RME_X64_USER130_Handler VECTNUM=130
ffffffff8020be73:	0f 01 f8             	swapgs
ffffffff8020be76:	6a 00                	push   $0x0
ffffffff8020be78:	68 82 00 00 00       	push   $0x82
ffffffff8020be7d:	e9 32 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be82 <__RME_X64_USER131_Handler>:
USER_HANDLER NAME=__RME_X64_USER131_Handler VECTNUM=131
ffffffff8020be82:	0f 01 f8             	swapgs
ffffffff8020be85:	6a 00                	push   $0x0
ffffffff8020be87:	68 83 00 00 00       	push   $0x83
ffffffff8020be8c:	e9 23 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020be91 <__RME_X64_USER132_Handler>:
USER_HANDLER NAME=__RME_X64_USER132_Handler VECTNUM=132
ffffffff8020be91:	0f 01 f8             	swapgs
ffffffff8020be94:	6a 00                	push   $0x0
ffffffff8020be96:	68 84 00 00 00       	push   $0x84
ffffffff8020be9b:	e9 14 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bea0 <__RME_X64_USER133_Handler>:
USER_HANDLER NAME=__RME_X64_USER133_Handler VECTNUM=133
ffffffff8020bea0:	0f 01 f8             	swapgs
ffffffff8020bea3:	6a 00                	push   $0x0
ffffffff8020bea5:	68 85 00 00 00       	push   $0x85
ffffffff8020beaa:	e9 05 07 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beaf <__RME_X64_USER134_Handler>:
USER_HANDLER NAME=__RME_X64_USER134_Handler VECTNUM=134
ffffffff8020beaf:	0f 01 f8             	swapgs
ffffffff8020beb2:	6a 00                	push   $0x0
ffffffff8020beb4:	68 86 00 00 00       	push   $0x86
ffffffff8020beb9:	e9 f6 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bebe <__RME_X64_USER135_Handler>:
USER_HANDLER NAME=__RME_X64_USER135_Handler VECTNUM=135
ffffffff8020bebe:	0f 01 f8             	swapgs
ffffffff8020bec1:	6a 00                	push   $0x0
ffffffff8020bec3:	68 87 00 00 00       	push   $0x87
ffffffff8020bec8:	e9 e7 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020becd <__RME_X64_USER136_Handler>:
USER_HANDLER NAME=__RME_X64_USER136_Handler VECTNUM=136
ffffffff8020becd:	0f 01 f8             	swapgs
ffffffff8020bed0:	6a 00                	push   $0x0
ffffffff8020bed2:	68 88 00 00 00       	push   $0x88
ffffffff8020bed7:	e9 d8 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bedc <__RME_X64_USER137_Handler>:
USER_HANDLER NAME=__RME_X64_USER137_Handler VECTNUM=137
ffffffff8020bedc:	0f 01 f8             	swapgs
ffffffff8020bedf:	6a 00                	push   $0x0
ffffffff8020bee1:	68 89 00 00 00       	push   $0x89
ffffffff8020bee6:	e9 c9 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020beeb <__RME_X64_USER138_Handler>:
USER_HANDLER NAME=__RME_X64_USER138_Handler VECTNUM=138
ffffffff8020beeb:	0f 01 f8             	swapgs
ffffffff8020beee:	6a 00                	push   $0x0
ffffffff8020bef0:	68 8a 00 00 00       	push   $0x8a
ffffffff8020bef5:	e9 ba 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020befa <__RME_X64_USER139_Handler>:
USER_HANDLER NAME=__RME_X64_USER139_Handler VECTNUM=139
ffffffff8020befa:	0f 01 f8             	swapgs
ffffffff8020befd:	6a 00                	push   $0x0
ffffffff8020beff:	68 8b 00 00 00       	push   $0x8b
ffffffff8020bf04:	e9 ab 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf09 <__RME_X64_USER140_Handler>:

USER_HANDLER NAME=__RME_X64_USER140_Handler VECTNUM=140
ffffffff8020bf09:	0f 01 f8             	swapgs
ffffffff8020bf0c:	6a 00                	push   $0x0
ffffffff8020bf0e:	68 8c 00 00 00       	push   $0x8c
ffffffff8020bf13:	e9 9c 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf18 <__RME_X64_USER141_Handler>:
USER_HANDLER NAME=__RME_X64_USER141_Handler VECTNUM=141
ffffffff8020bf18:	0f 01 f8             	swapgs
ffffffff8020bf1b:	6a 00                	push   $0x0
ffffffff8020bf1d:	68 8d 00 00 00       	push   $0x8d
ffffffff8020bf22:	e9 8d 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf27 <__RME_X64_USER142_Handler>:
USER_HANDLER NAME=__RME_X64_USER142_Handler VECTNUM=142
ffffffff8020bf27:	0f 01 f8             	swapgs
ffffffff8020bf2a:	6a 00                	push   $0x0
ffffffff8020bf2c:	68 8e 00 00 00       	push   $0x8e
ffffffff8020bf31:	e9 7e 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf36 <__RME_X64_USER143_Handler>:
USER_HANDLER NAME=__RME_X64_USER143_Handler VECTNUM=143
ffffffff8020bf36:	0f 01 f8             	swapgs
ffffffff8020bf39:	6a 00                	push   $0x0
ffffffff8020bf3b:	68 8f 00 00 00       	push   $0x8f
ffffffff8020bf40:	e9 6f 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf45 <__RME_X64_USER144_Handler>:
USER_HANDLER NAME=__RME_X64_USER144_Handler VECTNUM=144
ffffffff8020bf45:	0f 01 f8             	swapgs
ffffffff8020bf48:	6a 00                	push   $0x0
ffffffff8020bf4a:	68 90 00 00 00       	push   $0x90
ffffffff8020bf4f:	e9 60 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf54 <__RME_X64_USER145_Handler>:
USER_HANDLER NAME=__RME_X64_USER145_Handler VECTNUM=145
ffffffff8020bf54:	0f 01 f8             	swapgs
ffffffff8020bf57:	6a 00                	push   $0x0
ffffffff8020bf59:	68 91 00 00 00       	push   $0x91
ffffffff8020bf5e:	e9 51 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf63 <__RME_X64_USER146_Handler>:
USER_HANDLER NAME=__RME_X64_USER146_Handler VECTNUM=146
ffffffff8020bf63:	0f 01 f8             	swapgs
ffffffff8020bf66:	6a 00                	push   $0x0
ffffffff8020bf68:	68 92 00 00 00       	push   $0x92
ffffffff8020bf6d:	e9 42 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf72 <__RME_X64_USER147_Handler>:
USER_HANDLER NAME=__RME_X64_USER147_Handler VECTNUM=147
ffffffff8020bf72:	0f 01 f8             	swapgs
ffffffff8020bf75:	6a 00                	push   $0x0
ffffffff8020bf77:	68 93 00 00 00       	push   $0x93
ffffffff8020bf7c:	e9 33 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf81 <__RME_X64_USER148_Handler>:
USER_HANDLER NAME=__RME_X64_USER148_Handler VECTNUM=148
ffffffff8020bf81:	0f 01 f8             	swapgs
ffffffff8020bf84:	6a 00                	push   $0x0
ffffffff8020bf86:	68 94 00 00 00       	push   $0x94
ffffffff8020bf8b:	e9 24 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf90 <__RME_X64_USER149_Handler>:
USER_HANDLER NAME=__RME_X64_USER149_Handler VECTNUM=149
ffffffff8020bf90:	0f 01 f8             	swapgs
ffffffff8020bf93:	6a 00                	push   $0x0
ffffffff8020bf95:	68 95 00 00 00       	push   $0x95
ffffffff8020bf9a:	e9 15 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bf9f <__RME_X64_USER150_Handler>:

USER_HANDLER NAME=__RME_X64_USER150_Handler VECTNUM=150
ffffffff8020bf9f:	0f 01 f8             	swapgs
ffffffff8020bfa2:	6a 00                	push   $0x0
ffffffff8020bfa4:	68 96 00 00 00       	push   $0x96
ffffffff8020bfa9:	e9 06 06 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfae <__RME_X64_USER151_Handler>:
USER_HANDLER NAME=__RME_X64_USER151_Handler VECTNUM=151
ffffffff8020bfae:	0f 01 f8             	swapgs
ffffffff8020bfb1:	6a 00                	push   $0x0
ffffffff8020bfb3:	68 97 00 00 00       	push   $0x97
ffffffff8020bfb8:	e9 f7 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfbd <__RME_X64_USER152_Handler>:
USER_HANDLER NAME=__RME_X64_USER152_Handler VECTNUM=152
ffffffff8020bfbd:	0f 01 f8             	swapgs
ffffffff8020bfc0:	6a 00                	push   $0x0
ffffffff8020bfc2:	68 98 00 00 00       	push   $0x98
ffffffff8020bfc7:	e9 e8 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfcc <__RME_X64_USER153_Handler>:
USER_HANDLER NAME=__RME_X64_USER153_Handler VECTNUM=153
ffffffff8020bfcc:	0f 01 f8             	swapgs
ffffffff8020bfcf:	6a 00                	push   $0x0
ffffffff8020bfd1:	68 99 00 00 00       	push   $0x99
ffffffff8020bfd6:	e9 d9 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfdb <__RME_X64_USER154_Handler>:
USER_HANDLER NAME=__RME_X64_USER154_Handler VECTNUM=154
ffffffff8020bfdb:	0f 01 f8             	swapgs
ffffffff8020bfde:	6a 00                	push   $0x0
ffffffff8020bfe0:	68 9a 00 00 00       	push   $0x9a
ffffffff8020bfe5:	e9 ca 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bfea <__RME_X64_USER155_Handler>:
USER_HANDLER NAME=__RME_X64_USER155_Handler VECTNUM=155
ffffffff8020bfea:	0f 01 f8             	swapgs
ffffffff8020bfed:	6a 00                	push   $0x0
ffffffff8020bfef:	68 9b 00 00 00       	push   $0x9b
ffffffff8020bff4:	e9 bb 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020bff9 <__RME_X64_USER156_Handler>:
USER_HANDLER NAME=__RME_X64_USER156_Handler VECTNUM=156
ffffffff8020bff9:	0f 01 f8             	swapgs
ffffffff8020bffc:	6a 00                	push   $0x0
ffffffff8020bffe:	68 9c 00 00 00       	push   $0x9c
ffffffff8020c003:	e9 ac 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c008 <__RME_X64_USER157_Handler>:
USER_HANDLER NAME=__RME_X64_USER157_Handler VECTNUM=157
ffffffff8020c008:	0f 01 f8             	swapgs
ffffffff8020c00b:	6a 00                	push   $0x0
ffffffff8020c00d:	68 9d 00 00 00       	push   $0x9d
ffffffff8020c012:	e9 9d 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c017 <__RME_X64_USER158_Handler>:
USER_HANDLER NAME=__RME_X64_USER158_Handler VECTNUM=158
ffffffff8020c017:	0f 01 f8             	swapgs
ffffffff8020c01a:	6a 00                	push   $0x0
ffffffff8020c01c:	68 9e 00 00 00       	push   $0x9e
ffffffff8020c021:	e9 8e 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c026 <__RME_X64_USER159_Handler>:
USER_HANDLER NAME=__RME_X64_USER159_Handler VECTNUM=159
ffffffff8020c026:	0f 01 f8             	swapgs
ffffffff8020c029:	6a 00                	push   $0x0
ffffffff8020c02b:	68 9f 00 00 00       	push   $0x9f
ffffffff8020c030:	e9 7f 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c035 <__RME_X64_USER160_Handler>:

USER_HANDLER NAME=__RME_X64_USER160_Handler VECTNUM=160
ffffffff8020c035:	0f 01 f8             	swapgs
ffffffff8020c038:	6a 00                	push   $0x0
ffffffff8020c03a:	68 a0 00 00 00       	push   $0xa0
ffffffff8020c03f:	e9 70 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c044 <__RME_X64_USER161_Handler>:
USER_HANDLER NAME=__RME_X64_USER161_Handler VECTNUM=161
ffffffff8020c044:	0f 01 f8             	swapgs
ffffffff8020c047:	6a 00                	push   $0x0
ffffffff8020c049:	68 a1 00 00 00       	push   $0xa1
ffffffff8020c04e:	e9 61 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c053 <__RME_X64_USER162_Handler>:
USER_HANDLER NAME=__RME_X64_USER162_Handler VECTNUM=162
ffffffff8020c053:	0f 01 f8             	swapgs
ffffffff8020c056:	6a 00                	push   $0x0
ffffffff8020c058:	68 a2 00 00 00       	push   $0xa2
ffffffff8020c05d:	e9 52 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c062 <__RME_X64_USER163_Handler>:
USER_HANDLER NAME=__RME_X64_USER163_Handler VECTNUM=163
ffffffff8020c062:	0f 01 f8             	swapgs
ffffffff8020c065:	6a 00                	push   $0x0
ffffffff8020c067:	68 a3 00 00 00       	push   $0xa3
ffffffff8020c06c:	e9 43 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c071 <__RME_X64_USER164_Handler>:
USER_HANDLER NAME=__RME_X64_USER164_Handler VECTNUM=164
ffffffff8020c071:	0f 01 f8             	swapgs
ffffffff8020c074:	6a 00                	push   $0x0
ffffffff8020c076:	68 a4 00 00 00       	push   $0xa4
ffffffff8020c07b:	e9 34 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c080 <__RME_X64_USER165_Handler>:
USER_HANDLER NAME=__RME_X64_USER165_Handler VECTNUM=165
ffffffff8020c080:	0f 01 f8             	swapgs
ffffffff8020c083:	6a 00                	push   $0x0
ffffffff8020c085:	68 a5 00 00 00       	push   $0xa5
ffffffff8020c08a:	e9 25 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c08f <__RME_X64_USER166_Handler>:
USER_HANDLER NAME=__RME_X64_USER166_Handler VECTNUM=166
ffffffff8020c08f:	0f 01 f8             	swapgs
ffffffff8020c092:	6a 00                	push   $0x0
ffffffff8020c094:	68 a6 00 00 00       	push   $0xa6
ffffffff8020c099:	e9 16 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c09e <__RME_X64_USER167_Handler>:
USER_HANDLER NAME=__RME_X64_USER167_Handler VECTNUM=167
ffffffff8020c09e:	0f 01 f8             	swapgs
ffffffff8020c0a1:	6a 00                	push   $0x0
ffffffff8020c0a3:	68 a7 00 00 00       	push   $0xa7
ffffffff8020c0a8:	e9 07 05 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0ad <__RME_X64_USER168_Handler>:
USER_HANDLER NAME=__RME_X64_USER168_Handler VECTNUM=168
ffffffff8020c0ad:	0f 01 f8             	swapgs
ffffffff8020c0b0:	6a 00                	push   $0x0
ffffffff8020c0b2:	68 a8 00 00 00       	push   $0xa8
ffffffff8020c0b7:	e9 f8 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0bc <__RME_X64_USER169_Handler>:
USER_HANDLER NAME=__RME_X64_USER169_Handler VECTNUM=169
ffffffff8020c0bc:	0f 01 f8             	swapgs
ffffffff8020c0bf:	6a 00                	push   $0x0
ffffffff8020c0c1:	68 a9 00 00 00       	push   $0xa9
ffffffff8020c0c6:	e9 e9 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0cb <__RME_X64_USER170_Handler>:

USER_HANDLER NAME=__RME_X64_USER170_Handler VECTNUM=170
ffffffff8020c0cb:	0f 01 f8             	swapgs
ffffffff8020c0ce:	6a 00                	push   $0x0
ffffffff8020c0d0:	68 aa 00 00 00       	push   $0xaa
ffffffff8020c0d5:	e9 da 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0da <__RME_X64_USER171_Handler>:
USER_HANDLER NAME=__RME_X64_USER171_Handler VECTNUM=171
ffffffff8020c0da:	0f 01 f8             	swapgs
ffffffff8020c0dd:	6a 00                	push   $0x0
ffffffff8020c0df:	68 ab 00 00 00       	push   $0xab
ffffffff8020c0e4:	e9 cb 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0e9 <__RME_X64_USER172_Handler>:
USER_HANDLER NAME=__RME_X64_USER172_Handler VECTNUM=172
ffffffff8020c0e9:	0f 01 f8             	swapgs
ffffffff8020c0ec:	6a 00                	push   $0x0
ffffffff8020c0ee:	68 ac 00 00 00       	push   $0xac
ffffffff8020c0f3:	e9 bc 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c0f8 <__RME_X64_USER173_Handler>:
USER_HANDLER NAME=__RME_X64_USER173_Handler VECTNUM=173
ffffffff8020c0f8:	0f 01 f8             	swapgs
ffffffff8020c0fb:	6a 00                	push   $0x0
ffffffff8020c0fd:	68 ad 00 00 00       	push   $0xad
ffffffff8020c102:	e9 ad 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c107 <__RME_X64_USER174_Handler>:
USER_HANDLER NAME=__RME_X64_USER174_Handler VECTNUM=174
ffffffff8020c107:	0f 01 f8             	swapgs
ffffffff8020c10a:	6a 00                	push   $0x0
ffffffff8020c10c:	68 ae 00 00 00       	push   $0xae
ffffffff8020c111:	e9 9e 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c116 <__RME_X64_USER175_Handler>:
USER_HANDLER NAME=__RME_X64_USER175_Handler VECTNUM=175
ffffffff8020c116:	0f 01 f8             	swapgs
ffffffff8020c119:	6a 00                	push   $0x0
ffffffff8020c11b:	68 af 00 00 00       	push   $0xaf
ffffffff8020c120:	e9 8f 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c125 <__RME_X64_USER176_Handler>:
USER_HANDLER NAME=__RME_X64_USER176_Handler VECTNUM=176
ffffffff8020c125:	0f 01 f8             	swapgs
ffffffff8020c128:	6a 00                	push   $0x0
ffffffff8020c12a:	68 b0 00 00 00       	push   $0xb0
ffffffff8020c12f:	e9 80 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c134 <__RME_X64_USER177_Handler>:
USER_HANDLER NAME=__RME_X64_USER177_Handler VECTNUM=177
ffffffff8020c134:	0f 01 f8             	swapgs
ffffffff8020c137:	6a 00                	push   $0x0
ffffffff8020c139:	68 b1 00 00 00       	push   $0xb1
ffffffff8020c13e:	e9 71 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c143 <__RME_X64_USER178_Handler>:
USER_HANDLER NAME=__RME_X64_USER178_Handler VECTNUM=178
ffffffff8020c143:	0f 01 f8             	swapgs
ffffffff8020c146:	6a 00                	push   $0x0
ffffffff8020c148:	68 b2 00 00 00       	push   $0xb2
ffffffff8020c14d:	e9 62 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c152 <__RME_X64_USER179_Handler>:
USER_HANDLER NAME=__RME_X64_USER179_Handler VECTNUM=179
ffffffff8020c152:	0f 01 f8             	swapgs
ffffffff8020c155:	6a 00                	push   $0x0
ffffffff8020c157:	68 b3 00 00 00       	push   $0xb3
ffffffff8020c15c:	e9 53 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c161 <__RME_X64_USER180_Handler>:

USER_HANDLER NAME=__RME_X64_USER180_Handler VECTNUM=180
ffffffff8020c161:	0f 01 f8             	swapgs
ffffffff8020c164:	6a 00                	push   $0x0
ffffffff8020c166:	68 b4 00 00 00       	push   $0xb4
ffffffff8020c16b:	e9 44 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c170 <__RME_X64_USER181_Handler>:
USER_HANDLER NAME=__RME_X64_USER181_Handler VECTNUM=181
ffffffff8020c170:	0f 01 f8             	swapgs
ffffffff8020c173:	6a 00                	push   $0x0
ffffffff8020c175:	68 b5 00 00 00       	push   $0xb5
ffffffff8020c17a:	e9 35 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c17f <__RME_X64_USER182_Handler>:
USER_HANDLER NAME=__RME_X64_USER182_Handler VECTNUM=182
ffffffff8020c17f:	0f 01 f8             	swapgs
ffffffff8020c182:	6a 00                	push   $0x0
ffffffff8020c184:	68 b6 00 00 00       	push   $0xb6
ffffffff8020c189:	e9 26 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c18e <__RME_X64_USER183_Handler>:
USER_HANDLER NAME=__RME_X64_USER183_Handler VECTNUM=183
ffffffff8020c18e:	0f 01 f8             	swapgs
ffffffff8020c191:	6a 00                	push   $0x0
ffffffff8020c193:	68 b7 00 00 00       	push   $0xb7
ffffffff8020c198:	e9 17 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c19d <__RME_X64_USER184_Handler>:
USER_HANDLER NAME=__RME_X64_USER184_Handler VECTNUM=184
ffffffff8020c19d:	0f 01 f8             	swapgs
ffffffff8020c1a0:	6a 00                	push   $0x0
ffffffff8020c1a2:	68 b8 00 00 00       	push   $0xb8
ffffffff8020c1a7:	e9 08 04 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ac <__RME_X64_USER185_Handler>:
USER_HANDLER NAME=__RME_X64_USER185_Handler VECTNUM=185
ffffffff8020c1ac:	0f 01 f8             	swapgs
ffffffff8020c1af:	6a 00                	push   $0x0
ffffffff8020c1b1:	68 b9 00 00 00       	push   $0xb9
ffffffff8020c1b6:	e9 f9 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1bb <__RME_X64_USER186_Handler>:
USER_HANDLER NAME=__RME_X64_USER186_Handler VECTNUM=186
ffffffff8020c1bb:	0f 01 f8             	swapgs
ffffffff8020c1be:	6a 00                	push   $0x0
ffffffff8020c1c0:	68 ba 00 00 00       	push   $0xba
ffffffff8020c1c5:	e9 ea 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1ca <__RME_X64_USER187_Handler>:
USER_HANDLER NAME=__RME_X64_USER187_Handler VECTNUM=187
ffffffff8020c1ca:	0f 01 f8             	swapgs
ffffffff8020c1cd:	6a 00                	push   $0x0
ffffffff8020c1cf:	68 bb 00 00 00       	push   $0xbb
ffffffff8020c1d4:	e9 db 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1d9 <__RME_X64_USER188_Handler>:
USER_HANDLER NAME=__RME_X64_USER188_Handler VECTNUM=188
ffffffff8020c1d9:	0f 01 f8             	swapgs
ffffffff8020c1dc:	6a 00                	push   $0x0
ffffffff8020c1de:	68 bc 00 00 00       	push   $0xbc
ffffffff8020c1e3:	e9 cc 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1e8 <__RME_X64_USER189_Handler>:
USER_HANDLER NAME=__RME_X64_USER189_Handler VECTNUM=189
ffffffff8020c1e8:	0f 01 f8             	swapgs
ffffffff8020c1eb:	6a 00                	push   $0x0
ffffffff8020c1ed:	68 bd 00 00 00       	push   $0xbd
ffffffff8020c1f2:	e9 bd 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c1f7 <__RME_X64_USER190_Handler>:

USER_HANDLER NAME=__RME_X64_USER190_Handler VECTNUM=190
ffffffff8020c1f7:	0f 01 f8             	swapgs
ffffffff8020c1fa:	6a 00                	push   $0x0
ffffffff8020c1fc:	68 be 00 00 00       	push   $0xbe
ffffffff8020c201:	e9 ae 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c206 <__RME_X64_USER191_Handler>:
USER_HANDLER NAME=__RME_X64_USER191_Handler VECTNUM=191
ffffffff8020c206:	0f 01 f8             	swapgs
ffffffff8020c209:	6a 00                	push   $0x0
ffffffff8020c20b:	68 bf 00 00 00       	push   $0xbf
ffffffff8020c210:	e9 9f 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c215 <__RME_X64_USER192_Handler>:
USER_HANDLER NAME=__RME_X64_USER192_Handler VECTNUM=192
ffffffff8020c215:	0f 01 f8             	swapgs
ffffffff8020c218:	6a 00                	push   $0x0
ffffffff8020c21a:	68 c0 00 00 00       	push   $0xc0
ffffffff8020c21f:	e9 90 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c224 <__RME_X64_USER193_Handler>:
USER_HANDLER NAME=__RME_X64_USER193_Handler VECTNUM=193
ffffffff8020c224:	0f 01 f8             	swapgs
ffffffff8020c227:	6a 00                	push   $0x0
ffffffff8020c229:	68 c1 00 00 00       	push   $0xc1
ffffffff8020c22e:	e9 81 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c233 <__RME_X64_USER194_Handler>:
USER_HANDLER NAME=__RME_X64_USER194_Handler VECTNUM=194
ffffffff8020c233:	0f 01 f8             	swapgs
ffffffff8020c236:	6a 00                	push   $0x0
ffffffff8020c238:	68 c2 00 00 00       	push   $0xc2
ffffffff8020c23d:	e9 72 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c242 <__RME_X64_USER195_Handler>:
USER_HANDLER NAME=__RME_X64_USER195_Handler VECTNUM=195
ffffffff8020c242:	0f 01 f8             	swapgs
ffffffff8020c245:	6a 00                	push   $0x0
ffffffff8020c247:	68 c3 00 00 00       	push   $0xc3
ffffffff8020c24c:	e9 63 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c251 <__RME_X64_USER196_Handler>:
USER_HANDLER NAME=__RME_X64_USER196_Handler VECTNUM=196
ffffffff8020c251:	0f 01 f8             	swapgs
ffffffff8020c254:	6a 00                	push   $0x0
ffffffff8020c256:	68 c4 00 00 00       	push   $0xc4
ffffffff8020c25b:	e9 54 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c260 <__RME_X64_USER197_Handler>:
USER_HANDLER NAME=__RME_X64_USER197_Handler VECTNUM=197
ffffffff8020c260:	0f 01 f8             	swapgs
ffffffff8020c263:	6a 00                	push   $0x0
ffffffff8020c265:	68 c5 00 00 00       	push   $0xc5
ffffffff8020c26a:	e9 45 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c26f <__RME_X64_USER198_Handler>:
USER_HANDLER NAME=__RME_X64_USER198_Handler VECTNUM=198
ffffffff8020c26f:	0f 01 f8             	swapgs
ffffffff8020c272:	6a 00                	push   $0x0
ffffffff8020c274:	68 c6 00 00 00       	push   $0xc6
ffffffff8020c279:	e9 36 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c27e <__RME_X64_USER199_Handler>:
USER_HANDLER NAME=__RME_X64_USER199_Handler VECTNUM=199
ffffffff8020c27e:	0f 01 f8             	swapgs
ffffffff8020c281:	6a 00                	push   $0x0
ffffffff8020c283:	68 c7 00 00 00       	push   $0xc7
ffffffff8020c288:	e9 27 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c28d <__RME_X64_USER200_Handler>:

USER_HANDLER NAME=__RME_X64_USER200_Handler VECTNUM=200
ffffffff8020c28d:	0f 01 f8             	swapgs
ffffffff8020c290:	6a 00                	push   $0x0
ffffffff8020c292:	68 c8 00 00 00       	push   $0xc8
ffffffff8020c297:	e9 18 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c29c <__RME_X64_USER201_Handler>:
USER_HANDLER NAME=__RME_X64_USER201_Handler VECTNUM=201
ffffffff8020c29c:	0f 01 f8             	swapgs
ffffffff8020c29f:	6a 00                	push   $0x0
ffffffff8020c2a1:	68 c9 00 00 00       	push   $0xc9
ffffffff8020c2a6:	e9 09 03 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ab <__RME_X64_USER202_Handler>:
USER_HANDLER NAME=__RME_X64_USER202_Handler VECTNUM=202
ffffffff8020c2ab:	0f 01 f8             	swapgs
ffffffff8020c2ae:	6a 00                	push   $0x0
ffffffff8020c2b0:	68 ca 00 00 00       	push   $0xca
ffffffff8020c2b5:	e9 fa 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2ba <__RME_X64_USER203_Handler>:
USER_HANDLER NAME=__RME_X64_USER203_Handler VECTNUM=203
ffffffff8020c2ba:	0f 01 f8             	swapgs
ffffffff8020c2bd:	6a 00                	push   $0x0
ffffffff8020c2bf:	68 cb 00 00 00       	push   $0xcb
ffffffff8020c2c4:	e9 eb 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2c9 <__RME_X64_USER204_Handler>:
USER_HANDLER NAME=__RME_X64_USER204_Handler VECTNUM=204
ffffffff8020c2c9:	0f 01 f8             	swapgs
ffffffff8020c2cc:	6a 00                	push   $0x0
ffffffff8020c2ce:	68 cc 00 00 00       	push   $0xcc
ffffffff8020c2d3:	e9 dc 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2d8 <__RME_X64_USER205_Handler>:
USER_HANDLER NAME=__RME_X64_USER205_Handler VECTNUM=205
ffffffff8020c2d8:	0f 01 f8             	swapgs
ffffffff8020c2db:	6a 00                	push   $0x0
ffffffff8020c2dd:	68 cd 00 00 00       	push   $0xcd
ffffffff8020c2e2:	e9 cd 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2e7 <__RME_X64_USER206_Handler>:
USER_HANDLER NAME=__RME_X64_USER206_Handler VECTNUM=206
ffffffff8020c2e7:	0f 01 f8             	swapgs
ffffffff8020c2ea:	6a 00                	push   $0x0
ffffffff8020c2ec:	68 ce 00 00 00       	push   $0xce
ffffffff8020c2f1:	e9 be 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c2f6 <__RME_X64_USER207_Handler>:
USER_HANDLER NAME=__RME_X64_USER207_Handler VECTNUM=207
ffffffff8020c2f6:	0f 01 f8             	swapgs
ffffffff8020c2f9:	6a 00                	push   $0x0
ffffffff8020c2fb:	68 cf 00 00 00       	push   $0xcf
ffffffff8020c300:	e9 af 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c305 <__RME_X64_USER208_Handler>:
USER_HANDLER NAME=__RME_X64_USER208_Handler VECTNUM=208
ffffffff8020c305:	0f 01 f8             	swapgs
ffffffff8020c308:	6a 00                	push   $0x0
ffffffff8020c30a:	68 d0 00 00 00       	push   $0xd0
ffffffff8020c30f:	e9 a0 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c314 <__RME_X64_USER209_Handler>:
USER_HANDLER NAME=__RME_X64_USER209_Handler VECTNUM=209
ffffffff8020c314:	0f 01 f8             	swapgs
ffffffff8020c317:	6a 00                	push   $0x0
ffffffff8020c319:	68 d1 00 00 00       	push   $0xd1
ffffffff8020c31e:	e9 91 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c323 <__RME_X64_USER210_Handler>:

USER_HANDLER NAME=__RME_X64_USER210_Handler VECTNUM=210
ffffffff8020c323:	0f 01 f8             	swapgs
ffffffff8020c326:	6a 00                	push   $0x0
ffffffff8020c328:	68 d2 00 00 00       	push   $0xd2
ffffffff8020c32d:	e9 82 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c332 <__RME_X64_USER211_Handler>:
USER_HANDLER NAME=__RME_X64_USER211_Handler VECTNUM=211
ffffffff8020c332:	0f 01 f8             	swapgs
ffffffff8020c335:	6a 00                	push   $0x0
ffffffff8020c337:	68 d3 00 00 00       	push   $0xd3
ffffffff8020c33c:	e9 73 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c341 <__RME_X64_USER212_Handler>:
USER_HANDLER NAME=__RME_X64_USER212_Handler VECTNUM=212
ffffffff8020c341:	0f 01 f8             	swapgs
ffffffff8020c344:	6a 00                	push   $0x0
ffffffff8020c346:	68 d4 00 00 00       	push   $0xd4
ffffffff8020c34b:	e9 64 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c350 <__RME_X64_USER213_Handler>:
USER_HANDLER NAME=__RME_X64_USER213_Handler VECTNUM=213
ffffffff8020c350:	0f 01 f8             	swapgs
ffffffff8020c353:	6a 00                	push   $0x0
ffffffff8020c355:	68 d5 00 00 00       	push   $0xd5
ffffffff8020c35a:	e9 55 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c35f <__RME_X64_USER214_Handler>:
USER_HANDLER NAME=__RME_X64_USER214_Handler VECTNUM=214
ffffffff8020c35f:	0f 01 f8             	swapgs
ffffffff8020c362:	6a 00                	push   $0x0
ffffffff8020c364:	68 d6 00 00 00       	push   $0xd6
ffffffff8020c369:	e9 46 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c36e <__RME_X64_USER215_Handler>:
USER_HANDLER NAME=__RME_X64_USER215_Handler VECTNUM=215
ffffffff8020c36e:	0f 01 f8             	swapgs
ffffffff8020c371:	6a 00                	push   $0x0
ffffffff8020c373:	68 d7 00 00 00       	push   $0xd7
ffffffff8020c378:	e9 37 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c37d <__RME_X64_USER216_Handler>:
USER_HANDLER NAME=__RME_X64_USER216_Handler VECTNUM=216
ffffffff8020c37d:	0f 01 f8             	swapgs
ffffffff8020c380:	6a 00                	push   $0x0
ffffffff8020c382:	68 d8 00 00 00       	push   $0xd8
ffffffff8020c387:	e9 28 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c38c <__RME_X64_USER217_Handler>:
USER_HANDLER NAME=__RME_X64_USER217_Handler VECTNUM=217
ffffffff8020c38c:	0f 01 f8             	swapgs
ffffffff8020c38f:	6a 00                	push   $0x0
ffffffff8020c391:	68 d9 00 00 00       	push   $0xd9
ffffffff8020c396:	e9 19 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c39b <__RME_X64_USER218_Handler>:
USER_HANDLER NAME=__RME_X64_USER218_Handler VECTNUM=218
ffffffff8020c39b:	0f 01 f8             	swapgs
ffffffff8020c39e:	6a 00                	push   $0x0
ffffffff8020c3a0:	68 da 00 00 00       	push   $0xda
ffffffff8020c3a5:	e9 0a 02 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3aa <__RME_X64_USER219_Handler>:
USER_HANDLER NAME=__RME_X64_USER219_Handler VECTNUM=219
ffffffff8020c3aa:	0f 01 f8             	swapgs
ffffffff8020c3ad:	6a 00                	push   $0x0
ffffffff8020c3af:	68 db 00 00 00       	push   $0xdb
ffffffff8020c3b4:	e9 fb 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3b9 <__RME_X64_USER220_Handler>:

USER_HANDLER NAME=__RME_X64_USER220_Handler VECTNUM=220
ffffffff8020c3b9:	0f 01 f8             	swapgs
ffffffff8020c3bc:	6a 00                	push   $0x0
ffffffff8020c3be:	68 dc 00 00 00       	push   $0xdc
ffffffff8020c3c3:	e9 ec 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3c8 <__RME_X64_USER221_Handler>:
USER_HANDLER NAME=__RME_X64_USER221_Handler VECTNUM=221
ffffffff8020c3c8:	0f 01 f8             	swapgs
ffffffff8020c3cb:	6a 00                	push   $0x0
ffffffff8020c3cd:	68 dd 00 00 00       	push   $0xdd
ffffffff8020c3d2:	e9 dd 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3d7 <__RME_X64_USER222_Handler>:
USER_HANDLER NAME=__RME_X64_USER222_Handler VECTNUM=222
ffffffff8020c3d7:	0f 01 f8             	swapgs
ffffffff8020c3da:	6a 00                	push   $0x0
ffffffff8020c3dc:	68 de 00 00 00       	push   $0xde
ffffffff8020c3e1:	e9 ce 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3e6 <__RME_X64_USER223_Handler>:
USER_HANDLER NAME=__RME_X64_USER223_Handler VECTNUM=223
ffffffff8020c3e6:	0f 01 f8             	swapgs
ffffffff8020c3e9:	6a 00                	push   $0x0
ffffffff8020c3eb:	68 df 00 00 00       	push   $0xdf
ffffffff8020c3f0:	e9 bf 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c3f5 <__RME_X64_USER224_Handler>:
USER_HANDLER NAME=__RME_X64_USER224_Handler VECTNUM=224
ffffffff8020c3f5:	0f 01 f8             	swapgs
ffffffff8020c3f8:	6a 00                	push   $0x0
ffffffff8020c3fa:	68 e0 00 00 00       	push   $0xe0
ffffffff8020c3ff:	e9 b0 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c404 <__RME_X64_USER225_Handler>:
USER_HANDLER NAME=__RME_X64_USER225_Handler VECTNUM=225
ffffffff8020c404:	0f 01 f8             	swapgs
ffffffff8020c407:	6a 00                	push   $0x0
ffffffff8020c409:	68 e1 00 00 00       	push   $0xe1
ffffffff8020c40e:	e9 a1 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c413 <__RME_X64_USER226_Handler>:
USER_HANDLER NAME=__RME_X64_USER226_Handler VECTNUM=226
ffffffff8020c413:	0f 01 f8             	swapgs
ffffffff8020c416:	6a 00                	push   $0x0
ffffffff8020c418:	68 e2 00 00 00       	push   $0xe2
ffffffff8020c41d:	e9 92 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c422 <__RME_X64_USER227_Handler>:
USER_HANDLER NAME=__RME_X64_USER227_Handler VECTNUM=227
ffffffff8020c422:	0f 01 f8             	swapgs
ffffffff8020c425:	6a 00                	push   $0x0
ffffffff8020c427:	68 e3 00 00 00       	push   $0xe3
ffffffff8020c42c:	e9 83 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c431 <__RME_X64_USER228_Handler>:
USER_HANDLER NAME=__RME_X64_USER228_Handler VECTNUM=228
ffffffff8020c431:	0f 01 f8             	swapgs
ffffffff8020c434:	6a 00                	push   $0x0
ffffffff8020c436:	68 e4 00 00 00       	push   $0xe4
ffffffff8020c43b:	e9 74 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c440 <__RME_X64_USER229_Handler>:
USER_HANDLER NAME=__RME_X64_USER229_Handler VECTNUM=229
ffffffff8020c440:	0f 01 f8             	swapgs
ffffffff8020c443:	6a 00                	push   $0x0
ffffffff8020c445:	68 e5 00 00 00       	push   $0xe5
ffffffff8020c44a:	e9 65 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c44f <__RME_X64_USER230_Handler>:

USER_HANDLER NAME=__RME_X64_USER230_Handler VECTNUM=230
ffffffff8020c44f:	0f 01 f8             	swapgs
ffffffff8020c452:	6a 00                	push   $0x0
ffffffff8020c454:	68 e6 00 00 00       	push   $0xe6
ffffffff8020c459:	e9 56 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c45e <__RME_X64_USER231_Handler>:
USER_HANDLER NAME=__RME_X64_USER231_Handler VECTNUM=231
ffffffff8020c45e:	0f 01 f8             	swapgs
ffffffff8020c461:	6a 00                	push   $0x0
ffffffff8020c463:	68 e7 00 00 00       	push   $0xe7
ffffffff8020c468:	e9 47 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c46d <__RME_X64_USER232_Handler>:
USER_HANDLER NAME=__RME_X64_USER232_Handler VECTNUM=232
ffffffff8020c46d:	0f 01 f8             	swapgs
ffffffff8020c470:	6a 00                	push   $0x0
ffffffff8020c472:	68 e8 00 00 00       	push   $0xe8
ffffffff8020c477:	e9 38 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c47c <__RME_X64_USER233_Handler>:
USER_HANDLER NAME=__RME_X64_USER233_Handler VECTNUM=233
ffffffff8020c47c:	0f 01 f8             	swapgs
ffffffff8020c47f:	6a 00                	push   $0x0
ffffffff8020c481:	68 e9 00 00 00       	push   $0xe9
ffffffff8020c486:	e9 29 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c48b <__RME_X64_USER234_Handler>:
USER_HANDLER NAME=__RME_X64_USER234_Handler VECTNUM=234
ffffffff8020c48b:	0f 01 f8             	swapgs
ffffffff8020c48e:	6a 00                	push   $0x0
ffffffff8020c490:	68 ea 00 00 00       	push   $0xea
ffffffff8020c495:	e9 1a 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c49a <__RME_X64_USER235_Handler>:
USER_HANDLER NAME=__RME_X64_USER235_Handler VECTNUM=235
ffffffff8020c49a:	0f 01 f8             	swapgs
ffffffff8020c49d:	6a 00                	push   $0x0
ffffffff8020c49f:	68 eb 00 00 00       	push   $0xeb
ffffffff8020c4a4:	e9 0b 01 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4a9 <__RME_X64_USER236_Handler>:
USER_HANDLER NAME=__RME_X64_USER236_Handler VECTNUM=236
ffffffff8020c4a9:	0f 01 f8             	swapgs
ffffffff8020c4ac:	6a 00                	push   $0x0
ffffffff8020c4ae:	68 ec 00 00 00       	push   $0xec
ffffffff8020c4b3:	e9 fc 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4b8 <__RME_X64_USER237_Handler>:
USER_HANDLER NAME=__RME_X64_USER237_Handler VECTNUM=237
ffffffff8020c4b8:	0f 01 f8             	swapgs
ffffffff8020c4bb:	6a 00                	push   $0x0
ffffffff8020c4bd:	68 ed 00 00 00       	push   $0xed
ffffffff8020c4c2:	e9 ed 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4c7 <__RME_X64_USER238_Handler>:
USER_HANDLER NAME=__RME_X64_USER238_Handler VECTNUM=238
ffffffff8020c4c7:	0f 01 f8             	swapgs
ffffffff8020c4ca:	6a 00                	push   $0x0
ffffffff8020c4cc:	68 ee 00 00 00       	push   $0xee
ffffffff8020c4d1:	e9 de 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4d6 <__RME_X64_USER239_Handler>:
USER_HANDLER NAME=__RME_X64_USER239_Handler VECTNUM=239
ffffffff8020c4d6:	0f 01 f8             	swapgs
ffffffff8020c4d9:	6a 00                	push   $0x0
ffffffff8020c4db:	68 ef 00 00 00       	push   $0xef
ffffffff8020c4e0:	e9 cf 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4e5 <__RME_X64_USER240_Handler>:

USER_HANDLER NAME=__RME_X64_USER240_Handler VECTNUM=240
ffffffff8020c4e5:	0f 01 f8             	swapgs
ffffffff8020c4e8:	6a 00                	push   $0x0
ffffffff8020c4ea:	68 f0 00 00 00       	push   $0xf0
ffffffff8020c4ef:	e9 c0 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c4f4 <__RME_X64_USER241_Handler>:
USER_HANDLER NAME=__RME_X64_USER241_Handler VECTNUM=241
ffffffff8020c4f4:	0f 01 f8             	swapgs
ffffffff8020c4f7:	6a 00                	push   $0x0
ffffffff8020c4f9:	68 f1 00 00 00       	push   $0xf1
ffffffff8020c4fe:	e9 b1 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c503 <__RME_X64_USER242_Handler>:
USER_HANDLER NAME=__RME_X64_USER242_Handler VECTNUM=242
ffffffff8020c503:	0f 01 f8             	swapgs
ffffffff8020c506:	6a 00                	push   $0x0
ffffffff8020c508:	68 f2 00 00 00       	push   $0xf2
ffffffff8020c50d:	e9 a2 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c512 <__RME_X64_USER243_Handler>:
USER_HANDLER NAME=__RME_X64_USER243_Handler VECTNUM=243
ffffffff8020c512:	0f 01 f8             	swapgs
ffffffff8020c515:	6a 00                	push   $0x0
ffffffff8020c517:	68 f3 00 00 00       	push   $0xf3
ffffffff8020c51c:	e9 93 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c521 <__RME_X64_USER244_Handler>:
USER_HANDLER NAME=__RME_X64_USER244_Handler VECTNUM=244
ffffffff8020c521:	0f 01 f8             	swapgs
ffffffff8020c524:	6a 00                	push   $0x0
ffffffff8020c526:	68 f4 00 00 00       	push   $0xf4
ffffffff8020c52b:	e9 84 00 00 00       	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c530 <__RME_X64_USER245_Handler>:
USER_HANDLER NAME=__RME_X64_USER245_Handler VECTNUM=245
ffffffff8020c530:	0f 01 f8             	swapgs
ffffffff8020c533:	6a 00                	push   $0x0
ffffffff8020c535:	68 f5 00 00 00       	push   $0xf5
ffffffff8020c53a:	eb 78                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c53c <__RME_X64_USER246_Handler>:
USER_HANDLER NAME=__RME_X64_USER246_Handler VECTNUM=246
ffffffff8020c53c:	0f 01 f8             	swapgs
ffffffff8020c53f:	6a 00                	push   $0x0
ffffffff8020c541:	68 f6 00 00 00       	push   $0xf6
ffffffff8020c546:	eb 6c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c548 <__RME_X64_USER247_Handler>:
USER_HANDLER NAME=__RME_X64_USER247_Handler VECTNUM=247
ffffffff8020c548:	0f 01 f8             	swapgs
ffffffff8020c54b:	6a 00                	push   $0x0
ffffffff8020c54d:	68 f7 00 00 00       	push   $0xf7
ffffffff8020c552:	eb 60                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c554 <__RME_X64_USER248_Handler>:
USER_HANDLER NAME=__RME_X64_USER248_Handler VECTNUM=248
ffffffff8020c554:	0f 01 f8             	swapgs
ffffffff8020c557:	6a 00                	push   $0x0
ffffffff8020c559:	68 f8 00 00 00       	push   $0xf8
ffffffff8020c55e:	eb 54                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c560 <__RME_X64_USER249_Handler>:
USER_HANDLER NAME=__RME_X64_USER249_Handler VECTNUM=249
ffffffff8020c560:	0f 01 f8             	swapgs
ffffffff8020c563:	6a 00                	push   $0x0
ffffffff8020c565:	68 f9 00 00 00       	push   $0xf9
ffffffff8020c56a:	eb 48                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c56c <__RME_X64_USER250_Handler>:

USER_HANDLER NAME=__RME_X64_USER250_Handler VECTNUM=250
ffffffff8020c56c:	0f 01 f8             	swapgs
ffffffff8020c56f:	6a 00                	push   $0x0
ffffffff8020c571:	68 fa 00 00 00       	push   $0xfa
ffffffff8020c576:	eb 3c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c578 <__RME_X64_USER251_Handler>:
USER_HANDLER NAME=__RME_X64_USER251_Handler VECTNUM=251
ffffffff8020c578:	0f 01 f8             	swapgs
ffffffff8020c57b:	6a 00                	push   $0x0
ffffffff8020c57d:	68 fb 00 00 00       	push   $0xfb
ffffffff8020c582:	eb 30                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c584 <__RME_X64_USER252_Handler>:
USER_HANDLER NAME=__RME_X64_USER252_Handler VECTNUM=252
ffffffff8020c584:	0f 01 f8             	swapgs
ffffffff8020c587:	6a 00                	push   $0x0
ffffffff8020c589:	68 fc 00 00 00       	push   $0xfc
ffffffff8020c58e:	eb 24                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c590 <__RME_X64_USER253_Handler>:
USER_HANDLER NAME=__RME_X64_USER253_Handler VECTNUM=253
ffffffff8020c590:	0f 01 f8             	swapgs
ffffffff8020c593:	6a 00                	push   $0x0
ffffffff8020c595:	68 fd 00 00 00       	push   $0xfd
ffffffff8020c59a:	eb 18                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c59c <__RME_X64_USER254_Handler>:
USER_HANDLER NAME=__RME_X64_USER254_Handler VECTNUM=254
ffffffff8020c59c:	0f 01 f8             	swapgs
ffffffff8020c59f:	6a 00                	push   $0x0
ffffffff8020c5a1:	68 fe 00 00 00       	push   $0xfe
ffffffff8020c5a6:	eb 0c                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5a8 <__RME_X64_USER255_Handler>:
USER_HANDLER NAME=__RME_X64_USER255_Handler VECTNUM=255
ffffffff8020c5a8:	0f 01 f8             	swapgs
ffffffff8020c5ab:	6a 00                	push   $0x0
ffffffff8020c5ad:	68 ff 00 00 00       	push   $0xff
ffffffff8020c5b2:	eb 00                	jmp    ffffffff8020c5b4 <User_Handler>

ffffffff8020c5b4 <User_Handler>:
/* Common function body for generic interrupt handlers - reduce I-Cache usage */
User_Handler:
    SAVE_GP_REGS
ffffffff8020c5b4:	41 57                	push   %r15
ffffffff8020c5b6:	41 56                	push   %r14
ffffffff8020c5b8:	41 55                	push   %r13
ffffffff8020c5ba:	41 54                	push   %r12
ffffffff8020c5bc:	41 53                	push   %r11
ffffffff8020c5be:	41 52                	push   %r10
ffffffff8020c5c0:	41 51                	push   %r9
ffffffff8020c5c2:	41 50                	push   %r8
ffffffff8020c5c4:	55                   	push   %rbp
ffffffff8020c5c5:	57                   	push   %rdi
ffffffff8020c5c6:	56                   	push   %rsi
ffffffff8020c5c7:	52                   	push   %rdx
ffffffff8020c5c8:	51                   	push   %rcx
ffffffff8020c5c9:	53                   	push   %rbx
ffffffff8020c5ca:	50                   	push   %rax
ffffffff8020c5cb:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c5cf:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c5d1:	48 89 e7             	mov    %rsp,%rdi
    MOVQ                (15*8)(%RSP),%RSI
ffffffff8020c5d4:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
    CALLQ               __RME_X64_Generic_Handler
ffffffff8020c5d9:	e8 b5 a2 01 00       	call   ffffffff80226893 <__RME_X64_Generic_Handler>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c5de:	e8 40 7e 01 00       	call   ffffffff80224423 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c5e3:	0f 01 f8             	swapgs
ffffffff8020c5e6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c5ea:	8e d8                	mov    %eax,%ds
ffffffff8020c5ec:	58                   	pop    %rax
ffffffff8020c5ed:	5b                   	pop    %rbx
ffffffff8020c5ee:	59                   	pop    %rcx
ffffffff8020c5ef:	5a                   	pop    %rdx
ffffffff8020c5f0:	5e                   	pop    %rsi
ffffffff8020c5f1:	5f                   	pop    %rdi
ffffffff8020c5f2:	5d                   	pop    %rbp
ffffffff8020c5f3:	41 58                	pop    %r8
ffffffff8020c5f5:	41 59                	pop    %r9
ffffffff8020c5f7:	41 5a                	pop    %r10
ffffffff8020c5f9:	41 5b                	pop    %r11
ffffffff8020c5fb:	41 5c                	pop    %r12
ffffffff8020c5fd:	41 5d                	pop    %r13
ffffffff8020c5ff:	41 5e                	pop    %r14
ffffffff8020c601:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c603:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c607:	48 cf                	iretq

ffffffff8020c609 <SysTick_SMP_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_SMP_Handler:
    .global             SysTick_SMP_Handler
    SWAPGS
ffffffff8020c609:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c60c:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c60e:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c613:	41 57                	push   %r15
ffffffff8020c615:	41 56                	push   %r14
ffffffff8020c617:	41 55                	push   %r13
ffffffff8020c619:	41 54                	push   %r12
ffffffff8020c61b:	41 53                	push   %r11
ffffffff8020c61d:	41 52                	push   %r10
ffffffff8020c61f:	41 51                	push   %r9
ffffffff8020c621:	41 50                	push   %r8
ffffffff8020c623:	55                   	push   %rbp
ffffffff8020c624:	57                   	push   %rdi
ffffffff8020c625:	56                   	push   %rsi
ffffffff8020c626:	52                   	push   %rdx
ffffffff8020c627:	51                   	push   %rcx
ffffffff8020c628:	53                   	push   %rbx
ffffffff8020c629:	50                   	push   %rax
ffffffff8020c62a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c62e:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c630:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tick_SMP_Handler
ffffffff8020c633:	e8 26 01 00 00       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c638:	e8 e6 7d 01 00       	call   ffffffff80224423 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c63d:	0f 01 f8             	swapgs
ffffffff8020c640:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c644:	8e d8                	mov    %eax,%ds
ffffffff8020c646:	58                   	pop    %rax
ffffffff8020c647:	5b                   	pop    %rbx
ffffffff8020c648:	59                   	pop    %rcx
ffffffff8020c649:	5a                   	pop    %rdx
ffffffff8020c64a:	5e                   	pop    %rsi
ffffffff8020c64b:	5f                   	pop    %rdi
ffffffff8020c64c:	5d                   	pop    %rbp
ffffffff8020c64d:	41 58                	pop    %r8
ffffffff8020c64f:	41 59                	pop    %r9
ffffffff8020c651:	41 5a                	pop    %r10
ffffffff8020c653:	41 5b                	pop    %r11
ffffffff8020c655:	41 5c                	pop    %r12
ffffffff8020c657:	41 5d                	pop    %r13
ffffffff8020c659:	41 5e                	pop    %r14
ffffffff8020c65b:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c65d:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c661:	48 cf                	iretq

ffffffff8020c663 <SysTick_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SysTick_Handler:
    .global             SysTick_Handler
    SWAPGS
ffffffff8020c663:	0f 01 f8             	swapgs
    /* Make a dummy error code */
    PUSHQ               $0
ffffffff8020c666:	6a 00                	push   $0x0
    /* The interrupt number of SysTick is always 0xFFFF */
    PUSHQ               $0xFFFF
ffffffff8020c668:	68 ff ff 00 00       	push   $0xffff
    SAVE_GP_REGS
ffffffff8020c66d:	41 57                	push   %r15
ffffffff8020c66f:	41 56                	push   %r14
ffffffff8020c671:	41 55                	push   %r13
ffffffff8020c673:	41 54                	push   %r12
ffffffff8020c675:	41 53                	push   %r11
ffffffff8020c677:	41 52                	push   %r10
ffffffff8020c679:	41 51                	push   %r9
ffffffff8020c67b:	41 50                	push   %r8
ffffffff8020c67d:	55                   	push   %rbp
ffffffff8020c67e:	57                   	push   %rdi
ffffffff8020c67f:	56                   	push   %rsi
ffffffff8020c680:	52                   	push   %rdx
ffffffff8020c681:	51                   	push   %rcx
ffffffff8020c682:	53                   	push   %rbx
ffffffff8020c683:	50                   	push   %rax
ffffffff8020c684:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c688:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c68a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Tim_Handler
ffffffff8020c68d:	e8 95 12 00 00       	call   ffffffff8020d927 <_RME_Tim_Handler>
    CALLQ               __RME_X64_SMP_Tick
ffffffff8020c692:	e8 ee 83 01 00       	call   ffffffff80224a85 <__RME_X64_SMP_Tick>
    CALLQ               __RME_X64_LAPIC_Ack
ffffffff8020c697:	e8 87 7d 01 00       	call   ffffffff80224423 <__RME_X64_LAPIC_Ack>
    RESTORE_GP_REGS
ffffffff8020c69c:	0f 01 f8             	swapgs
ffffffff8020c69f:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c6a3:	8e d8                	mov    %eax,%ds
ffffffff8020c6a5:	58                   	pop    %rax
ffffffff8020c6a6:	5b                   	pop    %rbx
ffffffff8020c6a7:	59                   	pop    %rcx
ffffffff8020c6a8:	5a                   	pop    %rdx
ffffffff8020c6a9:	5e                   	pop    %rsi
ffffffff8020c6aa:	5f                   	pop    %rdi
ffffffff8020c6ab:	5d                   	pop    %rbp
ffffffff8020c6ac:	41 58                	pop    %r8
ffffffff8020c6ae:	41 59                	pop    %r9
ffffffff8020c6b0:	41 5a                	pop    %r10
ffffffff8020c6b2:	41 5b                	pop    %r11
ffffffff8020c6b4:	41 5c                	pop    %r12
ffffffff8020c6b6:	41 5d                	pop    %r13
ffffffff8020c6b8:	41 5e                	pop    %r14
ffffffff8020c6ba:	41 5f                	pop    %r15
    ADDQ                $16,%RSP
ffffffff8020c6bc:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c6c0:	48 cf                	iretq

ffffffff8020c6c2 <SVC_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    .global             SVC_Handler
    SWAPGS
ffffffff8020c6c2:	0f 01 f8             	swapgs
    /* Swap the pointers with the per-core kernel RSP */
    MOVQ                %RSP,%GS:(8192-8)
ffffffff8020c6c5:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020c6cc:	00 00 
    MOVQ                %GS:(8192-16),%RSP
ffffffff8020c6ce:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020c6d5:	00 00 
    /* Simulate INT stack: High - [SS, RSP, RFLAGS, CS, RIP, ERRCODE] - Low */
    PUSHQ               $(USER_DATA)
ffffffff8020c6d7:	6a 23                	push   $0x23
    PUSHQ               %GS:(8192-8)
ffffffff8020c6d9:	65 ff 34 25 f8 1f 00 	push   %gs:0x1ff8
ffffffff8020c6e0:	00 
    PUSHQ               %R11
ffffffff8020c6e1:	41 53                	push   %r11
    PUSHQ               $(USER_CODE)
ffffffff8020c6e3:	6a 2b                	push   $0x2b
    PUSHQ               %RCX
ffffffff8020c6e5:	51                   	push   %rcx
    PUSHQ               $0
ffffffff8020c6e6:	6a 00                	push   $0x0
    /* We went into this from a SYSCALL - interrupt number 0x10000 */
    PUSHQ               $0x10000
ffffffff8020c6e8:	68 00 00 01 00       	push   $0x10000
    SAVE_GP_REGS
ffffffff8020c6ed:	41 57                	push   %r15
ffffffff8020c6ef:	41 56                	push   %r14
ffffffff8020c6f1:	41 55                	push   %r13
ffffffff8020c6f3:	41 54                	push   %r12
ffffffff8020c6f5:	41 53                	push   %r11
ffffffff8020c6f7:	41 52                	push   %r10
ffffffff8020c6f9:	41 51                	push   %r9
ffffffff8020c6fb:	41 50                	push   %r8
ffffffff8020c6fd:	55                   	push   %rbp
ffffffff8020c6fe:	57                   	push   %rdi
ffffffff8020c6ff:	56                   	push   %rsi
ffffffff8020c700:	52                   	push   %rdx
ffffffff8020c701:	51                   	push   %rcx
ffffffff8020c702:	53                   	push   %rbx
ffffffff8020c703:	50                   	push   %rax
ffffffff8020c704:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c708:	8e d8                	mov    %eax,%ds
    /* Pass the stack pointer to system call handler */
    MOVQ                %RSP,%RDI
ffffffff8020c70a:	48 89 e7             	mov    %rsp,%rdi
    CALLQ               _RME_Svc_Handler
ffffffff8020c70d:	e8 91 08 00 00       	call   ffffffff8020cfa3 <_RME_Svc_Handler>
    RESTORE_GP_REGS
ffffffff8020c712:	0f 01 f8             	swapgs
ffffffff8020c715:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c719:	8e d8                	mov    %eax,%ds
ffffffff8020c71b:	58                   	pop    %rax
ffffffff8020c71c:	5b                   	pop    %rbx
ffffffff8020c71d:	59                   	pop    %rcx
ffffffff8020c71e:	5a                   	pop    %rdx
ffffffff8020c71f:	5e                   	pop    %rsi
ffffffff8020c720:	5f                   	pop    %rdi
ffffffff8020c721:	5d                   	pop    %rbp
ffffffff8020c722:	41 58                	pop    %r8
ffffffff8020c724:	41 59                	pop    %r9
ffffffff8020c726:	41 5a                	pop    %r10
ffffffff8020c728:	41 5b                	pop    %r11
ffffffff8020c72a:	41 5c                	pop    %r12
ffffffff8020c72c:	41 5d                	pop    %r13
ffffffff8020c72e:	41 5e                	pop    %r14
ffffffff8020c730:	41 5f                	pop    %r15
    /* See if we are forced to use IRET */
    TESTQ               $0x10000,(%RSP)
ffffffff8020c732:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020c739:	00 
    JZ                  Use_IRET
ffffffff8020c73a:	74 1c                	je     ffffffff8020c758 <Use_IRET>
    /* Just move these into the registers desired */
    /* CVE-2012-0217, CVE-2014-4699: Force canonical address on RIP */
    MOVQ                $0x7FFFFFFFFFFF,%RCX
ffffffff8020c73c:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020c743:	7f 00 00 
    ANDQ                16(%RSP),%RCX
ffffffff8020c746:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
    MOVQ                32(%RSP),%R11
ffffffff8020c74b:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
    MOVQ                40(%RSP),%RSP
ffffffff8020c750:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
    /* Return to user-level */
    SYSRETQ
ffffffff8020c755:	48 0f 07             	sysretq

ffffffff8020c758 <Use_IRET>:
Use_IRET:
    /* Flag is zero, We are forced to use IRET, because this is from INT */
    ADDQ                $16,%RSP
ffffffff8020c758:	48 83 c4 10          	add    $0x10,%rsp
    IRETQ
ffffffff8020c75c:	48 cf                	iretq

ffffffff8020c75e <_RME_X64_Comp_Swap>:
and asynchronous communication. Different from most operating systems, it employs
thread migration model for cross-boundary synchronous communication rather than
simple blockpoints. This invocation design have many benefits in many facets.

* Kernel Function *************************************************************
There's no perfect operating system for a particular hardware. A hardware may
ffffffff8020c75e:	55                   	push   %rbp
ffffffff8020c75f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c762:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8020c766:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020c76a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020c76e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
have its own idiosyncrasies that needs extra hacks. RME's kernel function utility
provides a disciplined way of making such hacks, in case you need to add new 
ffffffff8020c772:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020c776:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8020c77a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c77e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8020c782:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8020c787:	0f 94 c0             	sete   %al
ffffffff8020c78a:	88 45 ff             	mov    %al,-0x1(%rbp)
system calls or directly manipulate hardware.

* The Use of 'volatile' *******************************************************
'volatile' is not needed in the kernel because the syscall interface acts as a
ffffffff8020c78d:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
natural compiler barrier. We're safe to assume that, during one syscall, data
ffffffff8020c791:	c9                   	leave
ffffffff8020c792:	c3                   	ret

ffffffff8020c793 <_RME_X64_Fetch_Add>:
in memory remains unchanged. If anything changes, it has been dealt with the 
dedicated assembly atomics. If LTO has been enabled, there are three cases:
ffffffff8020c793:	55                   	push   %rbp
ffffffff8020c794:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c797:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8020c79b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020c79f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
(1) Uniprocessor with C-implemented "atomics" with no real atomic support.
ffffffff8020c7a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020c7a7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8020c7ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c7af:	f0 48 0f c1 02       	lock xadd %rax,(%rdx)
ffffffff8020c7b4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    In this case, compiler barriers are not needed due to no kernel concurrency.
(2) Multiprocessor with assembly-implemented atomics, but the compiler LTO does
    not honor the assembly functions; instead it thinks that they are opaque.
    In this case, the opaque function call itself is a full compiler barrier.
ffffffff8020c7b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
(3) Multiprocessor with assembly-implemented atomics, and the compiler LTO does
ffffffff8020c7bc:	c9                   	leave
ffffffff8020c7bd:	c3                   	ret

ffffffff8020c7be <_RME_X64_Fetch_And>:
    honor the assembly functions.
    In this case, the compiler should be aware of the semantics of the assembly,
ffffffff8020c7be:	55                   	push   %rbp
ffffffff8020c7bf:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c7c2:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020c7c6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020c7ca:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    and produce correct code.
* Function Name Rules *********************************************************
ffffffff8020c7ce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020c7d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c7d6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020c7da:	48 8b 02             	mov    (%rdx),%rax
ffffffff8020c7dd:	f0 48 21 02          	lock and %rax,(%rdx)
ffffffff8020c7e1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
(1) No "_": OS entry function RME_Kmain and C entry "main".
(2) "_"   : Kernel functions that are be called by kernel.
(3) "__"  : HAL functions that are called by kernel.
(4) "___" : HAL functions that should only be called by HAL.
ffffffff8020c7e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
******************************************************************************/
ffffffff8020c7e9:	c9                   	leave
ffffffff8020c7ea:	c3                   	ret

ffffffff8020c7eb <_RME_X64_MSB_Get>:

/* Include *******************************************************************/
ffffffff8020c7eb:	55                   	push   %rbp
ffffffff8020c7ec:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c7ef:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020c7f3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
#define __HDR_DEF__
#include "rme_platform.h"
ffffffff8020c7f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c7fb:	48 0f bd c0          	bsr    %rax,%rax
ffffffff8020c7ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#include "Kernel/rme_kernel.h"
#undef __HDR_DEF__

#define __HDR_STRUCT__
ffffffff8020c803:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
#include "rme_platform.h"
ffffffff8020c807:	c9                   	leave
ffffffff8020c808:	c3                   	ret

ffffffff8020c809 <__RME_Int_Disable>:
#include "Kernel/rme_kernel.h"
#undef __HDR_STRUCT__

ffffffff8020c809:	55                   	push   %rbp
ffffffff8020c80a:	48 89 e5             	mov    %rsp,%rbp
/* Private include */
ffffffff8020c80d:	fa                   	cli
#include "Kernel/rme_kernel.h"

#define __HDR_PUBLIC__
ffffffff8020c80e:	90                   	nop
ffffffff8020c80f:	5d                   	pop    %rbp
ffffffff8020c810:	c3                   	ret

ffffffff8020c811 <RME_Int_Print>:
Output      : None.
Return      : rme_cnt_t - The length of the string printed.
******************************************************************************/
#if(RME_DBGLOG_ENABLE!=0U)
rme_cnt_t RME_Int_Print(rme_cnt_t Int)
{
ffffffff8020c811:	f3 0f 1e fa          	endbr64
ffffffff8020c815:	55                   	push   %rbp
ffffffff8020c816:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c819:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8020c81d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_cnt_t Iter;
    rme_cnt_t Count;
    rme_cnt_t Div;
    
    /* Exit on zero */
    if(Int==0)
ffffffff8020c821:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8020c826:	75 14                	jne    ffffffff8020c83c <RME_Int_Print+0x2b>
    {
        RME_COV_MARKER();

        __RME_Putchar('0');
ffffffff8020c828:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020c82d:	e8 05 ea 00 00       	call   ffffffff8021b237 <__RME_Putchar>
        return 1;
ffffffff8020c832:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c837:	e9 0b 01 00 00       	jmp    ffffffff8020c947 <RME_Int_Print+0x136>
        /* No action required */
    }


    /* Correct all negatives into positives */
    if(Int<0)
ffffffff8020c83c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8020c841:	79 1f                	jns    ffffffff8020c862 <RME_Int_Print+0x51>
    {
        RME_COV_MARKER();

        __RME_Putchar('-');
ffffffff8020c843:	bf 2d 00 00 00       	mov    $0x2d,%edi
ffffffff8020c848:	e8 ea e9 00 00       	call   ffffffff8021b237 <__RME_Putchar>
        Abs=-Int;
ffffffff8020c84d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020c851:	48 f7 d8             	neg    %rax
ffffffff8020c854:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        Num=1;
ffffffff8020c858:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8020c85f:	00 
ffffffff8020c860:	eb 10                	jmp    ffffffff8020c872 <RME_Int_Print+0x61>
    }
    else
    {
        RME_COV_MARKER();

        Abs=Int;
ffffffff8020c862:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020c866:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        Num=0;
ffffffff8020c86a:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020c871:	00 
    }

    /* How many digits are there? */
    Count=0;
ffffffff8020c872:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8020c879:	00 
    Div=1;
ffffffff8020c87a:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
ffffffff8020c881:	00 
    Iter=Abs;
ffffffff8020c882:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c886:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(1U)
    {
        Iter/=10;
ffffffff8020c88a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020c88e:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
ffffffff8020c895:	66 66 66 
ffffffff8020c898:	48 89 c8             	mov    %rcx,%rax
ffffffff8020c89b:	48 f7 ea             	imul   %rdx
ffffffff8020c89e:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8a1:	48 c1 f8 02          	sar    $0x2,%rax
ffffffff8020c8a5:	48 c1 f9 3f          	sar    $0x3f,%rcx
ffffffff8020c8a9:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c8ac:	48 29 d0             	sub    %rdx,%rax
ffffffff8020c8af:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Count++;
ffffffff8020c8b3:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        if(Iter!=0)
ffffffff8020c8b8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8020c8bd:	74 17                	je     ffffffff8020c8d6 <RME_Int_Print+0xc5>
        {
            RME_COV_MARKER();

            Div*=10;
ffffffff8020c8bf:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020c8c3:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c8c6:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff8020c8ca:	48 01 d0             	add    %rdx,%rax
ffffffff8020c8cd:	48 01 c0             	add    %rax,%rax
ffffffff8020c8d0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        Iter/=10;
ffffffff8020c8d4:	eb b4                	jmp    ffffffff8020c88a <RME_Int_Print+0x79>
        }
        else
        {
            RME_COV_MARKER();

            break;
ffffffff8020c8d6:	90                   	nop
        }
    }
    Num+=Count;
ffffffff8020c8d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020c8db:	48 01 45 f8          	add    %rax,-0x8(%rbp)

    /* Print the integer */
    Iter=Abs;
ffffffff8020c8df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c8e3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(Count>0)
ffffffff8020c8e7:	eb 53                	jmp    ffffffff8020c93c <RME_Int_Print+0x12b>
    {
        Count--;
ffffffff8020c8e9:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
ffffffff8020c8ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c8f2:	48 99                	cqto
ffffffff8020c8f4:	48 f7 7d d8          	idivq  -0x28(%rbp)
ffffffff8020c8f8:	83 c0 30             	add    $0x30,%eax
ffffffff8020c8fb:	0f be c0             	movsbl %al,%eax
ffffffff8020c8fe:	89 c7                	mov    %eax,%edi
ffffffff8020c900:	e8 32 e9 00 00       	call   ffffffff8021b237 <__RME_Putchar>
        Iter=Iter%Div;
ffffffff8020c905:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020c909:	48 99                	cqto
ffffffff8020c90b:	48 f7 7d d8          	idivq  -0x28(%rbp)
ffffffff8020c90f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
        Div/=10;
ffffffff8020c913:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8020c917:	48 ba 67 66 66 66 66 	movabs $0x6666666666666667,%rdx
ffffffff8020c91e:	66 66 66 
ffffffff8020c921:	48 89 c8             	mov    %rcx,%rax
ffffffff8020c924:	48 f7 ea             	imul   %rdx
ffffffff8020c927:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c92a:	48 c1 f8 02          	sar    $0x2,%rax
ffffffff8020c92e:	48 c1 f9 3f          	sar    $0x3f,%rcx
ffffffff8020c932:	48 89 ca             	mov    %rcx,%rdx
ffffffff8020c935:	48 29 d0             	sub    %rdx,%rax
ffffffff8020c938:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Count>0)
ffffffff8020c93c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8020c941:	7f a6                	jg     ffffffff8020c8e9 <RME_Int_Print+0xd8>
    }
    
    return Num;
ffffffff8020c943:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020c947:	c9                   	leave
ffffffff8020c948:	c3                   	ret

ffffffff8020c949 <RME_Hex_Print>:
Output      : None.
Return      : rme_cnt_t - The length of the string printed.
******************************************************************************/
#if(RME_DBGLOG_ENABLE!=0U)
rme_cnt_t RME_Hex_Print(rme_ptr_t Uint)
{
ffffffff8020c949:	f3 0f 1e fa          	endbr64
ffffffff8020c94d:	55                   	push   %rbp
ffffffff8020c94e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020c951:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8020c955:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    rme_ptr_t Iter;
    rme_ptr_t Count;
    rme_ptr_t Num;

    /* Exit on zero */
    if(Uint==0U)
ffffffff8020c959:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020c95e:	75 14                	jne    ffffffff8020c974 <RME_Hex_Print+0x2b>
    {
        RME_COV_MARKER();
        
        __RME_Putchar('0');
ffffffff8020c960:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff8020c965:	e8 cd e8 00 00       	call   ffffffff8021b237 <__RME_Putchar>
        return 1;
ffffffff8020c96a:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020c96f:	e9 95 00 00 00       	jmp    ffffffff8020ca09 <RME_Hex_Print+0xc0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Filter out all the zeroes */
    Count=0U;
ffffffff8020c974:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8020c97b:	00 
    Iter=Uint;
ffffffff8020c97c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020c980:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020c984:	eb 0a                	jmp    ffffffff8020c990 <RME_Hex_Print+0x47>
    {
        Iter<<=4;
ffffffff8020c986:	48 c1 65 f8 04       	shlq   $0x4,-0x8(%rbp)
        Count++;
ffffffff8020c98b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
    while((Iter>>(RME_WORD_BIT-4U))==0U)
ffffffff8020c990:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020c994:	48 c1 e8 3c          	shr    $0x3c,%rax
ffffffff8020c998:	48 85 c0             	test   %rax,%rax
ffffffff8020c99b:	74 e9                	je     ffffffff8020c986 <RME_Hex_Print+0x3d>
    }
    
    /* Count is the number of pts to print */
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
ffffffff8020c99d:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff8020c9a2:	48 2b 45 f0          	sub    -0x10(%rbp),%rax
ffffffff8020c9a6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Num=Count;
ffffffff8020c9aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c9ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    while(Count>0U)
ffffffff8020c9b2:	eb 4a                	jmp    ffffffff8020c9fe <RME_Hex_Print+0xb5>
    {
        Count--;
ffffffff8020c9b4:	48 83 6d f0 01       	subq   $0x1,-0x10(%rbp)
        Iter=(Uint>>(Count<<2U))&0x0FU;
ffffffff8020c9b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020c9bd:	c1 e0 02             	shl    $0x2,%eax
ffffffff8020c9c0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020c9c4:	89 c1                	mov    %eax,%ecx
ffffffff8020c9c6:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020c9c9:	48 89 d0             	mov    %rdx,%rax
ffffffff8020c9cc:	83 e0 0f             	and    $0xf,%eax
ffffffff8020c9cf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        if(Iter<10U)
ffffffff8020c9d3:	48 83 7d f8 09       	cmpq   $0x9,-0x8(%rbp)
ffffffff8020c9d8:	77 13                	ja     ffffffff8020c9ed <RME_Hex_Print+0xa4>
        {
            RME_COV_MARKER();
            
            __RME_Putchar((rme_s8_t)Iter+'0');
ffffffff8020c9da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020c9de:	83 c0 30             	add    $0x30,%eax
ffffffff8020c9e1:	0f be c0             	movsbl %al,%eax
ffffffff8020c9e4:	89 c7                	mov    %eax,%edi
ffffffff8020c9e6:	e8 4c e8 00 00       	call   ffffffff8021b237 <__RME_Putchar>
ffffffff8020c9eb:	eb 11                	jmp    ffffffff8020c9fe <RME_Hex_Print+0xb5>
        }
        else
        {
            RME_COV_MARKER();
            
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
ffffffff8020c9ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020c9f1:	83 c0 37             	add    $0x37,%eax
ffffffff8020c9f4:	0f be c0             	movsbl %al,%eax
ffffffff8020c9f7:	89 c7                	mov    %eax,%edi
ffffffff8020c9f9:	e8 39 e8 00 00       	call   ffffffff8021b237 <__RME_Putchar>
    while(Count>0U)
ffffffff8020c9fe:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8020ca03:	75 af                	jne    ffffffff8020c9b4 <RME_Hex_Print+0x6b>
        }
    }
    
    return (rme_cnt_t)Num;
ffffffff8020ca05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff8020ca09:	c9                   	leave
ffffffff8020ca0a:	c3                   	ret

ffffffff8020ca0b <RME_Str_Print>:
Output      : None.
Return      : rme_cnt_t - The length of the string printed, the '\0' is not included.
******************************************************************************/
#if(RME_DBGLOG_ENABLE!=0U)
rme_cnt_t RME_Str_Print(const rme_s8_t* String)
{
ffffffff8020ca0b:	f3 0f 1e fa          	endbr64
ffffffff8020ca0f:	55                   	push   %rbp
ffffffff8020ca10:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ca13:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ca17:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Count;
    
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ca1b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ca22:	00 
ffffffff8020ca23:	eb 2f                	jmp    ffffffff8020ca54 <RME_Str_Print+0x49>
    {
        if(String[Count]==(rme_s8_t)'\0')
ffffffff8020ca25:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ca29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca2d:	48 01 d0             	add    %rdx,%rax
ffffffff8020ca30:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ca33:	84 c0                	test   %al,%al
ffffffff8020ca35:	74 29                	je     ffffffff8020ca60 <RME_Str_Print+0x55>
        else
        {
            RME_COV_MARKER();
            /* No action required */
        }
        __RME_Putchar(String[Count]);
ffffffff8020ca37:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ca3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca3f:	48 01 d0             	add    %rdx,%rax
ffffffff8020ca42:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ca45:	0f be c0             	movsbl %al,%eax
ffffffff8020ca48:	89 c7                	mov    %eax,%edi
ffffffff8020ca4a:	e8 e8 e7 00 00       	call   ffffffff8021b237 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
ffffffff8020ca4f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ca54:	48 81 7d f8 fe 00 00 	cmpq   $0xfe,-0x8(%rbp)
ffffffff8020ca5b:	00 
ffffffff8020ca5c:	76 c7                	jbe    ffffffff8020ca25 <RME_Str_Print+0x1a>
ffffffff8020ca5e:	eb 01                	jmp    ffffffff8020ca61 <RME_Str_Print+0x56>
            break;
ffffffff8020ca60:	90                   	nop
    }
    
    return (rme_cnt_t)Count;
ffffffff8020ca61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020ca65:	c9                   	leave
ffffffff8020ca66:	c3                   	ret

ffffffff8020ca67 <RME_Log>:
#ifndef RME_LOG
void RME_Log(const char* File,
             long Line,
             const char* Date,
             const char* Time)
{
ffffffff8020ca67:	f3 0f 1e fa          	endbr64
ffffffff8020ca6b:	55                   	push   %rbp
ffffffff8020ca6c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ca6f:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ca73:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020ca77:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020ca7b:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8020ca7f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    RME_DBG_S("\r\n***\r\nKernel panic - not syncing :\r\n"); \
ffffffff8020ca83:	48 c7 c7 a0 90 22 80 	mov    $0xffffffff802290a0,%rdi
ffffffff8020ca8a:	e8 7c ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(File); \
ffffffff8020ca8f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ca93:	48 89 c7             	mov    %rax,%rdi
ffffffff8020ca96:	e8 70 ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(" , Line "); \
ffffffff8020ca9b:	48 c7 c7 c6 90 22 80 	mov    $0xffffffff802290c6,%rdi
ffffffff8020caa2:	e8 64 ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(Line); \
ffffffff8020caa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020caab:	48 89 c7             	mov    %rax,%rdi
ffffffff8020caae:	e8 5e fd ff ff       	call   ffffffff8020c811 <RME_Int_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020cab3:	48 c7 c7 cf 90 22 80 	mov    $0xffffffff802290cf,%rdi
ffffffff8020caba:	e8 4c ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(Date); \
ffffffff8020cabf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cac3:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cac6:	e8 40 ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(" , "); \
ffffffff8020cacb:	48 c7 c7 d2 90 22 80 	mov    $0xffffffff802290d2,%rdi
ffffffff8020cad2:	e8 34 ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(Time); \
ffffffff8020cad7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cadb:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cade:	e8 28 ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S("\r\n"); \
ffffffff8020cae3:	48 c7 c7 cf 90 22 80 	mov    $0xffffffff802290cf,%rdi
ffffffff8020caea:	e8 1c ff ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
}
ffffffff8020caef:	90                   	nop
ffffffff8020caf0:	c9                   	leave
ffffffff8020caf1:	c3                   	ret

ffffffff8020caf2 <_RME_MSB_Generic>:
Input       : rme_ptr_t Value - The value to compute for.
Output      : None.
Return      : rme_ptr_t - The result. 0 will be returned for 0.
******************************************************************************/
rme_ptr_t _RME_MSB_Generic(rme_ptr_t Value)
{
ffffffff8020caf2:	f3 0f 1e fa          	endbr64
ffffffff8020caf6:	55                   	push   %rbp
ffffffff8020caf7:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cafa:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cafe:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
            Bit=0U;
        }
    }
#elif(RME_WORD_ORDER==6U)
    /* 63-32 */
    if(Value>=RME_POW2(32U))
ffffffff8020cb02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
ffffffff8020cb07:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb0b:	73 58                	jae    ffffffff8020cb65 <_RME_MSB_Generic+0x73>
    {
        RME_COV_MARKER();
        
        /* 63-48 */
        if(Value>=RME_POW2(48U))
ffffffff8020cb0d:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffff,%rax
ffffffff8020cb14:	ff 00 00 
ffffffff8020cb17:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb1b:	73 24                	jae    ffffffff8020cb41 <_RME_MSB_Generic+0x4f>
        {
            RME_COV_MARKER();
            
            /* 63-56 */
            if(Value>=RME_POW2(56U))
ffffffff8020cb1d:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffffff,%rax
ffffffff8020cb24:	ff ff 00 
ffffffff8020cb27:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb2b:	73 0a                	jae    ffffffff8020cb37 <_RME_MSB_Generic+0x45>
            {
                RME_COV_MARKER();
                
                Bit=56U;
ffffffff8020cb2d:	48 c7 45 f8 38 00 00 	movq   $0x38,-0x8(%rbp)
ffffffff8020cb34:	00 
ffffffff8020cb35:	eb 72                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
            /* 56-48 */
            else
            {
                RME_COV_MARKER();
                
                Bit=48U;
ffffffff8020cb37:	48 c7 45 f8 30 00 00 	movq   $0x30,-0x8(%rbp)
ffffffff8020cb3e:	00 
ffffffff8020cb3f:	eb 68                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
        else
        {
            RME_COV_MARKER();
            
            /* 47-40 */
            if(Value>=RME_POW2(40U))
ffffffff8020cb41:	48 b8 ff ff ff ff ff 	movabs $0xffffffffff,%rax
ffffffff8020cb48:	00 00 00 
ffffffff8020cb4b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8020cb4f:	73 0a                	jae    ffffffff8020cb5b <_RME_MSB_Generic+0x69>
            {
                RME_COV_MARKER();
                
                Bit=40U;
ffffffff8020cb51:	48 c7 45 f8 28 00 00 	movq   $0x28,-0x8(%rbp)
ffffffff8020cb58:	00 
ffffffff8020cb59:	eb 4e                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
            /* 39-32 */
            else
            {
                RME_COV_MARKER();
                
                Bit=32U;
ffffffff8020cb5b:	48 c7 45 f8 20 00 00 	movq   $0x20,-0x8(%rbp)
ffffffff8020cb62:	00 
ffffffff8020cb63:	eb 44                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
    else
    {
        RME_COV_MARKER();
        
        /* 31-16 */
        if(Value>=RME_POW2(16U))
ffffffff8020cb65:	48 81 7d e8 ff ff 00 	cmpq   $0xffff,-0x18(%rbp)
ffffffff8020cb6c:	00 
ffffffff8020cb6d:	76 1e                	jbe    ffffffff8020cb8d <_RME_MSB_Generic+0x9b>
        {
            RME_COV_MARKER();
            
            /* 31-24 */
            if(Value>=RME_POW2(24U))
ffffffff8020cb6f:	48 81 7d e8 ff ff ff 	cmpq   $0xffffff,-0x18(%rbp)
ffffffff8020cb76:	00 
ffffffff8020cb77:	76 0a                	jbe    ffffffff8020cb83 <_RME_MSB_Generic+0x91>
            {
                RME_COV_MARKER();
                
                Bit=24U;
ffffffff8020cb79:	48 c7 45 f8 18 00 00 	movq   $0x18,-0x8(%rbp)
ffffffff8020cb80:	00 
ffffffff8020cb81:	eb 26                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
            /* 24-16 */
            else
            {
                RME_COV_MARKER();
                
                Bit=16U;
ffffffff8020cb83:	48 c7 45 f8 10 00 00 	movq   $0x10,-0x8(%rbp)
ffffffff8020cb8a:	00 
ffffffff8020cb8b:	eb 1c                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
        else
        {
            RME_COV_MARKER();
            
            /* 15-8 */
            if(Value>=RME_POW2(8U))
ffffffff8020cb8d:	48 81 7d e8 ff 00 00 	cmpq   $0xff,-0x18(%rbp)
ffffffff8020cb94:	00 
ffffffff8020cb95:	76 0a                	jbe    ffffffff8020cba1 <_RME_MSB_Generic+0xaf>
            {
                RME_COV_MARKER();
                
                Bit=8U;
ffffffff8020cb97:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8020cb9e:	00 
ffffffff8020cb9f:	eb 08                	jmp    ffffffff8020cba9 <_RME_MSB_Generic+0xb7>
            /* 7-0 */
            else
            {
                RME_COV_MARKER();
                
                Bit=0U;
ffffffff8020cba1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cba8:	00 
    }
#else
#error Generic MSB for 128-bits & above are not implemented.
#endif

    return Table[Value>>Bit]+Bit;
ffffffff8020cba9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cbad:	89 c2                	mov    %eax,%edx
ffffffff8020cbaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbb3:	89 d1                	mov    %edx,%ecx
ffffffff8020cbb5:	48 d3 e8             	shr    %cl,%rax
ffffffff8020cbb8:	0f b6 80 c0 92 22 80 	movzbl -0x7fdd6d40(%rax),%eax
ffffffff8020cbbf:	0f b6 d0             	movzbl %al,%edx
ffffffff8020cbc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cbc6:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020cbc9:	c9                   	leave
ffffffff8020cbca:	c3                   	ret

ffffffff8020cbcb <_RME_LSB_Generic>:
Input       : rme_ptr_t Value - The value to count.
Output      : None.
Return      : rme_ptr_t - The result. 0 will be returned for 0.
******************************************************************************/
rme_ptr_t _RME_LSB_Generic(rme_ptr_t Value)
{
ffffffff8020cbcb:	f3 0f 1e fa          	endbr64
ffffffff8020cbcf:	55                   	push   %rbp
ffffffff8020cbd0:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cbd3:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cbd7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
            Bit=0U;
        }
    }
#elif(RME_WORD_ORDER==6U)
    /* 63-32 */
    if((Value<<32U)==0U)
ffffffff8020cbdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbdf:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020cbe3:	48 85 c0             	test   %rax,%rax
ffffffff8020cbe6:	75 4f                	jne    ffffffff8020cc37 <_RME_LSB_Generic+0x6c>
    {
        RME_COV_MARKER();
        
        /* 63-48 */
        if((Value<<16U)==0U)
ffffffff8020cbe8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbec:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff8020cbf0:	48 85 c0             	test   %rax,%rax
ffffffff8020cbf3:	75 21                	jne    ffffffff8020cc16 <_RME_LSB_Generic+0x4b>
        {
            RME_COV_MARKER();
            
            /* 63-56 */
            if((Value<<8U)==0U)
ffffffff8020cbf5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cbf9:	48 c1 e0 08          	shl    $0x8,%rax
ffffffff8020cbfd:	48 85 c0             	test   %rax,%rax
ffffffff8020cc00:	75 0a                	jne    ffffffff8020cc0c <_RME_LSB_Generic+0x41>
            {
                RME_COV_MARKER();
                
                Bit=56U;
ffffffff8020cc02:	48 c7 45 f8 38 00 00 	movq   $0x38,-0x8(%rbp)
ffffffff8020cc09:	00 
ffffffff8020cc0a:	eb 78                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
            /* 56-48 */
            else
            {
                RME_COV_MARKER();
                
                Bit=48U;
ffffffff8020cc0c:	48 c7 45 f8 30 00 00 	movq   $0x30,-0x8(%rbp)
ffffffff8020cc13:	00 
ffffffff8020cc14:	eb 6e                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
        else
        {
            RME_COV_MARKER();
            
            /* 47-40 */
            if((Value<<24U)==0U)
ffffffff8020cc16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc1a:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff8020cc1e:	48 85 c0             	test   %rax,%rax
ffffffff8020cc21:	75 0a                	jne    ffffffff8020cc2d <_RME_LSB_Generic+0x62>
            {
                RME_COV_MARKER();
                
                Bit=40U;
ffffffff8020cc23:	48 c7 45 f8 28 00 00 	movq   $0x28,-0x8(%rbp)
ffffffff8020cc2a:	00 
ffffffff8020cc2b:	eb 57                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
            /* 39-32 */
            else
            {
                RME_COV_MARKER();
                
                Bit=32U;
ffffffff8020cc2d:	48 c7 45 f8 20 00 00 	movq   $0x20,-0x8(%rbp)
ffffffff8020cc34:	00 
ffffffff8020cc35:	eb 4d                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
    else
    {
        RME_COV_MARKER();
        
        /* 31-16 */
        if((Value<<48U)==0U)
ffffffff8020cc37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc3b:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8020cc3f:	48 85 c0             	test   %rax,%rax
ffffffff8020cc42:	75 21                	jne    ffffffff8020cc65 <_RME_LSB_Generic+0x9a>
        {
            RME_COV_MARKER();
            
            /* 31-24 */
            if((Value<<40U)==0U)
ffffffff8020cc44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc48:	48 c1 e0 28          	shl    $0x28,%rax
ffffffff8020cc4c:	48 85 c0             	test   %rax,%rax
ffffffff8020cc4f:	75 0a                	jne    ffffffff8020cc5b <_RME_LSB_Generic+0x90>
            {
                RME_COV_MARKER();
                
                Bit=24U;
ffffffff8020cc51:	48 c7 45 f8 18 00 00 	movq   $0x18,-0x8(%rbp)
ffffffff8020cc58:	00 
ffffffff8020cc59:	eb 29                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
            /* 24-16 */
            else
            {
                RME_COV_MARKER();
                
                Bit=16U;
ffffffff8020cc5b:	48 c7 45 f8 10 00 00 	movq   $0x10,-0x8(%rbp)
ffffffff8020cc62:	00 
ffffffff8020cc63:	eb 1f                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
        else
        {
            RME_COV_MARKER();
            
            /* 15-8 */
            if((Value<<56U)==0U)
ffffffff8020cc65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc69:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff8020cc6d:	48 85 c0             	test   %rax,%rax
ffffffff8020cc70:	75 0a                	jne    ffffffff8020cc7c <_RME_LSB_Generic+0xb1>
            {
                RME_COV_MARKER();
                
                Bit=8U;
ffffffff8020cc72:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8020cc79:	00 
ffffffff8020cc7a:	eb 08                	jmp    ffffffff8020cc84 <_RME_LSB_Generic+0xb9>
            /* 7-0 */
            else
            {
                RME_COV_MARKER();
                
                Bit=0U;
ffffffff8020cc7c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020cc83:	00 
    }
#else
#error Generic LSB for 128-bits & above are not implemented.
#endif

    return Table[(rme_u8_t)(Value>>Bit)]+Bit;
ffffffff8020cc84:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cc88:	89 c2                	mov    %eax,%edx
ffffffff8020cc8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cc8e:	89 d1                	mov    %edx,%ecx
ffffffff8020cc90:	48 d3 e8             	shr    %cl,%rax
ffffffff8020cc93:	0f b6 c0             	movzbl %al,%eax
ffffffff8020cc96:	48 98                	cltq
ffffffff8020cc98:	0f b6 80 c0 93 22 80 	movzbl -0x7fdd6c40(%rax),%eax
ffffffff8020cc9f:	0f b6 d0             	movzbl %al,%edx
ffffffff8020cca2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cca6:	48 01 d0             	add    %rdx,%rax
}
ffffffff8020cca9:	c9                   	leave
ffffffff8020ccaa:	c3                   	ret

ffffffff8020ccab <_RME_Comp_Swap_Single>:
Return      : rme_ptr_t - If successful, 1; else 0.
******************************************************************************/
rme_ptr_t _RME_Comp_Swap_Single(volatile rme_ptr_t* Ptr,
                                rme_ptr_t Old,
                                rme_ptr_t New)
{
ffffffff8020ccab:	f3 0f 1e fa          	endbr64
ffffffff8020ccaf:	55                   	push   %rbp
ffffffff8020ccb0:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ccb3:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020ccb7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020ccbb:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020ccbf:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    if(*Ptr==Old)
ffffffff8020ccc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccc7:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ccca:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8020ccce:	75 12                	jne    ffffffff8020cce2 <_RME_Comp_Swap_Single+0x37>
    {
        RME_COV_MARKER();
        
        *Ptr=New;
ffffffff8020ccd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ccd4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ccd8:	48 89 10             	mov    %rdx,(%rax)
        return 1U;
ffffffff8020ccdb:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8020cce0:	eb 05                	jmp    ffffffff8020cce7 <_RME_Comp_Swap_Single+0x3c>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0U;
ffffffff8020cce2:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cce7:	c9                   	leave
ffffffff8020cce8:	c3                   	ret

ffffffff8020cce9 <_RME_Fetch_Add_Single>:
Output      : volatile rme_ptr_t* Ptr - The pointer to the data.
Return      : rme_ptr_t - The value before the addition.
*******************************************************************************/
rme_ptr_t _RME_Fetch_Add_Single(volatile rme_ptr_t* Ptr,
                                rme_cnt_t Addend)
{
ffffffff8020cce9:	f3 0f 1e fa          	endbr64
ffffffff8020cced:	55                   	push   %rbp
ffffffff8020ccee:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ccf1:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ccf5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020ccf9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_cnt_t Old;

    Old=(rme_cnt_t)(*Ptr);
ffffffff8020ccfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd01:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cd04:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *Ptr=(rme_ptr_t)(Old+Addend);
ffffffff8020cd08:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd0c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cd10:	48 01 d0             	add    %rdx,%rax
ffffffff8020cd13:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd1a:	48 89 10             	mov    %rdx,(%rax)

    return (rme_ptr_t)Old;
ffffffff8020cd1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020cd21:	c9                   	leave
ffffffff8020cd22:	c3                   	ret

ffffffff8020cd23 <_RME_Fetch_And_Single>:
Output      : volatile rme_ptr_t* Ptr - The pointer to the data.
Return      : rme_ptr_t - The value before the AND operation.
******************************************************************************/
rme_ptr_t _RME_Fetch_And_Single(volatile rme_ptr_t* Ptr,
                                rme_ptr_t Operand)
{
ffffffff8020cd23:	f3 0f 1e fa          	endbr64
ffffffff8020cd27:	55                   	push   %rbp
ffffffff8020cd28:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd2b:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cd2f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cd33:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Old;

    Old=*Ptr;
ffffffff8020cd37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd3b:	48 8b 00             	mov    (%rax),%rax
ffffffff8020cd3e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    *Ptr=Old&Operand;
ffffffff8020cd42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd46:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff8020cd4a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cd51:	48 89 10             	mov    %rdx,(%rax)

    return Old;
ffffffff8020cd54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
ffffffff8020cd58:	c9                   	leave
ffffffff8020cd59:	c3                   	ret

ffffffff8020cd5a <_RME_List_Crt>:
Input       : struct RME_List* Head - The pointer to the list head.
Output      : None.
Return      : None.
******************************************************************************/
void _RME_List_Crt(volatile struct RME_List* Head)
{
ffffffff8020cd5a:	f3 0f 1e fa          	endbr64
ffffffff8020cd5e:	55                   	push   %rbp
ffffffff8020cd5f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd62:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020cd66:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    Head->Prev=Head;
ffffffff8020cd6a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd72:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Head->Next=Head;
ffffffff8020cd76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cd7a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cd7e:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cd81:	90                   	nop
ffffffff8020cd82:	c9                   	leave
ffffffff8020cd83:	c3                   	ret

ffffffff8020cd84 <_RME_List_Del>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_List_Del(volatile struct RME_List* Prev,
                   volatile struct RME_List* Next)
{
ffffffff8020cd84:	f3 0f 1e fa          	endbr64
ffffffff8020cd88:	55                   	push   %rbp
ffffffff8020cd89:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cd8c:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8020cd90:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020cd94:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Next->Prev=Prev;
ffffffff8020cd98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cd9c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cda0:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=Next;
ffffffff8020cda4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cda8:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020cdac:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cdaf:	90                   	nop
ffffffff8020cdb0:	c9                   	leave
ffffffff8020cdb1:	c3                   	ret

ffffffff8020cdb2 <_RME_List_Ins>:
Return      : None.
******************************************************************************/
void _RME_List_Ins(volatile struct RME_List* New,
                   volatile struct RME_List* Prev,
                   volatile struct RME_List* Next)
{
ffffffff8020cdb2:	f3 0f 1e fa          	endbr64
ffffffff8020cdb6:	55                   	push   %rbp
ffffffff8020cdb7:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cdba:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8020cdbe:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8020cdc2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8020cdc6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    Next->Prev=New;
ffffffff8020cdca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cdce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cdd2:	48 89 50 08          	mov    %rdx,0x8(%rax)
    New->Next=Next;
ffffffff8020cdd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cdda:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020cdde:	48 89 10             	mov    %rdx,(%rax)
    New->Prev=Prev;
ffffffff8020cde1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cde5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020cde9:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=New;
ffffffff8020cded:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cdf1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cdf5:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff8020cdf8:	90                   	nop
ffffffff8020cdf9:	c9                   	leave
ffffffff8020cdfa:	c3                   	ret

ffffffff8020cdfb <_RME_Clear>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Clear(void* Addr,
                rme_ptr_t Size)
{
ffffffff8020cdfb:	f3 0f 1e fa          	endbr64
ffffffff8020cdff:	55                   	push   %rbp
ffffffff8020ce00:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ce03:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020ce07:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020ce0b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Count;

    for(Count=0U;Count<Size;Count++)
ffffffff8020ce0f:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ce16:	00 
ffffffff8020ce17:	eb 13                	jmp    ffffffff8020ce2c <_RME_Clear+0x31>
    {
        ((rme_u8_t*)Addr)[Count]=0U;
ffffffff8020ce19:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020ce1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce21:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce24:	c6 00 00             	movb   $0x0,(%rax)
    for(Count=0U;Count<Size;Count++)
ffffffff8020ce27:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ce2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce30:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff8020ce34:	72 e3                	jb     ffffffff8020ce19 <_RME_Clear+0x1e>
    }
}
ffffffff8020ce36:	90                   	nop
ffffffff8020ce37:	90                   	nop
ffffffff8020ce38:	c9                   	leave
ffffffff8020ce39:	c3                   	ret

ffffffff8020ce3a <_RME_Memcmp>:
                          value. If Ptr1==Ptr2, then return 0;
******************************************************************************/
rme_ret_t _RME_Memcmp(const void* Ptr1,
                      const void* Ptr2,
                      rme_ptr_t Num)
{
ffffffff8020ce3a:	f3 0f 1e fa          	endbr64
ffffffff8020ce3e:	55                   	push   %rbp
ffffffff8020ce3f:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ce42:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8020ce46:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020ce4a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020ce4e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    const rme_s8_t* Dst;
    const rme_s8_t* Src;
    rme_ptr_t Count;

    Dst=(const rme_s8_t*)Ptr1;
ffffffff8020ce52:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ce56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Src=(const rme_s8_t*)Ptr2;
ffffffff8020ce5a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ce5e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    for(Count=0U;Count<Num;Count++)
ffffffff8020ce62:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ce69:	00 
ffffffff8020ce6a:	eb 4e                	jmp    ffffffff8020ceba <_RME_Memcmp+0x80>
    {
        if(Dst[Count]!=Src[Count])
ffffffff8020ce6c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ce70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce74:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce77:	0f b6 10             	movzbl (%rax),%edx
ffffffff8020ce7a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020ce7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce82:	48 01 c8             	add    %rcx,%rax
ffffffff8020ce85:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ce88:	38 c2                	cmp    %al,%dl
ffffffff8020ce8a:	74 29                	je     ffffffff8020ceb5 <_RME_Memcmp+0x7b>
        {
            RME_COV_MARKER();
            
            return Dst[Count]-Src[Count];
ffffffff8020ce8c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020ce90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ce94:	48 01 d0             	add    %rdx,%rax
ffffffff8020ce97:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ce9a:	0f be d0             	movsbl %al,%edx
ffffffff8020ce9d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cea1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cea5:	48 01 c8             	add    %rcx,%rax
ffffffff8020cea8:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020ceab:	0f be c0             	movsbl %al,%eax
ffffffff8020ceae:	29 c2                	sub    %eax,%edx
ffffffff8020ceb0:	48 63 c2             	movslq %edx,%rax
ffffffff8020ceb3:	eb 14                	jmp    ffffffff8020cec9 <_RME_Memcmp+0x8f>
    for(Count=0U;Count<Num;Count++)
ffffffff8020ceb5:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020ceba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cebe:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff8020cec2:	72 a8                	jb     ffffffff8020ce6c <_RME_Memcmp+0x32>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff8020cec4:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cec9:	c9                   	leave
ffffffff8020ceca:	c3                   	ret

ffffffff8020cecb <_RME_Memcpy>:
Return      : None.
******************************************************************************/
void _RME_Memcpy(void* Dst,
                 void* Src,
                 rme_ptr_t Num)
{
ffffffff8020cecb:	f3 0f 1e fa          	endbr64
ffffffff8020cecf:	55                   	push   %rbp
ffffffff8020ced0:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ced3:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8020ced7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cedb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020cedf:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    rme_ptr_t Count;

    for(Count=0U;Count<Num;Count++)
ffffffff8020cee3:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020ceea:	00 
ffffffff8020ceeb:	eb 20                	jmp    ffffffff8020cf0d <_RME_Memcpy+0x42>
    {
        ((volatile rme_u8_t*)Dst)[Count]=((volatile rme_u8_t*)Src)[Count];
ffffffff8020ceed:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020cef1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cef5:	48 01 d0             	add    %rdx,%rax
ffffffff8020cef8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020cefc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020cf00:	48 01 ca             	add    %rcx,%rdx
ffffffff8020cf03:	0f b6 00             	movzbl (%rax),%eax
ffffffff8020cf06:	88 02                	mov    %al,(%rdx)
    for(Count=0U;Count<Num;Count++)
ffffffff8020cf08:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020cf0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf11:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020cf15:	72 d6                	jb     ffffffff8020ceed <_RME_Memcpy+0x22>
    }
}
ffffffff8020cf17:	90                   	nop
ffffffff8020cf18:	90                   	nop
ffffffff8020cf19:	c9                   	leave
ffffffff8020cf1a:	c3                   	ret

ffffffff8020cf1b <_RME_Diff>:
Output      : None.
Return      : rme_ptr_t - The distance.
******************************************************************************/
rme_ptr_t _RME_Diff(rme_ptr_t Num1,
                    rme_ptr_t Num2)
{
ffffffff8020cf1b:	f3 0f 1e fa          	endbr64
ffffffff8020cf1f:	55                   	push   %rbp
ffffffff8020cf20:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cf23:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020cf27:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020cf2b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Diff1;
    rme_ptr_t Diff2;
    
    Diff1=Num1-Num2;
ffffffff8020cf2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020cf33:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
ffffffff8020cf37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Diff2=Num2-Num1;
ffffffff8020cf3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020cf3f:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff8020cf43:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    if(Diff1>Diff2)
ffffffff8020cf47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cf4b:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8020cf4f:	73 06                	jae    ffffffff8020cf57 <_RME_Diff+0x3c>
    {
        RME_COV_MARKER();
        
        return Diff2;
ffffffff8020cf51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020cf55:	eb 04                	jmp    ffffffff8020cf5b <_RME_Diff+0x40>
    }
    else
    {
        RME_COV_MARKER();
        
        return Diff1;
ffffffff8020cf57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
    }
}
ffffffff8020cf5b:	c9                   	leave
ffffffff8020cf5c:	c3                   	ret

ffffffff8020cf5d <RME_Kmain>:
Input       : None.
Output      : None.
Return      : rme_ret_t - This function never returns.
******************************************************************************/
rme_ret_t RME_Kmain(void)
{
ffffffff8020cf5d:	f3 0f 1e fa          	endbr64
ffffffff8020cf61:	55                   	push   %rbp
ffffffff8020cf62:	48 89 e5             	mov    %rsp,%rbp
    /* Disable all interrupts first */
    __RME_Int_Disable();
ffffffff8020cf65:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020cf6a:	e8 9a f8 ff ff       	call   ffffffff8020c809 <__RME_Int_Disable>
    /* Some low-level kernel assertions */
    _RME_Lowlvl_Check();
ffffffff8020cf6f:	e8 20 00 00 00       	call   ffffffff8020cf94 <_RME_Lowlvl_Check>
    /* Hardware low-level init */
    __RME_Lowlvl_Init();
ffffffff8020cf74:	e8 90 7b 01 00       	call   ffffffff80224b09 <__RME_Lowlvl_Init>
    /* Initialize the kernel page tables or memory mappings */
    __RME_Pgt_Kom_Init();
ffffffff8020cf79:	e8 cc 7b 01 00       	call   ffffffff80224b4a <__RME_Pgt_Kom_Init>
    /* Initialize the kernel object allocation table - default init */
    _RME_Kot_Init(RME_KOT_WORD_NUM);
ffffffff8020cf7e:	bf 04 00 00 00       	mov    $0x4,%edi
ffffffff8020cf83:	e8 d0 53 00 00       	call   ffffffff80212358 <_RME_Kot_Init>
    /* Boot into the first process */
    __RME_Boot();
ffffffff8020cf88:	e8 7d 85 01 00       	call   ffffffff8022550a <__RME_Boot>
    /* Should never reach here */
    return 0;
ffffffff8020cf8d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cf92:	5d                   	pop    %rbp
ffffffff8020cf93:	c3                   	ret

ffffffff8020cf94 <_RME_Lowlvl_Check>:
Input       : None.
Output      : None.
Return      : rme_ret_t - Always 0.
******************************************************************************/
static rme_ret_t _RME_Lowlvl_Check(void)
{
ffffffff8020cf94:	f3 0f 1e fa          	endbr64
ffffffff8020cf98:	55                   	push   %rbp
ffffffff8020cf99:	48 89 e5             	mov    %rsp,%rbp
    /* Kernel memory allocation minimal size aligned to word boundary */
    RME_ASSERT(RME_KOM_SLOT_ORDER>=RME_WORD_ORDER-3U);
    /* Make sure the number of priorities do not exceed half-word boundary */
    RME_ASSERT(RME_PREEMPT_PRIO_NUM<=RME_POW2(RME_WORD_BIT>>1));
    
    return 0;
ffffffff8020cf9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020cfa1:	5d                   	pop    %rbp
ffffffff8020cfa2:	c3                   	ret

ffffffff8020cfa3 <_RME_Svc_Handler>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Svc_Handler(struct RME_Reg_Struct* Reg)
{
ffffffff8020cfa3:	f3 0f 1e fa          	endbr64
ffffffff8020cfa7:	55                   	push   %rbp
ffffffff8020cfa8:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020cfab:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020cfaf:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    struct RME_Inv_Struct* Inv_Top;
    struct RME_Cap_Cpt* Cpt;

    /* Get the system call parameters from the system call */
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
ffffffff8020cfb3:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
ffffffff8020cfb7:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
ffffffff8020cfbb:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
ffffffff8020cfbf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020cfc3:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cfc6:	e8 8f a1 01 00       	call   ffffffff8022715a <__RME_Svc_Param_Get>
    /* System call number takes [5:0] bits */
    Svc_Num=Svc&RME_MASK_END(5U);
ffffffff8020cfcb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020cfcf:	83 e0 3f             	and    $0x3f,%eax
ffffffff8020cfd2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* Ultra-fast path - synchronous invocation returning */
    if(Svc_Num==RME_SVC_INV_RET)
ffffffff8020cfd6:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8020cfdb:	75 48                	jne    ffffffff8020d025 <_RME_Svc_Handler+0x82>
    {
        RME_COV_MARKER();
        
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
ffffffff8020cfdd:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8020cfe1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020cfe5:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020cfea:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020cfed:	48 89 c7             	mov    %rax,%rdi
ffffffff8020cff0:	e8 a8 da 00 00       	call   ffffffff8021aa9d <_RME_Inv_Ret>
ffffffff8020cff5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                            Param[0],                                       /* rme_ptr_t Retval */
                            0U);                                            /* rme_ptr_t Is_Exc */
        RME_SWITCH_RETURN(Reg, Retval);
ffffffff8020cff9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020cffd:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d001:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d004:	48 85 c0             	test   %rax,%rax
ffffffff8020d007:	0f 84 18 09 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x982>
ffffffff8020d00d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d011:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d015:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d018:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d01b:	e8 b5 a1 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8020d020:	e9 00 09 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x982>
        /* No action required */
    }
    
    /* Get our current capability table. No need to check whether it is frozen
     * because it can't be deleted anyway */
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020d025:	e8 15 e8 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d02a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d02e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
ffffffff8020d032:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d036:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8020d03d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d041:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8020d047:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d04a:	74 0d                	je     ffffffff8020d059 <_RME_Svc_Handler+0xb6>
ffffffff8020d04c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d050:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8020d057:	eb 05                	jmp    ffffffff8020d05e <_RME_Svc_Handler+0xbb>
ffffffff8020d059:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8020d05e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Inv_Top==(void*)RME_NULL)
ffffffff8020d062:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020d067:	75 12                	jne    ffffffff8020d07b <_RME_Svc_Handler+0xd8>
    {
        RME_COV_MARKER();
        
        Cpt=Thd_Cur->Sched.Prc->Cpt;
ffffffff8020d069:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020d06d:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8020d071:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020d075:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020d079:	eb 10                	jmp    ffffffff8020d08b <_RME_Svc_Handler+0xe8>
    }
    else
    {
        RME_COV_MARKER();
        
        Cpt=Inv_Top->Prc->Cpt;
ffffffff8020d07b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020d07f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d083:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020d087:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }

    /* Fast path - synchronous invocation activation */
    if(Svc_Num==RME_SVC_INV_ACT)
ffffffff8020d08b:	48 83 7d e8 01       	cmpq   $0x1,-0x18(%rbp)
ffffffff8020d090:	75 51                	jne    ffffffff8020d0e3 <_RME_Svc_Handler+0x140>
    {
        RME_COV_MARKER();
        
        Retval=_RME_Inv_Act(Cpt,
ffffffff8020d092:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                            Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
                            (rme_cid_t)Param[0],                            /* rme_cid_t Cap_Inv */
ffffffff8020d096:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
        Retval=_RME_Inv_Act(Cpt,
ffffffff8020d09a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d09d:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d0a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d0a5:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d0a8:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d0ab:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0ae:	e8 9a d6 00 00       	call   ffffffff8021a74d <_RME_Inv_Act>
ffffffff8020d0b3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                            Param[1]);                                      /* rme_ptr_t Param */
        RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d0b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d0bb:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d0bf:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d0c2:	48 85 c0             	test   %rax,%rax
ffffffff8020d0c5:	0f 84 5a 08 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x982>
ffffffff8020d0cb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d0cf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d0d3:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d0d6:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d0d9:	e8 f7 a0 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8020d0de:	e9 42 08 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x982>
     * of these functions shall be: If the function is successful, they shall
     * perform the return value saving on proper register stacks by themselves;
     * if the function fails, it should not conduct such return value saving.
     * These paths are less optimized than synchronous invocation, but are still
     * optimized anyway. */
    switch(Svc_Num)
ffffffff8020d0e3:	48 83 7d e8 09       	cmpq   $0x9,-0x18(%rbp)
ffffffff8020d0e8:	0f 87 03 03 00 00    	ja     ffffffff8020d3f1 <_RME_Svc_Handler+0x44e>
ffffffff8020d0ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d0f2:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020d0f6:	48 05 d8 90 22 80    	add    $0xffffffff802290d8,%rax
ffffffff8020d0fc:	48 8b 00             	mov    (%rax),%rax
ffffffff8020d0ff:	3e ff e0             	notrack jmp *%rax
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Snd(Cpt,
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d102:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Snd(Cpt,
ffffffff8020d106:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d109:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8020d10d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d111:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d114:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d117:	e8 3e bf 00 00       	call   ffffffff8021905a <_RME_Sig_Snd>
ffffffff8020d11c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d120:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d124:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d128:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d12b:	48 85 c0             	test   %rax,%rax
ffffffff8020d12e:	0f 84 f1 07 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x982>
ffffffff8020d134:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d138:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d13c:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d13f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d142:	e8 8e a0 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8020d147:	e9 d9 07 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x982>
        /* Receive from a signal endpoint */
        case RME_SVC_SIG_RCV:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff8020d14c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Sig */
ffffffff8020d150:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Rcv(Cpt,
ffffffff8020d154:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d157:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d15b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d15f:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d162:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d165:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d168:	e8 6a c2 00 00       	call   ffffffff802193d7 <_RME_Sig_Rcv>
ffffffff8020d16d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Option */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d171:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d175:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d179:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d17c:	48 85 c0             	test   %rax,%rax
ffffffff8020d17f:	0f 84 a0 07 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x982>
ffffffff8020d185:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d189:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d18d:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d190:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d193:	e8 3d a0 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8020d198:	e9 88 07 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x982>
        /* Call kernel functions */
        case RME_SVC_KFN:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d19d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020d1a1:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Kfn */
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
                                RME_PARAM_D1(Param[0]),                     /* rme_ptr_t Sub_ID */
ffffffff8020d1a5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d1a9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d1ad:	48 89 c7             	mov    %rax,%rdi
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
ffffffff8020d1b0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Kfn_Act(Cpt,
ffffffff8020d1b4:	41 89 c3             	mov    %eax,%r11d
ffffffff8020d1b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d1bb:	49 89 c2             	mov    %rax,%r10
ffffffff8020d1be:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d1c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d1c6:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d1ca:	52                   	push   %rdx
ffffffff8020d1cb:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d1ce:	49 89 f8             	mov    %rdi,%r8
ffffffff8020d1d1:	4c 89 d9             	mov    %r11,%rcx
ffffffff8020d1d4:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d1d7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d1da:	e8 53 dd 00 00       	call   ffffffff8021af32 <_RME_Kfn_Act>
ffffffff8020d1df:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d1e3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1],                                   /* rme_ptr_t Param1 */
                                Param[2]);                                  /* rme_ptr_t Param2 */
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff8020d1e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d1eb:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d1ef:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d1f2:	48 85 c0             	test   %rax,%rax
ffffffff8020d1f5:	0f 84 2a 07 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x982>
ffffffff8020d1fb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d1ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d203:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d206:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d209:	e8 c7 9f 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8020d20e:	e9 12 07 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x982>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Free(Cpt,
                                       Reg,                                 /* volatile struct RME_Reg_Struct* Reg */
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
ffffffff8020d213:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Free(Cpt,
ffffffff8020d217:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d21a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8020d21e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d222:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d225:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d228:	e8 d6 98 00 00       	call   ffffffff80216b03 <_RME_Thd_Sched_Free>
ffffffff8020d22d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d231:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d235:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d239:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d23c:	48 85 c0             	test   %rax,%rax
ffffffff8020d23f:	0f 84 e0 06 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x982>
ffffffff8020d245:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d249:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d24d:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d250:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d253:	e8 7d 9f 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8020d258:	e9 c8 06 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x982>
        /* Changing thread execution context */
        case RME_SVC_THD_EXEC_SET:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Exec_Set(Cpt,
ffffffff8020d25d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8020d261:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8020d265:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020d269:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d26d:	49 89 c2             	mov    %rax,%r10
ffffffff8020d270:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d274:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d278:	49 89 f9             	mov    %rdi,%r9
ffffffff8020d27b:	49 89 c8             	mov    %rcx,%r8
ffffffff8020d27e:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d281:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d284:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d287:	e8 59 9c 00 00       	call   ffffffff80216ee5 <_RME_Thd_Exec_Set>
ffffffff8020d28c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                     Reg,                                   /* volatile struct RME_Reg_Struct* Reg */
                                     (rme_cid_t)Cid,                        /* rme_cid_t Cap_Thd */
                                     Param[0],                              /* rme_ptr_t Entry */
                                     Param[1],                              /* rme_ptr_t Stack */
                                     Param[2]);                             /* rme_ptr_t Param */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d290:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d294:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d298:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d29b:	48 85 c0             	test   %rax,%rax
ffffffff8020d29e:	0f 84 81 06 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x982>
ffffffff8020d2a4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d2a8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d2ac:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d2af:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d2b2:	e8 1e 9f 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8020d2b7:	e9 69 06 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x982>
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
                                       (rme_cid_t)RME_PARAM_D0(Param[1]),   /* rme_cid_t Cap_Thd1 */
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
                                       RME_PARAM_D1(Param[2]));             /* rme_ptr_t Prio2 */
ffffffff8020d2bc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2c0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2c4:	48 89 c7             	mov    %rax,%rdi
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
ffffffff8020d2c7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2cb:	41 89 c1             	mov    %eax,%r9d
                                       RME_PARAM_D1(Param[1]),              /* rme_ptr_t Prio1 */
ffffffff8020d2ce:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2d2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2d6:	48 89 c1             	mov    %rax,%rcx
                                       (rme_cid_t)RME_PARAM_D0(Param[1]),   /* rme_cid_t Cap_Thd1 */
ffffffff8020d2d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2dd:	41 89 c3             	mov    %eax,%r11d
                                       RME_PARAM_D1(Param[0]),              /* rme_ptr_t Prio0 */
ffffffff8020d2e0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2e4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2e8:	49 89 c0             	mov    %rax,%r8
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
ffffffff8020d2eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Prio(Cpt,
ffffffff8020d2ef:	41 89 c2             	mov    %eax,%r10d
ffffffff8020d2f2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020d2f6:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d2fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d2fe:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d302:	57                   	push   %rdi
ffffffff8020d303:	41 51                	push   %r9
ffffffff8020d305:	51                   	push   %rcx
ffffffff8020d306:	4d 89 d9             	mov    %r11,%r9
ffffffff8020d309:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d30c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d30f:	e8 f9 9e 00 00       	call   ffffffff8021720d <_RME_Thd_Sched_Prio>
ffffffff8020d314:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d318:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d31c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d320:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d324:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d327:	48 85 c0             	test   %rax,%rax
ffffffff8020d32a:	0f 84 f5 05 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x982>
ffffffff8020d330:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d334:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d338:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d33b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d33e:	e8 92 9e 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8020d343:	e9 dd 05 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x982>
        /* Transfer time to a thread */
        case RME_SVC_THD_TIME_XFER:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d348:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                      Reg,                                  /* volatile struct RME_Reg_Struct* Reg */
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
                                      (rme_cid_t)Param[1],                  /* rme_cid_t Cap_Thd_Src */
ffffffff8020d34c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d350:	48 89 c1             	mov    %rax,%rcx
                                      (rme_cid_t)Param[0],                  /* rme_cid_t Cap_Thd_Dst */
ffffffff8020d353:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Time_Xfer(Cpt,
ffffffff8020d357:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d35a:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d35e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d362:	49 89 d0             	mov    %rdx,%r8
ffffffff8020d365:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d368:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d36b:	e8 17 a6 00 00       	call   ffffffff80217987 <_RME_Thd_Time_Xfer>
ffffffff8020d370:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                      Param[2]);                            /* rme_ptr_t Time */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d374:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d378:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d37c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d37f:	48 85 c0             	test   %rax,%rax
ffffffff8020d382:	0f 84 9d 05 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x982>
ffffffff8020d388:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d38c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d390:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d393:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d396:	e8 3a 9e 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8020d39b:	e9 85 05 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x982>
        /* Switch to another thread */
        case RME_SVC_THD_SWT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Swt(Cpt,
ffffffff8020d3a0:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                Reg,                                        /* volatile struct RME_Reg_Struct* Reg */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Thd */
ffffffff8020d3a4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Swt(Cpt,
ffffffff8020d3a8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3ab:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8020d3af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d3b3:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d3b6:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d3b9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3bc:	e8 37 ad 00 00       	call   ffffffff802180f8 <_RME_Thd_Swt>
ffffffff8020d3c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Full_Yield */
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8020d3c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d3c9:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff8020d3cd:	0f b6 c0             	movzbl %al,%eax
ffffffff8020d3d0:	48 85 c0             	test   %rax,%rax
ffffffff8020d3d3:	0f 84 4c 05 00 00    	je     ffffffff8020d925 <_RME_Svc_Handler+0x982>
ffffffff8020d3d9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d3dd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d3e1:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d3e4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d3e7:	e8 e9 9d 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8020d3ec:	e9 34 05 00 00       	jmp    ffffffff8020d925 <_RME_Svc_Handler+0x982>
        }
        default:
        {
            RME_COV_MARKER();
            break;
ffffffff8020d3f1:	90                   	nop
        }
    } 

    /* It is guaranteed that these functions will never cause a context switch */
    switch(Svc_Num)
ffffffff8020d3f2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d3f6:	48 83 e8 0a          	sub    $0xa,%rax
ffffffff8020d3fa:	48 83 f8 17          	cmp    $0x17,%rax
ffffffff8020d3fe:	0f 87 05 05 00 00    	ja     ffffffff8020d909 <_RME_Svc_Handler+0x966>
ffffffff8020d404:	48 8b 04 c5 28 91 22 	mov    -0x7fdd6ed8(,%rax,8),%rax
ffffffff8020d40b:	80 
ffffffff8020d40c:	3e ff e0             	notrack jmp *%rax
    {
        /* Capability table */
        case RME_SVC_CPT_CRT:
        {
            RME_COV_MARKER();
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d40f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020d413:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Crt */
ffffffff8020d417:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d41b:	41 89 c2             	mov    %eax,%r10d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d41e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d422:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Crt(Cpt,
ffffffff8020d426:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d429:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d42d:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d434:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d437:	49 89 d0             	mov    %rdx,%r8
ffffffff8020d43a:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d43d:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d440:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d443:	e8 9b 0a 00 00       	call   ffffffff8020dee3 <_RME_Cpt_Crt>
ffffffff8020d448:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1],                                   /* rme_ptr_t Raddr */
                                Param[2]);                                  /* rme_ptr_t Entry_Num */
            break;
ffffffff8020d44c:	e9 c1 04 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Del */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
ffffffff8020d451:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Del(Cpt,
ffffffff8020d455:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d458:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d45c:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d45f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d463:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d466:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d469:	e8 17 11 00 00       	call   ffffffff8020e585 <_RME_Cpt_Del>
ffffffff8020d46e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d472:	e9 9b 04 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Frz(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Frz */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
ffffffff8020d477:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Frz(Cpt,
ffffffff8020d47b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d47e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d482:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d485:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d489:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d48c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d48f:	e8 12 15 00 00       	call   ffffffff8020e9a6 <_RME_Cpt_Frz>
ffffffff8020d494:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d498:	e9 75 04 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
                                Param[2],                                   /* rme_ptr_t Flag */
                                RME_PARAM_KM(Svc,Cid));                     /* rme_ptr_t Ext_Flag */
ffffffff8020d49d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d4a1:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020d4a5:	48 89 c2             	mov    %rax,%rdx
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d4ac:	48 09 c2             	or     %rax,%rdx
ffffffff8020d4af:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D0(Param[1]),          /* rme_cid_t Cap_Src */
ffffffff8020d4b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4b7:	41 89 c0             	mov    %eax,%r8d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
ffffffff8020d4ba:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d4be:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4c2:	49 89 c2             	mov    %rax,%r10
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Dst */
ffffffff8020d4c5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4c9:	89 c7                	mov    %eax,%edi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
ffffffff8020d4cb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d4cf:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Cpt_Add(Cpt,
ffffffff8020d4d3:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d4d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d4da:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d4de:	52                   	push   %rdx
ffffffff8020d4df:	49 89 c9             	mov    %rcx,%r9
ffffffff8020d4e2:	4c 89 d1             	mov    %r10,%rcx
ffffffff8020d4e5:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d4e8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d4eb:	e8 ef 17 00 00       	call   ffffffff8020ecdf <_RME_Cpt_Add>
ffffffff8020d4f0:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d4f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d4f8:	e9 15 04 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Cpt_Rem(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Rem */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
ffffffff8020d4fd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Cpt_Rem(Cpt,
ffffffff8020d501:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d504:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d508:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d50b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d50f:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d512:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d515:	e8 fb 20 00 00       	call   ffffffff8020f615 <_RME_Cpt_Rem>
ffffffff8020d51a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d51e:	e9 ef 03 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
#if(RME_PGT_RAW_ENABLE==0U)
        case RME_SVC_PGT_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d523:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d527:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020d52b:	48 89 c7             	mov    %rax,%rdi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
                                Param[1],                                   /* rme_ptr_t Raddr */
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
                                RME_PARAM_Q0(Param[0]),                     /* rme_ptr_t Size_Order */
ffffffff8020d52e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d532:	0f b7 c8             	movzwl %ax,%ecx
                                RME_PARAM_PT(Param[2]),                     /* rme_ptr_t Is_Top */
ffffffff8020d535:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d539:	83 e0 01             	and    $0x1,%eax
ffffffff8020d53c:	48 89 c6             	mov    %rax,%rsi
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
ffffffff8020d53f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d543:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
ffffffff8020d547:	49 89 c1             	mov    %rax,%r9
ffffffff8020d54a:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
                                (rme_cid_t)RME_PARAM_Q1(Param[0]),          /* rme_cid_t Cap_Pgt */
ffffffff8020d54e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d552:	48 c1 e8 10          	shr    $0x10,%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d556:	0f b7 d0             	movzwl %ax,%edx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d559:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d55d:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Crt(Cpt,
ffffffff8020d561:	49 89 c3             	mov    %rax,%r11
ffffffff8020d564:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d568:	49 89 c2             	mov    %rax,%r10
ffffffff8020d56b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d56f:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d573:	57                   	push   %rdi
ffffffff8020d574:	51                   	push   %rcx
ffffffff8020d575:	56                   	push   %rsi
ffffffff8020d576:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d579:	4c 89 da             	mov    %r11,%rdx
ffffffff8020d57c:	4c 89 d6             	mov    %r10,%rsi
ffffffff8020d57f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d582:	e8 c9 2f 00 00       	call   ffffffff80210550 <_RME_Pgt_Crt>
ffffffff8020d587:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d58b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                RME_PARAM_PC(Svc));                         /* rme_ptr_t Num_Order */
            break;
ffffffff8020d58f:	e9 7e 03 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d594:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Del(Cpt,
ffffffff8020d598:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d59b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d59f:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d5a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d5a6:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d5a9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5ac:	e8 ca 36 00 00       	call   ffffffff80210c7b <_RME_Pgt_Del>
ffffffff8020d5b1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d5b5:	e9 58 03 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_PGT_ADD:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5ba:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
                                Cid,                                        /* rme_ptr_t Flag_Dst */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Pos_Src */
ffffffff8020d5be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5c2:	41 89 c1             	mov    %eax,%r9d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
ffffffff8020d5c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d5c9:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5cd:	49 89 c0             	mov    %rax,%r8
ffffffff8020d5d0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Pos_Dst */
ffffffff8020d5d4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5d8:	89 c7                	mov    %eax,%edi
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
ffffffff8020d5da:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d5de:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Add(Cpt,
ffffffff8020d5e2:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d5e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d5e9:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d5ed:	51                   	push   %rcx
ffffffff8020d5ee:	48 89 d1             	mov    %rdx,%rcx
ffffffff8020d5f1:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d5f4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d5f7:	e8 70 3a 00 00       	call   ffffffff8021106c <_RME_Pgt_Add>
ffffffff8020d5fc:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d600:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Index */
            break;
ffffffff8020d604:	e9 09 03 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_PGT_REM:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff8020d609:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
ffffffff8020d60d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Rem(Cpt,
ffffffff8020d611:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d614:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d618:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d61b:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d61e:	e8 0c 40 00 00       	call   ffffffff8021162f <_RME_Pgt_Rem>
ffffffff8020d623:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[1]);                                  /* rme_ptr_t Pos */
            break;
ffffffff8020d627:	e9 e6 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_PGT_CON:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d62c:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
                                Param[1],                                   /* rme_ptr_t Pos */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Pgt_Child */
ffffffff8020d630:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d634:	89 c7                	mov    %eax,%edi
ffffffff8020d636:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Parent */
ffffffff8020d63a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d63e:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Pgt_Con(Cpt,
ffffffff8020d642:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d645:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d649:	49 89 c8             	mov    %rcx,%r8
ffffffff8020d64c:	48 89 f9             	mov    %rdi,%rcx
ffffffff8020d64f:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d652:	e8 69 42 00 00       	call   ffffffff802118c0 <_RME_Pgt_Con>
ffffffff8020d657:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Flag_Child */
            break;
ffffffff8020d65b:	e9 b2 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
            RME_COV_MARKER();
            
            Retval=_RME_Pgt_Des(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
                                Param[1],                                   /* rme_ptr_t Pos */
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt_Child */
ffffffff8020d660:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8020d664:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d667:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt_Parent */
ffffffff8020d66b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Pgt_Des(Cpt,
ffffffff8020d66f:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d672:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d676:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d679:	e8 bb 47 00 00       	call   ffffffff80211e39 <_RME_Pgt_Des>
ffffffff8020d67e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d682:	e9 8b 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
#if(RME_PGT_RAW_ENABLE==0U)
            Retval=_RME_Prc_Crt(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[2]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d687:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d68b:	48 89 c7             	mov    %rax,%rdi
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
ffffffff8020d68e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d692:	48 89 c1             	mov    %rax,%rcx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d695:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Crt(Cpt,
ffffffff8020d699:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d69c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d6a0:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d6a3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6a7:	49 89 f8             	mov    %rdi,%r8
ffffffff8020d6aa:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6ad:	e8 38 62 00 00       	call   ffffffff802138ea <_RME_Prc_Crt>
ffffffff8020d6b2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt_Crt */
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Cpt */
                                (rme_ptr_t)Param[2]);                       /* rme_ptr_t Raw_Pgt */
#endif
            break;
ffffffff8020d6b6:	e9 57 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Prc_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
ffffffff8020d6bb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Del(Cpt,
ffffffff8020d6bf:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d6c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d6c6:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d6c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6cd:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d6d0:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6d3:	e8 a1 69 00 00       	call   ffffffff80214079 <_RME_Prc_Del>
ffffffff8020d6d8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d6dc:	e9 31 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Prc_Cpt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
ffffffff8020d6e1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Cpt(Cpt,
ffffffff8020d6e5:	48 89 c2             	mov    %rax,%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d6e8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Cpt(Cpt,
ffffffff8020d6ec:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d6ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d6f3:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d6f6:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d6f9:	e8 38 6d 00 00       	call   ffffffff80214436 <_RME_Prc_Cpt>
ffffffff8020d6fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d702:	e9 0b 02 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
#if(RME_PGT_RAW_ENABLE==0U)
            Retval=_RME_Prc_Pgt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
ffffffff8020d707:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Prc_Pgt(Cpt,
ffffffff8020d70b:	48 89 c2             	mov    %rax,%rdx
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
ffffffff8020d70e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Prc_Pgt(Cpt,
ffffffff8020d712:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d715:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d719:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d71c:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d71f:	e8 d2 71 00 00       	call   ffffffff802148f6 <_RME_Prc_Pgt>
ffffffff8020d724:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
#else
            Retval=_RME_Prc_Pgt(Cpt,
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
                                Param[1]);                                  /* rme_ptr_t Raw_Pgt */
#endif
            break;
ffffffff8020d728:	e9 e5 01 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        /* Thread */
        case RME_SVC_THD_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d72d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d731:	83 e0 40             	and    $0x40,%eax
ffffffff8020d734:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d737:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020d73b:	48 c1 e8 07          	shr    $0x7,%rax
ffffffff8020d73f:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d742:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
                                RME_PARAM_D0(Param[1]),                     /* rme_ptr_t Prio_Max */
ffffffff8020d746:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d74a:	41 89 c1             	mov    %eax,%r9d
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
ffffffff8020d74d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d751:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d755:	49 89 c0             	mov    %rax,%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Thd */
ffffffff8020d758:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d75c:	41 89 c3             	mov    %eax,%r11d
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d75f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d763:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Crt(Cpt,
ffffffff8020d767:	49 89 c2             	mov    %rax,%r10
ffffffff8020d76a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d76e:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d771:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d775:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d779:	56                   	push   %rsi
ffffffff8020d77a:	51                   	push   %rcx
ffffffff8020d77b:	52                   	push   %rdx
ffffffff8020d77c:	4c 89 d9             	mov    %r11,%rcx
ffffffff8020d77f:	4c 89 d2             	mov    %r10,%rdx
ffffffff8020d782:	48 89 fe             	mov    %rdi,%rsi
ffffffff8020d785:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d788:	e8 a6 7c 00 00       	call   ffffffff80215433 <_RME_Thd_Crt>
ffffffff8020d78d:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8020d791:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2],                                   /* rme_ptr_t Raddr */
                                Svc>>7,                                     /* rme_ptr_t Attr */
                                Svc&0x40U);                                 /* rme_ptr_t Is_Hyp */
            break;
ffffffff8020d795:	e9 78 01 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Thd */
ffffffff8020d79a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Del(Cpt,
ffffffff8020d79e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d7a1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d7a5:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d7a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d7ac:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d7af:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7b2:	e8 41 86 00 00       	call   ffffffff80215df8 <_RME_Thd_Del>
ffffffff8020d7b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d7bb:	e9 52 01 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        }
        case RME_SVC_THD_SCHED_BIND:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7c0:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                       (rme_cid_t)Cid,                      /* rme_cid_t Cap_Thd */
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
                                       RME_PARAM_D0(Param[1]),              /* rme_ptr_t Prio */
ffffffff8020d7c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7c8:	41 89 c1             	mov    %eax,%r9d
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
ffffffff8020d7cb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020d7cf:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7d3:	49 89 c0             	mov    %rax,%r8
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Sig */
ffffffff8020d7d6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7da:	89 c1                	mov    %eax,%ecx
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
ffffffff8020d7dc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d7e0:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Thd_Sched_Bind(Cpt,
ffffffff8020d7e4:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7e7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d7eb:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d7ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d7f2:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8020d7f6:	52                   	push   %rdx
ffffffff8020d7f7:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d7fa:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d7fd:	e8 75 8a 00 00       	call   ffffffff80216277 <_RME_Thd_Sched_Bind>
ffffffff8020d802:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020d806:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                       Param[2]);                           /* rme_ptr_t Haddr */
            break;
ffffffff8020d80a:	e9 03 01 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        case RME_SVC_THD_SCHED_RCV:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Thd_Sched_Rcv(Cpt,
                                      (rme_cid_t)Param[0]);                 /* rme_cid_t Cap_Thd */
ffffffff8020d80f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Thd_Sched_Rcv(Cpt,
ffffffff8020d813:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d816:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d81a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d81d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d820:	e8 47 9e 00 00       	call   ffffffff8021766c <_RME_Thd_Sched_Rcv>
ffffffff8020d825:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d829:	e9 e4 00 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Crt(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d82e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Crt(Cpt,
ffffffff8020d832:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d835:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d839:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d83c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d840:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d843:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d846:	e8 ce af 00 00       	call   ffffffff80218819 <_RME_Sig_Crt>
ffffffff8020d84b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d84f:	e9 be 00 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Sig_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
ffffffff8020d854:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Sig_Del(Cpt,
ffffffff8020d858:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d85b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d85f:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d862:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d866:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d869:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d86c:	e8 a4 b2 00 00       	call   ffffffff80218b15 <_RME_Sig_Del>
ffffffff8020d871:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d875:	e9 98 00 00 00       	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        /* Invocation */
        case RME_SVC_INV_CRT:
        {
            RME_COV_MARKER();
            
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d87a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
                                (rme_cid_t)Param[1],                        /* rme_cid_t Cap_Prc */
ffffffff8020d87e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d882:	49 89 c0             	mov    %rax,%r8
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff8020d885:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d889:	89 c1                	mov    %eax,%ecx
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
ffffffff8020d88b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020d88f:	48 c1 e8 20          	shr    $0x20,%rax
            Retval=_RME_Inv_Crt(Cpt,
ffffffff8020d893:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d896:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d89a:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d89d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8a1:	49 89 d1             	mov    %rdx,%r9
ffffffff8020d8a4:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020d8a7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8aa:	e8 c3 bf 00 00       	call   ffffffff80219872 <_RME_Inv_Crt>
ffffffff8020d8af:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
                                Param[2]);                                  /* rme_ptr_t Raddr */
            break;
ffffffff8020d8b3:	eb 5d                	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        {
            RME_COV_MARKER();
            
            Retval=_RME_Inv_Del(Cpt,
                                (rme_cid_t)Cid,                             /* rme_cid_t Cap_Cpt */
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Inv */
ffffffff8020d8b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Del(Cpt,
ffffffff8020d8b9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d8bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020d8c0:	48 89 c1             	mov    %rax,%rcx
ffffffff8020d8c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8c7:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020d8ca:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8cd:	e8 32 c8 00 00       	call   ffffffff8021a104 <_RME_Inv_Del>
ffffffff8020d8d2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d8d6:	eb 3a                	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
            
            Retval=_RME_Inv_Set(Cpt,
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
                                Param[1],                                   /* rme_ptr_t Entry */
                                Param[2],                                   /* rme_ptr_t Stack */
                                RME_PARAM_D1(Param[0]));                    /* rme_ptr_t Is_Exc_Ret */
ffffffff8020d8d8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff8020d8dc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d8e0:	48 89 c6             	mov    %rax,%rsi
ffffffff8020d8e3:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8020d8e7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
ffffffff8020d8eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
            Retval=_RME_Inv_Set(Cpt,
ffffffff8020d8ef:	89 c7                	mov    %eax,%edi
ffffffff8020d8f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d8f5:	49 89 f0             	mov    %rsi,%r8
ffffffff8020d8f8:	48 89 fe             	mov    %rdi,%rsi
ffffffff8020d8fb:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d8fe:	e8 ed cb 00 00       	call   ffffffff8021a4f0 <_RME_Inv_Set>
ffffffff8020d903:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
            break;
ffffffff8020d907:	eb 09                	jmp    ffffffff8020d912 <_RME_Svc_Handler+0x96f>
        /* This is an error */
        default: 
        {
            RME_COV_MARKER();
            
            Retval=RME_ERR_CPT_NULL;
ffffffff8020d909:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
ffffffff8020d910:	ff 
            break;
ffffffff8020d911:	90                   	nop
        }
    }
    
    /* We set the registers and return */
    __RME_Svc_Retval_Set(Reg,Retval);
ffffffff8020d912:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d916:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020d91a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d91d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d920:	e8 b0 98 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
}
ffffffff8020d925:	c9                   	leave
ffffffff8020d926:	c3                   	ret

ffffffff8020d927 <_RME_Tim_Handler>:
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Tim_Handler(struct RME_Reg_Struct* Reg,
                      rme_ptr_t Slice)
{
ffffffff8020d927:	f3 0f 1e fa          	endbr64
ffffffff8020d92b:	55                   	push   %rbp
ffffffff8020d92c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020d92f:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020d933:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020d937:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    RME_x64_timestamp++;
ffffffff8020d93b:	48 8b 05 be c6 01 00 	mov    0x1c6be(%rip),%rax        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8020d942:	48 83 c0 01          	add    $0x1,%rax
ffffffff8020d946:	48 89 05 b3 c6 01 00 	mov    %rax,0x1c6b3(%rip)        # ffffffff8022a000 <RME_x64_timestamp>
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    
    Local=RME_CPU_LOCAL();
ffffffff8020d94d:	e8 ed de ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020d952:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff8020d956:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d95a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020d95e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020d962:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d966:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d96a:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8020d971:	ff ff 7f 
ffffffff8020d974:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020d977:	72 57                	jb     ffffffff8020d9d0 <_RME_Tim_Handler+0xa9>
    {
        RME_COV_MARKER();

        /* Decrease timeslice count, and see if the timeslice is used up */
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff8020d979:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d97d:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d981:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8020d985:	73 19                	jae    ffffffff8020d9a0 <_RME_Tim_Handler+0x79>
        {
            RME_COV_MARKER();
            
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020d987:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d98b:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020d98f:	48 2b 45 e0          	sub    -0x20(%rbp),%rax
ffffffff8020d993:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d996:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d99a:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020d99e:	eb 30                	jmp    ffffffff8020d9d0 <_RME_Tim_Handler+0xa9>
        else
        {
            RME_COV_MARKER();

            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff8020d9a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9a4:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8020d9ab:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff8020d9ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9b0:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9b3:	e8 da 54 00 00       	call   ffffffff80212e92 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8020d9b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9bc:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8020d9c3:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff8020d9c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020d9c8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9cb:	e8 0d 56 00 00       	call   ffffffff80212fdd <_RME_Run_Notif>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Send to the system tick timer endpoint. This endpoint is per-core */
    _RME_Kern_Snd(Local->Sig_Tim);
ffffffff8020d9d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020d9d4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020d9d8:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9db:	e8 6d b5 00 00       	call   ffffffff80218f4d <_RME_Kern_Snd>

    /* All kernel send complete, now pick the highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff8020d9e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8020d9e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020d9e8:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020d9eb:	48 89 c7             	mov    %rax,%rdi
ffffffff8020d9ee:	e8 d3 b4 00 00       	call   ffffffff80218ec6 <_RME_Kern_High>
}
ffffffff8020d9f3:	90                   	nop
ffffffff8020d9f4:	c9                   	leave
ffffffff8020d9f5:	c3                   	ret

ffffffff8020d9f6 <_RME_Tim_Elapse>:
                                _RME_Tim_Elapse or _RME_Tim_Handler.
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Tim_Elapse(rme_ptr_t Slice)
{
ffffffff8020d9f6:	f3 0f 1e fa          	endbr64
ffffffff8020d9fa:	55                   	push   %rbp
ffffffff8020d9fb:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020d9fe:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8020da02:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8020da06:	e8 34 de ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020da0b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020da0f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    /* We don't want the slices less than 1 because we want to keep the kernel
     * SVC invariants - the current thread must still be running after this */
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
ffffffff8020da13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da17:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da1b:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8020da22:	ff ff 7f 
ffffffff8020da25:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020da28:	72 33                	jb     ffffffff8020da5d <_RME_Tim_Elapse+0x67>
    {
        RME_COV_MARKER();

        /* Decrease timeslice count, but no less than 1, so the thread is
         * always running, which keeps the invariant of the kernel */
        if(Slice<Thd_Cur->Sched.Slice)
ffffffff8020da2a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da2e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da32:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020da36:	73 19                	jae    ffffffff8020da51 <_RME_Tim_Elapse+0x5b>
        {
            RME_COV_MARKER();
            
            Thd_Cur->Sched.Slice-=Slice;
ffffffff8020da38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da3c:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8020da40:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff8020da44:	48 89 c2             	mov    %rax,%rdx
ffffffff8020da47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da4b:	48 89 50 30          	mov    %rdx,0x30(%rax)
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff8020da4f:	eb 0c                	jmp    ffffffff8020da5d <_RME_Tim_Elapse+0x67>
            Thd_Cur->Sched.Slice=1U;
ffffffff8020da51:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020da55:	48 c7 40 30 01 00 00 	movq   $0x1,0x30(%rax)
ffffffff8020da5c:	00 
}
ffffffff8020da5d:	90                   	nop
ffffffff8020da5e:	c9                   	leave
ffffffff8020da5f:	c3                   	ret

ffffffff8020da60 <_RME_Tim_Future>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - How many slices to program until the next timeout.
******************************************************************************/
rme_ptr_t _RME_Tim_Future(void)
{
ffffffff8020da60:	f3 0f 1e fa          	endbr64
ffffffff8020da64:	55                   	push   %rbp
ffffffff8020da65:	48 89 e5             	mov    %rsp,%rbp
    /* If we're running an infinite thread, just program infinite time,
     * these values are very large so that's fine */
    return RME_CPU_LOCAL()->Thd_Cur->Sched.Slice;
ffffffff8020da68:	e8 d2 dd ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8020da6d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020da71:	48 8b 40 30          	mov    0x30(%rax),%rax
}
ffffffff8020da75:	5d                   	pop    %rbp
ffffffff8020da76:	c3                   	ret

ffffffff8020da77 <_RME_Cpt_Boot_Init>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Cpt_Boot_Init(rme_cid_t Cap_Cpt,
                             rme_ptr_t Vaddr,
                             rme_ptr_t Entry_Num)
{
ffffffff8020da77:	f3 0f 1e fa          	endbr64
ffffffff8020da7b:	55                   	push   %rbp
ffffffff8020da7c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020da7f:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8020da83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8020da87:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8020da8b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    rme_ptr_t Count;
    struct RME_Cap_Cpt* Cpt;

    /* See if the entry number is too big */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020da8f:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020da94:	74 0a                	je     ffffffff8020daa0 <_RME_Cpt_Boot_Init+0x29>
ffffffff8020da96:	48 81 7d d8 00 80 00 	cmpq   $0x8000,-0x28(%rbp)
ffffffff8020da9d:	00 
ffffffff8020da9e:	76 0c                	jbe    ffffffff8020daac <_RME_Cpt_Boot_Init+0x35>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020daa0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020daa7:	e9 b8 00 00 00       	jmp    ffffffff8020db64 <_RME_Cpt_Boot_Init+0xed>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020daac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dab0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dab4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dab7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dabb:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020dabe:	48 89 c7             	mov    %rax,%rdi
ffffffff8020dac1:	e8 f2 48 00 00       	call   ffffffff802123b8 <_RME_Kot_Mark>
ffffffff8020dac6:	48 85 c0             	test   %rax,%rax
ffffffff8020dac9:	74 0c                	je     ffffffff8020dad7 <_RME_Cpt_Boot_Init+0x60>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_KOT;
ffffffff8020dacb:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020dad2:	e9 8d 00 00 00       	jmp    ffffffff8020db64 <_RME_Cpt_Boot_Init+0xed>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020dad7:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020dade:	00 
ffffffff8020dadf:	eb 1e                	jmp    ffffffff8020daff <_RME_Cpt_Boot_Init+0x88>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020dae1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020dae5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dae9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020daec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020daf0:	48 01 d0             	add    %rdx,%rax
ffffffff8020daf3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020dafa:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020daff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020db03:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020db07:	72 d8                	jb     ffffffff8020dae1 <_RME_Cpt_Boot_Init+0x6a>
    }

    Cpt=&(((struct RME_Cap_Cpt*)Vaddr)[Cap_Cpt]);
ffffffff8020db09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020db0d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020db11:	48 89 c2             	mov    %rax,%rdx
ffffffff8020db14:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020db18:	48 01 d0             	add    %rdx,%rax
ffffffff8020db1b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Header init */
    Cpt->Head.Root_Ref=1U;
ffffffff8020db1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db23:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8020db2a:	00 
    Cpt->Head.Object=Vaddr;
ffffffff8020db2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db2f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8020db33:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020db37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db3b:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020db42:	00 
    
    /* Info init */
    Cpt->Entry_Num=Entry_Num;
ffffffff8020db43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db47:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020db4b:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* At last, write into slot the correct information, and set status to VALID */
    RME_WRITE_RELEASE(&(Cpt->Head.Type_Stat),
ffffffff8020db4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020db53:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020db5a:	00 03 00 
ffffffff8020db5d:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return Cap_Cpt;
ffffffff8020db60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
ffffffff8020db64:	c9                   	leave
ffffffff8020db65:	c3                   	ret

ffffffff8020db66 <_RME_Cpt_Boot_Crt>:
rme_ret_t _RME_Cpt_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt_Crt,
                            rme_cid_t Cap_Crt,
                            rme_ptr_t Vaddr,
                            rme_ptr_t Entry_Num)
{
ffffffff8020db66:	f3 0f 1e fa          	endbr64
ffffffff8020db6a:	55                   	push   %rbp
ffffffff8020db6b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020db6e:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020db72:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020db76:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020db7a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020db7e:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020db82:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Cpt* Cpt_Crt;
    rme_ptr_t Type_Stat;
    
    /* See if the entry number is too big - this is not restricted by RME_CPT_ENTRY_MAX */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020db86:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff8020db8b:	74 0a                	je     ffffffff8020db97 <_RME_Cpt_Boot_Crt+0x31>
ffffffff8020db8d:	48 81 7d b8 00 80 00 	cmpq   $0x8000,-0x48(%rbp)
ffffffff8020db94:	00 
ffffffff8020db95:	76 0c                	jbe    ffffffff8020dba3 <_RME_Cpt_Boot_Crt+0x3d>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020db97:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020db9e:	e9 3e 03 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,
ffffffff8020dba3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dba7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020dbac:	48 85 c0             	test   %rax,%rax
ffffffff8020dbaf:	0f 85 98 00 00 00    	jne    ffffffff8020dc4d <_RME_Cpt_Boot_Crt+0xe7>
ffffffff8020dbb5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dbb9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dbbd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020dbc1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dbc4:	0f 93 c0             	setae  %al
ffffffff8020dbc7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dbca:	48 85 c0             	test   %rax,%rax
ffffffff8020dbcd:	74 0c                	je     ffffffff8020dbdb <_RME_Cpt_Boot_Crt+0x75>
ffffffff8020dbcf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dbd6:	e9 06 03 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dbdb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dbdf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dbe3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dbe6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dbea:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dbee:	48 01 d0             	add    %rdx,%rax
ffffffff8020dbf1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dbf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dbf9:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dbfc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dc00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dc04:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dc08:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dc0b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dc0f:	0f 94 c0             	sete   %al
ffffffff8020dc12:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc15:	48 85 c0             	test   %rax,%rax
ffffffff8020dc18:	74 0c                	je     ffffffff8020dc26 <_RME_Cpt_Boot_Crt+0xc0>
ffffffff8020dc1a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dc21:	e9 bb 02 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dc26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dc2a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dc2e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dc32:	0f 95 c0             	setne  %al
ffffffff8020dc35:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc38:	48 85 c0             	test   %rax,%rax
ffffffff8020dc3b:	0f 84 4c 01 00 00    	je     ffffffff8020dd8d <_RME_Cpt_Boot_Crt+0x227>
ffffffff8020dc41:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dc48:	e9 94 02 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dc4d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dc51:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dc55:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dc58:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dc5c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dc60:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dc63:	0f 93 c0             	setae  %al
ffffffff8020dc66:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dc69:	48 85 c0             	test   %rax,%rax
ffffffff8020dc6c:	74 0c                	je     ffffffff8020dc7a <_RME_Cpt_Boot_Crt+0x114>
ffffffff8020dc6e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dc75:	e9 67 02 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dc7a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dc7e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dc82:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dc86:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dc89:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020dc8d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dc91:	48 01 d0             	add    %rdx,%rax
ffffffff8020dc94:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dc98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dc9c:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dc9f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dca3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dca7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dcab:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dcae:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dcb2:	0f 94 c0             	sete   %al
ffffffff8020dcb5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dcb8:	48 85 c0             	test   %rax,%rax
ffffffff8020dcbb:	74 0c                	je     ffffffff8020dcc9 <_RME_Cpt_Boot_Crt+0x163>
ffffffff8020dcbd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dcc4:	e9 18 02 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dcc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dccd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dcd1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dcd5:	0f 95 c0             	setne  %al
ffffffff8020dcd8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dcdb:	48 85 c0             	test   %rax,%rax
ffffffff8020dcde:	74 0c                	je     ffffffff8020dcec <_RME_Cpt_Boot_Crt+0x186>
ffffffff8020dce0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dce7:	e9 f5 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dcec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dcf0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dcf5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dcf8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dcfc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dd00:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dd03:	0f 93 c0             	setae  %al
ffffffff8020dd06:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd09:	48 85 c0             	test   %rax,%rax
ffffffff8020dd0c:	74 0c                	je     ffffffff8020dd1a <_RME_Cpt_Boot_Crt+0x1b4>
ffffffff8020dd0e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dd15:	e9 c7 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dd1a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020dd1e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020dd23:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dd27:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dd2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd2e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020dd32:	48 01 d0             	add    %rdx,%rax
ffffffff8020dd35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020dd39:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd3d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020dd40:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020dd44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dd48:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dd4c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020dd4f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020dd53:	0f 94 c0             	sete   %al
ffffffff8020dd56:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd59:	48 85 c0             	test   %rax,%rax
ffffffff8020dd5c:	74 0c                	je     ffffffff8020dd6a <_RME_Cpt_Boot_Crt+0x204>
ffffffff8020dd5e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dd65:	e9 77 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020dd6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020dd6e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dd72:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dd76:	0f 95 c0             	setne  %al
ffffffff8020dd79:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dd7c:	48 85 c0             	test   %rax,%rax
ffffffff8020dd7f:	74 0c                	je     ffffffff8020dd8d <_RME_Cpt_Boot_Crt+0x227>
ffffffff8020dd81:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dd88:	e9 54 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
                   RME_CAP_TYPE_CPT,
                   struct RME_Cap_Cpt*,
                   Cpt_Op,
                   Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020dd8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dd91:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020dd95:	83 e0 01             	and    $0x1,%eax
ffffffff8020dd98:	48 85 c0             	test   %rax,%rax
ffffffff8020dd9b:	0f 94 c0             	sete   %al
ffffffff8020dd9e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dda1:	48 85 c0             	test   %rax,%rax
ffffffff8020dda4:	74 0c                	je     ffffffff8020ddb2 <_RME_Cpt_Boot_Crt+0x24c>
ffffffff8020dda6:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ddad:	e9 2f 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020ddb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ddb6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ddba:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020ddbe:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ddc1:	0f 93 c0             	setae  %al
ffffffff8020ddc4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ddc7:	48 85 c0             	test   %rax,%rax
ffffffff8020ddca:	74 0c                	je     ffffffff8020ddd8 <_RME_Cpt_Boot_Crt+0x272>
ffffffff8020ddcc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ddd3:	e9 09 01 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020ddd8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020dddc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020dde0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dde3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020dde7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ddeb:	48 01 d0             	add    %rdx,%rax
ffffffff8020ddee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020ddf2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020ddf6:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020ddfd:	00 00 00 
ffffffff8020de00:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020de05:	48 89 c7             	mov    %rax,%rdi
ffffffff8020de08:	e8 51 e9 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020de0d:	48 85 c0             	test   %rax,%rax
ffffffff8020de10:	0f 94 c0             	sete   %al
ffffffff8020de13:	0f b6 c0             	movzbl %al,%eax
ffffffff8020de16:	48 85 c0             	test   %rax,%rax
ffffffff8020de19:	74 0c                	je     ffffffff8020de27 <_RME_Cpt_Boot_Crt+0x2c1>
ffffffff8020de1b:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020de22:	e9 ba 00 00 00       	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
ffffffff8020de27:	48 8b 15 d2 c1 01 00 	mov    0x1c1d2(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8020de2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de32:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Try to mark this area as populated */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))!=0)
ffffffff8020de36:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020de3a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020de3e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de41:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020de45:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020de48:	48 89 c7             	mov    %rax,%rdi
ffffffff8020de4b:	e8 68 45 00 00       	call   ffffffff802123b8 <_RME_Kot_Mark>
ffffffff8020de50:	48 85 c0             	test   %rax,%rax
ffffffff8020de53:	74 14                	je     ffffffff8020de69 <_RME_Cpt_Boot_Crt+0x303>
    {
        RME_COV_MARKER();
        
        /* Abort the creation process */
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020de55:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de59:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020de60:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020de67:	eb 78                	jmp    ffffffff8020dee1 <_RME_Cpt_Boot_Crt+0x37b>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020de69:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020de70:	00 
ffffffff8020de71:	eb 1e                	jmp    ffffffff8020de91 <_RME_Cpt_Boot_Crt+0x32b>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020de73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020de77:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020de7b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de7e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020de82:	48 01 d0             	add    %rdx,%rax
ffffffff8020de85:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020de8c:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020de91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020de95:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff8020de99:	72 d8                	jb     ffffffff8020de73 <_RME_Cpt_Boot_Crt+0x30d>
    }

    /* Header init */
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020de9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020de9f:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020dea6:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020dea7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020deab:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020deaf:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020deb3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020deb7:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020debe:	00 
    /* Info init */
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020debf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dec3:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020dec7:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020decb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020decf:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020ded6:	00 03 00 
ffffffff8020ded9:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020dedc:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020dee1:	c9                   	leave
ffffffff8020dee2:	c3                   	ret

ffffffff8020dee3 <_RME_Cpt_Crt>:
                              rme_cid_t Cap_Cpt_Crt,
                              rme_cid_t Cap_Kom,
                              rme_cid_t Cap_Crt,
                              rme_ptr_t Raddr,
                              rme_ptr_t Entry_Num)
{
ffffffff8020dee3:	f3 0f 1e fa          	endbr64
ffffffff8020dee7:	55                   	push   %rbp
ffffffff8020dee8:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020deeb:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020deef:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020def3:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020def7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8020defb:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff8020deff:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff8020df03:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    volatile struct RME_Cap_Cpt* Cpt_Crt;
    rme_ptr_t Type_Stat;
    rme_ptr_t Vaddr;

    /* See if the entry number is too big */
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
ffffffff8020df07:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff8020df0c:	74 0a                	je     ffffffff8020df18 <_RME_Cpt_Crt+0x35>
ffffffff8020df0e:	48 81 7d a0 00 80 00 	cmpq   $0x8000,-0x60(%rbp)
ffffffff8020df15:	00 
ffffffff8020df16:	76 0c                	jbe    ffffffff8020df24 <_RME_Cpt_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_RANGE;
ffffffff8020df18:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020df1f:	e9 5f 06 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
        /* No action required */
    }
#endif

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8020df24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df28:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020df2d:	48 85 c0             	test   %rax,%rax
ffffffff8020df30:	0f 85 98 00 00 00    	jne    ffffffff8020dfce <_RME_Cpt_Crt+0xeb>
ffffffff8020df36:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020df3a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020df3e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020df42:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020df45:	0f 93 c0             	setae  %al
ffffffff8020df48:	0f b6 c0             	movzbl %al,%eax
ffffffff8020df4b:	48 85 c0             	test   %rax,%rax
ffffffff8020df4e:	74 0c                	je     ffffffff8020df5c <_RME_Cpt_Crt+0x79>
ffffffff8020df50:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020df57:	e9 27 06 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020df5c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020df60:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020df64:	48 89 c2             	mov    %rax,%rdx
ffffffff8020df67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020df6b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020df6f:	48 01 d0             	add    %rdx,%rax
ffffffff8020df72:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020df76:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020df7a:	48 8b 00             	mov    (%rax),%rax
ffffffff8020df7d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020df81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020df85:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020df89:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020df8c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020df90:	0f 94 c0             	sete   %al
ffffffff8020df93:	0f b6 c0             	movzbl %al,%eax
ffffffff8020df96:	48 85 c0             	test   %rax,%rax
ffffffff8020df99:	74 0c                	je     ffffffff8020dfa7 <_RME_Cpt_Crt+0xc4>
ffffffff8020df9b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020dfa2:	e9 dc 05 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020dfa7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020dfab:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020dfaf:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020dfb3:	0f 95 c0             	setne  %al
ffffffff8020dfb6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dfb9:	48 85 c0             	test   %rax,%rax
ffffffff8020dfbc:	0f 84 4c 01 00 00    	je     ffffffff8020e10e <_RME_Cpt_Crt+0x22b>
ffffffff8020dfc2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020dfc9:	e9 b5 05 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020dfce:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020dfd2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020dfd6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dfd9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020dfdd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020dfe1:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020dfe4:	0f 93 c0             	setae  %al
ffffffff8020dfe7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020dfea:	48 85 c0             	test   %rax,%rax
ffffffff8020dfed:	74 0c                	je     ffffffff8020dffb <_RME_Cpt_Crt+0x118>
ffffffff8020dfef:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020dff6:	e9 88 05 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020dffb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020dfff:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e003:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e007:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e00a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e00e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e012:	48 01 d0             	add    %rdx,%rax
ffffffff8020e015:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e019:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e01d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e020:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e024:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e028:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e02c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e02f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e033:	0f 94 c0             	sete   %al
ffffffff8020e036:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e039:	48 85 c0             	test   %rax,%rax
ffffffff8020e03c:	74 0c                	je     ffffffff8020e04a <_RME_Cpt_Crt+0x167>
ffffffff8020e03e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e045:	e9 39 05 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e04a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e04e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e052:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e056:	0f 95 c0             	setne  %al
ffffffff8020e059:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e05c:	48 85 c0             	test   %rax,%rax
ffffffff8020e05f:	74 0c                	je     ffffffff8020e06d <_RME_Cpt_Crt+0x18a>
ffffffff8020e061:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e068:	e9 16 05 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e06d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e071:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e076:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e079:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e07d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e081:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e084:	0f 93 c0             	setae  %al
ffffffff8020e087:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e08a:	48 85 c0             	test   %rax,%rax
ffffffff8020e08d:	74 0c                	je     ffffffff8020e09b <_RME_Cpt_Crt+0x1b8>
ffffffff8020e08f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e096:	e9 e8 04 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e09b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020e09f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e0a4:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e0a8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e0ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e0af:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e0b3:	48 01 d0             	add    %rdx,%rax
ffffffff8020e0b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e0ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e0be:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e0c1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e0c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e0c9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e0cd:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e0d0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e0d4:	0f 94 c0             	sete   %al
ffffffff8020e0d7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e0da:	48 85 c0             	test   %rax,%rax
ffffffff8020e0dd:	74 0c                	je     ffffffff8020e0eb <_RME_Cpt_Crt+0x208>
ffffffff8020e0df:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e0e6:	e9 98 04 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e0eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e0ef:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e0f3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e0f7:	0f 95 c0             	setne  %al
ffffffff8020e0fa:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e0fd:	48 85 c0             	test   %rax,%rax
ffffffff8020e100:	74 0c                	je     ffffffff8020e10e <_RME_Cpt_Crt+0x22b>
ffffffff8020e102:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e109:	e9 75 04 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8020e10e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e112:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e117:	48 85 c0             	test   %rax,%rax
ffffffff8020e11a:	0f 85 98 00 00 00    	jne    ffffffff8020e1b8 <_RME_Cpt_Crt+0x2d5>
ffffffff8020e120:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e124:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e128:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020e12c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e12f:	0f 93 c0             	setae  %al
ffffffff8020e132:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e135:	48 85 c0             	test   %rax,%rax
ffffffff8020e138:	74 0c                	je     ffffffff8020e146 <_RME_Cpt_Crt+0x263>
ffffffff8020e13a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e141:	e9 3d 04 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e146:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e14a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e14e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e151:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e155:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e159:	48 01 d0             	add    %rdx,%rax
ffffffff8020e15c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e160:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e164:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e167:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e16b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e16f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e173:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e176:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e17a:	0f 94 c0             	sete   %al
ffffffff8020e17d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e180:	48 85 c0             	test   %rax,%rax
ffffffff8020e183:	74 0c                	je     ffffffff8020e191 <_RME_Cpt_Crt+0x2ae>
ffffffff8020e185:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e18c:	e9 f2 03 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e191:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e195:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e199:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e19d:	0f 95 c0             	setne  %al
ffffffff8020e1a0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e1a3:	48 85 c0             	test   %rax,%rax
ffffffff8020e1a6:	0f 84 4c 01 00 00    	je     ffffffff8020e2f8 <_RME_Cpt_Crt+0x415>
ffffffff8020e1ac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e1b3:	e9 cb 03 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e1b8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e1bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e1c0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e1c3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e1c7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e1cb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e1ce:	0f 93 c0             	setae  %al
ffffffff8020e1d1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e1d4:	48 85 c0             	test   %rax,%rax
ffffffff8020e1d7:	74 0c                	je     ffffffff8020e1e5 <_RME_Cpt_Crt+0x302>
ffffffff8020e1d9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e1e0:	e9 9e 03 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e1e5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e1e9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e1ed:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e1f1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e1f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e1f8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e1fc:	48 01 d0             	add    %rdx,%rax
ffffffff8020e1ff:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e203:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e207:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e20a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e20e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e212:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e216:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e219:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e21d:	0f 94 c0             	sete   %al
ffffffff8020e220:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e223:	48 85 c0             	test   %rax,%rax
ffffffff8020e226:	74 0c                	je     ffffffff8020e234 <_RME_Cpt_Crt+0x351>
ffffffff8020e228:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e22f:	e9 4f 03 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e234:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e238:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e23c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e240:	0f 95 c0             	setne  %al
ffffffff8020e243:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e246:	48 85 c0             	test   %rax,%rax
ffffffff8020e249:	74 0c                	je     ffffffff8020e257 <_RME_Cpt_Crt+0x374>
ffffffff8020e24b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e252:	e9 2c 03 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e257:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e25b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e260:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e263:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e267:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e26b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e26e:	0f 93 c0             	setae  %al
ffffffff8020e271:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e274:	48 85 c0             	test   %rax,%rax
ffffffff8020e277:	74 0c                	je     ffffffff8020e285 <_RME_Cpt_Crt+0x3a2>
ffffffff8020e279:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e280:	e9 fe 02 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e285:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e289:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e28e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e292:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e295:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e299:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e29d:	48 01 d0             	add    %rdx,%rax
ffffffff8020e2a0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e2a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e2a8:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e2ab:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8020e2af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e2b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e2b7:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e2ba:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e2be:	0f 94 c0             	sete   %al
ffffffff8020e2c1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e2c4:	48 85 c0             	test   %rax,%rax
ffffffff8020e2c7:	74 0c                	je     ffffffff8020e2d5 <_RME_Cpt_Crt+0x3f2>
ffffffff8020e2c9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e2d0:	e9 ae 02 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e2d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e2d9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e2dd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e2e1:	0f 95 c0             	setne  %al
ffffffff8020e2e4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e2e7:	48 85 c0             	test   %rax,%rax
ffffffff8020e2ea:	74 0c                	je     ffffffff8020e2f8 <_RME_Cpt_Crt+0x415>
ffffffff8020e2ec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e2f3:	e9 8b 02 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020e2f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e2fc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e300:	83 e0 01             	and    $0x1,%eax
ffffffff8020e303:	48 85 c0             	test   %rax,%rax
ffffffff8020e306:	0f 94 c0             	sete   %al
ffffffff8020e309:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e30c:	48 85 c0             	test   %rax,%rax
ffffffff8020e30f:	74 0c                	je     ffffffff8020e31d <_RME_Cpt_Crt+0x43a>
ffffffff8020e311:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e318:	e9 66 02 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
ffffffff8020e31d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e321:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e325:	83 e0 01             	and    $0x1,%eax
ffffffff8020e328:	48 85 c0             	test   %rax,%rax
ffffffff8020e32b:	0f 94 c0             	sete   %al
ffffffff8020e32e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e331:	48 85 c0             	test   %rax,%rax
ffffffff8020e334:	74 18                	je     ffffffff8020e34e <_RME_Cpt_Crt+0x46b>
ffffffff8020e336:	48 c7 c7 e8 91 22 80 	mov    $0xffffffff802291e8,%rdi
ffffffff8020e33d:	e8 c9 e6 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e342:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e349:	e9 35 02 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e34e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e352:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020e356:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e35a:	48 01 d0             	add    %rdx,%rax
ffffffff8020e35d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8020e361:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e365:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff8020e369:	0f 92 c0             	setb   %al
ffffffff8020e36c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e36f:	48 85 c0             	test   %rax,%rax
ffffffff8020e372:	74 34                	je     ffffffff8020e3a8 <_RME_Cpt_Crt+0x4c5>
ffffffff8020e374:	48 c7 c7 08 92 22 80 	mov    $0xffffffff80229208,%rdi
ffffffff8020e37b:	e8 8b e6 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e380:	48 c7 c7 27 92 22 80 	mov    $0xffffffff80229227,%rdi
ffffffff8020e387:	e8 7f e6 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e38c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e390:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e394:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e397:	e8 ad e5 ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
ffffffff8020e39c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e3a3:	e9 db 01 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e3a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e3ac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e3b0:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff8020e3b4:	0f 92 c0             	setb   %al
ffffffff8020e3b7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e3ba:	48 85 c0             	test   %rax,%rax
ffffffff8020e3bd:	74 18                	je     ffffffff8020e3d7 <_RME_Cpt_Crt+0x4f4>
ffffffff8020e3bf:	48 c7 c7 38 92 22 80 	mov    $0xffffffff80229238,%rdi
ffffffff8020e3c6:	e8 40 e6 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e3cb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e3d2:	e9 ac 01 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e3d7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e3db:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e3df:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e3e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e3e6:	48 01 d0             	add    %rdx,%rax
ffffffff8020e3e9:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8020e3ed:	0f 92 c0             	setb   %al
ffffffff8020e3f0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e3f3:	48 85 c0             	test   %rax,%rax
ffffffff8020e3f6:	74 18                	je     ffffffff8020e410 <_RME_Cpt_Crt+0x52d>
ffffffff8020e3f8:	48 c7 c7 58 92 22 80 	mov    $0xffffffff80229258,%rdi
ffffffff8020e3ff:	e8 07 e6 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e404:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e40b:	e9 73 01 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e410:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e414:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020e418:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e41c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e420:	48 89 c1             	mov    %rax,%rcx
ffffffff8020e423:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e427:	48 01 c8             	add    %rcx,%rax
ffffffff8020e42a:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8020e42e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e431:	0f 92 c0             	setb   %al
ffffffff8020e434:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e437:	48 85 c0             	test   %rax,%rax
ffffffff8020e43a:	74 18                	je     ffffffff8020e454 <_RME_Cpt_Crt+0x571>
ffffffff8020e43c:	48 c7 c7 78 92 22 80 	mov    $0xffffffff80229278,%rdi
ffffffff8020e443:	e8 c3 e5 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8020e448:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e44f:	e9 2f 01 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
ffffffff8020e454:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e458:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e45c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020e460:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e463:	0f 93 c0             	setae  %al
ffffffff8020e466:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e469:	48 85 c0             	test   %rax,%rax
ffffffff8020e46c:	74 0c                	je     ffffffff8020e47a <_RME_Cpt_Crt+0x597>
ffffffff8020e46e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e475:	e9 09 01 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e47a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e47e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e482:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e485:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e489:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e48d:	48 01 d0             	add    %rdx,%rax
ffffffff8020e490:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Cpt_Crt);
ffffffff8020e494:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e498:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020e49f:	00 00 00 
ffffffff8020e4a2:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020e4a7:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e4aa:	e8 af e2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e4af:	48 85 c0             	test   %rax,%rax
ffffffff8020e4b2:	0f 94 c0             	sete   %al
ffffffff8020e4b5:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e4b8:	48 85 c0             	test   %rax,%rax
ffffffff8020e4bb:	74 0c                	je     ffffffff8020e4c9 <_RME_Cpt_Crt+0x5e6>
ffffffff8020e4bd:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e4c4:	e9 ba 00 00 00       	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
ffffffff8020e4c9:	48 8b 15 30 bb 01 00 	mov    0x1bb30(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8020e4d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4d4:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Try to mark this area as populated */
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
ffffffff8020e4d8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020e4dc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e4e0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e4e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e4e7:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e4ea:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e4ed:	e8 c6 3e 00 00       	call   ffffffff802123b8 <_RME_Kot_Mark>
ffffffff8020e4f2:	48 85 c0             	test   %rax,%rax
ffffffff8020e4f5:	79 14                	jns    ffffffff8020e50b <_RME_Cpt_Crt+0x628>
    {
        RME_COV_MARKER();
        
        /* Failure. Set the Type_Stat back to 0 and abort the creation process */
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
ffffffff8020e4f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e4fb:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020e502:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020e509:	eb 78                	jmp    ffffffff8020e583 <_RME_Cpt_Crt+0x6a0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e50b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020e512:	00 
ffffffff8020e513:	eb 1e                	jmp    ffffffff8020e533 <_RME_Cpt_Crt+0x650>
    {
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff8020e515:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e519:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e51d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e520:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e524:	48 01 d0             	add    %rdx,%rax
ffffffff8020e527:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e52e:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020e533:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e537:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
ffffffff8020e53b:	72 d8                	jb     ffffffff8020e515 <_RME_Cpt_Crt+0x632>
    }

    /* Header init */
    Cpt_Crt->Head.Root_Ref=0U;
ffffffff8020e53d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e541:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020e548:	00 
    Cpt_Crt->Head.Object=Vaddr;
ffffffff8020e549:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e54d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020e551:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
ffffffff8020e555:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e559:	48 c7 40 10 ff 00 00 	movq   $0xff,0x10(%rax)
ffffffff8020e560:	00 
    
    /* Info init */
    Cpt_Crt->Entry_Num=Entry_Num;
ffffffff8020e561:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e565:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8020e569:	48 89 50 28          	mov    %rdx,0x28(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
ffffffff8020e56d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e571:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff8020e578:	00 03 00 
ffffffff8020e57b:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_CPT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020e57e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020e583:	c9                   	leave
ffffffff8020e584:	c3                   	ret

ffffffff8020e585 <_RME_Cpt_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Del,
                              rme_cid_t Cap_Del)
{
ffffffff8020e585:	f3 0f 1e fa          	endbr64
ffffffff8020e589:	55                   	push   %rbp
ffffffff8020e58a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020e58d:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8020e591:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8020e595:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8020e599:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
    /* These are used for deletion */
    rme_ptr_t Object;
    rme_ptr_t Size;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
ffffffff8020e59d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e5a1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e5a6:	48 85 c0             	test   %rax,%rax
ffffffff8020e5a9:	0f 85 98 00 00 00    	jne    ffffffff8020e647 <_RME_Cpt_Del+0xc2>
ffffffff8020e5af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e5b3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e5b7:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8020e5bb:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e5be:	0f 93 c0             	setae  %al
ffffffff8020e5c1:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e5c4:	48 85 c0             	test   %rax,%rax
ffffffff8020e5c7:	74 0c                	je     ffffffff8020e5d5 <_RME_Cpt_Del+0x50>
ffffffff8020e5c9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e5d0:	e9 cf 03 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e5d5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e5d9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e5dd:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e5e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e5e4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e5e8:	48 01 d0             	add    %rdx,%rax
ffffffff8020e5eb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e5ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e5f3:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e5f6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e5fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e5fe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e602:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e605:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e609:	0f 94 c0             	sete   %al
ffffffff8020e60c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e60f:	48 85 c0             	test   %rax,%rax
ffffffff8020e612:	74 0c                	je     ffffffff8020e620 <_RME_Cpt_Del+0x9b>
ffffffff8020e614:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e61b:	e9 84 03 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e620:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e624:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e628:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e62c:	0f 95 c0             	setne  %al
ffffffff8020e62f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e632:	48 85 c0             	test   %rax,%rax
ffffffff8020e635:	0f 84 4c 01 00 00    	je     ffffffff8020e787 <_RME_Cpt_Del+0x202>
ffffffff8020e63b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e642:	e9 5d 03 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e647:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e64b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e64f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e652:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e656:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e65a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e65d:	0f 93 c0             	setae  %al
ffffffff8020e660:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e663:	48 85 c0             	test   %rax,%rax
ffffffff8020e666:	74 0c                	je     ffffffff8020e674 <_RME_Cpt_Del+0xef>
ffffffff8020e668:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e66f:	e9 30 03 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e674:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e678:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020e67c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e680:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e683:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020e687:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e68b:	48 01 d0             	add    %rdx,%rax
ffffffff8020e68e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e696:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e699:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e69d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e6a1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e6a5:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e6a8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e6ac:	0f 94 c0             	sete   %al
ffffffff8020e6af:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e6b2:	48 85 c0             	test   %rax,%rax
ffffffff8020e6b5:	74 0c                	je     ffffffff8020e6c3 <_RME_Cpt_Del+0x13e>
ffffffff8020e6b7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e6be:	e9 e1 02 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e6c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e6c7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e6cb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e6cf:	0f 95 c0             	setne  %al
ffffffff8020e6d2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e6d5:	48 85 c0             	test   %rax,%rax
ffffffff8020e6d8:	74 0c                	je     ffffffff8020e6e6 <_RME_Cpt_Del+0x161>
ffffffff8020e6da:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e6e1:	e9 be 02 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e6e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e6ea:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e6ef:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e6f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e6f6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e6fa:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e6fd:	0f 93 c0             	setae  %al
ffffffff8020e700:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e703:	48 85 c0             	test   %rax,%rax
ffffffff8020e706:	74 0c                	je     ffffffff8020e714 <_RME_Cpt_Del+0x18f>
ffffffff8020e708:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e70f:	e9 90 02 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e714:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8020e718:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020e71d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e721:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e724:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e728:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e72c:	48 01 d0             	add    %rdx,%rax
ffffffff8020e72f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020e733:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e737:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e73a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e73e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e742:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e746:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e749:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e74d:	0f 94 c0             	sete   %al
ffffffff8020e750:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e753:	48 85 c0             	test   %rax,%rax
ffffffff8020e756:	74 0c                	je     ffffffff8020e764 <_RME_Cpt_Del+0x1df>
ffffffff8020e758:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e75f:	e9 40 02 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e764:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e768:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e76c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e770:	0f 95 c0             	setne  %al
ffffffff8020e773:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e776:	48 85 c0             	test   %rax,%rax
ffffffff8020e779:	74 0c                	je     ffffffff8020e787 <_RME_Cpt_Del+0x202>
ffffffff8020e77b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e782:	e9 1d 02 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8020e787:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e78b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020e78f:	83 e0 02             	and    $0x2,%eax
ffffffff8020e792:	48 85 c0             	test   %rax,%rax
ffffffff8020e795:	0f 94 c0             	sete   %al
ffffffff8020e798:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e79b:	48 85 c0             	test   %rax,%rax
ffffffff8020e79e:	74 0c                	je     ffffffff8020e7ac <_RME_Cpt_Del+0x227>
ffffffff8020e7a0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020e7a7:	e9 f8 01 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
ffffffff8020e7ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e7b0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e7b4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8020e7b8:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e7bb:	0f 93 c0             	setae  %al
ffffffff8020e7be:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e7c1:	48 85 c0             	test   %rax,%rax
ffffffff8020e7c4:	74 0c                	je     ffffffff8020e7d2 <_RME_Cpt_Del+0x24d>
ffffffff8020e7c6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e7cd:	e9 d2 01 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e7d2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020e7d6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e7da:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e7dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020e7e1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e7e5:	48 01 d0             	add    %rdx,%rax
ffffffff8020e7e8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
ffffffff8020e7ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e7f0:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e7f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020e7f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e7fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e7ff:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020e802:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020e806:	0f 95 c0             	setne  %al
ffffffff8020e809:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e80c:	48 85 c0             	test   %rax,%rax
ffffffff8020e80f:	74 0c                	je     ffffffff8020e81d <_RME_Cpt_Del+0x298>
ffffffff8020e811:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020e818:	e9 87 01 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e81d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e821:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020e825:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020e829:	0f 95 c0             	setne  %al
ffffffff8020e82c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e82f:	48 85 c0             	test   %rax,%rax
ffffffff8020e832:	74 0c                	je     ffffffff8020e840 <_RME_Cpt_Del+0x2bb>
ffffffff8020e834:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020e83b:	e9 64 01 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e840:	48 8b 15 b9 b7 01 00 	mov    0x1b7b9(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8020e847:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e84b:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020e84f:	48 29 c2             	sub    %rax,%rdx
ffffffff8020e852:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020e856:	0f 96 c0             	setbe  %al
ffffffff8020e859:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e85c:	48 98                	cltq
ffffffff8020e85e:	48 85 c0             	test   %rax,%rax
ffffffff8020e861:	74 0c                	je     ffffffff8020e86f <_RME_Cpt_Del+0x2ea>
ffffffff8020e863:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020e86a:	e9 35 01 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
ffffffff8020e86f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e873:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020e877:	48 85 c0             	test   %rax,%rax
ffffffff8020e87a:	0f 95 c0             	setne  %al
ffffffff8020e87d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e880:	48 85 c0             	test   %rax,%rax
ffffffff8020e883:	74 44                	je     ffffffff8020e8c9 <_RME_Cpt_Del+0x344>
ffffffff8020e885:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020e889:	89 c0                	mov    %eax,%eax
ffffffff8020e88b:	48 85 c0             	test   %rax,%rax
ffffffff8020e88e:	0f 94 c0             	sete   %al
ffffffff8020e891:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e894:	48 85 c0             	test   %rax,%rax
ffffffff8020e897:	74 24                	je     ffffffff8020e8bd <_RME_Cpt_Del+0x338>
ffffffff8020e899:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020e8a0:	00 ff ff 
ffffffff8020e8a3:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8020e8a7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e8aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e8ae:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e8b2:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e8b5:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e8b8:	e8 a1 de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e8bd:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020e8c4:	e9 db 00 00 00       	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
    /* Is there any capability in this capability table? If yes, we cannot destroy it.
     * We will check every slot to make sure nothing is there. This is surely,
     * predictable but not so perfect. So, if the time of such operations is to be 
     * bounded, the user must control the maximum number of entries in the table
     * by configuring RME_CPT_ENTRY_MAX to a non-zero value. */
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
ffffffff8020e8c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e8cd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e8d1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Entry_Num=Cpt_Del->Entry_Num;
ffffffff8020e8d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e8d9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e8dd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e8e1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8020e8e8:	00 
ffffffff8020e8e9:	eb 4c                	jmp    ffffffff8020e937 <_RME_Cpt_Del+0x3b2>
    {
        if(Table[Count].Head.Type_Stat!=0U)
ffffffff8020e8eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e8ef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e8f3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e8f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e8fa:	48 01 d0             	add    %rdx,%rax
ffffffff8020e8fd:	48 8b 00             	mov    (%rax),%rax
ffffffff8020e900:	48 85 c0             	test   %rax,%rax
ffffffff8020e903:	74 2d                	je     ffffffff8020e932 <_RME_Cpt_Del+0x3ad>
        {
            RME_COV_MARKER();
            
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
ffffffff8020e905:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020e90c:	00 ff ff 
ffffffff8020e90f:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff8020e913:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e916:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e91a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e91e:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e921:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e924:	e8 35 de ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
            return RME_ERR_CPT_EXIST;
ffffffff8020e929:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020e930:	eb 72                	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>
    for(Count=0U;Count<Entry_Num;Count++)
ffffffff8020e932:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8020e937:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020e93b:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8020e93f:	72 aa                	jb     ffffffff8020e8eb <_RME_Cpt_Del+0x366>
            /* No action required */
        }
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
ffffffff8020e941:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e945:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020e949:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
ffffffff8020e94d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e951:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e955:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e959:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Cpt_Del,Type_Stat);
ffffffff8020e95d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020e961:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8020e965:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020e96a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020e96d:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e970:	e8 e9 dd ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020e975:	48 85 c0             	test   %rax,%rax
ffffffff8020e978:	0f 94 c0             	sete   %al
ffffffff8020e97b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e97e:	48 85 c0             	test   %rax,%rax
ffffffff8020e981:	74 09                	je     ffffffff8020e98c <_RME_Cpt_Del+0x407>
ffffffff8020e983:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020e98a:	eb 18                	jmp    ffffffff8020e9a4 <_RME_Cpt_Del+0x41f>

    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
ffffffff8020e98c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020e990:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020e994:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020e997:	48 89 c7             	mov    %rax,%rdi
ffffffff8020e99a:	e8 60 3d 00 00       	call   ffffffff802126ff <_RME_Kot_Erase>
    
    return 0;
ffffffff8020e99f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020e9a4:	c9                   	leave
ffffffff8020e9a5:	c3                   	ret

ffffffff8020e9a6 <_RME_Cpt_Frz>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Frz(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Frz,
                              rme_cid_t Cap_Frz)
{
ffffffff8020e9a6:	f3 0f 1e fa          	endbr64
ffffffff8020e9aa:	55                   	push   %rbp
ffffffff8020e9ab:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020e9ae:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8020e9b2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020e9b6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020e9ba:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Struct* Capobj_Frz;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
ffffffff8020e9be:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e9c2:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020e9c7:	48 85 c0             	test   %rax,%rax
ffffffff8020e9ca:	0f 85 98 00 00 00    	jne    ffffffff8020ea68 <_RME_Cpt_Frz+0xc2>
ffffffff8020e9d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020e9d4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020e9d8:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020e9dc:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020e9df:	0f 93 c0             	setae  %al
ffffffff8020e9e2:	0f b6 c0             	movzbl %al,%eax
ffffffff8020e9e5:	48 85 c0             	test   %rax,%rax
ffffffff8020e9e8:	74 0c                	je     ffffffff8020e9f6 <_RME_Cpt_Frz+0x50>
ffffffff8020e9ea:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020e9f1:	e9 e7 02 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
ffffffff8020e9f6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020e9fa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020e9fe:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ea05:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ea09:	48 01 d0             	add    %rdx,%rax
ffffffff8020ea0c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ea10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ea14:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ea17:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ea1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ea1f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ea23:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ea26:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ea2a:	0f 94 c0             	sete   %al
ffffffff8020ea2d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea30:	48 85 c0             	test   %rax,%rax
ffffffff8020ea33:	74 0c                	je     ffffffff8020ea41 <_RME_Cpt_Frz+0x9b>
ffffffff8020ea35:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ea3c:	e9 9c 02 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
ffffffff8020ea41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ea45:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ea49:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ea4d:	0f 95 c0             	setne  %al
ffffffff8020ea50:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea53:	48 85 c0             	test   %rax,%rax
ffffffff8020ea56:	0f 84 4c 01 00 00    	je     ffffffff8020eba8 <_RME_Cpt_Frz+0x202>
ffffffff8020ea5c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ea63:	e9 75 02 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
ffffffff8020ea68:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ea6c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ea70:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020ea77:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ea7b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ea7e:	0f 93 c0             	setae  %al
ffffffff8020ea81:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ea84:	48 85 c0             	test   %rax,%rax
ffffffff8020ea87:	74 0c                	je     ffffffff8020ea95 <_RME_Cpt_Frz+0xef>
ffffffff8020ea89:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ea90:	e9 48 02 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
ffffffff8020ea95:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ea99:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ea9d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eaa1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eaa4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020eaa8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020eaac:	48 01 d0             	add    %rdx,%rax
ffffffff8020eaaf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020eab3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eab7:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eaba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020eabe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eac2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eac6:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eac9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eacd:	0f 94 c0             	sete   %al
ffffffff8020ead0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ead3:	48 85 c0             	test   %rax,%rax
ffffffff8020ead6:	74 0c                	je     ffffffff8020eae4 <_RME_Cpt_Frz+0x13e>
ffffffff8020ead8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eadf:	e9 f9 01 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
ffffffff8020eae4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eae8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eaec:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eaf0:	0f 95 c0             	setne  %al
ffffffff8020eaf3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eaf6:	48 85 c0             	test   %rax,%rax
ffffffff8020eaf9:	74 0c                	je     ffffffff8020eb07 <_RME_Cpt_Frz+0x161>
ffffffff8020eafb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eb02:	e9 d6 01 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
ffffffff8020eb07:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eb0b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020eb10:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eb13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb17:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020eb1b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020eb1e:	0f 93 c0             	setae  %al
ffffffff8020eb21:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb24:	48 85 c0             	test   %rax,%rax
ffffffff8020eb27:	74 0c                	je     ffffffff8020eb35 <_RME_Cpt_Frz+0x18f>
ffffffff8020eb29:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020eb30:	e9 a8 01 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
ffffffff8020eb35:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eb39:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020eb3e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020eb42:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eb45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb49:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020eb4d:	48 01 d0             	add    %rdx,%rax
ffffffff8020eb50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020eb54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020eb58:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eb5b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020eb5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eb63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eb67:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eb6a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eb6e:	0f 94 c0             	sete   %al
ffffffff8020eb71:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb74:	48 85 c0             	test   %rax,%rax
ffffffff8020eb77:	74 0c                	je     ffffffff8020eb85 <_RME_Cpt_Frz+0x1df>
ffffffff8020eb79:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eb80:	e9 58 01 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
ffffffff8020eb85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020eb89:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eb8d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eb91:	0f 95 c0             	setne  %al
ffffffff8020eb94:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eb97:	48 85 c0             	test   %rax,%rax
ffffffff8020eb9a:	74 0c                	je     ffffffff8020eba8 <_RME_Cpt_Frz+0x202>
ffffffff8020eb9c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eba3:	e9 35 01 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
ffffffff8020eba8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ebac:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020ebb0:	83 e0 04             	and    $0x4,%eax
ffffffff8020ebb3:	48 85 c0             	test   %rax,%rax
ffffffff8020ebb6:	0f 94 c0             	sete   %al
ffffffff8020ebb9:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ebbc:	48 85 c0             	test   %rax,%rax
ffffffff8020ebbf:	74 0c                	je     ffffffff8020ebcd <_RME_Cpt_Frz+0x227>
ffffffff8020ebc1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020ebc8:	e9 10 01 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
ffffffff8020ebcd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ebd1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ebd5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020ebd9:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ebdc:	0f 93 c0             	setae  %al
ffffffff8020ebdf:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ebe2:	48 85 c0             	test   %rax,%rax
ffffffff8020ebe5:	74 0c                	je     ffffffff8020ebf3 <_RME_Cpt_Frz+0x24d>
ffffffff8020ebe7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ebee:	e9 ea 00 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
ffffffff8020ebf3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020ebf7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ebfb:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ebfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ec02:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ec06:	48 01 d0             	add    %rdx,%rax
ffffffff8020ec09:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* Check if anything is there. If nothing there, the Type_Stat must be 0. 
     * Need a read acquire barrier here to avoid stale reads below. */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
ffffffff8020ec0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec11:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ec14:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* See if there is a cap */
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
ffffffff8020ec18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ec1c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ec20:	48 85 c0             	test   %rax,%rax
ffffffff8020ec23:	75 0c                	jne    ffffffff8020ec31 <_RME_Cpt_Frz+0x28b>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_NULL;
ffffffff8020ec25:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020ec2c:	e9 ac 00 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* If this is a root capability, check if the reference count allows freezing */
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
ffffffff8020ec31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ec35:	89 c0                	mov    %eax,%eax
ffffffff8020ec37:	48 85 c0             	test   %rax,%rax
ffffffff8020ec3a:	75 19                	jne    ffffffff8020ec55 <_RME_Cpt_Frz+0x2af>
    {
        if(Capobj_Frz->Head.Root_Ref!=0U)
ffffffff8020ec3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec40:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020ec44:	48 85 c0             	test   %rax,%rax
ffffffff8020ec47:	74 0c                	je     ffffffff8020ec55 <_RME_Cpt_Frz+0x2af>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_REFCNT;
ffffffff8020ec49:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8020ec50:	e9 88 00 00 00       	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* The capability is already frozen - why do it again? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020ec55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ec59:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ec5d:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ec60:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ec64:	75 09                	jne    ffffffff8020ec6f <_RME_Cpt_Frz+0x2c9>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_FROZEN;
ffffffff8020ec66:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ec6d:	eb 6e                	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the slot is quiescent */
    if(RME_UNLIKELY(RME_CAP_QUIE(Capobj_Frz->Head.Timestamp)==0U))
ffffffff8020ec6f:	48 8b 15 8a b3 01 00 	mov    0x1b38a(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8020ec76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ec7a:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020ec7e:	48 29 c2             	sub    %rax,%rdx
ffffffff8020ec81:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020ec85:	0f 96 c0             	setbe  %al
ffffffff8020ec88:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ec8b:	48 98                	cltq
ffffffff8020ec8d:	48 85 c0             	test   %rax,%rax
ffffffff8020ec90:	74 09                	je     ffffffff8020ec9b <_RME_Cpt_Frz+0x2f5>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_QUIE;
ffffffff8020ec92:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020ec99:	eb 42                	jmp    ffffffff8020ecdd <_RME_Cpt_Frz+0x337>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Update the timestamp */
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP();
ffffffff8020ec9b:	48 8b 15 5e b3 01 00 	mov    0x1b35e(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8020eca2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020eca6:	48 89 50 20          	mov    %rdx,0x20(%rax)
    
    /* Finally, freeze it. We do not report error here because if we CASFAIL someone must have helped us */
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
ffffffff8020ecaa:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8020ecb1:	00 ff ff 
ffffffff8020ecb4:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8020ecb8:	48 ba 00 00 00 00 02 	movabs $0x200000000,%rdx
ffffffff8020ecbf:	00 00 00 
ffffffff8020ecc2:	48 09 c2             	or     %rax,%rdx
ffffffff8020ecc5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ecc9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020eccd:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020ecd0:	48 89 c7             	mov    %rax,%rdi
ffffffff8020ecd3:	e8 86 da ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
                  RME_CAP_TYPE_STAT(RME_CAP_TYPE(Type_Stat),
                                    RME_CAP_STAT_FROZEN,
                                    RME_CAP_ATTR(Type_Stat)));

    return 0;
ffffffff8020ecd8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020ecdd:	c9                   	leave
ffffffff8020ecde:	c3                   	ret

ffffffff8020ecdf <_RME_Cpt_Add>:
                              rme_cid_t Cap_Dst, 
                              rme_cid_t Cap_Cpt_Src,
                              rme_cid_t Cap_Src,
                              rme_ptr_t Flag,
                              rme_ptr_t Ext_Flag)
{
ffffffff8020ecdf:	f3 0f 1e fa          	endbr64
ffffffff8020ece3:	55                   	push   %rbp
ffffffff8020ece4:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020ece7:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff8020eceb:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff8020ecef:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff8020ecf3:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8020ecf7:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff8020ecfb:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff8020ecff:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Kom_Flag;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
ffffffff8020ed03:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed07:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020ed0c:	48 85 c0             	test   %rax,%rax
ffffffff8020ed0f:	0f 85 98 00 00 00    	jne    ffffffff8020edad <_RME_Cpt_Add+0xce>
ffffffff8020ed15:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ed19:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ed1d:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8020ed21:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ed24:	0f 93 c0             	setae  %al
ffffffff8020ed27:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed2a:	48 85 c0             	test   %rax,%rax
ffffffff8020ed2d:	74 0c                	je     ffffffff8020ed3b <_RME_Cpt_Add+0x5c>
ffffffff8020ed2f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ed36:	e9 d8 08 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020ed3b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ed3f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ed43:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed46:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ed4a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ed4e:	48 01 d0             	add    %rdx,%rax
ffffffff8020ed51:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ed55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ed59:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ed5c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ed60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ed64:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ed68:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ed6b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ed6f:	0f 94 c0             	sete   %al
ffffffff8020ed72:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed75:	48 85 c0             	test   %rax,%rax
ffffffff8020ed78:	74 0c                	je     ffffffff8020ed86 <_RME_Cpt_Add+0xa7>
ffffffff8020ed7a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ed81:	e9 8d 08 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020ed86:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ed8a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ed8e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ed92:	0f 95 c0             	setne  %al
ffffffff8020ed95:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ed98:	48 85 c0             	test   %rax,%rax
ffffffff8020ed9b:	0f 84 4c 01 00 00    	je     ffffffff8020eeed <_RME_Cpt_Add+0x20e>
ffffffff8020eda1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eda8:	e9 66 08 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020edad:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020edb1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020edb5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020edb8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020edbc:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020edc0:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020edc3:	0f 93 c0             	setae  %al
ffffffff8020edc6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020edc9:	48 85 c0             	test   %rax,%rax
ffffffff8020edcc:	74 0c                	je     ffffffff8020edda <_RME_Cpt_Add+0xfb>
ffffffff8020edce:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020edd5:	e9 39 08 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020edda:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020edde:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ede2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ede6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ede9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020eded:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020edf1:	48 01 d0             	add    %rdx,%rax
ffffffff8020edf4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020edf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020edfc:	48 8b 00             	mov    (%rax),%rax
ffffffff8020edff:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ee03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ee07:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ee0b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ee0e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ee12:	0f 94 c0             	sete   %al
ffffffff8020ee15:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee18:	48 85 c0             	test   %rax,%rax
ffffffff8020ee1b:	74 0c                	je     ffffffff8020ee29 <_RME_Cpt_Add+0x14a>
ffffffff8020ee1d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ee24:	e9 ea 07 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020ee29:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ee2d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ee31:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ee35:	0f 95 c0             	setne  %al
ffffffff8020ee38:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee3b:	48 85 c0             	test   %rax,%rax
ffffffff8020ee3e:	74 0c                	je     ffffffff8020ee4c <_RME_Cpt_Add+0x16d>
ffffffff8020ee40:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ee47:	e9 c7 07 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020ee4c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ee50:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ee55:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee5c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ee60:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ee63:	0f 93 c0             	setae  %al
ffffffff8020ee66:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ee69:	48 85 c0             	test   %rax,%rax
ffffffff8020ee6c:	74 0c                	je     ffffffff8020ee7a <_RME_Cpt_Add+0x19b>
ffffffff8020ee6e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ee75:	e9 99 07 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020ee7a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8020ee7e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ee83:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ee87:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee8e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ee92:	48 01 d0             	add    %rdx,%rax
ffffffff8020ee95:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ee99:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ee9d:	48 8b 00             	mov    (%rax),%rax
ffffffff8020eea0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020eea4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eea8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eeac:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eeaf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020eeb3:	0f 94 c0             	sete   %al
ffffffff8020eeb6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eeb9:	48 85 c0             	test   %rax,%rax
ffffffff8020eebc:	74 0c                	je     ffffffff8020eeca <_RME_Cpt_Add+0x1eb>
ffffffff8020eebe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020eec5:	e9 49 07 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020eeca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eece:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020eed2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020eed6:	0f 95 c0             	setne  %al
ffffffff8020eed9:	0f b6 c0             	movzbl %al,%eax
ffffffff8020eedc:	48 85 c0             	test   %rax,%rax
ffffffff8020eedf:	74 0c                	je     ffffffff8020eeed <_RME_Cpt_Add+0x20e>
ffffffff8020eee1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020eee8:	e9 26 07 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
                   struct RME_Cap_Cpt*,Cpt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
ffffffff8020eeed:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020eef1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020eef6:	48 85 c0             	test   %rax,%rax
ffffffff8020eef9:	0f 85 98 00 00 00    	jne    ffffffff8020ef97 <_RME_Cpt_Add+0x2b8>
ffffffff8020eeff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ef03:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ef07:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff8020ef0b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ef0e:	0f 93 c0             	setae  %al
ffffffff8020ef11:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef14:	48 85 c0             	test   %rax,%rax
ffffffff8020ef17:	74 0c                	je     ffffffff8020ef25 <_RME_Cpt_Add+0x246>
ffffffff8020ef19:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ef20:	e9 ee 06 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020ef25:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ef29:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ef2d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ef30:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020ef34:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ef38:	48 01 d0             	add    %rdx,%rax
ffffffff8020ef3b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ef3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ef43:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ef46:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020ef4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ef4e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ef52:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ef55:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ef59:	0f 94 c0             	sete   %al
ffffffff8020ef5c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef5f:	48 85 c0             	test   %rax,%rax
ffffffff8020ef62:	74 0c                	je     ffffffff8020ef70 <_RME_Cpt_Add+0x291>
ffffffff8020ef64:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ef6b:	e9 a3 06 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020ef70:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ef74:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ef78:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ef7c:	0f 95 c0             	setne  %al
ffffffff8020ef7f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ef82:	48 85 c0             	test   %rax,%rax
ffffffff8020ef85:	0f 84 4c 01 00 00    	je     ffffffff8020f0d7 <_RME_Cpt_Add+0x3f8>
ffffffff8020ef8b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ef92:	e9 7c 06 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020ef97:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020ef9b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020ef9f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020efa2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020efa6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020efaa:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020efad:	0f 93 c0             	setae  %al
ffffffff8020efb0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020efb3:	48 85 c0             	test   %rax,%rax
ffffffff8020efb6:	74 0c                	je     ffffffff8020efc4 <_RME_Cpt_Add+0x2e5>
ffffffff8020efb8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020efbf:	e9 4f 06 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020efc4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020efc8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020efcc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020efd0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020efd3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8020efd7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020efdb:	48 01 d0             	add    %rdx,%rax
ffffffff8020efde:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020efe2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020efe6:	48 8b 00             	mov    (%rax),%rax
ffffffff8020efe9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020efed:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020eff1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eff5:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020eff8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020effc:	0f 94 c0             	sete   %al
ffffffff8020efff:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f002:	48 85 c0             	test   %rax,%rax
ffffffff8020f005:	74 0c                	je     ffffffff8020f013 <_RME_Cpt_Add+0x334>
ffffffff8020f007:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f00e:	e9 00 06 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020f013:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f017:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f01b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f01f:	0f 95 c0             	setne  %al
ffffffff8020f022:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f025:	48 85 c0             	test   %rax,%rax
ffffffff8020f028:	74 0c                	je     ffffffff8020f036 <_RME_Cpt_Add+0x357>
ffffffff8020f02a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f031:	e9 dd 05 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020f036:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020f03a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f03f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f042:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f046:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f04a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f04d:	0f 93 c0             	setae  %al
ffffffff8020f050:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f053:	48 85 c0             	test   %rax,%rax
ffffffff8020f056:	74 0c                	je     ffffffff8020f064 <_RME_Cpt_Add+0x385>
ffffffff8020f058:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f05f:	e9 af 05 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020f064:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8020f068:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f06d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f071:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f074:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f078:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f07c:	48 01 d0             	add    %rdx,%rax
ffffffff8020f07f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f083:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f087:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f08a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8020f08e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f092:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f096:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f099:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f09d:	0f 94 c0             	sete   %al
ffffffff8020f0a0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0a3:	48 85 c0             	test   %rax,%rax
ffffffff8020f0a6:	74 0c                	je     ffffffff8020f0b4 <_RME_Cpt_Add+0x3d5>
ffffffff8020f0a8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f0af:	e9 5f 05 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020f0b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f0b8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f0bc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f0c0:	0f 95 c0             	setne  %al
ffffffff8020f0c3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0c6:	48 85 c0             	test   %rax,%rax
ffffffff8020f0c9:	74 0c                	je     ffffffff8020f0d7 <_RME_Cpt_Add+0x3f8>
ffffffff8020f0cb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f0d2:	e9 3c 05 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
                   struct RME_Cap_Cpt*,Cpt_Src,Type_Stat);
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
ffffffff8020f0d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f0db:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f0df:	83 e0 10             	and    $0x10,%eax
ffffffff8020f0e2:	48 85 c0             	test   %rax,%rax
ffffffff8020f0e5:	0f 94 c0             	sete   %al
ffffffff8020f0e8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f0eb:	48 85 c0             	test   %rax,%rax
ffffffff8020f0ee:	74 0c                	je     ffffffff8020f0fc <_RME_Cpt_Add+0x41d>
ffffffff8020f0f0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f0f7:	e9 17 05 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
ffffffff8020f0fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f100:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f104:	83 e0 08             	and    $0x8,%eax
ffffffff8020f107:	48 85 c0             	test   %rax,%rax
ffffffff8020f10a:	0f 94 c0             	sete   %al
ffffffff8020f10d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f110:	48 85 c0             	test   %rax,%rax
ffffffff8020f113:	74 0c                	je     ffffffff8020f121 <_RME_Cpt_Add+0x442>
ffffffff8020f115:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f11c:	e9 f2 04 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
    
    /* Get the cap slots */
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
ffffffff8020f121:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f125:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f129:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8020f12d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f130:	0f 93 c0             	setae  %al
ffffffff8020f133:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f136:	48 85 c0             	test   %rax,%rax
ffffffff8020f139:	74 0c                	je     ffffffff8020f147 <_RME_Cpt_Add+0x468>
ffffffff8020f13b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f142:	e9 cc 04 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020f147:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8020f14b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f14f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f152:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f156:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f15a:	48 01 d0             	add    %rdx,%rax
ffffffff8020f15d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
ffffffff8020f161:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f165:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f169:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff8020f16d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f170:	0f 93 c0             	setae  %al
ffffffff8020f173:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f176:	48 85 c0             	test   %rax,%rax
ffffffff8020f179:	74 0c                	je     ffffffff8020f187 <_RME_Cpt_Add+0x4a8>
ffffffff8020f17b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f182:	e9 8c 04 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020f187:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8020f18b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f18f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f192:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f196:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f19a:	48 01 d0             	add    %rdx,%rax
ffffffff8020f19d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    
    /* Atomic read - Read barrier to avoid premature checking of the rest */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
ffffffff8020f1a1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f1a5:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f1a8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Is the source cap frozen? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
ffffffff8020f1ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f1b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f1b4:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f1b7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f1bb:	75 0c                	jne    ffffffff8020f1c9 <_RME_Cpt_Add+0x4ea>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_FROZEN;
ffffffff8020f1bd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f1c4:	e9 4a 04 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Does the source cap exist at all? */
    if(Type_Stat==0U)
ffffffff8020f1c9:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8020f1ce:	75 0c                	jne    ffffffff8020f1dc <_RME_Cpt_Add+0x4fd>
    {
        RME_COV_MARKER();
        
        return RME_ERR_CPT_NULL;
ffffffff8020f1d0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f1d7:	e9 37 04 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Dewarn some compilers that complain about uninitialized variables */
    Kom_Begin=0U;
ffffffff8020f1dc:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8020f1e3:	00 
    Kom_End=0U;
ffffffff8020f1e4:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8020f1eb:	00 
    Kom_Flag=0U;
ffffffff8020f1ec:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8020f1f3:	00 
    
    /* Is there a flag conflict? - For page tables, we have different checking mechanisms */
    Src_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020f1f4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f1f8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f1fc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    if(Src_Type==RME_CAP_TYPE_PGT)
ffffffff8020f200:	48 83 7d b8 04       	cmpq   $0x4,-0x48(%rbp)
ffffffff8020f205:	0f 85 c5 00 00 00    	jne    ffffffff8020f2d0 <_RME_Cpt_Add+0x5f1>
    {
        RME_COV_MARKER();
        
        /* Check the delegation range */
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020f20b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f20f:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f213:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f216:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f21a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f21e:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f222:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f225:	73 0c                	jae    ffffffff8020f233 <_RME_Cpt_Add+0x554>
        {
            RME_COV_MARKER();
        
            return RME_ERR_CPT_FLAG;
ffffffff8020f227:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f22e:	e9 e0 03 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020f233:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f237:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f23b:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f240:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f243:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f247:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f24b:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f24f:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f254:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f257:	73 0c                	jae    ffffffff8020f265 <_RME_Cpt_Add+0x586>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f259:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f260:	e9 ae 03 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
ffffffff8020f265:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f269:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8020f26d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f270:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f274:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff8020f278:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8020f27d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f280:	73 0c                	jae    ffffffff8020f28e <_RME_Cpt_Add+0x5af>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f282:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f289:	e9 85 03 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the flags - if there are extra ones, or all zero */
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
ffffffff8020f28e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f292:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f295:	48 85 c0             	test   %rax,%rax
ffffffff8020f298:	75 0c                	jne    ffffffff8020f2a6 <_RME_Cpt_Add+0x5c7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f29a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f2a1:	e9 6d 03 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f2a6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f2aa:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f2ae:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f2b1:	48 f7 d0             	not    %rax
ffffffff8020f2b4:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f2b8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f2bb:	48 85 c0             	test   %rax,%rax
ffffffff8020f2be:	0f 84 c2 01 00 00    	je     ffffffff8020f486 <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f2c4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f2cb:	e9 43 03 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KFN)
ffffffff8020f2d0:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
ffffffff8020f2d5:	75 6c                	jne    ffffffff8020f343 <_RME_Cpt_Add+0x664>
    {
        RME_COV_MARKER();
        
        /* Kernel funcrions only have ranges, no flags - check the delegation range */
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
ffffffff8020f2d7:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f2db:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2df:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f2e2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f2e6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f2ea:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2ee:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f2f1:	73 0c                	jae    ffffffff8020f2ff <_RME_Cpt_Add+0x620>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f2f3:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f2fa:	e9 14 03 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
ffffffff8020f2ff:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f303:	89 c2                	mov    %eax,%edx
ffffffff8020f305:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f309:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f30d:	89 c0                	mov    %eax,%eax
ffffffff8020f30f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f312:	73 0c                	jae    ffffffff8020f320 <_RME_Cpt_Add+0x641>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f314:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f31b:	e9 f3 02 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
ffffffff8020f320:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f324:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f328:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8020f32c:	89 d2                	mov    %edx,%edx
ffffffff8020f32e:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020f331:	0f 83 4f 01 00 00    	jae    ffffffff8020f486 <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f337:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f33e:	e9 d0 02 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020f343:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f348:	0f 85 05 01 00 00    	jne    ffffffff8020f453 <_RME_Cpt_Add+0x774>
    {
        RME_COV_MARKER();
        
        /* The Kom_End here is exclusive */
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
ffffffff8020f34e:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8020f352:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020f356:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
ffffffff8020f35a:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff8020f361:	ff ff ff 
ffffffff8020f364:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f368:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020f36c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020f370:	48 83 e2 c0          	and    $0xffffffffffffffc0,%rdx
ffffffff8020f374:	48 09 d0             	or     %rdx,%rax
ffffffff8020f377:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        Kom_Flag=RME_KOM_FLAG_KOM(Ext_Flag);
ffffffff8020f37b:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8020f382:	00 
        /* Round start and end to the slot boundary, if we are using slots bigger than 64 bytes */
#if(RME_KOM_SLOT_ORDER>6U)
        Kom_End=RME_ROUND_DOWN(Kom_End,RME_KOM_SLOT_ORDER);
        Kom_Begin=RME_ROUND_UP(Kom_Begin,RME_KOM_SLOT_ORDER);
#endif
        if(Kom_End<=Kom_Begin)
ffffffff8020f383:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f387:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f38b:	72 0c                	jb     ffffffff8020f399 <_RME_Cpt_Add+0x6ba>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f38d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f394:	e9 7a 02 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Convert relative addresses to absolute addresses and check for overflow */
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020f399:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f39d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3a1:	48 01 45 e8          	add    %rax,-0x18(%rbp)
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020f3a5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3a9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3ad:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f3b1:	73 0c                	jae    ffffffff8020f3bf <_RME_Cpt_Add+0x6e0>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3b3:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3ba:	e9 54 02 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
ffffffff8020f3bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3c3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3c7:	48 01 45 e0          	add    %rax,-0x20(%rbp)
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
ffffffff8020f3cb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3cf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3d3:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8020f3d7:	73 0c                	jae    ffffffff8020f3e5 <_RME_Cpt_Add+0x706>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3d9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3e0:	e9 2e 02 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Check the ranges of kernel memory */
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
ffffffff8020f3e5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f3e9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f3ed:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8020f3f1:	73 0c                	jae    ffffffff8020f3ff <_RME_Cpt_Add+0x720>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f3f3:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f3fa:	e9 14 02 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Internal encoding of 'end' is inclusive */
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
ffffffff8020f3ff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f403:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f407:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f40b:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8020f40f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f412:	73 0c                	jae    ffffffff8020f420 <_RME_Cpt_Add+0x741>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f414:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f41b:	e9 f3 01 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Kom_Flag==0U)
ffffffff8020f420:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8020f425:	75 0c                	jne    ffffffff8020f433 <_RME_Cpt_Add+0x754>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f427:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f42e:	e9 e0 01 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if((Kom_Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f433:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f437:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f43b:	48 f7 d0             	not    %rax
ffffffff8020f43e:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff8020f442:	48 85 c0             	test   %rax,%rax
ffffffff8020f445:	74 3f                	je     ffffffff8020f486 <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f447:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f44e:	e9 c0 01 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
    else
    {
        RME_COV_MARKER();
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Flag==0U)
ffffffff8020f453:	48 83 7d 80 00       	cmpq   $0x0,-0x80(%rbp)
ffffffff8020f458:	75 0c                	jne    ffffffff8020f466 <_RME_Cpt_Add+0x787>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f45a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f461:	e9 ad 01 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        else
        {
            RME_COV_MARKER();
            /* No action required */
        }
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
ffffffff8020f466:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f46a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f46e:	48 f7 d0             	not    %rax
ffffffff8020f471:	48 23 45 80          	and    -0x80(%rbp),%rax
ffffffff8020f475:	48 85 c0             	test   %rax,%rax
ffffffff8020f478:	74 0c                	je     ffffffff8020f486 <_RME_Cpt_Add+0x7a7>
        {
            RME_COV_MARKER();
            
            return RME_ERR_CPT_FLAG;
ffffffff8020f47a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f481:	e9 8d 01 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
            /* No action required */
        }
    }
    
    /* Is the destination slot unoccupied? */
    if(Capobj_Dst->Head.Type_Stat!=0U)
ffffffff8020f486:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f48a:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f48d:	48 85 c0             	test   %rax,%rax
ffffffff8020f490:	74 0c                	je     ffffffff8020f49e <_RME_Cpt_Add+0x7bf>
    {
        RME_COV_MARKER();
            
        return RME_ERR_CPT_EXIST;
ffffffff8020f492:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f499:	e9 75 01 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Try to take the empty slot */
    RME_CPT_OCCUPY(Capobj_Dst);
ffffffff8020f49e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4a2:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020f4a9:	00 00 00 
ffffffff8020f4ac:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020f4b1:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f4b4:	e8 a5 d2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f4b9:	48 85 c0             	test   %rax,%rax
ffffffff8020f4bc:	0f 94 c0             	sete   %al
ffffffff8020f4bf:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f4c2:	48 85 c0             	test   %rax,%rax
ffffffff8020f4c5:	74 0c                	je     ffffffff8020f4d3 <_RME_Cpt_Add+0x7f4>
ffffffff8020f4c7:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020f4ce:	e9 40 01 00 00       	jmp    ffffffff8020f613 <_RME_Cpt_Add+0x934>
ffffffff8020f4d3:	48 8b 15 26 ab 01 00 	mov    0x1ab26(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8020f4da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4de:	48 89 50 20          	mov    %rdx,0x20(%rax)
    
    /* All done, we replicate the cap with flags */
    if(Src_Type==RME_CAP_TYPE_KOM)
ffffffff8020f4e2:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f4e7:	75 6a                	jne    ffffffff8020f553 <_RME_Cpt_Add+0x874>
    {
        RME_COV_MARKER();
            
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Kom_Flag);
ffffffff8020f4e9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f4ed:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8020f4f1:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8020f4f5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f4f9:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8020f4fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f501:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff8020f505:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f509:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f50d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f511:	48 89 50 28          	mov    %rdx,0x28(%rax)
ffffffff8020f515:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f519:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f51d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f521:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f525:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f529:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff8020f52d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f531:	48 89 50 38          	mov    %rdx,0x38(%rax)
        /* Write absolute range information for kernel memory caps */
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->Begin=Kom_Begin;
ffffffff8020f535:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f539:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8020f53d:	48 89 50 28          	mov    %rdx,0x28(%rax)
        /* The Kom_End encoded inclusively to avoid overflow at max address */
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->End=Kom_End-1U;
ffffffff8020f541:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020f545:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8020f549:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f54d:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f551:	eb 4c                	jmp    ffffffff8020f59f <_RME_Cpt_Add+0x8c0>
    }
    else
    {
        RME_COV_MARKER();
        
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
ffffffff8020f553:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f557:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff8020f55b:	48 89 50 10          	mov    %rdx,0x10(%rax)
ffffffff8020f55f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f563:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8020f567:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f56b:	48 89 50 18          	mov    %rdx,0x18(%rax)
ffffffff8020f56f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f573:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8020f577:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f57b:	48 89 50 28          	mov    %rdx,0x28(%rax)
ffffffff8020f57f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f583:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8020f587:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f58b:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff8020f58f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f593:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff8020f597:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f59b:	48 89 50 38          	mov    %rdx,0x38(%rax)
     * their parent, nor will they update the parent's reference count. This
     * design decision comes from the fact that these two capability types are
     * always created on boot and delegated everywhere, and they don't actually
     * have an object. If we use refcnt on these, we may cause scalability 
     * issues. The parent cap can't be deleted anyway, so this is fine. */
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
ffffffff8020f59f:	48 83 7d b8 02       	cmpq   $0x2,-0x48(%rbp)
ffffffff8020f5a4:	74 46                	je     ffffffff8020f5ec <_RME_Cpt_Add+0x90d>
ffffffff8020f5a6:	48 83 7d b8 01       	cmpq   $0x1,-0x48(%rbp)
ffffffff8020f5ab:	74 3f                	je     ffffffff8020f5ec <_RME_Cpt_Add+0x90d>
    {
        RME_COV_MARKER();
        
        /* Register root */
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
ffffffff8020f5ad:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f5b1:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f5b4:	89 c0                	mov    %eax,%eax
ffffffff8020f5b6:	48 85 c0             	test   %rax,%rax
ffffffff8020f5b9:	74 0a                	je     ffffffff8020f5c5 <_RME_Cpt_Add+0x8e6>
ffffffff8020f5bb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f5bf:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f5c3:	eb 04                	jmp    ffffffff8020f5c9 <_RME_Cpt_Add+0x8ea>
ffffffff8020f5c5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f5c9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020f5cd:	48 89 42 08          	mov    %rax,0x8(%rdx)
    
        /* Increase the parent's refcnt - never overflows, guaranteed by field size */
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
ffffffff8020f5d1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5d5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f5d9:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f5dd:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8020f5e2:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f5e5:	e8 a9 d1 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8020f5ea:	eb 0c                	jmp    ffffffff8020f5f8 <_RME_Cpt_Add+0x919>
    else
    {
        RME_COV_MARKER();
        
        /* No root for KOM and KFN */
        Capobj_Dst->Head.Root_Ref=0U;
ffffffff8020f5ec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f5f0:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020f5f7:	00 
    }

    /* Establish cap */
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
ffffffff8020f5f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f5fc:	48 c1 e0 30          	shl    $0x30,%rax
ffffffff8020f600:	48 83 c8 01          	or     $0x1,%rax
ffffffff8020f604:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f607:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f60b:	48 89 10             	mov    %rdx,(%rax)
                      RME_CAP_TYPE_STAT(Src_Type,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_LEAF));

    return 0;
ffffffff8020f60e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020f613:	c9                   	leave
ffffffff8020f614:	c3                   	ret

ffffffff8020f615 <_RME_Cpt_Rem>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Cpt_Rem(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt_Rem,
                              rme_cid_t Cap_Rem)
{
ffffffff8020f615:	f3 0f 1e fa          	endbr64
ffffffff8020f619:	55                   	push   %rbp
ffffffff8020f61a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020f61d:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8020f621:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8020f625:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8020f629:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    rme_ptr_t Rem_Type;
    /* This is used for removal */
    volatile struct RME_Cap_Struct* Capobj_Root;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
ffffffff8020f62d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f631:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020f636:	48 85 c0             	test   %rax,%rax
ffffffff8020f639:	0f 85 98 00 00 00    	jne    ffffffff8020f6d7 <_RME_Cpt_Rem+0xc2>
ffffffff8020f63f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f643:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f647:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020f64b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f64e:	0f 93 c0             	setae  %al
ffffffff8020f651:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f654:	48 85 c0             	test   %rax,%rax
ffffffff8020f657:	74 0c                	je     ffffffff8020f665 <_RME_Cpt_Rem+0x50>
ffffffff8020f659:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f660:	e9 39 03 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f665:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f669:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f66d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f670:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f674:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f678:	48 01 d0             	add    %rdx,%rax
ffffffff8020f67b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f67f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f683:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f686:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f68a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f68e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f692:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f695:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f699:	0f 94 c0             	sete   %al
ffffffff8020f69c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f69f:	48 85 c0             	test   %rax,%rax
ffffffff8020f6a2:	74 0c                	je     ffffffff8020f6b0 <_RME_Cpt_Rem+0x9b>
ffffffff8020f6a4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f6ab:	e9 ee 02 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f6b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f6b4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f6b8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f6bc:	0f 95 c0             	setne  %al
ffffffff8020f6bf:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f6c2:	48 85 c0             	test   %rax,%rax
ffffffff8020f6c5:	0f 84 4c 01 00 00    	je     ffffffff8020f817 <_RME_Cpt_Rem+0x202>
ffffffff8020f6cb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f6d2:	e9 c7 02 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f6d7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f6db:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f6df:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f6e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f6e6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f6ea:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f6ed:	0f 93 c0             	setae  %al
ffffffff8020f6f0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f6f3:	48 85 c0             	test   %rax,%rax
ffffffff8020f6f6:	74 0c                	je     ffffffff8020f704 <_RME_Cpt_Rem+0xef>
ffffffff8020f6f8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f6ff:	e9 9a 02 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f704:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f708:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020f70c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f710:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f713:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020f717:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f71b:	48 01 d0             	add    %rdx,%rax
ffffffff8020f71e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f722:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f726:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f729:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f72d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f731:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f735:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f738:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f73c:	0f 94 c0             	sete   %al
ffffffff8020f73f:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f742:	48 85 c0             	test   %rax,%rax
ffffffff8020f745:	74 0c                	je     ffffffff8020f753 <_RME_Cpt_Rem+0x13e>
ffffffff8020f747:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f74e:	e9 4b 02 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f753:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f757:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f75b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f75f:	0f 95 c0             	setne  %al
ffffffff8020f762:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f765:	48 85 c0             	test   %rax,%rax
ffffffff8020f768:	74 0c                	je     ffffffff8020f776 <_RME_Cpt_Rem+0x161>
ffffffff8020f76a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f771:	e9 28 02 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f776:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f77a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f77f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f782:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f786:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f78a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f78d:	0f 93 c0             	setae  %al
ffffffff8020f790:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f793:	48 85 c0             	test   %rax,%rax
ffffffff8020f796:	74 0c                	je     ffffffff8020f7a4 <_RME_Cpt_Rem+0x18f>
ffffffff8020f798:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f79f:	e9 fa 01 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f7a4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020f7a8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020f7ad:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f7b1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f7b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f7b8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f7bc:	48 01 d0             	add    %rdx,%rax
ffffffff8020f7bf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020f7c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f7c7:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f7ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f7ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f7d2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f7d6:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f7d9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f7dd:	0f 94 c0             	sete   %al
ffffffff8020f7e0:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f7e3:	48 85 c0             	test   %rax,%rax
ffffffff8020f7e6:	74 0c                	je     ffffffff8020f7f4 <_RME_Cpt_Rem+0x1df>
ffffffff8020f7e8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f7ef:	e9 aa 01 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f7f4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f7f8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f7fc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020f800:	0f 95 c0             	setne  %al
ffffffff8020f803:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f806:	48 85 c0             	test   %rax,%rax
ffffffff8020f809:	74 0c                	je     ffffffff8020f817 <_RME_Cpt_Rem+0x202>
ffffffff8020f80b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020f812:	e9 87 01 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
ffffffff8020f817:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f81b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020f81f:	83 e0 20             	and    $0x20,%eax
ffffffff8020f822:	48 85 c0             	test   %rax,%rax
ffffffff8020f825:	0f 94 c0             	sete   %al
ffffffff8020f828:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f82b:	48 85 c0             	test   %rax,%rax
ffffffff8020f82e:	74 0c                	je     ffffffff8020f83c <_RME_Cpt_Rem+0x227>
ffffffff8020f830:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020f837:	e9 62 01 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
ffffffff8020f83c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f840:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f844:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8020f848:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020f84b:	0f 93 c0             	setae  %al
ffffffff8020f84e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f851:	48 85 c0             	test   %rax,%rax
ffffffff8020f854:	74 0c                	je     ffffffff8020f862 <_RME_Cpt_Rem+0x24d>
ffffffff8020f856:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020f85d:	e9 3c 01 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f862:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020f866:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020f86a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f86d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020f871:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020f875:	48 01 d0             	add    %rdx,%rax
ffffffff8020f878:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Removal check */
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
ffffffff8020f87c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f880:	48 8b 00             	mov    (%rax),%rax
ffffffff8020f883:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020f887:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f88b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f88f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020f892:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020f896:	0f 95 c0             	setne  %al
ffffffff8020f899:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f89c:	48 85 c0             	test   %rax,%rax
ffffffff8020f89f:	74 0c                	je     ffffffff8020f8ad <_RME_Cpt_Rem+0x298>
ffffffff8020f8a1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020f8a8:	e9 f1 00 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f8ad:	48 8b 15 4c a7 01 00 	mov    0x1a74c(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8020f8b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f8b8:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8020f8bc:	48 29 c2             	sub    %rax,%rdx
ffffffff8020f8bf:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8020f8c3:	0f 96 c0             	setbe  %al
ffffffff8020f8c6:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f8c9:	48 98                	cltq
ffffffff8020f8cb:	48 85 c0             	test   %rax,%rax
ffffffff8020f8ce:	74 0c                	je     ffffffff8020f8dc <_RME_Cpt_Rem+0x2c7>
ffffffff8020f8d0:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8020f8d7:	e9 c2 00 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
ffffffff8020f8dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f8e0:	89 c0                	mov    %eax,%eax
ffffffff8020f8e2:	48 85 c0             	test   %rax,%rax
ffffffff8020f8e5:	0f 94 c0             	sete   %al
ffffffff8020f8e8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f8eb:	48 85 c0             	test   %rax,%rax
ffffffff8020f8ee:	74 0c                	je     ffffffff8020f8fc <_RME_Cpt_Rem+0x2e7>
ffffffff8020f8f0:	48 c7 c0 f6 ff ff ff 	mov    $0xfffffffffffffff6,%rax
ffffffff8020f8f7:	e9 a2 00 00 00       	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
    
    /* If we are KFN or KOM, we don't care about parent or refcnt */
    Rem_Type=RME_CAP_TYPE(Type_Stat);
ffffffff8020f8fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020f900:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020f904:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
ffffffff8020f908:	48 83 7d e0 02       	cmpq   $0x2,-0x20(%rbp)
ffffffff8020f90d:	74 5b                	je     ffffffff8020f96a <_RME_Cpt_Rem+0x355>
ffffffff8020f90f:	48 83 7d e0 01       	cmpq   $0x1,-0x20(%rbp)
ffffffff8020f914:	74 54                	je     ffffffff8020f96a <_RME_Cpt_Rem+0x355>
    {
        RME_COV_MARKER();
        
        /* Remember this for refcnt operations */
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
ffffffff8020f916:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f91a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8020f91e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8020f922:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f926:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020f92a:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020f92f:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f932:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f935:	e8 24 ce ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f93a:	48 85 c0             	test   %rax,%rax
ffffffff8020f93d:	0f 94 c0             	sete   %al
ffffffff8020f940:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f943:	48 85 c0             	test   %rax,%rax
ffffffff8020f946:	74 09                	je     ffffffff8020f951 <_RME_Cpt_Rem+0x33c>
ffffffff8020f948:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f94f:	eb 4d                	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>

        /* Check done, decrease its parent's refcnt. This must be done at last */
        RME_FETCH_ADD(&(Capobj_Root->Head.Root_Ref),-1);
ffffffff8020f951:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f955:	48 83 c0 08          	add    $0x8,%rax
ffffffff8020f959:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8020f960:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f963:	e8 2b ce ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff8020f968:	eb 2f                	jmp    ffffffff8020f999 <_RME_Cpt_Rem+0x384>
    else
    {
        RME_COV_MARKER();

        /* Helping also applies here */
        RME_CAP_DELETE(Capobj_Rem,Type_Stat);
ffffffff8020f96a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020f96e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8020f972:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8020f977:	48 89 ce             	mov    %rcx,%rsi
ffffffff8020f97a:	48 89 c7             	mov    %rax,%rdi
ffffffff8020f97d:	e8 dc cd ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020f982:	48 85 c0             	test   %rax,%rax
ffffffff8020f985:	0f 94 c0             	sete   %al
ffffffff8020f988:	0f b6 c0             	movzbl %al,%eax
ffffffff8020f98b:	48 85 c0             	test   %rax,%rax
ffffffff8020f98e:	74 09                	je     ffffffff8020f999 <_RME_Cpt_Rem+0x384>
ffffffff8020f990:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8020f997:	eb 05                	jmp    ffffffff8020f99e <_RME_Cpt_Rem+0x389>
    }
    
    return 0;
ffffffff8020f999:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020f99e:	c9                   	leave
ffffffff8020f99f:	c3                   	ret

ffffffff8020f9a0 <_RME_Pgt_Boot_Crt>:
                            rme_ptr_t Vaddr,
                            rme_ptr_t Base,
                            rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order,
                            rme_ptr_t Num_Order)
{
ffffffff8020f9a0:	f3 0f 1e fa          	endbr64
ffffffff8020f9a4:	55                   	push   %rbp
ffffffff8020f9a5:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020f9a8:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020f9ac:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020f9b0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020f9b4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020f9b8:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020f9bc:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
ffffffff8020f9c0:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Table_Size;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff8020f9c4:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020f9c8:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020f9cc:	48 01 d0             	add    %rdx,%rax
ffffffff8020f9cf:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff8020f9d3:	76 0c                	jbe    ffffffff8020f9e1 <_RME_Pgt_Boot_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8020f9d5:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020f9dc:	e9 e6 03 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8020f9e1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020f9e5:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020f9ea:	48 85 c0             	test   %rax,%rax
ffffffff8020f9ed:	0f 85 98 00 00 00    	jne    ffffffff8020fa8b <_RME_Pgt_Boot_Crt+0xeb>
ffffffff8020f9f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020f9f7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020f9fb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020f9ff:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fa02:	0f 93 c0             	setae  %al
ffffffff8020fa05:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa08:	48 85 c0             	test   %rax,%rax
ffffffff8020fa0b:	74 0c                	je     ffffffff8020fa19 <_RME_Pgt_Boot_Crt+0x79>
ffffffff8020fa0d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fa14:	e9 ae 03 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
ffffffff8020fa19:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa1d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fa21:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fa24:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fa28:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fa2c:	48 01 d0             	add    %rdx,%rax
ffffffff8020fa2f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fa33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fa37:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fa3a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fa3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fa42:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fa46:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fa49:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fa4d:	0f 94 c0             	sete   %al
ffffffff8020fa50:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa53:	48 85 c0             	test   %rax,%rax
ffffffff8020fa56:	74 0c                	je     ffffffff8020fa64 <_RME_Pgt_Boot_Crt+0xc4>
ffffffff8020fa58:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fa5f:	e9 63 03 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
ffffffff8020fa64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fa68:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fa6c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fa70:	0f 95 c0             	setne  %al
ffffffff8020fa73:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fa76:	48 85 c0             	test   %rax,%rax
ffffffff8020fa79:	0f 84 4c 01 00 00    	je     ffffffff8020fbcb <_RME_Pgt_Boot_Crt+0x22b>
ffffffff8020fa7f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fa86:	e9 3c 03 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
ffffffff8020fa8b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fa8f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fa93:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fa96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fa9a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fa9e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020faa1:	0f 93 c0             	setae  %al
ffffffff8020faa4:	0f b6 c0             	movzbl %al,%eax
ffffffff8020faa7:	48 85 c0             	test   %rax,%rax
ffffffff8020faaa:	74 0c                	je     ffffffff8020fab8 <_RME_Pgt_Boot_Crt+0x118>
ffffffff8020faac:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fab3:	e9 0f 03 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
ffffffff8020fab8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fabc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fac0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fac4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fac7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020facb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020facf:	48 01 d0             	add    %rdx,%rax
ffffffff8020fad2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fad6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fada:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fadd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fae1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fae5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fae9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020faec:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020faf0:	0f 94 c0             	sete   %al
ffffffff8020faf3:	0f b6 c0             	movzbl %al,%eax
ffffffff8020faf6:	48 85 c0             	test   %rax,%rax
ffffffff8020faf9:	74 0c                	je     ffffffff8020fb07 <_RME_Pgt_Boot_Crt+0x167>
ffffffff8020fafb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fb02:	e9 c0 02 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
ffffffff8020fb07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fb0b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fb0f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fb13:	0f 95 c0             	setne  %al
ffffffff8020fb16:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb19:	48 85 c0             	test   %rax,%rax
ffffffff8020fb1c:	74 0c                	je     ffffffff8020fb2a <_RME_Pgt_Boot_Crt+0x18a>
ffffffff8020fb1e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fb25:	e9 9d 02 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
ffffffff8020fb2a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fb2e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fb33:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb3a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fb3e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fb41:	0f 93 c0             	setae  %al
ffffffff8020fb44:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb47:	48 85 c0             	test   %rax,%rax
ffffffff8020fb4a:	74 0c                	je     ffffffff8020fb58 <_RME_Pgt_Boot_Crt+0x1b8>
ffffffff8020fb4c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fb53:	e9 6f 02 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
ffffffff8020fb58:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fb5c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020fb61:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fb65:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb6c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fb70:	48 01 d0             	add    %rdx,%rax
ffffffff8020fb73:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fb77:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fb7b:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fb7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8020fb82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fb86:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fb8a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fb8d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fb91:	0f 94 c0             	sete   %al
ffffffff8020fb94:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fb97:	48 85 c0             	test   %rax,%rax
ffffffff8020fb9a:	74 0c                	je     ffffffff8020fba8 <_RME_Pgt_Boot_Crt+0x208>
ffffffff8020fb9c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fba3:	e9 1f 02 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
ffffffff8020fba8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020fbac:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fbb0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020fbb4:	0f 95 c0             	setne  %al
ffffffff8020fbb7:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fbba:	48 85 c0             	test   %rax,%rax
ffffffff8020fbbd:	74 0c                	je     ffffffff8020fbcb <_RME_Pgt_Boot_Crt+0x22b>
ffffffff8020fbbf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fbc6:	e9 fc 01 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8020fbcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fbcf:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8020fbd3:	83 e0 01             	and    $0x1,%eax
ffffffff8020fbd6:	48 85 c0             	test   %rax,%rax
ffffffff8020fbd9:	0f 94 c0             	sete   %al
ffffffff8020fbdc:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fbdf:	48 85 c0             	test   %rax,%rax
ffffffff8020fbe2:	74 0c                	je     ffffffff8020fbf0 <_RME_Pgt_Boot_Crt+0x250>
ffffffff8020fbe4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8020fbeb:	e9 d7 01 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
    
    /* Check if these parameters are feasible */
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)!=0)
ffffffff8020fbf0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8020fbf4:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
ffffffff8020fbf8:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8020fbfc:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
ffffffff8020fc00:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020fc04:	49 89 f8             	mov    %rdi,%r8
ffffffff8020fc07:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fc0a:	e8 e0 6c 01 00       	call   ffffffff802268ef <__RME_Pgt_Check>
ffffffff8020fc0f:	48 85 c0             	test   %rax,%rax
ffffffff8020fc12:	74 0c                	je     ffffffff8020fc20 <_RME_Pgt_Boot_Crt+0x280>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff8020fc14:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020fc1b:	e9 a7 01 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if the base address is properly aligned to the total order of the page table */
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff8020fc20:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020fc24:	89 c2                	mov    %eax,%edx
ffffffff8020fc26:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fc2a:	01 c2                	add    %eax,%edx
ffffffff8020fc2c:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff8020fc31:	29 d0                	sub    %edx,%eax
ffffffff8020fc33:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8020fc3a:	89 c1                	mov    %eax,%ecx
ffffffff8020fc3c:	48 d3 ea             	shr    %cl,%rdx
ffffffff8020fc3f:	48 89 d0             	mov    %rdx,%rax
ffffffff8020fc42:	48 23 45 b8          	and    -0x48(%rbp),%rax
ffffffff8020fc46:	48 85 c0             	test   %rax,%rax
ffffffff8020fc49:	74 0c                	je     ffffffff8020fc57 <_RME_Pgt_Boot_Crt+0x2b7>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_HW;
ffffffff8020fc4b:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8020fc52:	e9 70 01 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff8020fc57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fc5b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fc5f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8020fc63:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fc66:	0f 93 c0             	setae  %al
ffffffff8020fc69:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fc6c:	48 85 c0             	test   %rax,%rax
ffffffff8020fc6f:	74 0c                	je     ffffffff8020fc7d <_RME_Pgt_Boot_Crt+0x2dd>
ffffffff8020fc71:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fc78:	e9 4a 01 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
ffffffff8020fc7d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8020fc81:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fc85:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fc88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fc8c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fc90:	48 01 d0             	add    %rdx,%rax
ffffffff8020fc93:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff8020fc97:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fc9b:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8020fca2:	00 00 00 
ffffffff8020fca5:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8020fcaa:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fcad:	e8 ac ca ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8020fcb2:	48 85 c0             	test   %rax,%rax
ffffffff8020fcb5:	0f 94 c0             	sete   %al
ffffffff8020fcb8:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fcbb:	48 85 c0             	test   %rax,%rax
ffffffff8020fcbe:	74 0c                	je     ffffffff8020fccc <_RME_Pgt_Boot_Crt+0x32c>
ffffffff8020fcc0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8020fcc7:	e9 fb 00 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
ffffffff8020fccc:	48 8b 15 2d a3 01 00 	mov    0x1a32d(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8020fcd3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fcd7:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Are we creating the top level? */
    if(Is_Top!=0U)
ffffffff8020fcdb:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8020fce0:	74 1b                	je     ffffffff8020fcfd <_RME_Pgt_Boot_Crt+0x35d>
    {
        RME_COV_MARKER();
        
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff8020fce2:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fce6:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020fceb:	89 c1                	mov    %eax,%ecx
ffffffff8020fced:	d3 e2                	shl    %cl,%edx
ffffffff8020fcef:	89 d0                	mov    %edx,%eax
ffffffff8020fcf1:	48 98                	cltq
ffffffff8020fcf3:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020fcf7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fcfb:	eb 19                	jmp    ffffffff8020fd16 <_RME_Pgt_Boot_Crt+0x376>
    }
    else
    {
        RME_COV_MARKER();
        
        Table_Size=RME_PGT_SIZE_NOM(Num_Order);
ffffffff8020fcfd:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8020fd01:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8020fd06:	89 c1                	mov    %eax,%ecx
ffffffff8020fd08:	d3 e2                	shl    %cl,%edx
ffffffff8020fd0a:	89 d0                	mov    %edx,%eax
ffffffff8020fd0c:	48 98                	cltq
ffffffff8020fd0e:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8020fd12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr, Table_Size)!=0)
ffffffff8020fd16:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8020fd1a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020fd1e:	48 89 d6             	mov    %rdx,%rsi
ffffffff8020fd21:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fd24:	e8 8f 26 00 00       	call   ffffffff802123b8 <_RME_Kot_Mark>
ffffffff8020fd29:	48 85 c0             	test   %rax,%rax
ffffffff8020fd2c:	74 17                	je     ffffffff8020fd45 <_RME_Pgt_Boot_Crt+0x3a5>
    {
        RME_COV_MARKER();
    
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff8020fd2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd32:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8020fd39:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8020fd40:	e9 82 00 00 00       	jmp    ffffffff8020fdc7 <_RME_Pgt_Boot_Crt+0x427>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Header init */
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff8020fd45:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd49:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8020fd50:	00 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff8020fd51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd55:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8020fd59:	48 89 50 18          	mov    %rdx,0x18(%rax)
    /* Set the property of the page table to only act as source and creating process */
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ADD_SRC|
ffffffff8020fd5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd61:	48 be c1 00 00 00 f0 	movabs $0xfffffff0000000c1,%rsi
ffffffff8020fd68:	ff ff ff 
ffffffff8020fd6b:	48 89 70 10          	mov    %rsi,0x10(%rax)
                       RME_PGT_FLAG_PRC_CRT|RME_PGT_FLAG_PRC_PGT;
    
    /* Info init */
    Pgt_Crt->Base=Base|Is_Top;
ffffffff8020fd6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8020fd73:	48 0b 45 b0          	or     -0x50(%rbp),%rax
ffffffff8020fd77:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fd7a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd7e:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff8020fd82:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8020fd86:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8020fd8a:	48 0b 45 18          	or     0x18(%rbp),%rax
ffffffff8020fd8e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fd91:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd95:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Pgt_Crt->ASID=0U;
ffffffff8020fd99:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fd9d:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8020fda4:	00 

    /* Object init - need to add all kernel pages if they are top-level */
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff8020fda5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fda9:	48 89 c7             	mov    %rax,%rdi
ffffffff8020fdac:	e8 d0 6b 01 00       	call   ffffffff80226981 <__RME_Pgt_Init>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Establish cap */
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff8020fdb1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8020fdb5:	48 bf 00 00 00 00 00 	movabs $0x4000000000000,%rdi
ffffffff8020fdbc:	00 04 00 
ffffffff8020fdbf:	48 89 38             	mov    %rdi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PGT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8020fdc2:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8020fdc7:	c9                   	leave
ffffffff8020fdc8:	c3                   	ret

ffffffff8020fdc9 <_RME_Pgt_Boot_Add>:
rme_ret_t _RME_Pgt_Boot_Add(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Pgt, 
                            rme_ptr_t Paddr,
                            rme_ptr_t Pos,
                            rme_ptr_t Flag)
{
ffffffff8020fdc9:	f3 0f 1e fa          	endbr64
ffffffff8020fdcd:	55                   	push   %rbp
ffffffff8020fdce:	48 89 e5             	mov    %rsp,%rbp
ffffffff8020fdd1:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8020fdd5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8020fdd9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8020fddd:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8020fde1:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8020fde5:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Pgt* Pgt_Op;
    rme_ptr_t Type_Stat;
    rme_ptr_t Szord;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8020fde9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fded:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8020fdf2:	48 85 c0             	test   %rax,%rax
ffffffff8020fdf5:	0f 85 98 00 00 00    	jne    ffffffff8020fe93 <_RME_Pgt_Boot_Add+0xca>
ffffffff8020fdfb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fdff:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fe03:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8020fe07:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fe0a:	0f 93 c0             	setae  %al
ffffffff8020fe0d:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe10:	48 85 c0             	test   %rax,%rax
ffffffff8020fe13:	74 0c                	je     ffffffff8020fe21 <_RME_Pgt_Boot_Add+0x58>
ffffffff8020fe15:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020fe1c:	e9 33 02 00 00       	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe21:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fe25:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fe29:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe2c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fe30:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fe34:	48 01 d0             	add    %rdx,%rax
ffffffff8020fe37:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fe3b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fe3f:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fe42:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fe46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fe4a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fe4e:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fe51:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fe55:	0f 94 c0             	sete   %al
ffffffff8020fe58:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe5b:	48 85 c0             	test   %rax,%rax
ffffffff8020fe5e:	74 0c                	je     ffffffff8020fe6c <_RME_Pgt_Boot_Add+0xa3>
ffffffff8020fe60:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020fe67:	e9 e8 01 00 00       	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe6c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020fe70:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020fe74:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020fe78:	0f 95 c0             	setne  %al
ffffffff8020fe7b:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fe7e:	48 85 c0             	test   %rax,%rax
ffffffff8020fe81:	0f 84 4c 01 00 00    	je     ffffffff8020ffd3 <_RME_Pgt_Boot_Add+0x20a>
ffffffff8020fe87:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020fe8e:	e9 c1 01 00 00       	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fe93:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fe97:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fe9b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fea2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020fea6:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020fea9:	0f 93 c0             	setae  %al
ffffffff8020feac:	0f b6 c0             	movzbl %al,%eax
ffffffff8020feaf:	48 85 c0             	test   %rax,%rax
ffffffff8020feb2:	74 0c                	je     ffffffff8020fec0 <_RME_Pgt_Boot_Add+0xf7>
ffffffff8020feb4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020febb:	e9 94 01 00 00       	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020fec0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020fec4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8020fec8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020fecc:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fecf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8020fed3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020fed7:	48 01 d0             	add    %rdx,%rax
ffffffff8020feda:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020fede:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020fee2:	48 8b 00             	mov    (%rax),%rax
ffffffff8020fee5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020fee9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020feed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fef1:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020fef4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020fef8:	0f 94 c0             	sete   %al
ffffffff8020fefb:	0f b6 c0             	movzbl %al,%eax
ffffffff8020fefe:	48 85 c0             	test   %rax,%rax
ffffffff8020ff01:	74 0c                	je     ffffffff8020ff0f <_RME_Pgt_Boot_Add+0x146>
ffffffff8020ff03:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ff0a:	e9 45 01 00 00       	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ff13:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ff17:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8020ff1b:	0f 95 c0             	setne  %al
ffffffff8020ff1e:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff21:	48 85 c0             	test   %rax,%rax
ffffffff8020ff24:	74 0c                	je     ffffffff8020ff32 <_RME_Pgt_Boot_Add+0x169>
ffffffff8020ff26:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ff2d:	e9 22 01 00 00       	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff32:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ff36:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ff3b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff42:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ff46:	48 39 c2             	cmp    %rax,%rdx
ffffffff8020ff49:	0f 93 c0             	setae  %al
ffffffff8020ff4c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff4f:	48 85 c0             	test   %rax,%rax
ffffffff8020ff52:	74 0c                	je     ffffffff8020ff60 <_RME_Pgt_Boot_Add+0x197>
ffffffff8020ff54:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8020ff5b:	e9 f4 00 00 00       	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ff60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8020ff64:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8020ff69:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8020ff6d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff74:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8020ff78:	48 01 d0             	add    %rdx,%rax
ffffffff8020ff7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8020ff7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ff83:	48 8b 00             	mov    (%rax),%rax
ffffffff8020ff86:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8020ff8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ff8e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ff92:	0f b7 c0             	movzwl %ax,%eax
ffffffff8020ff95:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8020ff99:	0f 94 c0             	sete   %al
ffffffff8020ff9c:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ff9f:	48 85 c0             	test   %rax,%rax
ffffffff8020ffa2:	74 0c                	je     ffffffff8020ffb0 <_RME_Pgt_Boot_Add+0x1e7>
ffffffff8020ffa4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8020ffab:	e9 a4 00 00 00       	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
ffffffff8020ffb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8020ffb4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8020ffb8:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8020ffbc:	0f 95 c0             	setne  %al
ffffffff8020ffbf:	0f b6 c0             	movzbl %al,%eax
ffffffff8020ffc2:	48 85 c0             	test   %rax,%rax
ffffffff8020ffc5:	74 0c                	je     ffffffff8020ffd3 <_RME_Pgt_Boot_Add+0x20a>
ffffffff8020ffc7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8020ffce:	e9 81 00 00 00       	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen, but don't check their properties */
    RME_CAP_CHECK(Pgt_Op,0U);

    Szord=RME_PGT_SIZEORD(Pgt_Op->Order);
ffffffff8020ffd3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ffd7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ffdb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ffdf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        /* No action required */
    }
#endif

    /* See if the mapping range and the granularity is allowed */
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8020ffe3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8020ffe7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8020ffeb:	89 c2                	mov    %eax,%edx
ffffffff8020ffed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8020fff1:	89 d1                	mov    %edx,%ecx
ffffffff8020fff3:	48 d3 e8             	shr    %cl,%rax
ffffffff8020fff6:	48 85 c0             	test   %rax,%rax
ffffffff8020fff9:	75 25                	jne    ffffffff80210020 <_RME_Pgt_Boot_Add+0x257>
       ((Paddr&RME_MASK_END(Szord-1U))!=0U))
ffffffff8020fffb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8020ffff:	89 c2                	mov    %eax,%edx
ffffffff80210001:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff80210006:	29 d0                	sub    %edx,%eax
ffffffff80210008:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8021000f:	89 c1                	mov    %eax,%ecx
ffffffff80210011:	48 d3 ea             	shr    %cl,%rdx
ffffffff80210014:	48 89 d0             	mov    %rdx,%rax
ffffffff80210017:	48 23 45 c8          	and    -0x38(%rbp),%rax
    if(((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0U)||
ffffffff8021001b:	48 85 c0             	test   %rax,%rax
ffffffff8021001e:	74 09                	je     ffffffff80210029 <_RME_Pgt_Boot_Add+0x260>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff80210020:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210027:	eb 2b                	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Map(Pgt_Op,Paddr,Pos,Flag)!=0)
ffffffff80210029:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8021002d:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210031:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff80210035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210039:	48 89 c7             	mov    %rax,%rdi
ffffffff8021003c:	e8 29 6a 01 00       	call   ffffffff80226a6a <__RME_Pgt_Page_Map>
ffffffff80210041:	48 85 c0             	test   %rax,%rax
ffffffff80210044:	74 09                	je     ffffffff8021004f <_RME_Pgt_Boot_Add+0x286>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_MAP;
ffffffff80210046:	48 c7 c0 9a ff ff ff 	mov    $0xffffffffffffff9a,%rax
ffffffff8021004d:	eb 05                	jmp    ffffffff80210054 <_RME_Pgt_Boot_Add+0x28b>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff8021004f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210054:	c9                   	leave
ffffffff80210055:	c3                   	ret

ffffffff80210056 <_RME_Pgt_Boot_Con>:
rme_ret_t _RME_Pgt_Boot_Con(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Pgt_Parent,
                            rme_ptr_t Pos,
                            rme_cid_t Cap_Pgt_Child,
                            rme_ptr_t Flag_Child)
{
ffffffff80210056:	f3 0f 1e fa          	endbr64
ffffffff8021005a:	55                   	push   %rbp
ffffffff8021005b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021005e:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80210062:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80210066:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021006a:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021006e:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80210072:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
    rme_ptr_t Begin_Parent;
    rme_ptr_t End_Parent;
#endif
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff80210076:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021007a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021007f:	48 85 c0             	test   %rax,%rax
ffffffff80210082:	0f 85 98 00 00 00    	jne    ffffffff80210120 <_RME_Pgt_Boot_Con+0xca>
ffffffff80210088:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021008c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210090:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210094:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210097:	0f 93 c0             	setae  %al
ffffffff8021009a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021009d:	48 85 c0             	test   %rax,%rax
ffffffff802100a0:	74 0c                	je     ffffffff802100ae <_RME_Pgt_Boot_Con+0x58>
ffffffff802100a2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802100a9:	e9 a0 04 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802100ae:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802100b2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802100b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802100b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802100bd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802100c1:	48 01 d0             	add    %rdx,%rax
ffffffff802100c4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802100c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802100cc:	48 8b 00             	mov    (%rax),%rax
ffffffff802100cf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802100d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802100d7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802100db:	0f b7 c0             	movzwl %ax,%eax
ffffffff802100de:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802100e2:	0f 94 c0             	sete   %al
ffffffff802100e5:	0f b6 c0             	movzbl %al,%eax
ffffffff802100e8:	48 85 c0             	test   %rax,%rax
ffffffff802100eb:	74 0c                	je     ffffffff802100f9 <_RME_Pgt_Boot_Con+0xa3>
ffffffff802100ed:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802100f4:	e9 55 04 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802100f9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802100fd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210101:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210105:	0f 95 c0             	setne  %al
ffffffff80210108:	0f b6 c0             	movzbl %al,%eax
ffffffff8021010b:	48 85 c0             	test   %rax,%rax
ffffffff8021010e:	0f 84 4c 01 00 00    	je     ffffffff80210260 <_RME_Pgt_Boot_Con+0x20a>
ffffffff80210114:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021011b:	e9 2e 04 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210120:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210124:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210128:	48 89 c2             	mov    %rax,%rdx
ffffffff8021012b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021012f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210133:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210136:	0f 93 c0             	setae  %al
ffffffff80210139:	0f b6 c0             	movzbl %al,%eax
ffffffff8021013c:	48 85 c0             	test   %rax,%rax
ffffffff8021013f:	74 0c                	je     ffffffff8021014d <_RME_Pgt_Boot_Con+0xf7>
ffffffff80210141:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210148:	e9 01 04 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021014d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210151:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210155:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210159:	48 89 c2             	mov    %rax,%rdx
ffffffff8021015c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210160:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210164:	48 01 d0             	add    %rdx,%rax
ffffffff80210167:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021016b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021016f:	48 8b 00             	mov    (%rax),%rax
ffffffff80210172:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210176:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021017a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021017e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210181:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210185:	0f 94 c0             	sete   %al
ffffffff80210188:	0f b6 c0             	movzbl %al,%eax
ffffffff8021018b:	48 85 c0             	test   %rax,%rax
ffffffff8021018e:	74 0c                	je     ffffffff8021019c <_RME_Pgt_Boot_Con+0x146>
ffffffff80210190:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210197:	e9 b2 03 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021019c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802101a0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802101a4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802101a8:	0f 95 c0             	setne  %al
ffffffff802101ab:	0f b6 c0             	movzbl %al,%eax
ffffffff802101ae:	48 85 c0             	test   %rax,%rax
ffffffff802101b1:	74 0c                	je     ffffffff802101bf <_RME_Pgt_Boot_Con+0x169>
ffffffff802101b3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802101ba:	e9 8f 03 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802101bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802101c3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802101c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802101cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802101cf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802101d3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802101d6:	0f 93 c0             	setae  %al
ffffffff802101d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802101dc:	48 85 c0             	test   %rax,%rax
ffffffff802101df:	74 0c                	je     ffffffff802101ed <_RME_Pgt_Boot_Con+0x197>
ffffffff802101e1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802101e8:	e9 61 03 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802101ed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802101f1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802101f6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802101fa:	48 89 c2             	mov    %rax,%rdx
ffffffff802101fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210201:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210205:	48 01 d0             	add    %rdx,%rax
ffffffff80210208:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021020c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210210:	48 8b 00             	mov    (%rax),%rax
ffffffff80210213:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210217:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021021b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021021f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210222:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210226:	0f 94 c0             	sete   %al
ffffffff80210229:	0f b6 c0             	movzbl %al,%eax
ffffffff8021022c:	48 85 c0             	test   %rax,%rax
ffffffff8021022f:	74 0c                	je     ffffffff8021023d <_RME_Pgt_Boot_Con+0x1e7>
ffffffff80210231:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210238:	e9 11 03 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021023d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210241:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210245:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210249:	0f 95 c0             	setne  %al
ffffffff8021024c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021024f:	48 85 c0             	test   %rax,%rax
ffffffff80210252:	74 0c                	je     ffffffff80210260 <_RME_Pgt_Boot_Con+0x20a>
ffffffff80210254:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021025b:	e9 ee 02 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff80210260:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210264:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210269:	48 85 c0             	test   %rax,%rax
ffffffff8021026c:	0f 85 98 00 00 00    	jne    ffffffff8021030a <_RME_Pgt_Boot_Con+0x2b4>
ffffffff80210272:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210276:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021027a:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8021027e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210281:	0f 93 c0             	setae  %al
ffffffff80210284:	0f b6 c0             	movzbl %al,%eax
ffffffff80210287:	48 85 c0             	test   %rax,%rax
ffffffff8021028a:	74 0c                	je     ffffffff80210298 <_RME_Pgt_Boot_Con+0x242>
ffffffff8021028c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210293:	e9 b6 02 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210298:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021029c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802102a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802102a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802102a7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802102ab:	48 01 d0             	add    %rdx,%rax
ffffffff802102ae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802102b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802102b6:	48 8b 00             	mov    (%rax),%rax
ffffffff802102b9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802102bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802102c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802102c5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802102c8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802102cc:	0f 94 c0             	sete   %al
ffffffff802102cf:	0f b6 c0             	movzbl %al,%eax
ffffffff802102d2:	48 85 c0             	test   %rax,%rax
ffffffff802102d5:	74 0c                	je     ffffffff802102e3 <_RME_Pgt_Boot_Con+0x28d>
ffffffff802102d7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802102de:	e9 6b 02 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802102e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802102e7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802102eb:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802102ef:	0f 95 c0             	setne  %al
ffffffff802102f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802102f5:	48 85 c0             	test   %rax,%rax
ffffffff802102f8:	0f 84 4c 01 00 00    	je     ffffffff8021044a <_RME_Pgt_Boot_Con+0x3f4>
ffffffff802102fe:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210305:	e9 44 02 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff8021030a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021030e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210312:	48 89 c2             	mov    %rax,%rdx
ffffffff80210315:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210319:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021031d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210320:	0f 93 c0             	setae  %al
ffffffff80210323:	0f b6 c0             	movzbl %al,%eax
ffffffff80210326:	48 85 c0             	test   %rax,%rax
ffffffff80210329:	74 0c                	je     ffffffff80210337 <_RME_Pgt_Boot_Con+0x2e1>
ffffffff8021032b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210332:	e9 17 02 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210337:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021033b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021033f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210343:	48 89 c2             	mov    %rax,%rdx
ffffffff80210346:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021034a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021034e:	48 01 d0             	add    %rdx,%rax
ffffffff80210351:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210355:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210359:	48 8b 00             	mov    (%rax),%rax
ffffffff8021035c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210360:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210364:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210368:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021036b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021036f:	0f 94 c0             	sete   %al
ffffffff80210372:	0f b6 c0             	movzbl %al,%eax
ffffffff80210375:	48 85 c0             	test   %rax,%rax
ffffffff80210378:	74 0c                	je     ffffffff80210386 <_RME_Pgt_Boot_Con+0x330>
ffffffff8021037a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210381:	e9 c8 01 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210386:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021038a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021038e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210392:	0f 95 c0             	setne  %al
ffffffff80210395:	0f b6 c0             	movzbl %al,%eax
ffffffff80210398:	48 85 c0             	test   %rax,%rax
ffffffff8021039b:	74 0c                	je     ffffffff802103a9 <_RME_Pgt_Boot_Con+0x353>
ffffffff8021039d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802103a4:	e9 a5 01 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802103a9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802103ad:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802103b2:	48 89 c2             	mov    %rax,%rdx
ffffffff802103b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103b9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802103bd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802103c0:	0f 93 c0             	setae  %al
ffffffff802103c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802103c6:	48 85 c0             	test   %rax,%rax
ffffffff802103c9:	74 0c                	je     ffffffff802103d7 <_RME_Pgt_Boot_Con+0x381>
ffffffff802103cb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802103d2:	e9 77 01 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff802103d7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802103db:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802103e0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802103e4:	48 89 c2             	mov    %rax,%rdx
ffffffff802103e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103eb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802103ef:	48 01 d0             	add    %rdx,%rax
ffffffff802103f2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802103f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802103fa:	48 8b 00             	mov    (%rax),%rax
ffffffff802103fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210401:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210405:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210409:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021040c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210410:	0f 94 c0             	sete   %al
ffffffff80210413:	0f b6 c0             	movzbl %al,%eax
ffffffff80210416:	48 85 c0             	test   %rax,%rax
ffffffff80210419:	74 0c                	je     ffffffff80210427 <_RME_Pgt_Boot_Con+0x3d1>
ffffffff8021041b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210422:	e9 27 01 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
ffffffff80210427:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021042b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021042f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210433:	0f 95 c0             	setne  %al
ffffffff80210436:	0f b6 c0             	movzbl %al,%eax
ffffffff80210439:	48 85 c0             	test   %rax,%rax
ffffffff8021043c:	74 0c                	je     ffffffff8021044a <_RME_Pgt_Boot_Con+0x3f4>
ffffffff8021043e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210445:	e9 04 01 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
    /* Check if both page table caps are not frozen but don't check flags */
    RME_CAP_CHECK(Pgt_Parent,0U);
    RME_CAP_CHECK(Pgt_Child,0U);
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff8021044a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021044e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210452:	89 c2                	mov    %eax,%edx
ffffffff80210454:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210458:	89 d1                	mov    %edx,%ecx
ffffffff8021045a:	48 d3 e8             	shr    %cl,%rax
ffffffff8021045d:	48 85 c0             	test   %rax,%rax
ffffffff80210460:	74 0c                	je     ffffffff8021046e <_RME_Pgt_Boot_Con+0x418>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff80210462:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80210469:	e9 e0 00 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the child table falls within one slot of the parent table */
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff8021046e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210472:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210476:	89 c2                	mov    %eax,%edx
ffffffff80210478:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021047c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210480:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210484:	48 01 d0             	add    %rdx,%rax
ffffffff80210487:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff8021048b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021048f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210493:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210497:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Szord_Parent<Order_Child)
ffffffff8021049b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021049f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff802104a3:	73 0c                	jae    ffffffff802104b1 <_RME_Pgt_Boot_Con+0x45b>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff802104a5:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802104ac:	e9 9d 00 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
        RME_COV_MARKER();
        /* No action required */
    }
#else
    /* Force no path compression when virtual mappings are enabled */
    if(Szord_Parent!=Order_Child)
ffffffff802104b1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802104b5:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff802104b9:	74 0c                	je     ffffffff802104c7 <_RME_Pgt_Boot_Con+0x471>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff802104bb:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802104c2:	e9 87 00 00 00       	jmp    ffffffff8021054e <_RME_Pgt_Boot_Con+0x4f8>
    }
#endif

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff802104c7:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff802104cb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802104cf:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff802104d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104d7:	48 89 c7             	mov    %rax,%rdi
ffffffff802104da:	e8 6c 67 01 00       	call   ffffffff80226c4b <__RME_Pgt_Pgdir_Map>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff802104df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104e3:	48 8b 00             	mov    (%rax),%rax
ffffffff802104e6:	89 c0                	mov    %eax,%eax
ffffffff802104e8:	48 85 c0             	test   %rax,%rax
ffffffff802104eb:	74 0a                	je     ffffffff802104f7 <_RME_Pgt_Boot_Con+0x4a1>
ffffffff802104ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104f1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802104f5:	eb 04                	jmp    ffffffff802104fb <_RME_Pgt_Boot_Con+0x4a5>
ffffffff802104f7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802104fb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1U);
ffffffff802104ff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210503:	48 83 c0 08          	add    $0x8,%rax
ffffffff80210507:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021050c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021050f:	e8 7f c2 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff80210514:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210518:	48 8b 00             	mov    (%rax),%rax
ffffffff8021051b:	89 c0                	mov    %eax,%eax
ffffffff8021051d:	48 85 c0             	test   %rax,%rax
ffffffff80210520:	74 0a                	je     ffffffff8021052c <_RME_Pgt_Boot_Con+0x4d6>
ffffffff80210522:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210526:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021052a:	eb 04                	jmp    ffffffff80210530 <_RME_Pgt_Boot_Con+0x4da>
ffffffff8021052c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210530:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1U);
ffffffff80210534:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210538:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021053c:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80210541:	48 89 c7             	mov    %rax,%rdi
ffffffff80210544:	e8 4a c2 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80210549:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021054e:	c9                   	leave
ffffffff8021054f:	c3                   	ret

ffffffff80210550 <_RME_Pgt_Crt>:
                              rme_ptr_t Raddr,
                              rme_ptr_t Base,
                              rme_ptr_t Is_Top,
                              rme_ptr_t Size_Order,
                              rme_ptr_t Num_Order)
{
ffffffff80210550:	f3 0f 1e fa          	endbr64
ffffffff80210554:	55                   	push   %rbp
ffffffff80210555:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210558:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8021055c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80210560:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80210564:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80210568:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff8021056c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80210570:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Vaddr;
    rme_ptr_t Table_Size;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff80210574:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80210578:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff8021057c:	48 01 d0             	add    %rdx,%rax
ffffffff8021057f:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff80210583:	76 0c                	jbe    ffffffff80210591 <_RME_Pgt_Crt+0x41>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_HW;
ffffffff80210585:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff8021058c:	e9 e8 06 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210591:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210595:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021059a:	48 85 c0             	test   %rax,%rax
ffffffff8021059d:	0f 85 98 00 00 00    	jne    ffffffff8021063b <_RME_Pgt_Crt+0xeb>
ffffffff802105a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802105a7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802105ab:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff802105af:	48 39 c2             	cmp    %rax,%rdx
ffffffff802105b2:	0f 93 c0             	setae  %al
ffffffff802105b5:	0f b6 c0             	movzbl %al,%eax
ffffffff802105b8:	48 85 c0             	test   %rax,%rax
ffffffff802105bb:	74 0c                	je     ffffffff802105c9 <_RME_Pgt_Crt+0x79>
ffffffff802105bd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802105c4:	e9 b0 06 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff802105c9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802105cd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802105d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802105d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802105d8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802105dc:	48 01 d0             	add    %rdx,%rax
ffffffff802105df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802105e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802105e7:	48 8b 00             	mov    (%rax),%rax
ffffffff802105ea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802105ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802105f2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802105f6:	0f b7 c0             	movzwl %ax,%eax
ffffffff802105f9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802105fd:	0f 94 c0             	sete   %al
ffffffff80210600:	0f b6 c0             	movzbl %al,%eax
ffffffff80210603:	48 85 c0             	test   %rax,%rax
ffffffff80210606:	74 0c                	je     ffffffff80210614 <_RME_Pgt_Crt+0xc4>
ffffffff80210608:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021060f:	e9 65 06 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210614:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210618:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021061c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210620:	0f 95 c0             	setne  %al
ffffffff80210623:	0f b6 c0             	movzbl %al,%eax
ffffffff80210626:	48 85 c0             	test   %rax,%rax
ffffffff80210629:	0f 84 4c 01 00 00    	je     ffffffff8021077b <_RME_Pgt_Crt+0x22b>
ffffffff8021062f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210636:	e9 3e 06 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff8021063b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021063f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210643:	48 89 c2             	mov    %rax,%rdx
ffffffff80210646:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021064a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021064e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210651:	0f 93 c0             	setae  %al
ffffffff80210654:	0f b6 c0             	movzbl %al,%eax
ffffffff80210657:	48 85 c0             	test   %rax,%rax
ffffffff8021065a:	74 0c                	je     ffffffff80210668 <_RME_Pgt_Crt+0x118>
ffffffff8021065c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210663:	e9 11 06 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210668:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021066c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210670:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210674:	48 89 c2             	mov    %rax,%rdx
ffffffff80210677:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021067b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021067f:	48 01 d0             	add    %rdx,%rax
ffffffff80210682:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210686:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021068a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021068d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80210691:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210695:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210699:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021069c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802106a0:	0f 94 c0             	sete   %al
ffffffff802106a3:	0f b6 c0             	movzbl %al,%eax
ffffffff802106a6:	48 85 c0             	test   %rax,%rax
ffffffff802106a9:	74 0c                	je     ffffffff802106b7 <_RME_Pgt_Crt+0x167>
ffffffff802106ab:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802106b2:	e9 c2 05 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff802106b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802106bb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802106bf:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802106c3:	0f 95 c0             	setne  %al
ffffffff802106c6:	0f b6 c0             	movzbl %al,%eax
ffffffff802106c9:	48 85 c0             	test   %rax,%rax
ffffffff802106cc:	74 0c                	je     ffffffff802106da <_RME_Pgt_Crt+0x18a>
ffffffff802106ce:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802106d5:	e9 9f 05 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff802106da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802106de:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802106e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802106e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802106ea:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802106ee:	48 39 c2             	cmp    %rax,%rdx
ffffffff802106f1:	0f 93 c0             	setae  %al
ffffffff802106f4:	0f b6 c0             	movzbl %al,%eax
ffffffff802106f7:	48 85 c0             	test   %rax,%rax
ffffffff802106fa:	74 0c                	je     ffffffff80210708 <_RME_Pgt_Crt+0x1b8>
ffffffff802106fc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210703:	e9 71 05 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210708:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021070c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210711:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210715:	48 89 c2             	mov    %rax,%rdx
ffffffff80210718:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021071c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210720:	48 01 d0             	add    %rdx,%rax
ffffffff80210723:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210727:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021072b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021072e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80210732:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210736:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021073a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021073d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210741:	0f 94 c0             	sete   %al
ffffffff80210744:	0f b6 c0             	movzbl %al,%eax
ffffffff80210747:	48 85 c0             	test   %rax,%rax
ffffffff8021074a:	74 0c                	je     ffffffff80210758 <_RME_Pgt_Crt+0x208>
ffffffff8021074c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210753:	e9 21 05 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210758:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021075c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210760:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210764:	0f 95 c0             	setne  %al
ffffffff80210767:	0f b6 c0             	movzbl %al,%eax
ffffffff8021076a:	48 85 c0             	test   %rax,%rax
ffffffff8021076d:	74 0c                	je     ffffffff8021077b <_RME_Pgt_Crt+0x22b>
ffffffff8021076f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210776:	e9 fe 04 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff8021077b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021077f:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210784:	48 85 c0             	test   %rax,%rax
ffffffff80210787:	0f 85 98 00 00 00    	jne    ffffffff80210825 <_RME_Pgt_Crt+0x2d5>
ffffffff8021078d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210791:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210795:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80210799:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021079c:	0f 93 c0             	setae  %al
ffffffff8021079f:	0f b6 c0             	movzbl %al,%eax
ffffffff802107a2:	48 85 c0             	test   %rax,%rax
ffffffff802107a5:	74 0c                	je     ffffffff802107b3 <_RME_Pgt_Crt+0x263>
ffffffff802107a7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802107ae:	e9 c6 04 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff802107b3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802107b7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802107bb:	48 89 c2             	mov    %rax,%rdx
ffffffff802107be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802107c2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802107c6:	48 01 d0             	add    %rdx,%rax
ffffffff802107c9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802107cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802107d1:	48 8b 00             	mov    (%rax),%rax
ffffffff802107d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802107d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802107dc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802107e0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802107e3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802107e7:	0f 94 c0             	sete   %al
ffffffff802107ea:	0f b6 c0             	movzbl %al,%eax
ffffffff802107ed:	48 85 c0             	test   %rax,%rax
ffffffff802107f0:	74 0c                	je     ffffffff802107fe <_RME_Pgt_Crt+0x2ae>
ffffffff802107f2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802107f9:	e9 7b 04 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff802107fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210802:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210806:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021080a:	0f 95 c0             	setne  %al
ffffffff8021080d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210810:	48 85 c0             	test   %rax,%rax
ffffffff80210813:	0f 84 4c 01 00 00    	je     ffffffff80210965 <_RME_Pgt_Crt+0x415>
ffffffff80210819:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210820:	e9 54 04 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210825:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210829:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021082d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210830:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210834:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210838:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021083b:	0f 93 c0             	setae  %al
ffffffff8021083e:	0f b6 c0             	movzbl %al,%eax
ffffffff80210841:	48 85 c0             	test   %rax,%rax
ffffffff80210844:	74 0c                	je     ffffffff80210852 <_RME_Pgt_Crt+0x302>
ffffffff80210846:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021084d:	e9 27 04 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210852:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210856:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021085a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021085e:	48 89 c2             	mov    %rax,%rdx
ffffffff80210861:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210865:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210869:	48 01 d0             	add    %rdx,%rax
ffffffff8021086c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210870:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210874:	48 8b 00             	mov    (%rax),%rax
ffffffff80210877:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021087b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021087f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210883:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210886:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021088a:	0f 94 c0             	sete   %al
ffffffff8021088d:	0f b6 c0             	movzbl %al,%eax
ffffffff80210890:	48 85 c0             	test   %rax,%rax
ffffffff80210893:	74 0c                	je     ffffffff802108a1 <_RME_Pgt_Crt+0x351>
ffffffff80210895:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021089c:	e9 d8 03 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff802108a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802108a5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802108a9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802108ad:	0f 95 c0             	setne  %al
ffffffff802108b0:	0f b6 c0             	movzbl %al,%eax
ffffffff802108b3:	48 85 c0             	test   %rax,%rax
ffffffff802108b6:	74 0c                	je     ffffffff802108c4 <_RME_Pgt_Crt+0x374>
ffffffff802108b8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802108bf:	e9 b5 03 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff802108c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802108c8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802108cd:	48 89 c2             	mov    %rax,%rdx
ffffffff802108d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802108d4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802108d8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802108db:	0f 93 c0             	setae  %al
ffffffff802108de:	0f b6 c0             	movzbl %al,%eax
ffffffff802108e1:	48 85 c0             	test   %rax,%rax
ffffffff802108e4:	74 0c                	je     ffffffff802108f2 <_RME_Pgt_Crt+0x3a2>
ffffffff802108e6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802108ed:	e9 87 03 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff802108f2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802108f6:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802108fb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802108ff:	48 89 c2             	mov    %rax,%rdx
ffffffff80210902:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210906:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021090a:	48 01 d0             	add    %rdx,%rax
ffffffff8021090d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80210911:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210915:	48 8b 00             	mov    (%rax),%rax
ffffffff80210918:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021091c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210920:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210924:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210927:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021092b:	0f 94 c0             	sete   %al
ffffffff8021092e:	0f b6 c0             	movzbl %al,%eax
ffffffff80210931:	48 85 c0             	test   %rax,%rax
ffffffff80210934:	74 0c                	je     ffffffff80210942 <_RME_Pgt_Crt+0x3f2>
ffffffff80210936:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021093d:	e9 37 03 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210942:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210946:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021094a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021094e:	0f 95 c0             	setne  %al
ffffffff80210951:	0f b6 c0             	movzbl %al,%eax
ffffffff80210954:	48 85 c0             	test   %rax,%rax
ffffffff80210957:	74 0c                	je     ffffffff80210965 <_RME_Pgt_Crt+0x415>
ffffffff80210959:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210960:	e9 14 03 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
ffffffff80210965:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210969:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021096d:	83 e0 01             	and    $0x1,%eax
ffffffff80210970:	48 85 c0             	test   %rax,%rax
ffffffff80210973:	0f 94 c0             	sete   %al
ffffffff80210976:	0f b6 c0             	movzbl %al,%eax
ffffffff80210979:	48 85 c0             	test   %rax,%rax
ffffffff8021097c:	74 0c                	je     ffffffff8021098a <_RME_Pgt_Crt+0x43a>
ffffffff8021097e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210985:	e9 ef 02 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
    
    /* Are we creating the top-level? */
    if(Is_Top!=0U)
ffffffff8021098a:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff8021098f:	74 1b                	je     ffffffff802109ac <_RME_Pgt_Crt+0x45c>
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
ffffffff80210991:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210995:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021099a:	89 c1                	mov    %eax,%ecx
ffffffff8021099c:	d3 e2                	shl    %cl,%edx
ffffffff8021099e:	89 d0                	mov    %edx,%eax
ffffffff802109a0:	48 98                	cltq
ffffffff802109a2:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff802109a6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802109aa:	eb 19                	jmp    ffffffff802109c5 <_RME_Pgt_Crt+0x475>
    }
    else
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_NOM(Num_Order);
ffffffff802109ac:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff802109b0:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802109b5:	89 c1                	mov    %eax,%ecx
ffffffff802109b7:	d3 e2                	shl    %cl,%edx
ffffffff802109b9:	89 d0                	mov    %edx,%eax
ffffffff802109bb:	48 98                	cltq
ffffffff802109bd:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff802109c1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    }
    
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
ffffffff802109c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802109c9:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802109cd:	83 e0 02             	and    $0x2,%eax
ffffffff802109d0:	48 85 c0             	test   %rax,%rax
ffffffff802109d3:	0f 94 c0             	sete   %al
ffffffff802109d6:	0f b6 c0             	movzbl %al,%eax
ffffffff802109d9:	48 85 c0             	test   %rax,%rax
ffffffff802109dc:	74 18                	je     ffffffff802109f6 <_RME_Pgt_Crt+0x4a6>
ffffffff802109de:	48 c7 c7 e8 91 22 80 	mov    $0xffffffff802291e8,%rdi
ffffffff802109e5:	e8 21 c0 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802109ea:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802109f1:	e9 83 02 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff802109f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802109fa:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff802109fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80210a02:	48 01 d0             	add    %rdx,%rax
ffffffff80210a05:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80210a09:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210a0d:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff80210a11:	0f 92 c0             	setb   %al
ffffffff80210a14:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a17:	48 85 c0             	test   %rax,%rax
ffffffff80210a1a:	74 34                	je     ffffffff80210a50 <_RME_Pgt_Crt+0x500>
ffffffff80210a1c:	48 c7 c7 08 92 22 80 	mov    $0xffffffff80229208,%rdi
ffffffff80210a23:	e8 e3 bf ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80210a28:	48 c7 c7 27 92 22 80 	mov    $0xffffffff80229227,%rdi
ffffffff80210a2f:	e8 d7 bf ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80210a34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210a38:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210a3c:	48 89 c7             	mov    %rax,%rdi
ffffffff80210a3f:	e8 05 bf ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
ffffffff80210a44:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a4b:	e9 29 02 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210a50:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210a54:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210a58:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80210a5c:	0f 92 c0             	setb   %al
ffffffff80210a5f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a62:	48 85 c0             	test   %rax,%rax
ffffffff80210a65:	74 18                	je     ffffffff80210a7f <_RME_Pgt_Crt+0x52f>
ffffffff80210a67:	48 c7 c7 38 92 22 80 	mov    $0xffffffff80229238,%rdi
ffffffff80210a6e:	e8 98 bf ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80210a73:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210a7a:	e9 fa 01 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210a7f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80210a83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210a87:	48 01 d0             	add    %rdx,%rax
ffffffff80210a8a:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80210a8e:	0f 92 c0             	setb   %al
ffffffff80210a91:	0f b6 c0             	movzbl %al,%eax
ffffffff80210a94:	48 85 c0             	test   %rax,%rax
ffffffff80210a97:	74 18                	je     ffffffff80210ab1 <_RME_Pgt_Crt+0x561>
ffffffff80210a99:	48 c7 c7 58 92 22 80 	mov    $0xffffffff80229258,%rdi
ffffffff80210aa0:	e8 66 bf ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80210aa5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210aac:	e9 c8 01 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210ab1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80210ab5:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80210ab9:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80210abd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210ac1:	48 01 c8             	add    %rcx,%rax
ffffffff80210ac4:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80210ac8:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210acb:	0f 92 c0             	setb   %al
ffffffff80210ace:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ad1:	48 85 c0             	test   %rax,%rax
ffffffff80210ad4:	74 18                	je     ffffffff80210aee <_RME_Pgt_Crt+0x59e>
ffffffff80210ad6:	48 c7 c7 78 92 22 80 	mov    $0xffffffff80229278,%rdi
ffffffff80210add:	e8 29 bf ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80210ae2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210ae9:	e9 8b 01 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>

    /* Check if these parameters are feasible */
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
ffffffff80210aee:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80210af2:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
ffffffff80210af6:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80210afa:	48 8b 75 10          	mov    0x10(%rbp),%rsi
ffffffff80210afe:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80210b02:	49 89 f8             	mov    %rdi,%r8
ffffffff80210b05:	48 89 c7             	mov    %rax,%rdi
ffffffff80210b08:	e8 e2 5d 01 00       	call   ffffffff802268ef <__RME_Pgt_Check>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check if the start address is properly aligned to the total order of the page table */
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
ffffffff80210b0d:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80210b11:	89 c2                	mov    %eax,%edx
ffffffff80210b13:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff80210b17:	01 c2                	add    %eax,%edx
ffffffff80210b19:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff80210b1e:	29 d0                	sub    %edx,%eax
ffffffff80210b20:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80210b27:	89 c1                	mov    %eax,%ecx
ffffffff80210b29:	48 d3 ea             	shr    %cl,%rdx
ffffffff80210b2c:	48 89 d0             	mov    %rdx,%rax
ffffffff80210b2f:	48 23 45 a0          	and    -0x60(%rbp),%rax
ffffffff80210b33:	48 85 c0             	test   %rax,%rax
ffffffff80210b36:	74 0c                	je     ffffffff80210b44 <_RME_Pgt_Crt+0x5f4>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_HW;
ffffffff80210b38:	48 c7 c0 99 ff ff ff 	mov    $0xffffffffffffff99,%rax
ffffffff80210b3f:	e9 35 01 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
ffffffff80210b44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210b48:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210b4c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80210b50:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210b53:	0f 93 c0             	setae  %al
ffffffff80210b56:	0f b6 c0             	movzbl %al,%eax
ffffffff80210b59:	48 85 c0             	test   %rax,%rax
ffffffff80210b5c:	74 0c                	je     ffffffff80210b6a <_RME_Pgt_Crt+0x61a>
ffffffff80210b5e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210b65:	e9 0f 01 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210b6a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80210b6e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210b72:	48 89 c2             	mov    %rax,%rdx
ffffffff80210b75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210b79:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210b7d:	48 01 d0             	add    %rdx,%rax
ffffffff80210b80:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Pgt_Crt);
ffffffff80210b84:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210b88:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80210b8f:	00 00 00 
ffffffff80210b92:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80210b97:	48 89 c7             	mov    %rax,%rdi
ffffffff80210b9a:	e8 bf bb ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210b9f:	48 85 c0             	test   %rax,%rax
ffffffff80210ba2:	0f 94 c0             	sete   %al
ffffffff80210ba5:	0f b6 c0             	movzbl %al,%eax
ffffffff80210ba8:	48 85 c0             	test   %rax,%rax
ffffffff80210bab:	74 0c                	je     ffffffff80210bb9 <_RME_Pgt_Crt+0x669>
ffffffff80210bad:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80210bb4:	e9 c0 00 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
ffffffff80210bb9:	48 8b 15 40 94 01 00 	mov    0x19440(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff80210bc0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bc4:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
ffffffff80210bc8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80210bcc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80210bd0:	48 89 d6             	mov    %rdx,%rsi
ffffffff80210bd3:	48 89 c7             	mov    %rax,%rdi
ffffffff80210bd6:	e8 dd 17 00 00       	call   ffffffff802123b8 <_RME_Kot_Mark>
ffffffff80210bdb:	48 85 c0             	test   %rax,%rax
ffffffff80210bde:	74 17                	je     ffffffff80210bf7 <_RME_Pgt_Crt+0x6a7>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
ffffffff80210be0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210be4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80210beb:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80210bf2:	e9 82 00 00 00       	jmp    ffffffff80210c79 <_RME_Pgt_Crt+0x729>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Header init */
    Pgt_Crt->Head.Root_Ref=0U;
ffffffff80210bf7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210bfb:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80210c02:	00 
    Pgt_Crt->Head.Object=Vaddr;
ffffffff80210c03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c07:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80210c0b:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ALL;
ffffffff80210c0f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c13:	48 be ff 00 00 00 f0 	movabs $0xfffffff0000000ff,%rsi
ffffffff80210c1a:	ff ff ff 
ffffffff80210c1d:	48 89 70 10          	mov    %rsi,0x10(%rax)
    
    /* Info init */
    Pgt_Crt->Base=Base|Is_Top;
ffffffff80210c21:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80210c25:	48 0b 45 10          	or     0x10(%rbp),%rax
ffffffff80210c29:	48 89 c2             	mov    %rax,%rdx
ffffffff80210c2c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c30:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
ffffffff80210c34:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80210c38:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff80210c3c:	48 0b 45 20          	or     0x20(%rbp),%rax
ffffffff80210c40:	48 89 c2             	mov    %rax,%rdx
ffffffff80210c43:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c47:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Pgt_Crt->ASID=0U;
ffffffff80210c4b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c4f:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80210c56:	00 
    
    /* Object init - need to add all kernel pages if they are top-level */
    if(__RME_Pgt_Init(Pgt_Crt)<0)
ffffffff80210c57:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c5b:	48 89 c7             	mov    %rax,%rdi
ffffffff80210c5e:	e8 1e 5d 01 00       	call   ffffffff80226981 <__RME_Pgt_Init>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Creation complete */
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
ffffffff80210c63:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80210c67:	48 be 00 00 00 00 00 	movabs $0x4000000000000,%rsi
ffffffff80210c6e:	00 04 00 
ffffffff80210c71:	48 89 30             	mov    %rsi,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PGT,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80210c74:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80210c79:	c9                   	leave
ffffffff80210c7a:	c3                   	ret

ffffffff80210c7b <_RME_Pgt_Del>:
******************************************************************************/
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Pgt)
{
ffffffff80210c7b:	f3 0f 1e fa          	endbr64
ffffffff80210c7f:	55                   	push   %rbp
ffffffff80210c80:	48 89 e5             	mov    %rsp,%rbp
ffffffff80210c83:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80210c87:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80210c8b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80210c8f:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    /* These are used for deletion */
    rme_ptr_t Object;
    rme_ptr_t Table_Size;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80210c93:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210c97:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80210c9c:	48 85 c0             	test   %rax,%rax
ffffffff80210c9f:	0f 85 98 00 00 00    	jne    ffffffff80210d3d <_RME_Pgt_Del+0xc2>
ffffffff80210ca5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210ca9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210cad:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80210cb1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210cb4:	0f 93 c0             	setae  %al
ffffffff80210cb7:	0f b6 c0             	movzbl %al,%eax
ffffffff80210cba:	48 85 c0             	test   %rax,%rax
ffffffff80210cbd:	74 0c                	je     ffffffff80210ccb <_RME_Pgt_Del+0x50>
ffffffff80210cbf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210cc6:	e9 9f 03 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210ccb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210ccf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210cd3:	48 89 c2             	mov    %rax,%rdx
ffffffff80210cd6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210cda:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210cde:	48 01 d0             	add    %rdx,%rax
ffffffff80210ce1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210ce5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210ce9:	48 8b 00             	mov    (%rax),%rax
ffffffff80210cec:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210cf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210cf4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210cf8:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210cfb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210cff:	0f 94 c0             	sete   %al
ffffffff80210d02:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d05:	48 85 c0             	test   %rax,%rax
ffffffff80210d08:	74 0c                	je     ffffffff80210d16 <_RME_Pgt_Del+0x9b>
ffffffff80210d0a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210d11:	e9 54 03 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210d16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210d1a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210d1e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210d22:	0f 95 c0             	setne  %al
ffffffff80210d25:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d28:	48 85 c0             	test   %rax,%rax
ffffffff80210d2b:	0f 84 4c 01 00 00    	je     ffffffff80210e7d <_RME_Pgt_Del+0x202>
ffffffff80210d31:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210d38:	e9 2d 03 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210d3d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210d41:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210d45:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d48:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210d4c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210d50:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210d53:	0f 93 c0             	setae  %al
ffffffff80210d56:	0f b6 c0             	movzbl %al,%eax
ffffffff80210d59:	48 85 c0             	test   %rax,%rax
ffffffff80210d5c:	74 0c                	je     ffffffff80210d6a <_RME_Pgt_Del+0xef>
ffffffff80210d5e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210d65:	e9 00 03 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210d6a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210d6e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80210d72:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210d76:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d79:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80210d7d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210d81:	48 01 d0             	add    %rdx,%rax
ffffffff80210d84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210d88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210d8c:	48 8b 00             	mov    (%rax),%rax
ffffffff80210d8f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210d93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210d97:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210d9b:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210d9e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210da2:	0f 94 c0             	sete   %al
ffffffff80210da5:	0f b6 c0             	movzbl %al,%eax
ffffffff80210da8:	48 85 c0             	test   %rax,%rax
ffffffff80210dab:	74 0c                	je     ffffffff80210db9 <_RME_Pgt_Del+0x13e>
ffffffff80210dad:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210db4:	e9 b1 02 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210db9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210dbd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210dc1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210dc5:	0f 95 c0             	setne  %al
ffffffff80210dc8:	0f b6 c0             	movzbl %al,%eax
ffffffff80210dcb:	48 85 c0             	test   %rax,%rax
ffffffff80210dce:	74 0c                	je     ffffffff80210ddc <_RME_Pgt_Del+0x161>
ffffffff80210dd0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210dd7:	e9 8e 02 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210ddc:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210de0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210de5:	48 89 c2             	mov    %rax,%rdx
ffffffff80210de8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210dec:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210df0:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210df3:	0f 93 c0             	setae  %al
ffffffff80210df6:	0f b6 c0             	movzbl %al,%eax
ffffffff80210df9:	48 85 c0             	test   %rax,%rax
ffffffff80210dfc:	74 0c                	je     ffffffff80210e0a <_RME_Pgt_Del+0x18f>
ffffffff80210dfe:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210e05:	e9 60 02 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210e0a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80210e0e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80210e13:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210e17:	48 89 c2             	mov    %rax,%rdx
ffffffff80210e1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e1e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210e22:	48 01 d0             	add    %rdx,%rax
ffffffff80210e25:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80210e29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e2d:	48 8b 00             	mov    (%rax),%rax
ffffffff80210e30:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210e34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210e38:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210e3c:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210e3f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210e43:	0f 94 c0             	sete   %al
ffffffff80210e46:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e49:	48 85 c0             	test   %rax,%rax
ffffffff80210e4c:	74 0c                	je     ffffffff80210e5a <_RME_Pgt_Del+0x1df>
ffffffff80210e4e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210e55:	e9 10 02 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210e5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210e5e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210e62:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80210e66:	0f 95 c0             	setne  %al
ffffffff80210e69:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e6c:	48 85 c0             	test   %rax,%rax
ffffffff80210e6f:	74 0c                	je     ffffffff80210e7d <_RME_Pgt_Del+0x202>
ffffffff80210e71:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210e78:	e9 ed 01 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80210e7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210e81:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80210e85:	83 e0 02             	and    $0x2,%eax
ffffffff80210e88:	48 85 c0             	test   %rax,%rax
ffffffff80210e8b:	0f 94 c0             	sete   %al
ffffffff80210e8e:	0f b6 c0             	movzbl %al,%eax
ffffffff80210e91:	48 85 c0             	test   %rax,%rax
ffffffff80210e94:	74 0c                	je     ffffffff80210ea2 <_RME_Pgt_Del+0x227>
ffffffff80210e96:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80210e9d:	e9 c8 01 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
ffffffff80210ea2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210ea6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210eaa:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80210eae:	48 39 c2             	cmp    %rax,%rdx
ffffffff80210eb1:	0f 93 c0             	setae  %al
ffffffff80210eb4:	0f b6 c0             	movzbl %al,%eax
ffffffff80210eb7:	48 85 c0             	test   %rax,%rax
ffffffff80210eba:	74 0c                	je     ffffffff80210ec8 <_RME_Pgt_Del+0x24d>
ffffffff80210ebc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80210ec3:	e9 a2 01 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210ec8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80210ecc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80210ed0:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ed3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80210ed7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210edb:	48 01 d0             	add    %rdx,%rax
ffffffff80210ede:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
ffffffff80210ee2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210ee6:	48 8b 00             	mov    (%rax),%rax
ffffffff80210ee9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80210eed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210ef1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210ef5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80210ef8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80210efc:	0f 95 c0             	setne  %al
ffffffff80210eff:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f02:	48 85 c0             	test   %rax,%rax
ffffffff80210f05:	74 0c                	je     ffffffff80210f13 <_RME_Pgt_Del+0x298>
ffffffff80210f07:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80210f0e:	e9 57 01 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210f13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210f17:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80210f1b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80210f1f:	0f 95 c0             	setne  %al
ffffffff80210f22:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f25:	48 85 c0             	test   %rax,%rax
ffffffff80210f28:	74 0c                	je     ffffffff80210f36 <_RME_Pgt_Del+0x2bb>
ffffffff80210f2a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80210f31:	e9 34 01 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210f36:	48 8b 15 c3 90 01 00 	mov    0x190c3(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff80210f3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f41:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80210f45:	48 29 c2             	sub    %rax,%rdx
ffffffff80210f48:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80210f4c:	0f 96 c0             	setbe  %al
ffffffff80210f4f:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f52:	48 98                	cltq
ffffffff80210f54:	48 85 c0             	test   %rax,%rax
ffffffff80210f57:	74 0c                	je     ffffffff80210f65 <_RME_Pgt_Del+0x2ea>
ffffffff80210f59:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80210f60:	e9 05 01 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
ffffffff80210f65:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210f69:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80210f6d:	48 85 c0             	test   %rax,%rax
ffffffff80210f70:	0f 95 c0             	setne  %al
ffffffff80210f73:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f76:	48 85 c0             	test   %rax,%rax
ffffffff80210f79:	74 44                	je     ffffffff80210fbf <_RME_Pgt_Del+0x344>
ffffffff80210f7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80210f7f:	89 c0                	mov    %eax,%eax
ffffffff80210f81:	48 85 c0             	test   %rax,%rax
ffffffff80210f84:	0f 94 c0             	sete   %al
ffffffff80210f87:	0f b6 c0             	movzbl %al,%eax
ffffffff80210f8a:	48 85 c0             	test   %rax,%rax
ffffffff80210f8d:	74 24                	je     ffffffff80210fb3 <_RME_Pgt_Del+0x338>
ffffffff80210f8f:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80210f96:	00 ff ff 
ffffffff80210f99:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80210f9d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210fa0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fa4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80210fa8:	48 89 ce             	mov    %rcx,%rsi
ffffffff80210fab:	48 89 c7             	mov    %rax,%rdi
ffffffff80210fae:	e8 ab b7 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80210fb3:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80210fba:	e9 ab 00 00 00       	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>
    /* Hardware related deletion check passed down to the HAL. The driver should make
     * sure that it does not reference any lower level tables. If the driver layer does
     * not conform to this, the deletion of page table is not guaranteed to main kernel
     * consistency, and such consistency must be maintained by the user-level. It is 
     * recommended that the driver layer enforce such consistency. */
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
ffffffff80210fbf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fc3:	48 89 c7             	mov    %rax,%rdi
ffffffff80210fc6:	e8 88 5a 01 00       	call   ffffffff80226a53 <__RME_Pgt_Del_Check>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
ffffffff80210fcb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fcf:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80210fd3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(((Pgt_Del->Base)&RME_PGT_TOP)!=0U)
ffffffff80210fd7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210fdb:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80210fdf:	83 e0 01             	and    $0x1,%eax
ffffffff80210fe2:	48 85 c0             	test   %rax,%rax
ffffffff80210fe5:	74 1f                	je     ffffffff80211006 <_RME_Pgt_Del+0x38b>
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80210fe7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80210feb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80210fef:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80210ff4:	89 c1                	mov    %eax,%ecx
ffffffff80210ff6:	d3 e2                	shl    %cl,%edx
ffffffff80210ff8:	89 d0                	mov    %edx,%eax
ffffffff80210ffa:	48 98                	cltq
ffffffff80210ffc:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80211000:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211004:	eb 1d                	jmp    ffffffff80211023 <_RME_Pgt_Del+0x3a8>
    }
    else
    {
        RME_COV_MARKER();

        Table_Size=RME_PGT_SIZE_NOM(RME_PGT_NUMORD(Pgt_Del->Order));
ffffffff80211006:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021100a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021100e:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80211013:	89 c1                	mov    %eax,%ecx
ffffffff80211015:	d3 e2                	shl    %cl,%edx
ffffffff80211017:	89 d0                	mov    %edx,%eax
ffffffff80211019:	48 98                	cltq
ffffffff8021101b:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8021101f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Pgt_Del,Type_Stat);
ffffffff80211023:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211027:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8021102b:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80211030:	48 89 ce             	mov    %rcx,%rsi
ffffffff80211033:	48 89 c7             	mov    %rax,%rdi
ffffffff80211036:	e8 23 b7 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021103b:	48 85 c0             	test   %rax,%rax
ffffffff8021103e:	0f 94 c0             	sete   %al
ffffffff80211041:	0f b6 c0             	movzbl %al,%eax
ffffffff80211044:	48 85 c0             	test   %rax,%rax
ffffffff80211047:	74 09                	je     ffffffff80211052 <_RME_Pgt_Del+0x3d7>
ffffffff80211049:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80211050:	eb 18                	jmp    ffffffff8021106a <_RME_Pgt_Del+0x3ef>

    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kot_Erase(Object,Table_Size)==0);
ffffffff80211052:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80211056:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021105a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021105d:	48 89 c7             	mov    %rax,%rdi
ffffffff80211060:	e8 9a 16 00 00       	call   ffffffff802126ff <_RME_Kot_Erase>

    return 0;
ffffffff80211065:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021106a:	c9                   	leave
ffffffff8021106b:	c3                   	ret

ffffffff8021106c <_RME_Pgt_Add>:
                              rme_ptr_t Pos_Dst,
                              rme_ptr_t Flag_Dst,
                              rme_cid_t Cap_Pgt_Src,
                              rme_ptr_t Pos_Src,
                              rme_ptr_t Index)
{
ffffffff8021106c:	f3 0f 1e fa          	endbr64
ffffffff80211070:	55                   	push   %rbp
ffffffff80211071:	48 89 e5             	mov    %rsp,%rbp
ffffffff80211074:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff80211078:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8021107c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80211080:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff80211084:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80211088:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
ffffffff8021108c:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Szord_Src;
    rme_ptr_t Szord_Dst;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
ffffffff80211090:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211094:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211099:	48 85 c0             	test   %rax,%rax
ffffffff8021109c:	0f 85 98 00 00 00    	jne    ffffffff8021113a <_RME_Pgt_Add+0xce>
ffffffff802110a2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802110a6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802110aa:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802110ae:	48 39 c2             	cmp    %rax,%rdx
ffffffff802110b1:	0f 93 c0             	setae  %al
ffffffff802110b4:	0f b6 c0             	movzbl %al,%eax
ffffffff802110b7:	48 85 c0             	test   %rax,%rax
ffffffff802110ba:	74 0c                	je     ffffffff802110c8 <_RME_Pgt_Add+0x5c>
ffffffff802110bc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802110c3:	e9 65 05 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff802110c8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802110cc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802110d0:	48 89 c2             	mov    %rax,%rdx
ffffffff802110d3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802110d7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802110db:	48 01 d0             	add    %rdx,%rax
ffffffff802110de:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802110e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802110e6:	48 8b 00             	mov    (%rax),%rax
ffffffff802110e9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802110ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802110f1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802110f5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802110f8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802110fc:	0f 94 c0             	sete   %al
ffffffff802110ff:	0f b6 c0             	movzbl %al,%eax
ffffffff80211102:	48 85 c0             	test   %rax,%rax
ffffffff80211105:	74 0c                	je     ffffffff80211113 <_RME_Pgt_Add+0xa7>
ffffffff80211107:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021110e:	e9 1a 05 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff80211113:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211117:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021111b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021111f:	0f 95 c0             	setne  %al
ffffffff80211122:	0f b6 c0             	movzbl %al,%eax
ffffffff80211125:	48 85 c0             	test   %rax,%rax
ffffffff80211128:	0f 84 4c 01 00 00    	je     ffffffff8021127a <_RME_Pgt_Add+0x20e>
ffffffff8021112e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211135:	e9 f3 04 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff8021113a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021113e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211142:	48 89 c2             	mov    %rax,%rdx
ffffffff80211145:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211149:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021114d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211150:	0f 93 c0             	setae  %al
ffffffff80211153:	0f b6 c0             	movzbl %al,%eax
ffffffff80211156:	48 85 c0             	test   %rax,%rax
ffffffff80211159:	74 0c                	je     ffffffff80211167 <_RME_Pgt_Add+0xfb>
ffffffff8021115b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211162:	e9 c6 04 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff80211167:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021116b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021116f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211173:	48 89 c2             	mov    %rax,%rdx
ffffffff80211176:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021117a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021117e:	48 01 d0             	add    %rdx,%rax
ffffffff80211181:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211185:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211189:	48 8b 00             	mov    (%rax),%rax
ffffffff8021118c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211190:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211194:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211198:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021119b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021119f:	0f 94 c0             	sete   %al
ffffffff802111a2:	0f b6 c0             	movzbl %al,%eax
ffffffff802111a5:	48 85 c0             	test   %rax,%rax
ffffffff802111a8:	74 0c                	je     ffffffff802111b6 <_RME_Pgt_Add+0x14a>
ffffffff802111aa:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802111b1:	e9 77 04 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff802111b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802111ba:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802111be:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802111c2:	0f 95 c0             	setne  %al
ffffffff802111c5:	0f b6 c0             	movzbl %al,%eax
ffffffff802111c8:	48 85 c0             	test   %rax,%rax
ffffffff802111cb:	74 0c                	je     ffffffff802111d9 <_RME_Pgt_Add+0x16d>
ffffffff802111cd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802111d4:	e9 54 04 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff802111d9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802111dd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802111e2:	48 89 c2             	mov    %rax,%rdx
ffffffff802111e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802111e9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802111ed:	48 39 c2             	cmp    %rax,%rdx
ffffffff802111f0:	0f 93 c0             	setae  %al
ffffffff802111f3:	0f b6 c0             	movzbl %al,%eax
ffffffff802111f6:	48 85 c0             	test   %rax,%rax
ffffffff802111f9:	74 0c                	je     ffffffff80211207 <_RME_Pgt_Add+0x19b>
ffffffff802111fb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211202:	e9 26 04 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff80211207:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021120b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211210:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211214:	48 89 c2             	mov    %rax,%rdx
ffffffff80211217:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021121b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021121f:	48 01 d0             	add    %rdx,%rax
ffffffff80211222:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211226:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021122a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021122d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80211231:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211235:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211239:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021123c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211240:	0f 94 c0             	sete   %al
ffffffff80211243:	0f b6 c0             	movzbl %al,%eax
ffffffff80211246:	48 85 c0             	test   %rax,%rax
ffffffff80211249:	74 0c                	je     ffffffff80211257 <_RME_Pgt_Add+0x1eb>
ffffffff8021124b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211252:	e9 d6 03 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff80211257:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021125b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021125f:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211263:	0f 95 c0             	setne  %al
ffffffff80211266:	0f b6 c0             	movzbl %al,%eax
ffffffff80211269:	48 85 c0             	test   %rax,%rax
ffffffff8021126c:	74 0c                	je     ffffffff8021127a <_RME_Pgt_Add+0x20e>
ffffffff8021126e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211275:	e9 b3 03 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
                   struct RME_Cap_Pgt*,Pgt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
ffffffff8021127a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021127e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211283:	48 85 c0             	test   %rax,%rax
ffffffff80211286:	0f 85 98 00 00 00    	jne    ffffffff80211324 <_RME_Pgt_Add+0x2b8>
ffffffff8021128c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211290:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211294:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80211298:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021129b:	0f 93 c0             	setae  %al
ffffffff8021129e:	0f b6 c0             	movzbl %al,%eax
ffffffff802112a1:	48 85 c0             	test   %rax,%rax
ffffffff802112a4:	74 0c                	je     ffffffff802112b2 <_RME_Pgt_Add+0x246>
ffffffff802112a6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802112ad:	e9 7b 03 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff802112b2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802112b6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802112ba:	48 89 c2             	mov    %rax,%rdx
ffffffff802112bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802112c1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802112c5:	48 01 d0             	add    %rdx,%rax
ffffffff802112c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802112cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802112d0:	48 8b 00             	mov    (%rax),%rax
ffffffff802112d3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802112d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802112db:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802112df:	0f b7 c0             	movzwl %ax,%eax
ffffffff802112e2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802112e6:	0f 94 c0             	sete   %al
ffffffff802112e9:	0f b6 c0             	movzbl %al,%eax
ffffffff802112ec:	48 85 c0             	test   %rax,%rax
ffffffff802112ef:	74 0c                	je     ffffffff802112fd <_RME_Pgt_Add+0x291>
ffffffff802112f1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802112f8:	e9 30 03 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff802112fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211301:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211305:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211309:	0f 95 c0             	setne  %al
ffffffff8021130c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021130f:	48 85 c0             	test   %rax,%rax
ffffffff80211312:	0f 84 4c 01 00 00    	je     ffffffff80211464 <_RME_Pgt_Add+0x3f8>
ffffffff80211318:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021131f:	e9 09 03 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff80211324:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211328:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021132c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021132f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211333:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211337:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021133a:	0f 93 c0             	setae  %al
ffffffff8021133d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211340:	48 85 c0             	test   %rax,%rax
ffffffff80211343:	74 0c                	je     ffffffff80211351 <_RME_Pgt_Add+0x2e5>
ffffffff80211345:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021134c:	e9 dc 02 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff80211351:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80211355:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211359:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021135d:	48 89 c2             	mov    %rax,%rdx
ffffffff80211360:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211364:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211368:	48 01 d0             	add    %rdx,%rax
ffffffff8021136b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021136f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211373:	48 8b 00             	mov    (%rax),%rax
ffffffff80211376:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021137a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021137e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211382:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211385:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211389:	0f 94 c0             	sete   %al
ffffffff8021138c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021138f:	48 85 c0             	test   %rax,%rax
ffffffff80211392:	74 0c                	je     ffffffff802113a0 <_RME_Pgt_Add+0x334>
ffffffff80211394:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021139b:	e9 8d 02 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff802113a0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802113a4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802113a8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802113ac:	0f 95 c0             	setne  %al
ffffffff802113af:	0f b6 c0             	movzbl %al,%eax
ffffffff802113b2:	48 85 c0             	test   %rax,%rax
ffffffff802113b5:	74 0c                	je     ffffffff802113c3 <_RME_Pgt_Add+0x357>
ffffffff802113b7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802113be:	e9 6a 02 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff802113c3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802113c7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802113cc:	48 89 c2             	mov    %rax,%rdx
ffffffff802113cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802113d3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802113d7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802113da:	0f 93 c0             	setae  %al
ffffffff802113dd:	0f b6 c0             	movzbl %al,%eax
ffffffff802113e0:	48 85 c0             	test   %rax,%rax
ffffffff802113e3:	74 0c                	je     ffffffff802113f1 <_RME_Pgt_Add+0x385>
ffffffff802113e5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802113ec:	e9 3c 02 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff802113f1:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802113f5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802113fa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802113fe:	48 89 c2             	mov    %rax,%rdx
ffffffff80211401:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211405:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211409:	48 01 d0             	add    %rdx,%rax
ffffffff8021140c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211410:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211414:	48 8b 00             	mov    (%rax),%rax
ffffffff80211417:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021141b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021141f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211423:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211426:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021142a:	0f 94 c0             	sete   %al
ffffffff8021142d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211430:	48 85 c0             	test   %rax,%rax
ffffffff80211433:	74 0c                	je     ffffffff80211441 <_RME_Pgt_Add+0x3d5>
ffffffff80211435:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021143c:	e9 ec 01 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
ffffffff80211441:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211445:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211449:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021144d:	0f 95 c0             	setne  %al
ffffffff80211450:	0f b6 c0             	movzbl %al,%eax
ffffffff80211453:	48 85 c0             	test   %rax,%rax
ffffffff80211456:	74 0c                	je     ffffffff80211464 <_RME_Pgt_Add+0x3f8>
ffffffff80211458:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021145f:	e9 c9 01 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
                   struct RME_Cap_Pgt*,Pgt_Src,Type_Stat);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
ffffffff80211464:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211468:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021146c:	83 e0 02             	and    $0x2,%eax
ffffffff8021146f:	48 85 c0             	test   %rax,%rax
ffffffff80211472:	0f 94 c0             	sete   %al
ffffffff80211475:	0f b6 c0             	movzbl %al,%eax
ffffffff80211478:	48 85 c0             	test   %rax,%rax
ffffffff8021147b:	74 0c                	je     ffffffff80211489 <_RME_Pgt_Add+0x41d>
ffffffff8021147d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211484:	e9 a4 01 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
ffffffff80211489:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021148d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211491:	83 e0 01             	and    $0x1,%eax
ffffffff80211494:	48 85 c0             	test   %rax,%rax
ffffffff80211497:	0f 94 c0             	sete   %al
ffffffff8021149a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021149d:	48 85 c0             	test   %rax,%rax
ffffffff802114a0:	74 0c                	je     ffffffff802114ae <_RME_Pgt_Add+0x442>
ffffffff802114a2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802114a9:	e9 7f 01 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
    /* Check the operation range - This is page table specific */
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff802114ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802114b2:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802114b6:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff802114ba:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
ffffffff802114be:	72 40                	jb     ffffffff80211500 <_RME_Pgt_Add+0x494>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff802114c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802114c4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802114c8:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802114cc:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
ffffffff802114d1:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff802114d5:	72 29                	jb     ffffffff80211500 <_RME_Pgt_Add+0x494>
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff802114d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802114db:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802114df:	48 c1 e8 24          	shr    $0x24,%rax
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
ffffffff802114e3:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
ffffffff802114e7:	72 17                	jb     ffffffff80211500 <_RME_Pgt_Add+0x494>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
ffffffff802114e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802114ed:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802114f1:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802114f5:	25 ff ff ff 0f       	and    $0xfffffff,%eax
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
ffffffff802114fa:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff802114fe:	73 0c                	jae    ffffffff8021150c <_RME_Pgt_Add+0x4a0>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211500:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211507:	e9 21 01 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the size order relationship is correct */
    Szord_Dst=RME_PGT_SIZEORD(Pgt_Dst->Order);
ffffffff8021150c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211510:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211514:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211518:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Szord_Src=RME_PGT_SIZEORD(Pgt_Src->Order);
ffffffff8021151c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211520:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211524:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211528:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Szord_Dst>Szord_Src)
ffffffff8021152c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211530:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80211534:	73 0c                	jae    ffffffff80211542 <_RME_Pgt_Add+0x4d6>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211536:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff8021153d:	e9 eb 00 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the positions are out of range - NMORD is restricted, no UB */
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff80211542:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211546:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021154a:	89 c2                	mov    %eax,%edx
ffffffff8021154c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80211550:	89 d1                	mov    %edx,%ecx
ffffffff80211552:	48 d3 e8             	shr    %cl,%rax
ffffffff80211555:	48 85 c0             	test   %rax,%rax
ffffffff80211558:	75 18                	jne    ffffffff80211572 <_RME_Pgt_Add+0x506>
       ((Pos_Src>>RME_PGT_NUMORD(Pgt_Src->Order))!=0U))
ffffffff8021155a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021155e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211562:	89 c2                	mov    %eax,%edx
ffffffff80211564:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80211568:	89 d1                	mov    %edx,%ecx
ffffffff8021156a:	48 d3 e8             	shr    %cl,%rax
    if(((Pos_Dst>>RME_PGT_NUMORD(Pgt_Dst->Order))!=0U)||
ffffffff8021156d:	48 85 c0             	test   %rax,%rax
ffffffff80211570:	74 0c                	je     ffffffff8021157e <_RME_Pgt_Add+0x512>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211572:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211579:	e9 af 00 00 00       	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the source subposition is out of range - avoid UB */
    if(Szord_Src<RME_WORD_BIT)
ffffffff8021157e:	48 83 7d d0 3f       	cmpq   $0x3f,-0x30(%rbp)
ffffffff80211583:	77 2c                	ja     ffffffff802115b1 <_RME_Pgt_Add+0x545>
    {
        RME_COV_MARKER();
        
        /* No UB because Szord_Dst<=Szord_Src */
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
ffffffff80211585:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211589:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021158e:	89 c1                	mov    %eax,%ecx
ffffffff80211590:	48 d3 e2             	shl    %cl,%rdx
ffffffff80211593:	48 89 d0             	mov    %rdx,%rax
ffffffff80211596:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021159a:	89 d1                	mov    %edx,%ecx
ffffffff8021159c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff802115a0:	48 d3 e2             	shl    %cl,%rdx
ffffffff802115a3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802115a6:	72 09                	jb     ffffffff802115b1 <_RME_Pgt_Add+0x545>
        {
            RME_COV_MARKER();

            return RME_ERR_PGT_ADDR;
ffffffff802115a8:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802115af:	eb 7c                	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the physical address and RME standard flags of that source page */
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
ffffffff802115b1:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
ffffffff802115b5:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
ffffffff802115b9:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
ffffffff802115bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802115c1:	48 89 c7             	mov    %rax,%rdi
ffffffff802115c4:	e8 6d 58 01 00       	call   ffffffff80226e36 <__RME_Pgt_Lookup>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Calculate the destination physical address - avoid UB */
    if(Szord_Dst<RME_WORD_BIT)
ffffffff802115c9:	48 83 7d d8 3f       	cmpq   $0x3f,-0x28(%rbp)
ffffffff802115ce:	77 1f                	ja     ffffffff802115ef <_RME_Pgt_Add+0x583>
    {
        RME_COV_MARKER();
        
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
ffffffff802115d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802115d4:	89 c2                	mov    %eax,%edx
ffffffff802115d6:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802115da:	89 d1                	mov    %edx,%ecx
ffffffff802115dc:	48 d3 e0             	shl    %cl,%rax
ffffffff802115df:	48 89 c2             	mov    %rax,%rdx
ffffffff802115e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802115e6:	48 01 d0             	add    %rdx,%rax
ffffffff802115e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802115ed:	eb 08                	jmp    ffffffff802115f7 <_RME_Pgt_Add+0x58b>
    /* The destination is also full range */
    else
    {
        RME_COV_MARKER();
        
        Paddr_Dst=Paddr_Src;
ffffffff802115ef:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802115f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        }
#endif
    }
    
    /* Analyze the flags - we do not allow expansion of access permissions */
    if(((Flag_Dst)&(~Flag_Src))!=0U)
ffffffff802115f7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802115fb:	48 f7 d0             	not    %rax
ffffffff802115fe:	48 23 45 a0          	and    -0x60(%rbp),%rax
ffffffff80211602:	48 85 c0             	test   %rax,%rax
ffffffff80211605:	74 09                	je     ffffffff80211610 <_RME_Pgt_Add+0x5a4>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_PERM;
ffffffff80211607:	48 c7 c0 98 ff ff ff 	mov    $0xffffffffffffff98,%rax
ffffffff8021160e:	eb 1d                	jmp    ffffffff8021162d <_RME_Pgt_Add+0x5c1>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
ffffffff80211610:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
ffffffff80211614:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80211618:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8021161c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211620:	48 89 c7             	mov    %rax,%rdi
ffffffff80211623:	e8 42 54 01 00       	call   ffffffff80226a6a <__RME_Pgt_Page_Map>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff80211628:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021162d:	c9                   	leave
ffffffff8021162e:	c3                   	ret

ffffffff8021162f <_RME_Pgt_Rem>:
******************************************************************************/
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Rem(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Pgt,
                              rme_ptr_t Pos)
{
ffffffff8021162f:	f3 0f 1e fa          	endbr64
ffffffff80211633:	55                   	push   %rbp
ffffffff80211634:	48 89 e5             	mov    %rsp,%rbp
ffffffff80211637:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021163b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021163f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80211643:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct RME_Cap_Pgt* Pgt_Rem;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
ffffffff80211647:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021164b:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211650:	48 85 c0             	test   %rax,%rax
ffffffff80211653:	0f 85 98 00 00 00    	jne    ffffffff802116f1 <_RME_Pgt_Rem+0xc2>
ffffffff80211659:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021165d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211661:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80211665:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211668:	0f 93 c0             	setae  %al
ffffffff8021166b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021166e:	48 85 c0             	test   %rax,%rax
ffffffff80211671:	74 0c                	je     ffffffff8021167f <_RME_Pgt_Rem+0x50>
ffffffff80211673:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021167a:	e9 3f 02 00 00       	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
ffffffff8021167f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211683:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211687:	48 89 c2             	mov    %rax,%rdx
ffffffff8021168a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021168e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211692:	48 01 d0             	add    %rdx,%rax
ffffffff80211695:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211699:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021169d:	48 8b 00             	mov    (%rax),%rax
ffffffff802116a0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802116a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802116a8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802116ac:	0f b7 c0             	movzwl %ax,%eax
ffffffff802116af:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802116b3:	0f 94 c0             	sete   %al
ffffffff802116b6:	0f b6 c0             	movzbl %al,%eax
ffffffff802116b9:	48 85 c0             	test   %rax,%rax
ffffffff802116bc:	74 0c                	je     ffffffff802116ca <_RME_Pgt_Rem+0x9b>
ffffffff802116be:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802116c5:	e9 f4 01 00 00       	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
ffffffff802116ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802116ce:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802116d2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802116d6:	0f 95 c0             	setne  %al
ffffffff802116d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802116dc:	48 85 c0             	test   %rax,%rax
ffffffff802116df:	0f 84 4c 01 00 00    	je     ffffffff80211831 <_RME_Pgt_Rem+0x202>
ffffffff802116e5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802116ec:	e9 cd 01 00 00       	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
ffffffff802116f1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802116f5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802116f9:	48 89 c2             	mov    %rax,%rdx
ffffffff802116fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211700:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211704:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211707:	0f 93 c0             	setae  %al
ffffffff8021170a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021170d:	48 85 c0             	test   %rax,%rax
ffffffff80211710:	74 0c                	je     ffffffff8021171e <_RME_Pgt_Rem+0xef>
ffffffff80211712:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211719:	e9 a0 01 00 00       	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
ffffffff8021171e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211722:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211726:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021172a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021172d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211731:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211735:	48 01 d0             	add    %rdx,%rax
ffffffff80211738:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021173c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211740:	48 8b 00             	mov    (%rax),%rax
ffffffff80211743:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211747:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021174b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021174f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211752:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211756:	0f 94 c0             	sete   %al
ffffffff80211759:	0f b6 c0             	movzbl %al,%eax
ffffffff8021175c:	48 85 c0             	test   %rax,%rax
ffffffff8021175f:	74 0c                	je     ffffffff8021176d <_RME_Pgt_Rem+0x13e>
ffffffff80211761:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211768:	e9 51 01 00 00       	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
ffffffff8021176d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211771:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211775:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211779:	0f 95 c0             	setne  %al
ffffffff8021177c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021177f:	48 85 c0             	test   %rax,%rax
ffffffff80211782:	74 0c                	je     ffffffff80211790 <_RME_Pgt_Rem+0x161>
ffffffff80211784:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021178b:	e9 2e 01 00 00       	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
ffffffff80211790:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80211794:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211799:	48 89 c2             	mov    %rax,%rdx
ffffffff8021179c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117a0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802117a4:	48 39 c2             	cmp    %rax,%rdx
ffffffff802117a7:	0f 93 c0             	setae  %al
ffffffff802117aa:	0f b6 c0             	movzbl %al,%eax
ffffffff802117ad:	48 85 c0             	test   %rax,%rax
ffffffff802117b0:	74 0c                	je     ffffffff802117be <_RME_Pgt_Rem+0x18f>
ffffffff802117b2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802117b9:	e9 00 01 00 00       	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
ffffffff802117be:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802117c2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802117c7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802117cb:	48 89 c2             	mov    %rax,%rdx
ffffffff802117ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117d2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802117d6:	48 01 d0             	add    %rdx,%rax
ffffffff802117d9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802117dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802117e1:	48 8b 00             	mov    (%rax),%rax
ffffffff802117e4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802117e8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802117ec:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802117f0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802117f3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802117f7:	0f 94 c0             	sete   %al
ffffffff802117fa:	0f b6 c0             	movzbl %al,%eax
ffffffff802117fd:	48 85 c0             	test   %rax,%rax
ffffffff80211800:	74 0c                	je     ffffffff8021180e <_RME_Pgt_Rem+0x1df>
ffffffff80211802:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211809:	e9 b0 00 00 00       	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
ffffffff8021180e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211812:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211816:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021181a:	0f 95 c0             	setne  %al
ffffffff8021181d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211820:	48 85 c0             	test   %rax,%rax
ffffffff80211823:	74 0c                	je     ffffffff80211831 <_RME_Pgt_Rem+0x202>
ffffffff80211825:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021182c:	e9 8d 00 00 00       	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
                   struct RME_Cap_Pgt*,Pgt_Rem,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
ffffffff80211831:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211835:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211839:	83 e0 04             	and    $0x4,%eax
ffffffff8021183c:	48 85 c0             	test   %rax,%rax
ffffffff8021183f:	0f 94 c0             	sete   %al
ffffffff80211842:	0f b6 c0             	movzbl %al,%eax
ffffffff80211845:	48 85 c0             	test   %rax,%rax
ffffffff80211848:	74 09                	je     ffffffff80211853 <_RME_Pgt_Rem+0x224>
ffffffff8021184a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211851:	eb 6b                	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80211853:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211857:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021185b:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8021185f:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80211863:	72 17                	jb     ffffffff8021187c <_RME_Pgt_Rem+0x24d>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
ffffffff80211865:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211869:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021186d:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211871:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
ffffffff80211876:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff8021187a:	73 09                	jae    ffffffff80211885 <_RME_Pgt_Rem+0x256>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021187c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211883:	eb 39                	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Rem->Order))!=0U)
ffffffff80211885:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211889:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021188d:	89 c2                	mov    %eax,%edx
ffffffff8021188f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211893:	89 d1                	mov    %edx,%ecx
ffffffff80211895:	48 d3 e8             	shr    %cl,%rax
ffffffff80211898:	48 85 c0             	test   %rax,%rax
ffffffff8021189b:	74 09                	je     ffffffff802118a6 <_RME_Pgt_Rem+0x277>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff8021189d:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802118a4:	eb 18                	jmp    ffffffff802118be <_RME_Pgt_Rem+0x28f>
        /* No action required */
    }

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
ffffffff802118a6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802118aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802118ae:	48 89 d6             	mov    %rdx,%rsi
ffffffff802118b1:	48 89 c7             	mov    %rax,%rdi
ffffffff802118b4:	e8 bc 52 01 00       	call   ffffffff80226b75 <__RME_Pgt_Page_Unmap>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff802118b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802118be:	c9                   	leave
ffffffff802118bf:	c3                   	ret

ffffffff802118c0 <_RME_Pgt_Con>:
static rme_ret_t _RME_Pgt_Con(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Pgt_Parent,
                              rme_ptr_t Pos,
                              rme_cid_t Cap_Pgt_Child,
                              rme_ptr_t Flag_Child)
{
ffffffff802118c0:	f3 0f 1e fa          	endbr64
ffffffff802118c4:	55                   	push   %rbp
ffffffff802118c5:	48 89 e5             	mov    %rsp,%rbp
ffffffff802118c8:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff802118cc:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff802118d0:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff802118d4:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff802118d8:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff802118dc:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
    rme_ptr_t End_Parent;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
ffffffff802118e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802118e4:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802118e9:	48 85 c0             	test   %rax,%rax
ffffffff802118ec:	0f 85 98 00 00 00    	jne    ffffffff8021198a <_RME_Pgt_Con+0xca>
ffffffff802118f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802118f6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802118fa:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff802118fe:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211901:	0f 93 c0             	setae  %al
ffffffff80211904:	0f b6 c0             	movzbl %al,%eax
ffffffff80211907:	48 85 c0             	test   %rax,%rax
ffffffff8021190a:	74 0c                	je     ffffffff80211918 <_RME_Pgt_Con+0x58>
ffffffff8021190c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211913:	e9 1f 05 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211918:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021191c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211920:	48 89 c2             	mov    %rax,%rdx
ffffffff80211923:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211927:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021192b:	48 01 d0             	add    %rdx,%rax
ffffffff8021192e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211932:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211936:	48 8b 00             	mov    (%rax),%rax
ffffffff80211939:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021193d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211941:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211945:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211948:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021194c:	0f 94 c0             	sete   %al
ffffffff8021194f:	0f b6 c0             	movzbl %al,%eax
ffffffff80211952:	48 85 c0             	test   %rax,%rax
ffffffff80211955:	74 0c                	je     ffffffff80211963 <_RME_Pgt_Con+0xa3>
ffffffff80211957:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021195e:	e9 d4 04 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211963:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211967:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021196b:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff8021196f:	0f 95 c0             	setne  %al
ffffffff80211972:	0f b6 c0             	movzbl %al,%eax
ffffffff80211975:	48 85 c0             	test   %rax,%rax
ffffffff80211978:	0f 84 4c 01 00 00    	je     ffffffff80211aca <_RME_Pgt_Con+0x20a>
ffffffff8021197e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211985:	e9 ad 04 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff8021198a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021198e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211992:	48 89 c2             	mov    %rax,%rdx
ffffffff80211995:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211999:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021199d:	48 39 c2             	cmp    %rax,%rdx
ffffffff802119a0:	0f 93 c0             	setae  %al
ffffffff802119a3:	0f b6 c0             	movzbl %al,%eax
ffffffff802119a6:	48 85 c0             	test   %rax,%rax
ffffffff802119a9:	74 0c                	je     ffffffff802119b7 <_RME_Pgt_Con+0xf7>
ffffffff802119ab:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802119b2:	e9 80 04 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff802119b7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802119bb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802119bf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802119c3:	48 89 c2             	mov    %rax,%rdx
ffffffff802119c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802119ca:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802119ce:	48 01 d0             	add    %rdx,%rax
ffffffff802119d1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802119d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802119d9:	48 8b 00             	mov    (%rax),%rax
ffffffff802119dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802119e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802119e4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802119e8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802119eb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802119ef:	0f 94 c0             	sete   %al
ffffffff802119f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802119f5:	48 85 c0             	test   %rax,%rax
ffffffff802119f8:	74 0c                	je     ffffffff80211a06 <_RME_Pgt_Con+0x146>
ffffffff802119fa:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211a01:	e9 31 04 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211a06:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211a0a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211a0e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211a12:	0f 95 c0             	setne  %al
ffffffff80211a15:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a18:	48 85 c0             	test   %rax,%rax
ffffffff80211a1b:	74 0c                	je     ffffffff80211a29 <_RME_Pgt_Con+0x169>
ffffffff80211a1d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211a24:	e9 0e 04 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211a29:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211a2d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211a32:	48 89 c2             	mov    %rax,%rdx
ffffffff80211a35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211a39:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211a3d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211a40:	0f 93 c0             	setae  %al
ffffffff80211a43:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a46:	48 85 c0             	test   %rax,%rax
ffffffff80211a49:	74 0c                	je     ffffffff80211a57 <_RME_Pgt_Con+0x197>
ffffffff80211a4b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211a52:	e9 e0 03 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211a57:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80211a5b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211a60:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211a64:	48 89 c2             	mov    %rax,%rdx
ffffffff80211a67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211a6b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211a6f:	48 01 d0             	add    %rdx,%rax
ffffffff80211a72:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211a76:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211a7a:	48 8b 00             	mov    (%rax),%rax
ffffffff80211a7d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211a81:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211a85:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211a89:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211a8c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211a90:	0f 94 c0             	sete   %al
ffffffff80211a93:	0f b6 c0             	movzbl %al,%eax
ffffffff80211a96:	48 85 c0             	test   %rax,%rax
ffffffff80211a99:	74 0c                	je     ffffffff80211aa7 <_RME_Pgt_Con+0x1e7>
ffffffff80211a9b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211aa2:	e9 90 03 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211aa7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211aab:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211aaf:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211ab3:	0f 95 c0             	setne  %al
ffffffff80211ab6:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ab9:	48 85 c0             	test   %rax,%rax
ffffffff80211abc:	74 0c                	je     ffffffff80211aca <_RME_Pgt_Con+0x20a>
ffffffff80211abe:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211ac5:	e9 6d 03 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
ffffffff80211aca:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211ace:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211ad3:	48 85 c0             	test   %rax,%rax
ffffffff80211ad6:	0f 85 98 00 00 00    	jne    ffffffff80211b74 <_RME_Pgt_Con+0x2b4>
ffffffff80211adc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211ae0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211ae4:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80211ae8:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211aeb:	0f 93 c0             	setae  %al
ffffffff80211aee:	0f b6 c0             	movzbl %al,%eax
ffffffff80211af1:	48 85 c0             	test   %rax,%rax
ffffffff80211af4:	74 0c                	je     ffffffff80211b02 <_RME_Pgt_Con+0x242>
ffffffff80211af6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211afd:	e9 35 03 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211b02:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211b06:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211b0a:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b0d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211b11:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211b15:	48 01 d0             	add    %rdx,%rax
ffffffff80211b18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211b1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211b20:	48 8b 00             	mov    (%rax),%rax
ffffffff80211b23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211b27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211b2b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211b2f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211b32:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211b36:	0f 94 c0             	sete   %al
ffffffff80211b39:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b3c:	48 85 c0             	test   %rax,%rax
ffffffff80211b3f:	74 0c                	je     ffffffff80211b4d <_RME_Pgt_Con+0x28d>
ffffffff80211b41:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211b48:	e9 ea 02 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211b4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211b51:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211b55:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211b59:	0f 95 c0             	setne  %al
ffffffff80211b5c:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b5f:	48 85 c0             	test   %rax,%rax
ffffffff80211b62:	0f 84 4c 01 00 00    	je     ffffffff80211cb4 <_RME_Pgt_Con+0x3f4>
ffffffff80211b68:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211b6f:	e9 c3 02 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211b74:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211b78:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211b7c:	48 89 c2             	mov    %rax,%rdx
ffffffff80211b7f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211b83:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211b87:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211b8a:	0f 93 c0             	setae  %al
ffffffff80211b8d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211b90:	48 85 c0             	test   %rax,%rax
ffffffff80211b93:	74 0c                	je     ffffffff80211ba1 <_RME_Pgt_Con+0x2e1>
ffffffff80211b95:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211b9c:	e9 96 02 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211ba1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211ba5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211ba9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211bad:	48 89 c2             	mov    %rax,%rdx
ffffffff80211bb0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80211bb4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211bb8:	48 01 d0             	add    %rdx,%rax
ffffffff80211bbb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211bbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211bc3:	48 8b 00             	mov    (%rax),%rax
ffffffff80211bc6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211bca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211bce:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211bd2:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211bd5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211bd9:	0f 94 c0             	sete   %al
ffffffff80211bdc:	0f b6 c0             	movzbl %al,%eax
ffffffff80211bdf:	48 85 c0             	test   %rax,%rax
ffffffff80211be2:	74 0c                	je     ffffffff80211bf0 <_RME_Pgt_Con+0x330>
ffffffff80211be4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211beb:	e9 47 02 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211bf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211bf4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211bf8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211bfc:	0f 95 c0             	setne  %al
ffffffff80211bff:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c02:	48 85 c0             	test   %rax,%rax
ffffffff80211c05:	74 0c                	je     ffffffff80211c13 <_RME_Pgt_Con+0x353>
ffffffff80211c07:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211c0e:	e9 24 02 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211c13:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211c17:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211c1c:	48 89 c2             	mov    %rax,%rdx
ffffffff80211c1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211c23:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211c27:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211c2a:	0f 93 c0             	setae  %al
ffffffff80211c2d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c30:	48 85 c0             	test   %rax,%rax
ffffffff80211c33:	74 0c                	je     ffffffff80211c41 <_RME_Pgt_Con+0x381>
ffffffff80211c35:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211c3c:	e9 f6 01 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211c41:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80211c45:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211c4a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211c4e:	48 89 c2             	mov    %rax,%rdx
ffffffff80211c51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211c55:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211c59:	48 01 d0             	add    %rdx,%rax
ffffffff80211c5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80211c60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211c64:	48 8b 00             	mov    (%rax),%rax
ffffffff80211c67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211c6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211c6f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211c73:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211c76:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211c7a:	0f 94 c0             	sete   %al
ffffffff80211c7d:	0f b6 c0             	movzbl %al,%eax
ffffffff80211c80:	48 85 c0             	test   %rax,%rax
ffffffff80211c83:	74 0c                	je     ffffffff80211c91 <_RME_Pgt_Con+0x3d1>
ffffffff80211c85:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211c8c:	e9 a6 01 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
ffffffff80211c91:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211c95:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211c99:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80211c9d:	0f 95 c0             	setne  %al
ffffffff80211ca0:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ca3:	48 85 c0             	test   %rax,%rax
ffffffff80211ca6:	74 0c                	je     ffffffff80211cb4 <_RME_Pgt_Con+0x3f4>
ffffffff80211ca8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211caf:	e9 83 01 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
                   struct RME_Cap_Pgt*,Pgt_Child,Type_Stat);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
ffffffff80211cb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211cb8:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211cbc:	83 e0 10             	and    $0x10,%eax
ffffffff80211cbf:	48 85 c0             	test   %rax,%rax
ffffffff80211cc2:	0f 94 c0             	sete   %al
ffffffff80211cc5:	0f b6 c0             	movzbl %al,%eax
ffffffff80211cc8:	48 85 c0             	test   %rax,%rax
ffffffff80211ccb:	74 0c                	je     ffffffff80211cd9 <_RME_Pgt_Con+0x419>
ffffffff80211ccd:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211cd4:	e9 5e 01 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff80211cd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211cdd:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211ce1:	83 e0 08             	and    $0x8,%eax
ffffffff80211ce4:	48 85 c0             	test   %rax,%rax
ffffffff80211ce7:	0f 94 c0             	sete   %al
ffffffff80211cea:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ced:	48 85 c0             	test   %rax,%rax
ffffffff80211cf0:	74 0c                	je     ffffffff80211cfe <_RME_Pgt_Con+0x43e>
ffffffff80211cf2:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211cf9:	e9 39 01 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211cfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d02:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211d06:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff80211d0a:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff80211d0e:	72 17                	jb     ffffffff80211d27 <_RME_Pgt_Con+0x467>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80211d10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d14:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80211d18:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80211d1c:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80211d21:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff80211d25:	73 0c                	jae    ffffffff80211d33 <_RME_Pgt_Con+0x473>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff80211d27:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80211d2e:	e9 04 01 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff80211d33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d37:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d3b:	89 c2                	mov    %eax,%edx
ffffffff80211d3d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80211d41:	89 d1                	mov    %edx,%ecx
ffffffff80211d43:	48 d3 e8             	shr    %cl,%rax
ffffffff80211d46:	48 85 c0             	test   %rax,%rax
ffffffff80211d49:	74 0c                	je     ffffffff80211d57 <_RME_Pgt_Con+0x497>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211d4b:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211d52:	e9 e0 00 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the child table falls within one slot of the parent table */
    Order_Child=RME_PGT_NUMORD(Pgt_Child->Order)+RME_PGT_SIZEORD(Pgt_Child->Order);
ffffffff80211d57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d5b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d5f:	89 c2                	mov    %eax,%edx
ffffffff80211d61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211d65:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d69:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211d6d:	48 01 d0             	add    %rdx,%rax
ffffffff80211d70:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Szord_Parent=RME_PGT_SIZEORD(Pgt_Parent->Order);
ffffffff80211d74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211d78:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211d7c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211d80:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    if(Szord_Parent<Order_Child)
ffffffff80211d84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211d88:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80211d8c:	73 0c                	jae    ffffffff80211d9a <_RME_Pgt_Con+0x4da>
    {
        RME_COV_MARKER();
        
        return RME_ERR_PGT_ADDR;
ffffffff80211d8e:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211d95:	e9 9d 00 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
        RME_COV_MARKER();
        /* No action required */
    }
#else
    /* Force no path compression when virtual mappings are enabled */
    if(Szord_Parent!=Order_Child)
ffffffff80211d9a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211d9e:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80211da2:	74 0c                	je     ffffffff80211db0 <_RME_Pgt_Con+0x4f0>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff80211da4:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff80211dab:	e9 87 00 00 00       	jmp    ffffffff80211e37 <_RME_Pgt_Con+0x577>
    }
#endif

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict */
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
ffffffff80211db0:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff80211db4:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80211db8:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff80211dbc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211dc0:	48 89 c7             	mov    %rax,%rdi
ffffffff80211dc3:	e8 83 4e 01 00       	call   ffffffff80226c4b <__RME_Pgt_Pgdir_Map>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff80211dc8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211dcc:	48 8b 00             	mov    (%rax),%rax
ffffffff80211dcf:	89 c0                	mov    %eax,%eax
ffffffff80211dd1:	48 85 c0             	test   %rax,%rax
ffffffff80211dd4:	74 0a                	je     ffffffff80211de0 <_RME_Pgt_Con+0x520>
ffffffff80211dd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211dda:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80211dde:	eb 04                	jmp    ffffffff80211de4 <_RME_Pgt_Con+0x524>
ffffffff80211de0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211de4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1);
ffffffff80211de8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211dec:	48 83 c0 08          	add    $0x8,%rax
ffffffff80211df0:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211df5:	48 89 c7             	mov    %rax,%rdi
ffffffff80211df8:	e8 96 a9 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff80211dfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211e01:	48 8b 00             	mov    (%rax),%rax
ffffffff80211e04:	89 c0                	mov    %eax,%eax
ffffffff80211e06:	48 85 c0             	test   %rax,%rax
ffffffff80211e09:	74 0a                	je     ffffffff80211e15 <_RME_Pgt_Con+0x555>
ffffffff80211e0b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211e0f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80211e13:	eb 04                	jmp    ffffffff80211e19 <_RME_Pgt_Con+0x559>
ffffffff80211e15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80211e19:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),1);
ffffffff80211e1d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e21:	48 83 c0 08          	add    $0x8,%rax
ffffffff80211e25:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80211e2a:	48 89 c7             	mov    %rax,%rdi
ffffffff80211e2d:	e8 61 a9 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80211e32:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80211e37:	c9                   	leave
ffffffff80211e38:	c3                   	ret

ffffffff80211e39 <_RME_Pgt_Des>:
#if(RME_PGT_RAW_ENABLE==0U)
static rme_ret_t _RME_Pgt_Des(struct RME_Cap_Cpt* Cpt, 
                              rme_cid_t Cap_Pgt_Parent,
                              rme_ptr_t Pos,
                              rme_cid_t Cap_Pgt_Child)
{
ffffffff80211e39:	f3 0f 1e fa          	endbr64
ffffffff80211e3d:	55                   	push   %rbp
ffffffff80211e3e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80211e41:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80211e45:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80211e49:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80211e4d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80211e51:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    struct RME_Cap_Pgt* Pgt_Child;
    struct RME_Cap_Pgt* Pgt_Root;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
ffffffff80211e55:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e59:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80211e5e:	48 85 c0             	test   %rax,%rax
ffffffff80211e61:	0f 85 98 00 00 00    	jne    ffffffff80211eff <_RME_Pgt_Des+0xc6>
ffffffff80211e67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211e6b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211e6f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80211e73:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211e76:	0f 93 c0             	setae  %al
ffffffff80211e79:	0f b6 c0             	movzbl %al,%eax
ffffffff80211e7c:	48 85 c0             	test   %rax,%rax
ffffffff80211e7f:	74 0c                	je     ffffffff80211e8d <_RME_Pgt_Des+0x54>
ffffffff80211e81:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211e88:	e9 c9 04 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80211e8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211e91:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211e95:	48 89 c2             	mov    %rax,%rdx
ffffffff80211e98:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211e9c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211ea0:	48 01 d0             	add    %rdx,%rax
ffffffff80211ea3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211ea7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211eab:	48 8b 00             	mov    (%rax),%rax
ffffffff80211eae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211eb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211eb6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211eba:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211ebd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211ec1:	0f 94 c0             	sete   %al
ffffffff80211ec4:	0f b6 c0             	movzbl %al,%eax
ffffffff80211ec7:	48 85 c0             	test   %rax,%rax
ffffffff80211eca:	74 0c                	je     ffffffff80211ed8 <_RME_Pgt_Des+0x9f>
ffffffff80211ecc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211ed3:	e9 7e 04 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80211ed8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211edc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211ee0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211ee4:	0f 95 c0             	setne  %al
ffffffff80211ee7:	0f b6 c0             	movzbl %al,%eax
ffffffff80211eea:	48 85 c0             	test   %rax,%rax
ffffffff80211eed:	0f 84 4c 01 00 00    	je     ffffffff8021203f <_RME_Pgt_Des+0x206>
ffffffff80211ef3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211efa:	e9 57 04 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80211eff:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211f03:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211f07:	48 89 c2             	mov    %rax,%rdx
ffffffff80211f0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211f0e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211f12:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211f15:	0f 93 c0             	setae  %al
ffffffff80211f18:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f1b:	48 85 c0             	test   %rax,%rax
ffffffff80211f1e:	74 0c                	je     ffffffff80211f2c <_RME_Pgt_Des+0xf3>
ffffffff80211f20:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211f27:	e9 2a 04 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80211f2c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211f30:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80211f34:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211f38:	48 89 c2             	mov    %rax,%rdx
ffffffff80211f3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80211f3f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211f43:	48 01 d0             	add    %rdx,%rax
ffffffff80211f46:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211f4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211f4e:	48 8b 00             	mov    (%rax),%rax
ffffffff80211f51:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211f55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211f59:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211f5d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80211f60:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80211f64:	0f 94 c0             	sete   %al
ffffffff80211f67:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f6a:	48 85 c0             	test   %rax,%rax
ffffffff80211f6d:	74 0c                	je     ffffffff80211f7b <_RME_Pgt_Des+0x142>
ffffffff80211f6f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80211f76:	e9 db 03 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80211f7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211f7f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211f83:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80211f87:	0f 95 c0             	setne  %al
ffffffff80211f8a:	0f b6 c0             	movzbl %al,%eax
ffffffff80211f8d:	48 85 c0             	test   %rax,%rax
ffffffff80211f90:	74 0c                	je     ffffffff80211f9e <_RME_Pgt_Des+0x165>
ffffffff80211f92:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80211f99:	e9 b8 03 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80211f9e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211fa2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211fa7:	48 89 c2             	mov    %rax,%rdx
ffffffff80211faa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211fae:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80211fb2:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211fb5:	0f 93 c0             	setae  %al
ffffffff80211fb8:	0f b6 c0             	movzbl %al,%eax
ffffffff80211fbb:	48 85 c0             	test   %rax,%rax
ffffffff80211fbe:	74 0c                	je     ffffffff80211fcc <_RME_Pgt_Des+0x193>
ffffffff80211fc0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80211fc7:	e9 8a 03 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80211fcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80211fd0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80211fd5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80211fd9:	48 89 c2             	mov    %rax,%rdx
ffffffff80211fdc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211fe0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211fe4:	48 01 d0             	add    %rdx,%rax
ffffffff80211fe7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80211feb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80211fef:	48 8b 00             	mov    (%rax),%rax
ffffffff80211ff2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80211ff6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80211ffa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211ffe:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212001:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212005:	0f 94 c0             	sete   %al
ffffffff80212008:	0f b6 c0             	movzbl %al,%eax
ffffffff8021200b:	48 85 c0             	test   %rax,%rax
ffffffff8021200e:	74 0c                	je     ffffffff8021201c <_RME_Pgt_Des+0x1e3>
ffffffff80212010:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212017:	e9 3a 03 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff8021201c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212020:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212024:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212028:	0f 95 c0             	setne  %al
ffffffff8021202b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021202e:	48 85 c0             	test   %rax,%rax
ffffffff80212031:	74 0c                	je     ffffffff8021203f <_RME_Pgt_Des+0x206>
ffffffff80212033:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021203a:	e9 17 03 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
                   struct RME_Cap_Pgt*,Pgt_Parent,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
ffffffff8021203f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212043:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80212048:	48 85 c0             	test   %rax,%rax
ffffffff8021204b:	0f 85 98 00 00 00    	jne    ffffffff802120e9 <_RME_Pgt_Des+0x2b0>
ffffffff80212051:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212055:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212059:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021205d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212060:	0f 93 c0             	setae  %al
ffffffff80212063:	0f b6 c0             	movzbl %al,%eax
ffffffff80212066:	48 85 c0             	test   %rax,%rax
ffffffff80212069:	74 0c                	je     ffffffff80212077 <_RME_Pgt_Des+0x23e>
ffffffff8021206b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212072:	e9 df 02 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80212077:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021207b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021207f:	48 89 c2             	mov    %rax,%rdx
ffffffff80212082:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212086:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021208a:	48 01 d0             	add    %rdx,%rax
ffffffff8021208d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212091:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212095:	48 8b 00             	mov    (%rax),%rax
ffffffff80212098:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021209c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802120a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802120a4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802120a7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802120ab:	0f 94 c0             	sete   %al
ffffffff802120ae:	0f b6 c0             	movzbl %al,%eax
ffffffff802120b1:	48 85 c0             	test   %rax,%rax
ffffffff802120b4:	74 0c                	je     ffffffff802120c2 <_RME_Pgt_Des+0x289>
ffffffff802120b6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802120bd:	e9 94 02 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff802120c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802120c6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802120ca:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802120ce:	0f 95 c0             	setne  %al
ffffffff802120d1:	0f b6 c0             	movzbl %al,%eax
ffffffff802120d4:	48 85 c0             	test   %rax,%rax
ffffffff802120d7:	0f 84 4c 01 00 00    	je     ffffffff80212229 <_RME_Pgt_Des+0x3f0>
ffffffff802120dd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802120e4:	e9 6d 02 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff802120e9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802120ed:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802120f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802120f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802120f8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802120fc:	48 39 c2             	cmp    %rax,%rdx
ffffffff802120ff:	0f 93 c0             	setae  %al
ffffffff80212102:	0f b6 c0             	movzbl %al,%eax
ffffffff80212105:	48 85 c0             	test   %rax,%rax
ffffffff80212108:	74 0c                	je     ffffffff80212116 <_RME_Pgt_Des+0x2dd>
ffffffff8021210a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212111:	e9 40 02 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80212116:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021211a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021211e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212122:	48 89 c2             	mov    %rax,%rdx
ffffffff80212125:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212129:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021212d:	48 01 d0             	add    %rdx,%rax
ffffffff80212130:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212134:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212138:	48 8b 00             	mov    (%rax),%rax
ffffffff8021213b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021213f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212143:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212147:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021214a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021214e:	0f 94 c0             	sete   %al
ffffffff80212151:	0f b6 c0             	movzbl %al,%eax
ffffffff80212154:	48 85 c0             	test   %rax,%rax
ffffffff80212157:	74 0c                	je     ffffffff80212165 <_RME_Pgt_Des+0x32c>
ffffffff80212159:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212160:	e9 f1 01 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80212165:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212169:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021216d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212171:	0f 95 c0             	setne  %al
ffffffff80212174:	0f b6 c0             	movzbl %al,%eax
ffffffff80212177:	48 85 c0             	test   %rax,%rax
ffffffff8021217a:	74 0c                	je     ffffffff80212188 <_RME_Pgt_Des+0x34f>
ffffffff8021217c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212183:	e9 ce 01 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80212188:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021218c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212191:	48 89 c2             	mov    %rax,%rdx
ffffffff80212194:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212198:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021219c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021219f:	0f 93 c0             	setae  %al
ffffffff802121a2:	0f b6 c0             	movzbl %al,%eax
ffffffff802121a5:	48 85 c0             	test   %rax,%rax
ffffffff802121a8:	74 0c                	je     ffffffff802121b6 <_RME_Pgt_Des+0x37d>
ffffffff802121aa:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802121b1:	e9 a0 01 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff802121b6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802121ba:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802121bf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802121c3:	48 89 c2             	mov    %rax,%rdx
ffffffff802121c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802121ca:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802121ce:	48 01 d0             	add    %rdx,%rax
ffffffff802121d1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802121d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802121d9:	48 8b 00             	mov    (%rax),%rax
ffffffff802121dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802121e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802121e4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802121e8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802121eb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802121ef:	0f 94 c0             	sete   %al
ffffffff802121f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802121f5:	48 85 c0             	test   %rax,%rax
ffffffff802121f8:	74 0c                	je     ffffffff80212206 <_RME_Pgt_Des+0x3cd>
ffffffff802121fa:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212201:	e9 50 01 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
ffffffff80212206:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021220a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021220e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212212:	0f 95 c0             	setne  %al
ffffffff80212215:	0f b6 c0             	movzbl %al,%eax
ffffffff80212218:	48 85 c0             	test   %rax,%rax
ffffffff8021221b:	74 0c                	je     ffffffff80212229 <_RME_Pgt_Des+0x3f0>
ffffffff8021221d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212224:	e9 2d 01 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
                   struct RME_Cap_Pgt*,Pgt_Child,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
ffffffff80212229:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021222d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212231:	83 e0 20             	and    $0x20,%eax
ffffffff80212234:	48 85 c0             	test   %rax,%rax
ffffffff80212237:	0f 94 c0             	sete   %al
ffffffff8021223a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021223d:	48 85 c0             	test   %rax,%rax
ffffffff80212240:	74 0c                	je     ffffffff8021224e <_RME_Pgt_Des+0x415>
ffffffff80212242:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80212249:	e9 08 01 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
ffffffff8021224e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212252:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212256:	83 e0 08             	and    $0x8,%eax
ffffffff80212259:	48 85 c0             	test   %rax,%rax
ffffffff8021225c:	0f 94 c0             	sete   %al
ffffffff8021225f:	0f b6 c0             	movzbl %al,%eax
ffffffff80212262:	48 85 c0             	test   %rax,%rax
ffffffff80212265:	74 0c                	je     ffffffff80212273 <_RME_Pgt_Des+0x43a>
ffffffff80212267:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021226e:	e9 e3 00 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212273:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212277:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021227b:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8021227f:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff80212283:	72 17                	jb     ffffffff8021229c <_RME_Pgt_Des+0x463>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
ffffffff80212285:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212289:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021228d:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80212291:	25 ff ff ff 0f       	and    $0xfffffff,%eax
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
ffffffff80212296:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff8021229a:	73 0c                	jae    ffffffff802122a8 <_RME_Pgt_Des+0x46f>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021229c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802122a3:	e9 ae 00 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGT_NUMORD(Pgt_Parent->Order))!=0U)
ffffffff802122a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802122ac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802122b0:	89 c2                	mov    %eax,%edx
ffffffff802122b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802122b6:	89 d1                	mov    %edx,%ecx
ffffffff802122b8:	48 d3 e8             	shr    %cl,%rax
ffffffff802122bb:	48 85 c0             	test   %rax,%rax
ffffffff802122be:	74 0c                	je     ffffffff802122cc <_RME_Pgt_Des+0x493>
    {
        RME_COV_MARKER();

        return RME_ERR_PGT_ADDR;
ffffffff802122c0:	48 c7 c0 9b ff ff ff 	mov    $0xffffffffffffff9b,%rax
ffffffff802122c7:	e9 8a 00 00 00       	jmp    ffffffff80212356 <_RME_Pgt_Des+0x51d>

    /* Actually do the mapping - This work is passed down to the HAL. 
     * Under multi-core, HAL should use CAS to avoid a conflict. Also,
     * the HAL needs to guarantee that the Child is actually mapped there,
     * and use that as the old value in CAS */
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
ffffffff802122cc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802122d0:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff802122d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802122d8:	48 89 ce             	mov    %rcx,%rsi
ffffffff802122db:	48 89 c7             	mov    %rax,%rdi
ffffffff802122de:	e8 4f 4a 01 00       	call   ffffffff80226d32 <__RME_Pgt_Pgdir_Unmap>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Decrease refcnt for both parent/child */
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
ffffffff802122e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802122e7:	48 8b 00             	mov    (%rax),%rax
ffffffff802122ea:	89 c0                	mov    %eax,%eax
ffffffff802122ec:	48 85 c0             	test   %rax,%rax
ffffffff802122ef:	74 0a                	je     ffffffff802122fb <_RME_Pgt_Des+0x4c2>
ffffffff802122f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802122f5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802122f9:	eb 04                	jmp    ffffffff802122ff <_RME_Pgt_Des+0x4c6>
ffffffff802122fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802122ff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),-1);
ffffffff80212303:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212307:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021230b:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80212312:	48 89 c7             	mov    %rax,%rdi
ffffffff80212315:	e8 79 a4 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
ffffffff8021231a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021231e:	48 8b 00             	mov    (%rax),%rax
ffffffff80212321:	89 c0                	mov    %eax,%eax
ffffffff80212323:	48 85 c0             	test   %rax,%rax
ffffffff80212326:	74 0a                	je     ffffffff80212332 <_RME_Pgt_Des+0x4f9>
ffffffff80212328:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021232c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212330:	eb 04                	jmp    ffffffff80212336 <_RME_Pgt_Des+0x4fd>
ffffffff80212332:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212336:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_FETCH_ADD(&(Pgt_Root->Head.Root_Ref),-1);
ffffffff8021233a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021233e:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212342:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80212349:	48 89 c7             	mov    %rax,%rdi
ffffffff8021234c:	e8 42 a4 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff80212351:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212356:	c9                   	leave
ffffffff80212357:	c3                   	ret

ffffffff80212358 <_RME_Kot_Init>:
Output      : None.
Return      : rme_ret_t - If the number of words are is not sufficient to hold 
                          all kernel memory, -1; else 0.
******************************************************************************/
rme_ret_t _RME_Kot_Init(rme_ptr_t Word)
{
ffffffff80212358:	f3 0f 1e fa          	endbr64
ffffffff8021235c:	55                   	push   %rbp
ffffffff8021235d:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212360:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212364:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Count;
    
    if(Word<RME_KOT_WORD_NUM)
ffffffff80212368:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
ffffffff8021236d:	77 09                	ja     ffffffff80212378 <_RME_Kot_Init+0x20>
    {
        RME_COV_MARKER();

        return -1;
ffffffff8021236f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212376:	eb 3e                	jmp    ffffffff802123b6 <_RME_Kot_Init+0x5e>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Zero out the whole table */
    for(Count=0U;Count<Word;Count++)
ffffffff80212378:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021237f:	00 
ffffffff80212380:	eb 25                	jmp    ffffffff802123a7 <_RME_Kot_Init+0x4f>
    {
        RME_KOT_VA_BASE[Count]=0U;
ffffffff80212382:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212386:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021238d:	00 
ffffffff8021238e:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212395:	80 ff ff 
ffffffff80212398:	48 01 d0             	add    %rdx,%rax
ffffffff8021239b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0U;Count<Word;Count++)
ffffffff802123a2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802123a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802123ab:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff802123af:	72 d1                	jb     ffffffff80212382 <_RME_Kot_Init+0x2a>
    }

    return 0;
ffffffff802123b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802123b6:	c9                   	leave
ffffffff802123b7:	c3                   	ret

ffffffff802123b8 <_RME_Kot_Mark>:
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Kot_Mark(rme_ptr_t Kaddr,
                        rme_ptr_t Size)
{
ffffffff802123b8:	f3 0f 1e fa          	endbr64
ffffffff802123bc:	55                   	push   %rbp
ffffffff802123bd:	48 89 e5             	mov    %rsp,%rbp
ffffffff802123c0:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff802123c4:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802123c8:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    rme_ptr_t Mask_Begin;
    /* The mask at the end word */
    rme_ptr_t Mask_End;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff802123cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802123d0:	83 e0 0f             	and    $0xf,%eax
ffffffff802123d3:	48 85 c0             	test   %rax,%rax
ffffffff802123d6:	74 0c                	je     ffffffff802123e4 <_RME_Kot_Mark+0x2c>
    {
        RME_COV_MARKER();

        return RME_ERR_KOT_BMP;
ffffffff802123d8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802123df:	e9 19 03 00 00       	jmp    ffffffff802126fd <_RME_Kot_Mark+0x345>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Round the marking to RME_KOM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff802123e4:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802123eb:	80 00 00 
ffffffff802123ee:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802123f2:	48 01 d0             	add    %rdx,%rax
ffffffff802123f5:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff802123f9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff802123fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212401:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212404:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8021240b:	89 c1                	mov    %eax,%ecx
ffffffff8021240d:	48 d3 e2             	shl    %cl,%rdx
ffffffff80212410:	48 89 d0             	mov    %rdx,%rax
ffffffff80212413:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Start=Start>>RME_WORD_ORDER;
ffffffff80212417:	48 c1 6d e8 06       	shrq   $0x6,-0x18(%rbp)
    
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8021241c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80212420:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80212424:	48 01 c2             	add    %rax,%rdx
ffffffff80212427:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff8021242e:	7f 00 00 
ffffffff80212431:	48 01 d0             	add    %rdx,%rax
ffffffff80212434:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80212438:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff8021243c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212440:	f7 d0                	not    %eax
ffffffff80212442:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212445:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff8021244c:	89 c1                	mov    %eax,%ecx
ffffffff8021244e:	48 d3 ea             	shr    %cl,%rdx
ffffffff80212451:	48 89 d0             	mov    %rdx,%rax
ffffffff80212454:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    End=End>>RME_WORD_ORDER;
ffffffff80212458:	48 c1 6d d8 06       	shrq   $0x6,-0x28(%rbp)
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff8021245d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212461:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80212465:	0f 85 89 00 00 00    	jne    ffffffff802124f4 <_RME_Kot_Mark+0x13c>
    {
        RME_COV_MARKER();

        /* Someone already populated something here */
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff8021246b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021246f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212476:	00 
ffffffff80212477:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021247e:	80 ff ff 
ffffffff80212481:	48 01 d0             	add    %rdx,%rax
ffffffff80212484:	48 8b 00             	mov    (%rax),%rax
ffffffff80212487:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
ffffffff8021248b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021248f:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80212493:	48 23 45 c8          	and    -0x38(%rbp),%rax
ffffffff80212497:	48 85 c0             	test   %rax,%rax
ffffffff8021249a:	74 0c                	je     ffffffff802124a8 <_RME_Kot_Mark+0xf0>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff8021249c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802124a3:	e9 55 02 00 00       	jmp    ffffffff802126fd <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check done, do the marking with CAS */
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff802124a8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802124ac:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff802124b0:	48 0b 45 c8          	or     -0x38(%rbp),%rax
ffffffff802124b4:	48 89 c2             	mov    %rax,%rdx
ffffffff802124b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802124bb:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff802124c2:	00 
ffffffff802124c3:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802124ca:	80 ff ff 
ffffffff802124cd:	48 01 c1             	add    %rax,%rcx
ffffffff802124d0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802124d4:	48 89 c6             	mov    %rax,%rsi
ffffffff802124d7:	48 89 cf             	mov    %rcx,%rdi
ffffffff802124da:	e8 7f a2 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802124df:	48 85 c0             	test   %rax,%rax
ffffffff802124e2:	0f 85 10 02 00 00    	jne    ffffffff802126f8 <_RME_Kot_Mark+0x340>
                         Old_Val,
                         Old_Val|(Mask_Begin&Mask_End))==RME_CASFAIL)
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802124e8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802124ef:	e9 09 02 00 00       	jmp    ffffffff802126fd <_RME_Kot_Mark+0x345>
    }
    else
    {
        RME_COV_MARKER();
        
        Undo=0U;
ffffffff802124f4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802124fb:	00 
        /* Check&Mark the start */
        Old_Val=RME_KOT_VA_BASE[Start];
ffffffff802124fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212500:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212507:	00 
ffffffff80212508:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021250f:	80 ff ff 
ffffffff80212512:	48 01 d0             	add    %rdx,%rax
ffffffff80212515:	48 8b 00             	mov    (%rax),%rax
ffffffff80212518:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        if((Old_Val&Mask_Begin)!=0U)
ffffffff8021251c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212520:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff80212524:	48 85 c0             	test   %rax,%rax
ffffffff80212527:	74 0c                	je     ffffffff80212535 <_RME_Kot_Mark+0x17d>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff80212529:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212530:	e9 c8 01 00 00       	jmp    ffffffff802126fd <_RME_Kot_Mark+0x345>
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
ffffffff80212535:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212539:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff8021253d:	48 89 c2             	mov    %rax,%rdx
ffffffff80212540:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212544:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff8021254b:	00 
ffffffff8021254c:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212553:	80 ff ff 
ffffffff80212556:	48 01 c1             	add    %rax,%rcx
ffffffff80212559:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021255d:	48 89 c6             	mov    %rax,%rsi
ffffffff80212560:	48 89 cf             	mov    %rcx,%rdi
ffffffff80212563:	e8 f6 a1 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212568:	48 85 c0             	test   %rax,%rax
ffffffff8021256b:	75 0c                	jne    ffffffff80212579 <_RME_Kot_Mark+0x1c1>
                         Old_Val,
                         Old_Val|Mask_Begin)==RME_CASFAIL)
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff8021256d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212574:	e9 84 01 00 00       	jmp    ffffffff802126fd <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check&Mark the middle */
        for(Count=Start+1U;Count<End;Count++)
ffffffff80212579:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021257d:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212581:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212585:	eb 75                	jmp    ffffffff802125fc <_RME_Kot_Mark+0x244>
        {
            Old_Val=RME_KOT_VA_BASE[Count];
ffffffff80212587:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021258b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212592:	00 
ffffffff80212593:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021259a:	80 ff ff 
ffffffff8021259d:	48 01 d0             	add    %rdx,%rax
ffffffff802125a0:	48 8b 00             	mov    (%rax),%rax
ffffffff802125a3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if(Old_Val!=0U)
ffffffff802125a7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff802125ac:	74 0a                	je     ffffffff802125b8 <_RME_Kot_Mark+0x200>
            {
                RME_COV_MARKER();

                Undo=1U;
ffffffff802125ae:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff802125b5:	00 
                break;
ffffffff802125b6:	eb 4e                	jmp    ffffffff80212606 <_RME_Kot_Mark+0x24e>
            }
            else
            {
                RME_COV_MARKER();
                
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Count],
ffffffff802125b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802125bc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802125c3:	00 
ffffffff802125c4:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802125cb:	80 ff ff 
ffffffff802125ce:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff802125d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802125d6:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802125dd:	48 89 c6             	mov    %rax,%rsi
ffffffff802125e0:	48 89 cf             	mov    %rcx,%rdi
ffffffff802125e3:	e8 76 a1 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802125e8:	48 85 c0             	test   %rax,%rax
ffffffff802125eb:	75 0a                	jne    ffffffff802125f7 <_RME_Kot_Mark+0x23f>
                                 Old_Val,
                                 RME_MASK_FULL)==RME_CASFAIL)
                {
                    RME_COV_MARKER();
                    
                    Undo=1U;
ffffffff802125ed:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff802125f4:	00 
                    break;
ffffffff802125f5:	eb 0f                	jmp    ffffffff80212606 <_RME_Kot_Mark+0x24e>
        for(Count=Start+1U;Count<End;Count++)
ffffffff802125f7:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802125fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212600:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80212604:	72 81                	jb     ffffffff80212587 <_RME_Kot_Mark+0x1cf>
                }
            }
        }
        
        /* See if the middle part failed. If yes, we skip the end marking */
        if(Undo==0U)
ffffffff80212606:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021260b:	75 77                	jne    ffffffff80212684 <_RME_Kot_Mark+0x2cc>
        {
            RME_COV_MARKER();

            /* Check&Mark the end */
            Old_Val=RME_KOT_VA_BASE[End];
ffffffff8021260d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212611:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212618:	00 
ffffffff80212619:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212620:	80 ff ff 
ffffffff80212623:	48 01 d0             	add    %rdx,%rax
ffffffff80212626:	48 8b 00             	mov    (%rax),%rax
ffffffff80212629:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            if((Old_Val&Mask_End)!=0U)
ffffffff8021262d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212631:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80212635:	48 85 c0             	test   %rax,%rax
ffffffff80212638:	74 0a                	je     ffffffff80212644 <_RME_Kot_Mark+0x28c>
            {
                RME_COV_MARKER();

                Undo=1U;
ffffffff8021263a:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff80212641:	00 
ffffffff80212642:	eb 40                	jmp    ffffffff80212684 <_RME_Kot_Mark+0x2cc>
            }
            else
            {
                RME_COV_MARKER();

                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
ffffffff80212644:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212648:	48 0b 45 d0          	or     -0x30(%rbp),%rax
ffffffff8021264c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021264f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80212653:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
ffffffff8021265a:	00 
ffffffff8021265b:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212662:	80 ff ff 
ffffffff80212665:	48 01 c1             	add    %rax,%rcx
ffffffff80212668:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021266c:	48 89 c6             	mov    %rax,%rsi
ffffffff8021266f:	48 89 cf             	mov    %rcx,%rdi
ffffffff80212672:	e8 e7 a0 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212677:	48 85 c0             	test   %rax,%rax
ffffffff8021267a:	75 08                	jne    ffffffff80212684 <_RME_Kot_Mark+0x2cc>
                                 Old_Val,
                                 Old_Val|Mask_End)==RME_CASFAIL)
                {
                    RME_COV_MARKER();

                    Undo=1U;
ffffffff8021267c:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff80212683:	00 
        {
            RME_COV_MARKER();
        }
        
        /* See if we need to undo. If yes, proceed to unroll and return error */
        if(Undo!=0U)
ffffffff80212684:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80212689:	74 6d                	je     ffffffff802126f8 <_RME_Kot_Mark+0x340>
        {
            RME_COV_MARKER();

            /* Undo the middle part - no CAS neeeded, write back is always atomic */
            for(Count--;Count>Start;Count--)
ffffffff8021268b:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80212690:	eb 25                	jmp    ffffffff802126b7 <_RME_Kot_Mark+0x2ff>
            {
                RME_KOT_VA_BASE[Count]=0U;
ffffffff80212692:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212696:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021269d:	00 
ffffffff8021269e:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802126a5:	80 ff ff 
ffffffff802126a8:	48 01 d0             	add    %rdx,%rax
ffffffff802126ab:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
            for(Count--;Count>Start;Count--)
ffffffff802126b2:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff802126b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802126bb:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff802126bf:	72 d1                	jb     ffffffff80212692 <_RME_Kot_Mark+0x2da>
            }
            /* Undo the first word - need atomic instructions */
            RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff802126c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802126c5:	48 f7 d0             	not    %rax
ffffffff802126c8:	48 89 c1             	mov    %rax,%rcx
ffffffff802126cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802126cf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802126d6:	00 
ffffffff802126d7:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802126de:	80 ff ff 
ffffffff802126e1:	48 01 d0             	add    %rdx,%rax
ffffffff802126e4:	48 89 ce             	mov    %rcx,%rsi
ffffffff802126e7:	48 89 c7             	mov    %rax,%rdi
ffffffff802126ea:	e8 cf a0 ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
            /* Return failure */
            return RME_ERR_KOT_BMP;
ffffffff802126ef:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802126f6:	eb 05                	jmp    ffffffff802126fd <_RME_Kot_Mark+0x345>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff802126f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802126fd:	c9                   	leave
ffffffff802126fe:	c3                   	ret

ffffffff802126ff <_RME_Kot_Erase>:
Output      : None.
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Kot_Erase(rme_ptr_t Kaddr,
                         rme_ptr_t Size)
{
ffffffff802126ff:	f3 0f 1e fa          	endbr64
ffffffff80212703:	55                   	push   %rbp
ffffffff80212704:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212707:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021270b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021270f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
    /* The mask at the end word */
    rme_ptr_t Mask_End;
    rme_ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
ffffffff80212713:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212717:	83 e0 0f             	and    $0xf,%eax
ffffffff8021271a:	48 85 c0             	test   %rax,%rax
ffffffff8021271d:	74 0c                	je     ffffffff8021272b <_RME_Kot_Erase+0x2c>
    {
        RME_COV_MARKER();

        return RME_ERR_KOT_BMP;
ffffffff8021271f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212726:	e9 4f 02 00 00       	jmp    ffffffff8021297a <_RME_Kot_Erase+0x27b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Round the marking to RME_KOM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff8021272b:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80212732:	80 00 00 
ffffffff80212735:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212739:	48 01 d0             	add    %rdx,%rax
ffffffff8021273c:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80212740:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80212744:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212748:	83 e0 3f             	and    $0x3f,%eax
ffffffff8021274b:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212752:	89 c1                	mov    %eax,%ecx
ffffffff80212754:	48 d3 e2             	shl    %cl,%rdx
ffffffff80212757:	48 89 d0             	mov    %rdx,%rax
ffffffff8021275a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Start=Start>>RME_WORD_ORDER;
ffffffff8021275e:	48 c1 6d f0 06       	shrq   $0x6,-0x10(%rbp)
    
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
ffffffff80212763:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80212767:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021276b:	48 01 c2             	add    %rax,%rdx
ffffffff8021276e:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff80212775:	7f 00 00 
ffffffff80212778:	48 01 d0             	add    %rdx,%rax
ffffffff8021277b:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff8021277f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
ffffffff80212783:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212787:	f7 d0                	not    %eax
ffffffff80212789:	83 e0 3f             	and    $0x3f,%eax
ffffffff8021278c:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80212793:	89 c1                	mov    %eax,%ecx
ffffffff80212795:	48 d3 ea             	shr    %cl,%rdx
ffffffff80212798:	48 89 d0             	mov    %rdx,%rax
ffffffff8021279b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    End=End>>RME_WORD_ORDER;
ffffffff8021279f:	48 c1 6d e0 06       	shrq   $0x6,-0x20(%rbp)
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff802127a4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802127a8:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff802127ac:	75 77                	jne    ffffffff80212825 <_RME_Kot_Erase+0x126>
    {
        RME_COV_MARKER();

        /* This address range is not fully populated */
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
ffffffff802127ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802127b2:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802127b9:	00 
ffffffff802127ba:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802127c1:	80 ff ff 
ffffffff802127c4:	48 01 d0             	add    %rdx,%rax
ffffffff802127c7:	48 8b 10             	mov    (%rax),%rdx
ffffffff802127ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802127ce:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802127d2:	48 21 c2             	and    %rax,%rdx
ffffffff802127d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802127d9:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802127dd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802127e0:	74 0c                	je     ffffffff802127ee <_RME_Kot_Erase+0xef>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802127e2:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802127e9:	e9 8c 01 00 00       	jmp    ffffffff8021297a <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }

        /* Check done, do the unmarking - need atomic operations */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~(Mask_Begin&Mask_End));
ffffffff802127ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802127f2:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802127f6:	48 f7 d0             	not    %rax
ffffffff802127f9:	48 89 c1             	mov    %rax,%rcx
ffffffff802127fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212800:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212807:	00 
ffffffff80212808:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021280f:	80 ff ff 
ffffffff80212812:	48 01 d0             	add    %rdx,%rax
ffffffff80212815:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212818:	48 89 c7             	mov    %rax,%rdi
ffffffff8021281b:	e8 9e 9f ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
ffffffff80212820:	e9 50 01 00 00       	jmp    ffffffff80212975 <_RME_Kot_Erase+0x276>
    else
    {
        RME_COV_MARKER();

        /* Check the start */
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
ffffffff80212825:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212829:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212830:	00 
ffffffff80212831:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212838:	80 ff ff 
ffffffff8021283b:	48 01 d0             	add    %rdx,%rax
ffffffff8021283e:	48 8b 00             	mov    (%rax),%rax
ffffffff80212841:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff80212845:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80212849:	74 0c                	je     ffffffff80212857 <_RME_Kot_Erase+0x158>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff8021284b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80212852:	e9 23 01 00 00       	jmp    ffffffff8021297a <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Check the middle */
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212857:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021285b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021285f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212863:	eb 33                	jmp    ffffffff80212898 <_RME_Kot_Erase+0x199>
        {
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
ffffffff80212865:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212869:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80212870:	00 
ffffffff80212871:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212878:	80 ff ff 
ffffffff8021287b:	48 01 d0             	add    %rdx,%rax
ffffffff8021287e:	48 8b 00             	mov    (%rax),%rax
ffffffff80212881:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff80212885:	74 0c                	je     ffffffff80212893 <_RME_Kot_Erase+0x194>
            {
                RME_COV_MARKER();

                return RME_ERR_KOT_BMP;
ffffffff80212887:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021288e:	e9 e7 00 00 00       	jmp    ffffffff8021297a <_RME_Kot_Erase+0x27b>
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212893:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212898:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021289c:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802128a0:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff802128a4:	72 bf                	jb     ffffffff80212865 <_RME_Kot_Erase+0x166>
                /* No action required */
            }
        }

        /* Check the end */
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
ffffffff802128a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802128aa:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802128b1:	00 
ffffffff802128b2:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802128b9:	80 ff ff 
ffffffff802128bc:	48 01 d0             	add    %rdx,%rax
ffffffff802128bf:	48 8b 00             	mov    (%rax),%rax
ffffffff802128c2:	48 23 45 d8          	and    -0x28(%rbp),%rax
ffffffff802128c6:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff802128ca:	74 0c                	je     ffffffff802128d8 <_RME_Kot_Erase+0x1d9>
        {
            RME_COV_MARKER();

            return RME_ERR_KOT_BMP;
ffffffff802128cc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802128d3:	e9 a2 00 00 00       	jmp    ffffffff8021297a <_RME_Kot_Erase+0x27b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Erase the start - make it atomic */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[Start]),~Mask_Begin);
ffffffff802128d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802128dc:	48 f7 d0             	not    %rax
ffffffff802128df:	48 89 c1             	mov    %rax,%rcx
ffffffff802128e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802128e6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802128ed:	00 
ffffffff802128ee:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802128f5:	80 ff ff 
ffffffff802128f8:	48 01 d0             	add    %rdx,%rax
ffffffff802128fb:	48 89 ce             	mov    %rcx,%rsi
ffffffff802128fe:	48 89 c7             	mov    %rax,%rdi
ffffffff80212901:	e8 b8 9e ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
        /* Erase the middle - do not need atomics here */
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212906:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021290a:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021290e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212912:	eb 25                	jmp    ffffffff80212939 <_RME_Kot_Erase+0x23a>
        {
            RME_KOT_VA_BASE[Count]=0U;
ffffffff80212914:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212918:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021291f:	00 
ffffffff80212920:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212927:	80 ff ff 
ffffffff8021292a:	48 01 d0             	add    %rdx,%rax
ffffffff8021292d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        for(Count=Start+1U;Count<End-1U;Count++)
ffffffff80212934:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212939:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021293d:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80212941:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff80212945:	72 cd                	jb     ffffffff80212914 <_RME_Kot_Erase+0x215>
        }
        /* Erase the end - make it atomic */
        RME_FETCH_AND(&(RME_KOT_VA_BASE[End]),~Mask_End);
ffffffff80212947:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021294b:	48 f7 d0             	not    %rax
ffffffff8021294e:	48 89 c1             	mov    %rax,%rcx
ffffffff80212951:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212955:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8021295c:	00 
ffffffff8021295d:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80212964:	80 ff ff 
ffffffff80212967:	48 01 d0             	add    %rdx,%rax
ffffffff8021296a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021296d:	48 89 c7             	mov    %rax,%rdi
ffffffff80212970:	e8 49 9e ff ff       	call   ffffffff8020c7be <_RME_X64_Fetch_And>
    }

    return 0;
ffffffff80212975:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021297a:	c9                   	leave
ffffffff8021297b:	c3                   	ret

ffffffff8021297c <_RME_Kom_Boot_Crt>:
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Kom,
                            rme_ptr_t Begin,
                            rme_ptr_t End,
                            rme_ptr_t Flag)
{
ffffffff8021297c:	f3 0f 1e fa          	endbr64
ffffffff80212980:	55                   	push   %rbp
ffffffff80212981:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212984:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80212988:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021298c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80212990:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80212994:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80212998:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff8021299c:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff802129a0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802129a4:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802129a9:	48 85 c0             	test   %rax,%rax
ffffffff802129ac:	0f 85 98 00 00 00    	jne    ffffffff80212a4a <_RME_Kom_Boot_Crt+0xce>
ffffffff802129b2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802129b6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802129ba:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff802129be:	48 39 c2             	cmp    %rax,%rdx
ffffffff802129c1:	0f 93 c0             	setae  %al
ffffffff802129c4:	0f b6 c0             	movzbl %al,%eax
ffffffff802129c7:	48 85 c0             	test   %rax,%rax
ffffffff802129ca:	74 0c                	je     ffffffff802129d8 <_RME_Kom_Boot_Crt+0x5c>
ffffffff802129cc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802129d3:	e9 d1 02 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
ffffffff802129d8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802129dc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802129e0:	48 89 c2             	mov    %rax,%rdx
ffffffff802129e3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802129e7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802129eb:	48 01 d0             	add    %rdx,%rax
ffffffff802129ee:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802129f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802129f6:	48 8b 00             	mov    (%rax),%rax
ffffffff802129f9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802129fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212a01:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212a05:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212a08:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212a0c:	0f 94 c0             	sete   %al
ffffffff80212a0f:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a12:	48 85 c0             	test   %rax,%rax
ffffffff80212a15:	74 0c                	je     ffffffff80212a23 <_RME_Kom_Boot_Crt+0xa7>
ffffffff80212a17:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212a1e:	e9 86 02 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212a23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212a27:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212a2b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212a2f:	0f 95 c0             	setne  %al
ffffffff80212a32:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a35:	48 85 c0             	test   %rax,%rax
ffffffff80212a38:	0f 84 4c 01 00 00    	je     ffffffff80212b8a <_RME_Kom_Boot_Crt+0x20e>
ffffffff80212a3e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212a45:	e9 5f 02 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212a4a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212a4e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212a52:	48 89 c2             	mov    %rax,%rdx
ffffffff80212a55:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212a59:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212a5d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212a60:	0f 93 c0             	setae  %al
ffffffff80212a63:	0f b6 c0             	movzbl %al,%eax
ffffffff80212a66:	48 85 c0             	test   %rax,%rax
ffffffff80212a69:	74 0c                	je     ffffffff80212a77 <_RME_Kom_Boot_Crt+0xfb>
ffffffff80212a6b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212a72:	e9 32 02 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212a77:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212a7b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80212a7f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212a83:	48 89 c2             	mov    %rax,%rdx
ffffffff80212a86:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80212a8a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212a8e:	48 01 d0             	add    %rdx,%rax
ffffffff80212a91:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212a95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212a99:	48 8b 00             	mov    (%rax),%rax
ffffffff80212a9c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212aa0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212aa4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212aa8:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212aab:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212aaf:	0f 94 c0             	sete   %al
ffffffff80212ab2:	0f b6 c0             	movzbl %al,%eax
ffffffff80212ab5:	48 85 c0             	test   %rax,%rax
ffffffff80212ab8:	74 0c                	je     ffffffff80212ac6 <_RME_Kom_Boot_Crt+0x14a>
ffffffff80212aba:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212ac1:	e9 e3 01 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212ac6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212aca:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212ace:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212ad2:	0f 95 c0             	setne  %al
ffffffff80212ad5:	0f b6 c0             	movzbl %al,%eax
ffffffff80212ad8:	48 85 c0             	test   %rax,%rax
ffffffff80212adb:	74 0c                	je     ffffffff80212ae9 <_RME_Kom_Boot_Crt+0x16d>
ffffffff80212add:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212ae4:	e9 c0 01 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212ae9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212aed:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212af2:	48 89 c2             	mov    %rax,%rdx
ffffffff80212af5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212af9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212afd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212b00:	0f 93 c0             	setae  %al
ffffffff80212b03:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b06:	48 85 c0             	test   %rax,%rax
ffffffff80212b09:	74 0c                	je     ffffffff80212b17 <_RME_Kom_Boot_Crt+0x19b>
ffffffff80212b0b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212b12:	e9 92 01 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212b17:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80212b1b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80212b20:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212b24:	48 89 c2             	mov    %rax,%rdx
ffffffff80212b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b2b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212b2f:	48 01 d0             	add    %rdx,%rax
ffffffff80212b32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80212b36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b3a:	48 8b 00             	mov    (%rax),%rax
ffffffff80212b3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80212b41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212b45:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80212b49:	0f b7 c0             	movzwl %ax,%eax
ffffffff80212b4c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80212b50:	0f 94 c0             	sete   %al
ffffffff80212b53:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b56:	48 85 c0             	test   %rax,%rax
ffffffff80212b59:	74 0c                	je     ffffffff80212b67 <_RME_Kom_Boot_Crt+0x1eb>
ffffffff80212b5b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80212b62:	e9 42 01 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212b67:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212b6b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80212b6f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80212b73:	0f 95 c0             	setne  %al
ffffffff80212b76:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b79:	48 85 c0             	test   %rax,%rax
ffffffff80212b7c:	74 0c                	je     ffffffff80212b8a <_RME_Kom_Boot_Crt+0x20e>
ffffffff80212b7e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80212b85:	e9 1f 01 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80212b8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212b8e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80212b92:	83 e0 01             	and    $0x1,%eax
ffffffff80212b95:	48 85 c0             	test   %rax,%rax
ffffffff80212b98:	0f 94 c0             	sete   %al
ffffffff80212b9b:	0f b6 c0             	movzbl %al,%eax
ffffffff80212b9e:	48 85 c0             	test   %rax,%rax
ffffffff80212ba1:	74 0c                	je     ffffffff80212baf <_RME_Kom_Boot_Crt+0x233>
ffffffff80212ba3:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80212baa:	e9 fa 00 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kom,struct RME_Cap_Kom*,Kom_Crt);
ffffffff80212baf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212bb3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212bb7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80212bbb:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212bbe:	0f 93 c0             	setae  %al
ffffffff80212bc1:	0f b6 c0             	movzbl %al,%eax
ffffffff80212bc4:	48 85 c0             	test   %rax,%rax
ffffffff80212bc7:	74 0c                	je     ffffffff80212bd5 <_RME_Kom_Boot_Crt+0x259>
ffffffff80212bc9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80212bd0:	e9 d4 00 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212bd5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80212bd9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212bdd:	48 89 c2             	mov    %rax,%rdx
ffffffff80212be0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212be4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80212be8:	48 01 d0             	add    %rdx,%rax
ffffffff80212beb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Kom_Crt);
ffffffff80212bef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212bf3:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80212bfa:	00 00 00 
ffffffff80212bfd:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80212c02:	48 89 c7             	mov    %rax,%rdi
ffffffff80212c05:	e8 54 9b ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80212c0a:	48 85 c0             	test   %rax,%rax
ffffffff80212c0d:	0f 94 c0             	sete   %al
ffffffff80212c10:	0f b6 c0             	movzbl %al,%eax
ffffffff80212c13:	48 85 c0             	test   %rax,%rax
ffffffff80212c16:	74 0c                	je     ffffffff80212c24 <_RME_Kom_Boot_Crt+0x2a8>
ffffffff80212c18:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80212c1f:	e9 85 00 00 00       	jmp    ffffffff80212ca9 <_RME_Kom_Boot_Crt+0x32d>
ffffffff80212c24:	48 8b 15 d5 73 01 00 	mov    0x173d5(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff80212c2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c2f:	48 89 50 20          	mov    %rdx,0x20(%rax)
    /* Align addresses */
#if(RME_KOM_SLOT_ORDER>6U)
    Kom_End=RME_ROUND_DOWN(End+1U,RME_KOM_SLOT_ORDER);
    Kom_Begin=RME_ROUND_UP(Start,RME_KOM_SLOT_ORDER);
#else
    Kom_End=RME_ROUND_DOWN(End+1U,6U);
ffffffff80212c33:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80212c37:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212c3b:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80212c3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Kom_Begin=RME_ROUND_UP(Begin,6U);
ffffffff80212c43:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80212c47:	48 83 c0 3f          	add    $0x3f,%rax
ffffffff80212c4b:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80212c4f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

    /* Must at least allow creation of something */
    RME_ASSERT(Flag!=0U);

    /* Header init */
    Kom_Crt->Head.Root_Ref=1U;
ffffffff80212c53:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c57:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff80212c5e:	00 
    Kom_Crt->Head.Object=0U;
ffffffff80212c5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c63:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212c6a:	00 
    Kom_Crt->Head.Flag=Flag;
ffffffff80212c6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c6f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80212c73:	48 89 50 10          	mov    %rdx,0x10(%rax)
    
    /* Info init */
    Kom_Crt->Begin=Kom_Begin;
ffffffff80212c77:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c7b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80212c7f:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Kom_Crt->End=Kom_End-1U;
ffffffff80212c83:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80212c87:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80212c8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c8f:	48 89 50 30          	mov    %rdx,0x30(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Kom_Crt->Head.Type_Stat),
ffffffff80212c93:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212c97:	48 b9 00 00 00 00 00 	movabs $0x2000000000000,%rcx
ffffffff80212c9e:	00 02 00 
ffffffff80212ca1:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_KOM,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80212ca4:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80212ca9:	c9                   	leave
ffffffff80212caa:	c3                   	ret

ffffffff80212cab <_RME_CPU_Local_Init>:
Output      : None.
Return      : None.
******************************************************************************/
void _RME_CPU_Local_Init(struct RME_CPU_Local* Local,
                         rme_ptr_t CPUID)
{
ffffffff80212cab:	f3 0f 1e fa          	endbr64
ffffffff80212caf:	55                   	push   %rbp
ffffffff80212cb0:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212cb3:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212cb7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80212cbb:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t Prio_Cnt;
    
    Local->CPUID=CPUID;
ffffffff80212cbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212cc3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80212cc7:	48 89 10             	mov    %rdx,(%rax)
    Local->Thd_Cur=RME_NULL;
ffffffff80212cca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212cce:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80212cd5:	00 
    Local->Sig_Vct=RME_NULL;
ffffffff80212cd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212cda:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80212ce1:	00 
    Local->Sig_Tim=RME_NULL;
ffffffff80212ce2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ce6:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80212ced:	00 
    
    /* Initialize the run-queue and bitmap */
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80212cee:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212cf5:	00 
ffffffff80212cf6:	eb 42                	jmp    ffffffff80212d3a <_RME_CPU_Local_Init+0x8f>
    {
        Local->Run.Bitmap[Prio_Cnt>>RME_WORD_ORDER]=0U;
ffffffff80212cf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212cfc:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212d00:	48 89 c2             	mov    %rax,%rdx
ffffffff80212d03:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d07:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212d0b:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
ffffffff80212d12:	00 
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
ffffffff80212d13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212d17:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212d1b:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212d1f:	48 89 c2             	mov    %rax,%rdx
ffffffff80212d22:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d26:	48 01 d0             	add    %rdx,%rax
ffffffff80212d29:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212d2d:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d30:	e8 25 a0 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
ffffffff80212d35:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80212d3a:	48 83 7d f8 3f       	cmpq   $0x3f,-0x8(%rbp)
ffffffff80212d3f:	76 b7                	jbe    ffffffff80212cf8 <_RME_CPU_Local_Init+0x4d>
    }
}
ffffffff80212d41:	90                   	nop
ffffffff80212d42:	90                   	nop
ffffffff80212d43:	c9                   	leave
ffffffff80212d44:	c3                   	ret

ffffffff80212d45 <_RME_Thd_Fatal>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Thd_Fatal(struct RME_Reg_Struct* Reg)
{
ffffffff80212d45:	f3 0f 1e fa          	endbr64
ffffffff80212d49:	55                   	push   %rbp
ffffffff80212d4a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212d4d:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212d51:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    
    /* Attempt to return from the invocation, from fault */
    if(_RME_Inv_Ret(Reg,0U,1U)!=0)
ffffffff80212d55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212d59:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212d5e:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80212d63:	48 89 c7             	mov    %rax,%rdi
ffffffff80212d66:	e8 32 7d 00 00       	call   ffffffff8021aa9d <_RME_Inv_Ret>
ffffffff80212d6b:	48 85 c0             	test   %rax,%rax
ffffffff80212d6e:	74 6f                	je     ffffffff80212ddf <_RME_Thd_Fatal+0x9a>
    {
        RME_COV_MARKER();

        /* Return failure - report the exception */
        Local=RME_CPU_LOCAL();
ffffffff80212d70:	e8 ca 8a ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80212d75:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        Thd_Cur=Local->Thd_Cur;
ffffffff80212d79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212d7d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212d81:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        
        /* Init thread shall never have exceptions */
        if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80212d85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212d89:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80212d8d:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80212d94:	ff ff 7f 
ffffffff80212d97:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212d9a:	75 0c                	jne    ffffffff80212da8 <_RME_Thd_Fatal+0x63>
        {
            RME_COV_MARKER();
            
            RME_DBG_S("Attempted to kill init thread.");
ffffffff80212d9c:	48 c7 c7 98 92 22 80 	mov    $0xffffffff80229298,%rdi
ffffffff80212da3:	e8 63 9c ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
        
        /* We must be running at this point to trigger a synchronous exception */
        RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
        
        /* Remove from runqueue */
        _RME_Run_Del(Thd_Cur);
ffffffff80212da8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212dac:	48 89 c7             	mov    %rax,%rdi
ffffffff80212daf:	e8 de 00 00 00       	call   ffffffff80212e92 <_RME_Run_Del>
        
        /* Exception pending and notify parent */
        Thd_Cur->Sched.State=RME_THD_EXCPEND;
ffffffff80212db4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212db8:	48 c7 40 38 03 00 00 	movq   $0x3,0x38(%rax)
ffffffff80212dbf:	00 
        _RME_Run_Notif(Thd_Cur);
ffffffff80212dc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212dc4:	48 89 c7             	mov    %rax,%rdi
ffffffff80212dc7:	e8 11 02 00 00       	call   ffffffff80212fdd <_RME_Run_Notif>
        
        /* All kernel send complete, now pick the highest priority thread to run */
        _RME_Kern_High(Reg,Local);
ffffffff80212dcc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212dd0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212dd4:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212dd7:	48 89 c7             	mov    %rax,%rdi
ffffffff80212dda:	e8 e7 60 00 00       	call   ffffffff80218ec6 <_RME_Kern_High>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212ddf:	90                   	nop
ffffffff80212de0:	c9                   	leave
ffffffff80212de1:	c3                   	ret

ffffffff80212de2 <_RME_Run_Ins>:
              rme_ptr_t CPUID - The cpu to consult.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Ins(struct RME_Thd_Struct* Thd)
{
ffffffff80212de2:	f3 0f 1e fa          	endbr64
ffffffff80212de6:	55                   	push   %rbp
ffffffff80212de7:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212dea:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212dee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff80212df2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212df6:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80212dfa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Local=Thd->Sched.Local;
ffffffff80212dfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e02:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212e06:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Insert this thread into the runqueue */
    _RME_List_Ins(&(Thd->Sched.Run),
                  Local->Run.List[Prio].Prev,
                  &(Local->Run.List[Prio]));
ffffffff80212e0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e0e:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212e12:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212e16:	48 89 c2             	mov    %rax,%rdx
ffffffff80212e19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e1d:	48 01 d0             	add    %rdx,%rax
ffffffff80212e20:	48 8d 50 08          	lea    0x8(%rax),%rdx
    _RME_List_Ins(&(Thd->Sched.Run),
ffffffff80212e24:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e28:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80212e2c:	48 83 c1 02          	add    $0x2,%rcx
ffffffff80212e30:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80212e34:	48 01 c8             	add    %rcx,%rax
ffffffff80212e37:	48 83 c0 10          	add    $0x10,%rax
ffffffff80212e3b:	48 8b 08             	mov    (%rax),%rcx
ffffffff80212e3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212e42:	48 89 ce             	mov    %rcx,%rsi
ffffffff80212e45:	48 89 c7             	mov    %rax,%rdi
ffffffff80212e48:	e8 65 9f ff ff       	call   ffffffff8020cdb2 <_RME_List_Ins>
    
    /* Set the bit in the bitmap */
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
ffffffff80212e4d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212e51:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212e55:	48 89 c2             	mov    %rax,%rdx
ffffffff80212e58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e5c:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212e60:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212e64:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212e68:	83 e2 3f             	and    $0x3f,%edx
ffffffff80212e6b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80212e70:	89 d1                	mov    %edx,%ecx
ffffffff80212e72:	48 d3 e6             	shl    %cl,%rsi
ffffffff80212e75:	48 89 f1             	mov    %rsi,%rcx
ffffffff80212e78:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212e7c:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff80212e80:	48 09 c1             	or     %rax,%rcx
ffffffff80212e83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212e87:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212e8b:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
}
ffffffff80212e8f:	90                   	nop
ffffffff80212e90:	c9                   	leave
ffffffff80212e91:	c3                   	ret

ffffffff80212e92 <_RME_Run_Del>:
Input       : struct RME_Thd_Struct* Thd - The thread to delete.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
ffffffff80212e92:	f3 0f 1e fa          	endbr64
ffffffff80212e96:	55                   	push   %rbp
ffffffff80212e97:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212e9a:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212e9e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_ptr_t Prio;
    struct RME_CPU_Local* Local;
    
    Prio=Thd->Sched.Prio;
ffffffff80212ea2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ea6:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80212eaa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Local=Thd->Sched.Local;
ffffffff80212eae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212eb2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80212eb6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* It can't be free or there must be an error */
    RME_ASSERT(Local!=RME_THD_FREE);
    
    /* Delete this thread from the runqueue */
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80212eba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ebe:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212ec1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ec5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80212ec9:	48 89 d6             	mov    %rdx,%rsi
ffffffff80212ecc:	48 89 c7             	mov    %rax,%rdi
ffffffff80212ecf:	e8 b0 9e ff ff       	call   ffffffff8020cd84 <_RME_List_Del>
    
    /* See if there are any thread on this priority level */
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
ffffffff80212ed4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212ed8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212edc:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80212ee0:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80212ee4:	48 01 d0             	add    %rdx,%rax
ffffffff80212ee7:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212eeb:	48 8b 10             	mov    (%rax),%rdx
ffffffff80212eee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212ef2:	48 83 c0 02          	add    $0x2,%rax
ffffffff80212ef6:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80212efa:	48 89 c1             	mov    %rax,%rcx
ffffffff80212efd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212f01:	48 01 c8             	add    %rcx,%rax
ffffffff80212f04:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212f08:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212f0b:	75 4b                	jne    ffffffff80212f58 <_RME_Run_Del+0xc6>
    {
        RME_COV_MARKER();

        /* Nothing running, clear the bit in the bitmap */
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
ffffffff80212f0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f11:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212f15:	48 89 c2             	mov    %rax,%rdx
ffffffff80212f18:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212f1c:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212f20:	48 8b 34 d0          	mov    (%rax,%rdx,8),%rsi
ffffffff80212f24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f28:	83 e0 3f             	and    $0x3f,%eax
ffffffff80212f2b:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212f30:	89 c1                	mov    %eax,%ecx
ffffffff80212f32:	48 d3 e2             	shl    %cl,%rdx
ffffffff80212f35:	48 89 d0             	mov    %rdx,%rax
ffffffff80212f38:	48 f7 d0             	not    %rax
ffffffff80212f3b:	48 89 c1             	mov    %rax,%rcx
ffffffff80212f3e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212f42:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff80212f46:	48 89 c2             	mov    %rax,%rdx
ffffffff80212f49:	48 21 f1             	and    %rsi,%rcx
ffffffff80212f4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80212f50:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212f54:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80212f58:	90                   	nop
ffffffff80212f59:	c9                   	leave
ffffffff80212f5a:	c3                   	ret

ffffffff80212f5b <_RME_Run_High>:
Input       : struct RME_CPU_Local* Local - The CPU-local data structure.
Output      : None.
Return      : struct RME_Thd_Struct* - The thread returned.
******************************************************************************/
static struct RME_Thd_Struct* _RME_Run_High(struct RME_CPU_Local* Local)
{
ffffffff80212f5b:	f3 0f 1e fa          	endbr64
ffffffff80212f5f:	55                   	push   %rbp
ffffffff80212f60:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212f63:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80212f67:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_cnt_t Count;
    rme_ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=(rme_cnt_t)(RME_PRIO_WORD_NUM-1U);Count>=0;Count--)
ffffffff80212f6b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80212f72:	00 
ffffffff80212f73:	eb 1a                	jmp    ffffffff80212f8f <_RME_Run_High+0x34>
    {
        if(Local->Run.Bitmap[Count]!=0U)
ffffffff80212f75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f79:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212f7d:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212f81:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212f85:	48 85 c0             	test   %rax,%rax
ffffffff80212f88:	75 0e                	jne    ffffffff80212f98 <_RME_Run_High+0x3d>
    for(Count=(rme_cnt_t)(RME_PRIO_WORD_NUM-1U);Count>=0;Count--)
ffffffff80212f8a:	48 83 6d f8 01       	subq   $0x1,-0x8(%rbp)
ffffffff80212f8f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80212f94:	79 df                	jns    ffffffff80212f75 <_RME_Run_High+0x1a>
ffffffff80212f96:	eb 01                	jmp    ffffffff80212f99 <_RME_Run_High+0x3e>
        {
            RME_COV_MARKER();
            
            break;
ffffffff80212f98:	90                   	nop
    
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);

    /* Get the first "1"'s position in the word */
    Prio=RME_MSB_GET(Local->Run.Bitmap[Count]);
ffffffff80212f99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212f9d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80212fa1:	48 83 c2 04          	add    $0x4,%rdx
ffffffff80212fa5:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
ffffffff80212fa9:	48 89 c7             	mov    %rax,%rdi
ffffffff80212fac:	e8 3a 98 ff ff       	call   ffffffff8020c7eb <_RME_X64_MSB_Get>
ffffffff80212fb1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Prio+=((rme_ptr_t)Count)<<RME_WORD_ORDER;
ffffffff80212fb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80212fb9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80212fbd:	48 01 45 f0          	add    %rax,-0x10(%rbp)

    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
ffffffff80212fc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212fc5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80212fc9:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80212fcd:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80212fd1:	48 01 d0             	add    %rdx,%rax
ffffffff80212fd4:	48 83 c0 08          	add    $0x8,%rax
ffffffff80212fd8:	48 8b 00             	mov    (%rax),%rax
}
ffffffff80212fdb:	c9                   	leave
ffffffff80212fdc:	c3                   	ret

ffffffff80212fdd <_RME_Run_Notif>:
Input       : struct RME_Thd_Struct* Thd - The thread to send notification for.
Output      : None.
Return      : None.
******************************************************************************/
static void _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
ffffffff80212fdd:	f3 0f 1e fa          	endbr64
ffffffff80212fe1:	55                   	push   %rbp
ffffffff80212fe2:	48 89 e5             	mov    %rsp,%rbp
ffffffff80212fe5:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80212fe9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Thd_Struct* Sched_Thd;
    
    Sched_Thd=Thd->Sched.Sched_Thd;
ffffffff80212fed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ff1:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80212ff5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80212ff9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80212ffd:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80213001:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213005:	48 83 c0 10          	add    $0x10,%rax
ffffffff80213009:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021300c:	75 26                	jne    ffffffff80213034 <_RME_Run_Notif+0x57>
    {
        RME_COV_MARKER();

        _RME_List_Ins(&(Thd->Sched.Notif), 
                      Sched_Thd->Sched.Event.Prev,&(Sched_Thd->Sched.Event));
ffffffff8021300e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213012:	48 8d 50 78          	lea    0x78(%rax),%rdx
        _RME_List_Ins(&(Thd->Sched.Notif), 
ffffffff80213016:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021301a:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80213021:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80213025:	48 83 c1 10          	add    $0x10,%rcx
ffffffff80213029:	48 89 c6             	mov    %rax,%rsi
ffffffff8021302c:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021302f:	e8 7e 9d ff ff       	call   ffffffff8020cdb2 <_RME_List_Ins>
        RME_COV_MARKER();
        /* No action required */
    }

    /* If this guy have an endpoint, send to it */
    if(Thd->Sched.Sched_Sig!=(void*)0U)
ffffffff80213034:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213038:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff8021303c:	48 85 c0             	test   %rax,%rax
ffffffff8021303f:	74 10                	je     ffffffff80213051 <_RME_Run_Notif+0x74>
    {
        RME_COV_MARKER();
        _RME_Kern_Snd(Thd->Sched.Sched_Sig);
ffffffff80213041:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213045:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80213049:	48 89 c7             	mov    %rax,%rdi
ffffffff8021304c:	e8 fc 5e 00 00       	call   ffffffff80218f4d <_RME_Kern_Snd>
    else
    {
        RME_COV_MARKER();
        /* No action required */
    }
}
ffffffff80213051:	90                   	nop
ffffffff80213052:	c9                   	leave
ffffffff80213053:	c3                   	ret

ffffffff80213054 <_RME_Thd_Pgt>:
#if(RME_PGT_RAW_ENABLE==0U)
struct RME_Cap_Pgt* _RME_Thd_Pgt(struct RME_Thd_Struct* Thd)
#else
rme_ptr_t _RME_Thd_Pgt(struct RME_Thd_Struct* Thd)
#endif
{
ffffffff80213054:	f3 0f 1e fa          	endbr64
ffffffff80213058:	55                   	push   %rbp
ffffffff80213059:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021305c:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80213060:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    struct RME_Inv_Struct* Inv_Top;
    
    Inv_Top=RME_INVSTK_TOP(Thd);
ffffffff80213064:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213068:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021306f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213073:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80213079:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021307c:	74 0d                	je     ffffffff8021308b <_RME_Thd_Pgt+0x37>
ffffffff8021307e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213082:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80213089:	eb 05                	jmp    ffffffff80213090 <_RME_Thd_Pgt+0x3c>
ffffffff8021308b:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff80213090:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    
    if(Inv_Top==(void*)RME_NULL)
ffffffff80213094:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80213099:	75 0e                	jne    ffffffff802130a9 <_RME_Thd_Pgt+0x55>
    {
        RME_COV_MARKER();

        return Thd->Sched.Prc->Pgt;
ffffffff8021309b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021309f:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff802130a3:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802130a7:	eb 0c                	jmp    ffffffff802130b5 <_RME_Thd_Pgt+0x61>
    }
    else
    {
        RME_COV_MARKER();

        return Inv_Top->Prc->Pgt;
ffffffff802130a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802130ad:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802130b1:	48 8b 40 30          	mov    0x30(%rax),%rax
    }
}
ffffffff802130b5:	c9                   	leave
ffffffff802130b6:	c3                   	ret

ffffffff802130b7 <_RME_Run_Swt>:
Return      : rme_ret_t - Always 0.
******************************************************************************/
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
                              struct RME_Thd_Struct* Thd_Cur, 
                              struct RME_Thd_Struct* Thd_New)
{
ffffffff802130b7:	f3 0f 1e fa          	endbr64
ffffffff802130bb:	55                   	push   %rbp
ffffffff802130bc:	48 89 e5             	mov    %rsp,%rbp
ffffffff802130bf:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff802130c3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff802130c7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff802130cb:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Pgt_New;
#endif
    struct RME_Reg_Struct* Reg_Cur;
    struct RME_Reg_Struct* Reg_New;
    
    Reg_Cur=&(Thd_Cur->Ctx.Reg->Reg);
ffffffff802130cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802130d3:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff802130da:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
ffffffff802130de:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802130e2:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff802130e9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Save register context */
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
ffffffff802130ed:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802130f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802130f5:	48 89 d6             	mov    %rdx,%rsi
ffffffff802130f8:	48 89 c7             	mov    %rax,%rdi
ffffffff802130fb:	e8 1b 2e 01 00       	call   ffffffff80225f1b <__RME_Thd_Reg_Copy>
                       RME_THD_IS_HYP(Thd_Cur->Ctx.Hyp_Attr),
                       Reg_Cur,Thd_Cur->Ctx.Reg->Cop);
#endif

    /* Load register context */
    __RME_Thd_Reg_Copy(Reg,Reg_New);
ffffffff80213100:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80213104:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213108:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021310b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021310e:	e8 08 2e 01 00       	call   ffffffff80225f1b <__RME_Thd_Reg_Copy>

    /* Are we going to switch page tables? If yes, we change it now */
    Pgt_Cur=_RME_Thd_Pgt(Thd_Cur);
ffffffff80213113:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80213117:	48 89 c7             	mov    %rax,%rdi
ffffffff8021311a:	e8 35 ff ff ff       	call   ffffffff80213054 <_RME_Thd_Pgt>
ffffffff8021311f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Pgt_New=_RME_Thd_Pgt(Thd_New);
ffffffff80213123:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80213127:	48 89 c7             	mov    %rax,%rdi
ffffffff8021312a:	e8 25 ff ff ff       	call   ffffffff80213054 <_RME_Thd_Pgt>
ffffffff8021312f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_Cur)!=0U);
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_New)!=0U);
#endif
    
#if(RME_PGT_RAW_ENABLE==0U)
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
ffffffff80213133:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213137:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8021313b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021313f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213143:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213146:	74 0c                	je     ffffffff80213154 <_RME_Run_Swt+0x9d>
    if(Pgt_Cur!=Pgt_New)
#endif
    {
        RME_COV_MARKER();
        
        __RME_Pgt_Set((rme_ptr_t)Pgt_New);
ffffffff80213148:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021314c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021314f:	e8 6f 37 01 00       	call   ffffffff802268c3 <__RME_Pgt_Set>
    {
        RME_COV_MARKER();
        /* No action required */
    }

    return 0;
ffffffff80213154:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80213159:	c9                   	leave
ffffffff8021315a:	c3                   	ret

ffffffff8021315b <_RME_Prc_Boot_Crt>:
                            rme_cid_t Cap_Cpt_Crt,
                            rme_cid_t Cap_Prc,
                            rme_cid_t Cap_Cpt,
                            rme_ptr_t Raw_Pgt)
#endif
{
ffffffff8021315b:	f3 0f 1e fa          	endbr64
ffffffff8021315f:	55                   	push   %rbp
ffffffff80213160:	48 89 e5             	mov    %rsp,%rbp
ffffffff80213163:	48 83 ec 68          	sub    $0x68,%rsp
ffffffff80213167:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8021316b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8021316f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff80213173:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80213177:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8021317b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021317f:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213184:	48 85 c0             	test   %rax,%rax
ffffffff80213187:	0f 85 98 00 00 00    	jne    ffffffff80213225 <_RME_Prc_Boot_Crt+0xca>
ffffffff8021318d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213191:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213195:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80213199:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021319c:	0f 93 c0             	setae  %al
ffffffff8021319f:	0f b6 c0             	movzbl %al,%eax
ffffffff802131a2:	48 85 c0             	test   %rax,%rax
ffffffff802131a5:	74 0c                	je     ffffffff802131b3 <_RME_Prc_Boot_Crt+0x58>
ffffffff802131a7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802131ae:	e9 35 07 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802131b3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802131b7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802131bb:	48 89 c2             	mov    %rax,%rdx
ffffffff802131be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802131c2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802131c6:	48 01 d0             	add    %rdx,%rax
ffffffff802131c9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802131cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802131d1:	48 8b 00             	mov    (%rax),%rax
ffffffff802131d4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802131d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802131dc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802131e0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802131e3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802131e7:	0f 94 c0             	sete   %al
ffffffff802131ea:	0f b6 c0             	movzbl %al,%eax
ffffffff802131ed:	48 85 c0             	test   %rax,%rax
ffffffff802131f0:	74 0c                	je     ffffffff802131fe <_RME_Prc_Boot_Crt+0xa3>
ffffffff802131f2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802131f9:	e9 ea 06 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802131fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213202:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213206:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021320a:	0f 95 c0             	setne  %al
ffffffff8021320d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213210:	48 85 c0             	test   %rax,%rax
ffffffff80213213:	0f 84 4c 01 00 00    	je     ffffffff80213365 <_RME_Prc_Boot_Crt+0x20a>
ffffffff80213219:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213220:	e9 c3 06 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213225:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213229:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021322d:	48 89 c2             	mov    %rax,%rdx
ffffffff80213230:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213234:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213238:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021323b:	0f 93 c0             	setae  %al
ffffffff8021323e:	0f b6 c0             	movzbl %al,%eax
ffffffff80213241:	48 85 c0             	test   %rax,%rax
ffffffff80213244:	74 0c                	je     ffffffff80213252 <_RME_Prc_Boot_Crt+0xf7>
ffffffff80213246:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021324d:	e9 96 06 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213252:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213256:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021325a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021325e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213261:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213265:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213269:	48 01 d0             	add    %rdx,%rax
ffffffff8021326c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213270:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213274:	48 8b 00             	mov    (%rax),%rax
ffffffff80213277:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021327b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021327f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213283:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213286:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021328a:	0f 94 c0             	sete   %al
ffffffff8021328d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213290:	48 85 c0             	test   %rax,%rax
ffffffff80213293:	74 0c                	je     ffffffff802132a1 <_RME_Prc_Boot_Crt+0x146>
ffffffff80213295:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021329c:	e9 47 06 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802132a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802132a5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802132a9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802132ad:	0f 95 c0             	setne  %al
ffffffff802132b0:	0f b6 c0             	movzbl %al,%eax
ffffffff802132b3:	48 85 c0             	test   %rax,%rax
ffffffff802132b6:	74 0c                	je     ffffffff802132c4 <_RME_Prc_Boot_Crt+0x169>
ffffffff802132b8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802132bf:	e9 24 06 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802132c4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802132c8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802132cd:	48 89 c2             	mov    %rax,%rdx
ffffffff802132d0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802132d4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802132d8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802132db:	0f 93 c0             	setae  %al
ffffffff802132de:	0f b6 c0             	movzbl %al,%eax
ffffffff802132e1:	48 85 c0             	test   %rax,%rax
ffffffff802132e4:	74 0c                	je     ffffffff802132f2 <_RME_Prc_Boot_Crt+0x197>
ffffffff802132e6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802132ed:	e9 f6 05 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802132f2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802132f6:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802132fb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802132ff:	48 89 c2             	mov    %rax,%rdx
ffffffff80213302:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213306:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021330a:	48 01 d0             	add    %rdx,%rax
ffffffff8021330d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213311:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213315:	48 8b 00             	mov    (%rax),%rax
ffffffff80213318:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021331c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213320:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213324:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213327:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021332b:	0f 94 c0             	sete   %al
ffffffff8021332e:	0f b6 c0             	movzbl %al,%eax
ffffffff80213331:	48 85 c0             	test   %rax,%rax
ffffffff80213334:	74 0c                	je     ffffffff80213342 <_RME_Prc_Boot_Crt+0x1e7>
ffffffff80213336:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021333d:	e9 a6 05 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213342:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213346:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021334a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021334e:	0f 95 c0             	setne  %al
ffffffff80213351:	0f b6 c0             	movzbl %al,%eax
ffffffff80213354:	48 85 c0             	test   %rax,%rax
ffffffff80213357:	74 0c                	je     ffffffff80213365 <_RME_Prc_Boot_Crt+0x20a>
ffffffff80213359:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213360:	e9 83 05 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213365:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213369:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021336e:	48 85 c0             	test   %rax,%rax
ffffffff80213371:	0f 85 98 00 00 00    	jne    ffffffff8021340f <_RME_Prc_Boot_Crt+0x2b4>
ffffffff80213377:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021337b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021337f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80213383:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213386:	0f 93 c0             	setae  %al
ffffffff80213389:	0f b6 c0             	movzbl %al,%eax
ffffffff8021338c:	48 85 c0             	test   %rax,%rax
ffffffff8021338f:	74 0c                	je     ffffffff8021339d <_RME_Prc_Boot_Crt+0x242>
ffffffff80213391:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213398:	e9 4b 05 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021339d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802133a1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802133a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802133a8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802133ac:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802133b0:	48 01 d0             	add    %rdx,%rax
ffffffff802133b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802133b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802133bb:	48 8b 00             	mov    (%rax),%rax
ffffffff802133be:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802133c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802133c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802133ca:	0f b7 c0             	movzwl %ax,%eax
ffffffff802133cd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802133d1:	0f 94 c0             	sete   %al
ffffffff802133d4:	0f b6 c0             	movzbl %al,%eax
ffffffff802133d7:	48 85 c0             	test   %rax,%rax
ffffffff802133da:	74 0c                	je     ffffffff802133e8 <_RME_Prc_Boot_Crt+0x28d>
ffffffff802133dc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802133e3:	e9 00 05 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802133e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802133ec:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802133f0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802133f4:	0f 95 c0             	setne  %al
ffffffff802133f7:	0f b6 c0             	movzbl %al,%eax
ffffffff802133fa:	48 85 c0             	test   %rax,%rax
ffffffff802133fd:	0f 84 4c 01 00 00    	je     ffffffff8021354f <_RME_Prc_Boot_Crt+0x3f4>
ffffffff80213403:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021340a:	e9 d9 04 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021340f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213413:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213417:	48 89 c2             	mov    %rax,%rdx
ffffffff8021341a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021341e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213422:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213425:	0f 93 c0             	setae  %al
ffffffff80213428:	0f b6 c0             	movzbl %al,%eax
ffffffff8021342b:	48 85 c0             	test   %rax,%rax
ffffffff8021342e:	74 0c                	je     ffffffff8021343c <_RME_Prc_Boot_Crt+0x2e1>
ffffffff80213430:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213437:	e9 ac 04 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021343c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213440:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213444:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213448:	48 89 c2             	mov    %rax,%rdx
ffffffff8021344b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021344f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213453:	48 01 d0             	add    %rdx,%rax
ffffffff80213456:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021345a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021345e:	48 8b 00             	mov    (%rax),%rax
ffffffff80213461:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213465:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213469:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021346d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213470:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213474:	0f 94 c0             	sete   %al
ffffffff80213477:	0f b6 c0             	movzbl %al,%eax
ffffffff8021347a:	48 85 c0             	test   %rax,%rax
ffffffff8021347d:	74 0c                	je     ffffffff8021348b <_RME_Prc_Boot_Crt+0x330>
ffffffff8021347f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213486:	e9 5d 04 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021348b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021348f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213493:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213497:	0f 95 c0             	setne  %al
ffffffff8021349a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021349d:	48 85 c0             	test   %rax,%rax
ffffffff802134a0:	74 0c                	je     ffffffff802134ae <_RME_Prc_Boot_Crt+0x353>
ffffffff802134a2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802134a9:	e9 3a 04 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802134ae:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802134b2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802134b7:	48 89 c2             	mov    %rax,%rdx
ffffffff802134ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802134be:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802134c2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802134c5:	0f 93 c0             	setae  %al
ffffffff802134c8:	0f b6 c0             	movzbl %al,%eax
ffffffff802134cb:	48 85 c0             	test   %rax,%rax
ffffffff802134ce:	74 0c                	je     ffffffff802134dc <_RME_Prc_Boot_Crt+0x381>
ffffffff802134d0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802134d7:	e9 0c 04 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802134dc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802134e0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802134e5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802134e9:	48 89 c2             	mov    %rax,%rdx
ffffffff802134ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802134f0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802134f4:	48 01 d0             	add    %rdx,%rax
ffffffff802134f7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802134fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802134ff:	48 8b 00             	mov    (%rax),%rax
ffffffff80213502:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213506:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021350a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021350e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213511:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213515:	0f 94 c0             	sete   %al
ffffffff80213518:	0f b6 c0             	movzbl %al,%eax
ffffffff8021351b:	48 85 c0             	test   %rax,%rax
ffffffff8021351e:	74 0c                	je     ffffffff8021352c <_RME_Prc_Boot_Crt+0x3d1>
ffffffff80213520:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213527:	e9 bc 03 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021352c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213530:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213534:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213538:	0f 95 c0             	setne  %al
ffffffff8021353b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021353e:	48 85 c0             	test   %rax,%rax
ffffffff80213541:	74 0c                	je     ffffffff8021354f <_RME_Prc_Boot_Crt+0x3f4>
ffffffff80213543:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021354a:	e9 99 03 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff8021354f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213553:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213558:	48 85 c0             	test   %rax,%rax
ffffffff8021355b:	0f 85 98 00 00 00    	jne    ffffffff802135f9 <_RME_Prc_Boot_Crt+0x49e>
ffffffff80213561:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213565:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213569:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8021356d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213570:	0f 93 c0             	setae  %al
ffffffff80213573:	0f b6 c0             	movzbl %al,%eax
ffffffff80213576:	48 85 c0             	test   %rax,%rax
ffffffff80213579:	74 0c                	je     ffffffff80213587 <_RME_Prc_Boot_Crt+0x42c>
ffffffff8021357b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213582:	e9 61 03 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213587:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021358b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021358f:	48 89 c2             	mov    %rax,%rdx
ffffffff80213592:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213596:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021359a:	48 01 d0             	add    %rdx,%rax
ffffffff8021359d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802135a1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802135a5:	48 8b 00             	mov    (%rax),%rax
ffffffff802135a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802135ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802135b0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802135b4:	0f b7 c0             	movzwl %ax,%eax
ffffffff802135b7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802135bb:	0f 94 c0             	sete   %al
ffffffff802135be:	0f b6 c0             	movzbl %al,%eax
ffffffff802135c1:	48 85 c0             	test   %rax,%rax
ffffffff802135c4:	74 0c                	je     ffffffff802135d2 <_RME_Prc_Boot_Crt+0x477>
ffffffff802135c6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802135cd:	e9 16 03 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802135d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802135d6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802135da:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802135de:	0f 95 c0             	setne  %al
ffffffff802135e1:	0f b6 c0             	movzbl %al,%eax
ffffffff802135e4:	48 85 c0             	test   %rax,%rax
ffffffff802135e7:	0f 84 4c 01 00 00    	je     ffffffff80213739 <_RME_Prc_Boot_Crt+0x5de>
ffffffff802135ed:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802135f4:	e9 ef 02 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802135f9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802135fd:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213601:	48 89 c2             	mov    %rax,%rdx
ffffffff80213604:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213608:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021360c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021360f:	0f 93 c0             	setae  %al
ffffffff80213612:	0f b6 c0             	movzbl %al,%eax
ffffffff80213615:	48 85 c0             	test   %rax,%rax
ffffffff80213618:	74 0c                	je     ffffffff80213626 <_RME_Prc_Boot_Crt+0x4cb>
ffffffff8021361a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213621:	e9 c2 02 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213626:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021362a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021362e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213632:	48 89 c2             	mov    %rax,%rdx
ffffffff80213635:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213639:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021363d:	48 01 d0             	add    %rdx,%rax
ffffffff80213640:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213644:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213648:	48 8b 00             	mov    (%rax),%rax
ffffffff8021364b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021364f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213653:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213657:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021365a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021365e:	0f 94 c0             	sete   %al
ffffffff80213661:	0f b6 c0             	movzbl %al,%eax
ffffffff80213664:	48 85 c0             	test   %rax,%rax
ffffffff80213667:	74 0c                	je     ffffffff80213675 <_RME_Prc_Boot_Crt+0x51a>
ffffffff80213669:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213670:	e9 73 02 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213675:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213679:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021367d:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213681:	0f 95 c0             	setne  %al
ffffffff80213684:	0f b6 c0             	movzbl %al,%eax
ffffffff80213687:	48 85 c0             	test   %rax,%rax
ffffffff8021368a:	74 0c                	je     ffffffff80213698 <_RME_Prc_Boot_Crt+0x53d>
ffffffff8021368c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213693:	e9 50 02 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213698:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021369c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802136a1:	48 89 c2             	mov    %rax,%rdx
ffffffff802136a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802136a8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802136ac:	48 39 c2             	cmp    %rax,%rdx
ffffffff802136af:	0f 93 c0             	setae  %al
ffffffff802136b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802136b5:	48 85 c0             	test   %rax,%rax
ffffffff802136b8:	74 0c                	je     ffffffff802136c6 <_RME_Prc_Boot_Crt+0x56b>
ffffffff802136ba:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802136c1:	e9 22 02 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802136c6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802136ca:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802136cf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802136d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802136d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802136da:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802136de:	48 01 d0             	add    %rdx,%rax
ffffffff802136e1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802136e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802136e9:	48 8b 00             	mov    (%rax),%rax
ffffffff802136ec:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802136f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802136f4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802136f8:	0f b7 c0             	movzwl %ax,%eax
ffffffff802136fb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802136ff:	0f 94 c0             	sete   %al
ffffffff80213702:	0f b6 c0             	movzbl %al,%eax
ffffffff80213705:	48 85 c0             	test   %rax,%rax
ffffffff80213708:	74 0c                	je     ffffffff80213716 <_RME_Prc_Boot_Crt+0x5bb>
ffffffff8021370a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213711:	e9 d2 01 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff80213716:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021371a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021371e:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213722:	0f 95 c0             	setne  %al
ffffffff80213725:	0f b6 c0             	movzbl %al,%eax
ffffffff80213728:	48 85 c0             	test   %rax,%rax
ffffffff8021372b:	74 0c                	je     ffffffff80213739 <_RME_Prc_Boot_Crt+0x5de>
ffffffff8021372d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213734:	e9 af 01 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80213739:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021373d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213741:	83 e0 01             	and    $0x1,%eax
ffffffff80213744:	48 85 c0             	test   %rax,%rax
ffffffff80213747:	0f 94 c0             	sete   %al
ffffffff8021374a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021374d:	48 85 c0             	test   %rax,%rax
ffffffff80213750:	74 0c                	je     ffffffff8021375e <_RME_Prc_Boot_Crt+0x603>
ffffffff80213752:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213759:	e9 8a 01 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff8021375e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213762:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213766:	83 e0 40             	and    $0x40,%eax
ffffffff80213769:	48 85 c0             	test   %rax,%rax
ffffffff8021376c:	0f 94 c0             	sete   %al
ffffffff8021376f:	0f b6 c0             	movzbl %al,%eax
ffffffff80213772:	48 85 c0             	test   %rax,%rax
ffffffff80213775:	74 0c                	je     ffffffff80213783 <_RME_Prc_Boot_Crt+0x628>
ffffffff80213777:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021377e:	e9 65 01 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80213783:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213787:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021378b:	83 e0 40             	and    $0x40,%eax
ffffffff8021378e:	48 85 c0             	test   %rax,%rax
ffffffff80213791:	0f 94 c0             	sete   %al
ffffffff80213794:	0f b6 c0             	movzbl %al,%eax
ffffffff80213797:	48 85 c0             	test   %rax,%rax
ffffffff8021379a:	74 0c                	je     ffffffff802137a8 <_RME_Prc_Boot_Crt+0x64d>
ffffffff8021379c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802137a3:	e9 40 01 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
#endif
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff802137a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802137ac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802137b0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff802137b4:	48 39 c2             	cmp    %rax,%rdx
ffffffff802137b7:	0f 93 c0             	setae  %al
ffffffff802137ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802137bd:	48 85 c0             	test   %rax,%rax
ffffffff802137c0:	74 0c                	je     ffffffff802137ce <_RME_Prc_Boot_Crt+0x673>
ffffffff802137c2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802137c9:	e9 1a 01 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff802137ce:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802137d2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802137d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802137d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802137dd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802137e1:	48 01 d0             	add    %rdx,%rax
ffffffff802137e4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff802137e8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802137ec:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff802137f3:	00 00 00 
ffffffff802137f6:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802137fb:	48 89 c7             	mov    %rax,%rdi
ffffffff802137fe:	e8 5b 8f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80213803:	48 85 c0             	test   %rax,%rax
ffffffff80213806:	0f 94 c0             	sete   %al
ffffffff80213809:	0f b6 c0             	movzbl %al,%eax
ffffffff8021380c:	48 85 c0             	test   %rax,%rax
ffffffff8021380f:	74 0c                	je     ffffffff8021381d <_RME_Prc_Boot_Crt+0x6c2>
ffffffff80213811:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80213818:	e9 cb 00 00 00       	jmp    ffffffff802138e8 <_RME_Prc_Boot_Crt+0x78d>
ffffffff8021381d:	48 8b 15 dc 67 01 00 	mov    0x167dc(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff80213824:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213828:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Header init */
    Prc_Crt->Head.Root_Ref=1U;
ffffffff8021382c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213830:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff80213837:	00 
    Prc_Crt->Head.Object=0U;
ffffffff80213838:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021383c:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80213843:	00 
    Prc_Crt->Head.Flag=RME_PRC_FLAG_INV|RME_PRC_FLAG_THD;
ffffffff80213844:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213848:	48 c7 40 10 03 00 00 	movq   $0x3,0x10(%rax)
ffffffff8021384f:	00 

    /* Info init */
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80213850:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213854:	48 8b 00             	mov    (%rax),%rax
ffffffff80213857:	89 c0                	mov    %eax,%eax
ffffffff80213859:	48 85 c0             	test   %rax,%rax
ffffffff8021385c:	74 0a                	je     ffffffff80213868 <_RME_Prc_Boot_Crt+0x70d>
ffffffff8021385e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213862:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213866:	eb 04                	jmp    ffffffff8021386c <_RME_Prc_Boot_Crt+0x711>
ffffffff80213868:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021386c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80213870:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213874:	48 8b 00             	mov    (%rax),%rax
ffffffff80213877:	89 c0                	mov    %eax,%eax
ffffffff80213879:	48 85 c0             	test   %rax,%rax
ffffffff8021387c:	74 0a                	je     ffffffff80213888 <_RME_Prc_Boot_Crt+0x72d>
ffffffff8021387e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213882:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213886:	eb 04                	jmp    ffffffff8021388c <_RME_Prc_Boot_Crt+0x731>
ffffffff80213888:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021388c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
#endif
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff80213890:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213894:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80213898:	48 89 50 28          	mov    %rdx,0x28(%rax)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff8021389c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802138a0:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802138a4:	48 89 50 30          	mov    %rdx,0x30(%rax)
#else
    Prc_Crt->Pgt=Raw_Pgt;
#endif
    
    /* Reference objects */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),1U);
ffffffff802138a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802138ac:	48 83 c0 08          	add    $0x8,%rax
ffffffff802138b0:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802138b5:	48 89 c7             	mov    %rax,%rdi
ffffffff802138b8:	e8 d6 8e ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),1U);
ffffffff802138bd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802138c1:	48 83 c0 08          	add    $0x8,%rax
ffffffff802138c5:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802138ca:	48 89 c7             	mov    %rax,%rdi
ffffffff802138cd:	e8 c1 8e ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif

    /* Establish cap */
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff802138d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802138d6:	48 b9 00 00 00 00 00 	movabs $0x5000000000000,%rcx
ffffffff802138dd:	00 05 00 
ffffffff802138e0:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff802138e3:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802138e8:	c9                   	leave
ffffffff802138e9:	c3                   	ret

ffffffff802138ea <_RME_Prc_Crt>:
                              rme_cid_t Cap_Cpt_Crt,
                              rme_cid_t Cap_Prc,
                              rme_cid_t Cap_Cpt,
                              rme_ptr_t Raw_Pgt)
#endif
{
ffffffff802138ea:	f3 0f 1e fa          	endbr64
ffffffff802138ee:	55                   	push   %rbp
ffffffff802138ef:	48 89 e5             	mov    %rsp,%rbp
ffffffff802138f2:	48 83 ec 68          	sub    $0x68,%rsp
ffffffff802138f6:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff802138fa:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff802138fe:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff80213902:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff80213906:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
ffffffff8021390a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021390e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213913:	48 85 c0             	test   %rax,%rax
ffffffff80213916:	0f 85 98 00 00 00    	jne    ffffffff802139b4 <_RME_Prc_Crt+0xca>
ffffffff8021391c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213920:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213924:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80213928:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021392b:	0f 93 c0             	setae  %al
ffffffff8021392e:	0f b6 c0             	movzbl %al,%eax
ffffffff80213931:	48 85 c0             	test   %rax,%rax
ffffffff80213934:	74 0c                	je     ffffffff80213942 <_RME_Prc_Crt+0x58>
ffffffff80213936:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021393d:	e9 35 07 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213942:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213946:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021394a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021394d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213951:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213955:	48 01 d0             	add    %rdx,%rax
ffffffff80213958:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021395c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213960:	48 8b 00             	mov    (%rax),%rax
ffffffff80213963:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213967:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021396b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021396f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213972:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213976:	0f 94 c0             	sete   %al
ffffffff80213979:	0f b6 c0             	movzbl %al,%eax
ffffffff8021397c:	48 85 c0             	test   %rax,%rax
ffffffff8021397f:	74 0c                	je     ffffffff8021398d <_RME_Prc_Crt+0xa3>
ffffffff80213981:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213988:	e9 ea 06 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff8021398d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213991:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213995:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213999:	0f 95 c0             	setne  %al
ffffffff8021399c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021399f:	48 85 c0             	test   %rax,%rax
ffffffff802139a2:	0f 84 4c 01 00 00    	je     ffffffff80213af4 <_RME_Prc_Crt+0x20a>
ffffffff802139a8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802139af:	e9 c3 06 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff802139b4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802139b8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802139bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802139bf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802139c3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802139c7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802139ca:	0f 93 c0             	setae  %al
ffffffff802139cd:	0f b6 c0             	movzbl %al,%eax
ffffffff802139d0:	48 85 c0             	test   %rax,%rax
ffffffff802139d3:	74 0c                	je     ffffffff802139e1 <_RME_Prc_Crt+0xf7>
ffffffff802139d5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802139dc:	e9 96 06 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff802139e1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802139e5:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802139e9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802139ed:	48 89 c2             	mov    %rax,%rdx
ffffffff802139f0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802139f4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802139f8:	48 01 d0             	add    %rdx,%rax
ffffffff802139fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802139ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213a03:	48 8b 00             	mov    (%rax),%rax
ffffffff80213a06:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213a0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213a0e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213a12:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213a15:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213a19:	0f 94 c0             	sete   %al
ffffffff80213a1c:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a1f:	48 85 c0             	test   %rax,%rax
ffffffff80213a22:	74 0c                	je     ffffffff80213a30 <_RME_Prc_Crt+0x146>
ffffffff80213a24:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213a2b:	e9 47 06 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213a30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213a34:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213a38:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213a3c:	0f 95 c0             	setne  %al
ffffffff80213a3f:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a42:	48 85 c0             	test   %rax,%rax
ffffffff80213a45:	74 0c                	je     ffffffff80213a53 <_RME_Prc_Crt+0x169>
ffffffff80213a47:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213a4e:	e9 24 06 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213a53:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213a57:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213a5c:	48 89 c2             	mov    %rax,%rdx
ffffffff80213a5f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213a63:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213a67:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213a6a:	0f 93 c0             	setae  %al
ffffffff80213a6d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213a70:	48 85 c0             	test   %rax,%rax
ffffffff80213a73:	74 0c                	je     ffffffff80213a81 <_RME_Prc_Crt+0x197>
ffffffff80213a75:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213a7c:	e9 f6 05 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213a81:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80213a85:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213a8a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213a8e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213a91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213a95:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213a99:	48 01 d0             	add    %rdx,%rax
ffffffff80213a9c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80213aa0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213aa4:	48 8b 00             	mov    (%rax),%rax
ffffffff80213aa7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213aab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213aaf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213ab3:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213ab6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213aba:	0f 94 c0             	sete   %al
ffffffff80213abd:	0f b6 c0             	movzbl %al,%eax
ffffffff80213ac0:	48 85 c0             	test   %rax,%rax
ffffffff80213ac3:	74 0c                	je     ffffffff80213ad1 <_RME_Prc_Crt+0x1e7>
ffffffff80213ac5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213acc:	e9 a6 05 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213ad1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ad5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213ad9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213add:	0f 95 c0             	setne  %al
ffffffff80213ae0:	0f b6 c0             	movzbl %al,%eax
ffffffff80213ae3:	48 85 c0             	test   %rax,%rax
ffffffff80213ae6:	74 0c                	je     ffffffff80213af4 <_RME_Prc_Crt+0x20a>
ffffffff80213ae8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213aef:	e9 83 05 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80213af4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213af8:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213afd:	48 85 c0             	test   %rax,%rax
ffffffff80213b00:	0f 85 98 00 00 00    	jne    ffffffff80213b9e <_RME_Prc_Crt+0x2b4>
ffffffff80213b06:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213b0a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213b0e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80213b12:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213b15:	0f 93 c0             	setae  %al
ffffffff80213b18:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b1b:	48 85 c0             	test   %rax,%rax
ffffffff80213b1e:	74 0c                	je     ffffffff80213b2c <_RME_Prc_Crt+0x242>
ffffffff80213b20:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213b27:	e9 4b 05 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213b2c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213b30:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213b34:	48 89 c2             	mov    %rax,%rdx
ffffffff80213b37:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213b3b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213b3f:	48 01 d0             	add    %rdx,%rax
ffffffff80213b42:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213b46:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213b4a:	48 8b 00             	mov    (%rax),%rax
ffffffff80213b4d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213b51:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213b55:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213b59:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213b5c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213b60:	0f 94 c0             	sete   %al
ffffffff80213b63:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b66:	48 85 c0             	test   %rax,%rax
ffffffff80213b69:	74 0c                	je     ffffffff80213b77 <_RME_Prc_Crt+0x28d>
ffffffff80213b6b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213b72:	e9 00 05 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213b77:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213b7b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213b7f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213b83:	0f 95 c0             	setne  %al
ffffffff80213b86:	0f b6 c0             	movzbl %al,%eax
ffffffff80213b89:	48 85 c0             	test   %rax,%rax
ffffffff80213b8c:	0f 84 4c 01 00 00    	je     ffffffff80213cde <_RME_Prc_Crt+0x3f4>
ffffffff80213b92:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213b99:	e9 d9 04 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213b9e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213ba2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213ba6:	48 89 c2             	mov    %rax,%rdx
ffffffff80213ba9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213bad:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213bb1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213bb4:	0f 93 c0             	setae  %al
ffffffff80213bb7:	0f b6 c0             	movzbl %al,%eax
ffffffff80213bba:	48 85 c0             	test   %rax,%rax
ffffffff80213bbd:	74 0c                	je     ffffffff80213bcb <_RME_Prc_Crt+0x2e1>
ffffffff80213bbf:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213bc6:	e9 ac 04 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213bcb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213bcf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213bd3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213bd7:	48 89 c2             	mov    %rax,%rdx
ffffffff80213bda:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213bde:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213be2:	48 01 d0             	add    %rdx,%rax
ffffffff80213be5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213be9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213bed:	48 8b 00             	mov    (%rax),%rax
ffffffff80213bf0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213bf4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213bf8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213bfc:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213bff:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213c03:	0f 94 c0             	sete   %al
ffffffff80213c06:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c09:	48 85 c0             	test   %rax,%rax
ffffffff80213c0c:	74 0c                	je     ffffffff80213c1a <_RME_Prc_Crt+0x330>
ffffffff80213c0e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213c15:	e9 5d 04 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213c1a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213c1e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213c22:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213c26:	0f 95 c0             	setne  %al
ffffffff80213c29:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c2c:	48 85 c0             	test   %rax,%rax
ffffffff80213c2f:	74 0c                	je     ffffffff80213c3d <_RME_Prc_Crt+0x353>
ffffffff80213c31:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213c38:	e9 3a 04 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213c3d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213c41:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213c46:	48 89 c2             	mov    %rax,%rdx
ffffffff80213c49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213c4d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213c51:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213c54:	0f 93 c0             	setae  %al
ffffffff80213c57:	0f b6 c0             	movzbl %al,%eax
ffffffff80213c5a:	48 85 c0             	test   %rax,%rax
ffffffff80213c5d:	74 0c                	je     ffffffff80213c6b <_RME_Prc_Crt+0x381>
ffffffff80213c5f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213c66:	e9 0c 04 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213c6b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80213c6f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213c74:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213c78:	48 89 c2             	mov    %rax,%rdx
ffffffff80213c7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213c7f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213c83:	48 01 d0             	add    %rdx,%rax
ffffffff80213c86:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80213c8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213c8e:	48 8b 00             	mov    (%rax),%rax
ffffffff80213c91:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213c95:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213c99:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213c9d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213ca0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213ca4:	0f 94 c0             	sete   %al
ffffffff80213ca7:	0f b6 c0             	movzbl %al,%eax
ffffffff80213caa:	48 85 c0             	test   %rax,%rax
ffffffff80213cad:	74 0c                	je     ffffffff80213cbb <_RME_Prc_Crt+0x3d1>
ffffffff80213caf:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213cb6:	e9 bc 03 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213cbb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213cbf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213cc3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213cc7:	0f 95 c0             	setne  %al
ffffffff80213cca:	0f b6 c0             	movzbl %al,%eax
ffffffff80213ccd:	48 85 c0             	test   %rax,%rax
ffffffff80213cd0:	74 0c                	je     ffffffff80213cde <_RME_Prc_Crt+0x3f4>
ffffffff80213cd2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213cd9:	e9 99 03 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80213cde:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213ce2:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80213ce7:	48 85 c0             	test   %rax,%rax
ffffffff80213cea:	0f 85 98 00 00 00    	jne    ffffffff80213d88 <_RME_Prc_Crt+0x49e>
ffffffff80213cf0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213cf4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213cf8:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80213cfc:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213cff:	0f 93 c0             	setae  %al
ffffffff80213d02:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d05:	48 85 c0             	test   %rax,%rax
ffffffff80213d08:	74 0c                	je     ffffffff80213d16 <_RME_Prc_Crt+0x42c>
ffffffff80213d0a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213d11:	e9 61 03 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213d16:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213d1a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213d1e:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d21:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213d25:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213d29:	48 01 d0             	add    %rdx,%rax
ffffffff80213d2c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213d30:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213d34:	48 8b 00             	mov    (%rax),%rax
ffffffff80213d37:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213d3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213d3f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213d43:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213d46:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213d4a:	0f 94 c0             	sete   %al
ffffffff80213d4d:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d50:	48 85 c0             	test   %rax,%rax
ffffffff80213d53:	74 0c                	je     ffffffff80213d61 <_RME_Prc_Crt+0x477>
ffffffff80213d55:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213d5c:	e9 16 03 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213d61:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213d65:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213d69:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213d6d:	0f 95 c0             	setne  %al
ffffffff80213d70:	0f b6 c0             	movzbl %al,%eax
ffffffff80213d73:	48 85 c0             	test   %rax,%rax
ffffffff80213d76:	0f 84 4c 01 00 00    	je     ffffffff80213ec8 <_RME_Prc_Crt+0x5de>
ffffffff80213d7c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213d83:	e9 ef 02 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213d88:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213d8c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213d90:	48 89 c2             	mov    %rax,%rdx
ffffffff80213d93:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213d97:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213d9b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213d9e:	0f 93 c0             	setae  %al
ffffffff80213da1:	0f b6 c0             	movzbl %al,%eax
ffffffff80213da4:	48 85 c0             	test   %rax,%rax
ffffffff80213da7:	74 0c                	je     ffffffff80213db5 <_RME_Prc_Crt+0x4cb>
ffffffff80213da9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213db0:	e9 c2 02 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213db5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213db9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80213dbd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213dc1:	48 89 c2             	mov    %rax,%rdx
ffffffff80213dc4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80213dc8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213dcc:	48 01 d0             	add    %rdx,%rax
ffffffff80213dcf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213dd3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213dd7:	48 8b 00             	mov    (%rax),%rax
ffffffff80213dda:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213dde:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213de2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213de6:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213de9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213ded:	0f 94 c0             	sete   %al
ffffffff80213df0:	0f b6 c0             	movzbl %al,%eax
ffffffff80213df3:	48 85 c0             	test   %rax,%rax
ffffffff80213df6:	74 0c                	je     ffffffff80213e04 <_RME_Prc_Crt+0x51a>
ffffffff80213df8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213dff:	e9 73 02 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213e04:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213e08:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213e0c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80213e10:	0f 95 c0             	setne  %al
ffffffff80213e13:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e16:	48 85 c0             	test   %rax,%rax
ffffffff80213e19:	74 0c                	je     ffffffff80213e27 <_RME_Prc_Crt+0x53d>
ffffffff80213e1b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213e22:	e9 50 02 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213e27:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213e2b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213e30:	48 89 c2             	mov    %rax,%rdx
ffffffff80213e33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213e37:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213e3b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213e3e:	0f 93 c0             	setae  %al
ffffffff80213e41:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e44:	48 85 c0             	test   %rax,%rax
ffffffff80213e47:	74 0c                	je     ffffffff80213e55 <_RME_Prc_Crt+0x56b>
ffffffff80213e49:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213e50:	e9 22 02 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213e55:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80213e59:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80213e5e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213e62:	48 89 c2             	mov    %rax,%rdx
ffffffff80213e65:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213e69:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213e6d:	48 01 d0             	add    %rdx,%rax
ffffffff80213e70:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80213e74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213e78:	48 8b 00             	mov    (%rax),%rax
ffffffff80213e7b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80213e7f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213e83:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80213e87:	0f b7 c0             	movzwl %ax,%eax
ffffffff80213e8a:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80213e8e:	0f 94 c0             	sete   %al
ffffffff80213e91:	0f b6 c0             	movzbl %al,%eax
ffffffff80213e94:	48 85 c0             	test   %rax,%rax
ffffffff80213e97:	74 0c                	je     ffffffff80213ea5 <_RME_Prc_Crt+0x5bb>
ffffffff80213e99:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80213ea0:	e9 d2 01 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213ea5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80213ea9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80213ead:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80213eb1:	0f 95 c0             	setne  %al
ffffffff80213eb4:	0f b6 c0             	movzbl %al,%eax
ffffffff80213eb7:	48 85 c0             	test   %rax,%rax
ffffffff80213eba:	74 0c                	je     ffffffff80213ec8 <_RME_Prc_Crt+0x5de>
ffffffff80213ebc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80213ec3:	e9 af 01 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff80213ec8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213ecc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213ed0:	83 e0 01             	and    $0x1,%eax
ffffffff80213ed3:	48 85 c0             	test   %rax,%rax
ffffffff80213ed6:	0f 94 c0             	sete   %al
ffffffff80213ed9:	0f b6 c0             	movzbl %al,%eax
ffffffff80213edc:	48 85 c0             	test   %rax,%rax
ffffffff80213edf:	74 0c                	je     ffffffff80213eed <_RME_Prc_Crt+0x603>
ffffffff80213ee1:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213ee8:	e9 8a 01 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
ffffffff80213eed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213ef1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213ef5:	83 e0 40             	and    $0x40,%eax
ffffffff80213ef8:	48 85 c0             	test   %rax,%rax
ffffffff80213efb:	0f 94 c0             	sete   %al
ffffffff80213efe:	0f b6 c0             	movzbl %al,%eax
ffffffff80213f01:	48 85 c0             	test   %rax,%rax
ffffffff80213f04:	74 0c                	je     ffffffff80213f12 <_RME_Prc_Crt+0x628>
ffffffff80213f06:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213f0d:	e9 65 01 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
ffffffff80213f12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80213f16:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80213f1a:	83 e0 40             	and    $0x40,%eax
ffffffff80213f1d:	48 85 c0             	test   %rax,%rax
ffffffff80213f20:	0f 94 c0             	sete   %al
ffffffff80213f23:	0f b6 c0             	movzbl %al,%eax
ffffffff80213f26:	48 85 c0             	test   %rax,%rax
ffffffff80213f29:	74 0c                	je     ffffffff80213f37 <_RME_Prc_Crt+0x64d>
ffffffff80213f2b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80213f32:	e9 40 01 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
#endif
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
ffffffff80213f37:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213f3b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80213f3f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80213f43:	48 39 c2             	cmp    %rax,%rdx
ffffffff80213f46:	0f 93 c0             	setae  %al
ffffffff80213f49:	0f b6 c0             	movzbl %al,%eax
ffffffff80213f4c:	48 85 c0             	test   %rax,%rax
ffffffff80213f4f:	74 0c                	je     ffffffff80213f5d <_RME_Prc_Crt+0x673>
ffffffff80213f51:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80213f58:	e9 1a 01 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213f5d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80213f61:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80213f65:	48 89 c2             	mov    %rax,%rdx
ffffffff80213f68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80213f6c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80213f70:	48 01 d0             	add    %rdx,%rax
ffffffff80213f73:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
ffffffff80213f77:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213f7b:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80213f82:	00 00 00 
ffffffff80213f85:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80213f8a:	48 89 c7             	mov    %rax,%rdi
ffffffff80213f8d:	e8 cc 87 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80213f92:	48 85 c0             	test   %rax,%rax
ffffffff80213f95:	0f 94 c0             	sete   %al
ffffffff80213f98:	0f b6 c0             	movzbl %al,%eax
ffffffff80213f9b:	48 85 c0             	test   %rax,%rax
ffffffff80213f9e:	74 0c                	je     ffffffff80213fac <_RME_Prc_Crt+0x6c2>
ffffffff80213fa0:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80213fa7:	e9 cb 00 00 00       	jmp    ffffffff80214077 <_RME_Prc_Crt+0x78d>
ffffffff80213fac:	48 8b 15 4d 60 01 00 	mov    0x1604d(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff80213fb3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fb7:	48 89 50 20          	mov    %rdx,0x20(%rax)
    
    /* Header init */
    Prc_Crt->Head.Root_Ref=0U;
ffffffff80213fbb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fbf:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80213fc6:	00 
    Prc_Crt->Head.Object=0U;
ffffffff80213fc7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fcb:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80213fd2:	00 
    Prc_Crt->Head.Flag=RME_PRC_FLAG_ALL;
ffffffff80213fd3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80213fd7:	48 c7 40 10 0f 00 00 	movq   $0xf,0x10(%rax)
ffffffff80213fde:	00 
    
    /* Info init */
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
ffffffff80213fdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213fe3:	48 8b 00             	mov    (%rax),%rax
ffffffff80213fe6:	89 c0                	mov    %eax,%eax
ffffffff80213fe8:	48 85 c0             	test   %rax,%rax
ffffffff80213feb:	74 0a                	je     ffffffff80213ff7 <_RME_Prc_Crt+0x70d>
ffffffff80213fed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213ff1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80213ff5:	eb 04                	jmp    ffffffff80213ffb <_RME_Prc_Crt+0x711>
ffffffff80213ff7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80213ffb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
ffffffff80213fff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214003:	48 8b 00             	mov    (%rax),%rax
ffffffff80214006:	89 c0                	mov    %eax,%eax
ffffffff80214008:	48 85 c0             	test   %rax,%rax
ffffffff8021400b:	74 0a                	je     ffffffff80214017 <_RME_Prc_Crt+0x72d>
ffffffff8021400d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214011:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214015:	eb 04                	jmp    ffffffff8021401b <_RME_Prc_Crt+0x731>
ffffffff80214017:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021401b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
#endif
    Prc_Crt->Cpt=Prc_Cpt;
ffffffff8021401f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214023:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80214027:	48 89 50 28          	mov    %rdx,0x28(%rax)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Crt->Pgt=Prc_Pgt;
ffffffff8021402b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021402f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80214033:	48 89 50 30          	mov    %rdx,0x30(%rax)
#else
    Prc_Crt->Pgt=Raw_Pgt;
#endif
    
    /* Reference objects */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),1U);
ffffffff80214037:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021403b:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021403f:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214044:	48 89 c7             	mov    %rax,%rdi
ffffffff80214047:	e8 47 87 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),1U);
ffffffff8021404c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214050:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214054:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214059:	48 89 c7             	mov    %rax,%rdi
ffffffff8021405c:	e8 32 87 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif

    /* Establish cap */
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
ffffffff80214061:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214065:	48 b9 00 00 00 00 00 	movabs $0x5000000000000,%rcx
ffffffff8021406c:	00 05 00 
ffffffff8021406f:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80214072:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80214077:	c9                   	leave
ffffffff80214078:	c3                   	ret

ffffffff80214079 <_RME_Prc_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Prc_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Prc)
{
ffffffff80214079:	f3 0f 1e fa          	endbr64
ffffffff8021407d:	55                   	push   %rbp
ffffffff8021407e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214081:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80214085:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80214089:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021408d:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    struct RME_Cap_Pgt* Prc_Pgt;
#endif

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214091:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214095:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021409a:	48 85 c0             	test   %rax,%rax
ffffffff8021409d:	0f 85 98 00 00 00    	jne    ffffffff8021413b <_RME_Prc_Del+0xc2>
ffffffff802140a3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802140a7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802140ab:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff802140af:	48 39 c2             	cmp    %rax,%rdx
ffffffff802140b2:	0f 93 c0             	setae  %al
ffffffff802140b5:	0f b6 c0             	movzbl %al,%eax
ffffffff802140b8:	48 85 c0             	test   %rax,%rax
ffffffff802140bb:	74 0c                	je     ffffffff802140c9 <_RME_Prc_Del+0x50>
ffffffff802140bd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802140c4:	e9 6b 03 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff802140c9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802140cd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802140d1:	48 89 c2             	mov    %rax,%rdx
ffffffff802140d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802140d8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802140dc:	48 01 d0             	add    %rdx,%rax
ffffffff802140df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802140e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802140e7:	48 8b 00             	mov    (%rax),%rax
ffffffff802140ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802140ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802140f2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802140f6:	0f b7 c0             	movzwl %ax,%eax
ffffffff802140f9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802140fd:	0f 94 c0             	sete   %al
ffffffff80214100:	0f b6 c0             	movzbl %al,%eax
ffffffff80214103:	48 85 c0             	test   %rax,%rax
ffffffff80214106:	74 0c                	je     ffffffff80214114 <_RME_Prc_Del+0x9b>
ffffffff80214108:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021410f:	e9 20 03 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff80214114:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214118:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021411c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214120:	0f 95 c0             	setne  %al
ffffffff80214123:	0f b6 c0             	movzbl %al,%eax
ffffffff80214126:	48 85 c0             	test   %rax,%rax
ffffffff80214129:	0f 84 4c 01 00 00    	je     ffffffff8021427b <_RME_Prc_Del+0x202>
ffffffff8021412f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214136:	e9 f9 02 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff8021413b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021413f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214143:	48 89 c2             	mov    %rax,%rdx
ffffffff80214146:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021414a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021414e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214151:	0f 93 c0             	setae  %al
ffffffff80214154:	0f b6 c0             	movzbl %al,%eax
ffffffff80214157:	48 85 c0             	test   %rax,%rax
ffffffff8021415a:	74 0c                	je     ffffffff80214168 <_RME_Prc_Del+0xef>
ffffffff8021415c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214163:	e9 cc 02 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff80214168:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021416c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214170:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214174:	48 89 c2             	mov    %rax,%rdx
ffffffff80214177:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021417b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021417f:	48 01 d0             	add    %rdx,%rax
ffffffff80214182:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021418a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021418d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214191:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214195:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214199:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021419c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802141a0:	0f 94 c0             	sete   %al
ffffffff802141a3:	0f b6 c0             	movzbl %al,%eax
ffffffff802141a6:	48 85 c0             	test   %rax,%rax
ffffffff802141a9:	74 0c                	je     ffffffff802141b7 <_RME_Prc_Del+0x13e>
ffffffff802141ab:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802141b2:	e9 7d 02 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff802141b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802141bb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802141bf:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802141c3:	0f 95 c0             	setne  %al
ffffffff802141c6:	0f b6 c0             	movzbl %al,%eax
ffffffff802141c9:	48 85 c0             	test   %rax,%rax
ffffffff802141cc:	74 0c                	je     ffffffff802141da <_RME_Prc_Del+0x161>
ffffffff802141ce:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802141d5:	e9 5a 02 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff802141da:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802141de:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802141e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802141e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802141ea:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802141ee:	48 39 c2             	cmp    %rax,%rdx
ffffffff802141f1:	0f 93 c0             	setae  %al
ffffffff802141f4:	0f b6 c0             	movzbl %al,%eax
ffffffff802141f7:	48 85 c0             	test   %rax,%rax
ffffffff802141fa:	74 0c                	je     ffffffff80214208 <_RME_Prc_Del+0x18f>
ffffffff802141fc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214203:	e9 2c 02 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff80214208:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021420c:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214211:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214215:	48 89 c2             	mov    %rax,%rdx
ffffffff80214218:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021421c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214220:	48 01 d0             	add    %rdx,%rax
ffffffff80214223:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214227:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021422b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021422e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214232:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214236:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021423a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021423d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214241:	0f 94 c0             	sete   %al
ffffffff80214244:	0f b6 c0             	movzbl %al,%eax
ffffffff80214247:	48 85 c0             	test   %rax,%rax
ffffffff8021424a:	74 0c                	je     ffffffff80214258 <_RME_Prc_Del+0x1df>
ffffffff8021424c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214253:	e9 dc 01 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff80214258:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021425c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214260:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214264:	0f 95 c0             	setne  %al
ffffffff80214267:	0f b6 c0             	movzbl %al,%eax
ffffffff8021426a:	48 85 c0             	test   %rax,%rax
ffffffff8021426d:	74 0c                	je     ffffffff8021427b <_RME_Prc_Del+0x202>
ffffffff8021426f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214276:	e9 b9 01 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021427b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021427f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214283:	83 e0 02             	and    $0x2,%eax
ffffffff80214286:	48 85 c0             	test   %rax,%rax
ffffffff80214289:	0f 94 c0             	sete   %al
ffffffff8021428c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021428f:	48 85 c0             	test   %rax,%rax
ffffffff80214292:	74 0c                	je     ffffffff802142a0 <_RME_Prc_Del+0x227>
ffffffff80214294:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021429b:	e9 94 01 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>

    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
ffffffff802142a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802142a4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802142a8:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff802142ac:	48 39 c2             	cmp    %rax,%rdx
ffffffff802142af:	0f 93 c0             	setae  %al
ffffffff802142b2:	0f b6 c0             	movzbl %al,%eax
ffffffff802142b5:	48 85 c0             	test   %rax,%rax
ffffffff802142b8:	74 0c                	je     ffffffff802142c6 <_RME_Prc_Del+0x24d>
ffffffff802142ba:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802142c1:	e9 6e 01 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff802142c6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802142ca:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802142ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802142d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802142d5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802142d9:	48 01 d0             	add    %rdx,%rax
ffffffff802142dc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
ffffffff802142e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802142e4:	48 8b 00             	mov    (%rax),%rax
ffffffff802142e7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802142eb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802142ef:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802142f3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802142f6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802142fa:	0f 95 c0             	setne  %al
ffffffff802142fd:	0f b6 c0             	movzbl %al,%eax
ffffffff80214300:	48 85 c0             	test   %rax,%rax
ffffffff80214303:	74 0c                	je     ffffffff80214311 <_RME_Prc_Del+0x298>
ffffffff80214305:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021430c:	e9 23 01 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff80214311:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214315:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214319:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021431d:	0f 95 c0             	setne  %al
ffffffff80214320:	0f b6 c0             	movzbl %al,%eax
ffffffff80214323:	48 85 c0             	test   %rax,%rax
ffffffff80214326:	74 0c                	je     ffffffff80214334 <_RME_Prc_Del+0x2bb>
ffffffff80214328:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021432f:	e9 00 01 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff80214334:	48 8b 15 c5 5c 01 00 	mov    0x15cc5(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8021433b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021433f:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80214343:	48 29 c2             	sub    %rax,%rdx
ffffffff80214346:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021434a:	0f 96 c0             	setbe  %al
ffffffff8021434d:	0f b6 c0             	movzbl %al,%eax
ffffffff80214350:	48 98                	cltq
ffffffff80214352:	48 85 c0             	test   %rax,%rax
ffffffff80214355:	74 0c                	je     ffffffff80214363 <_RME_Prc_Del+0x2ea>
ffffffff80214357:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8021435e:	e9 d1 00 00 00       	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>
ffffffff80214363:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214367:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021436b:	48 85 c0             	test   %rax,%rax
ffffffff8021436e:	0f 95 c0             	setne  %al
ffffffff80214371:	0f b6 c0             	movzbl %al,%eax
ffffffff80214374:	48 85 c0             	test   %rax,%rax
ffffffff80214377:	74 41                	je     ffffffff802143ba <_RME_Prc_Del+0x341>
ffffffff80214379:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021437d:	89 c0                	mov    %eax,%eax
ffffffff8021437f:	48 85 c0             	test   %rax,%rax
ffffffff80214382:	0f 94 c0             	sete   %al
ffffffff80214385:	0f b6 c0             	movzbl %al,%eax
ffffffff80214388:	48 85 c0             	test   %rax,%rax
ffffffff8021438b:	74 24                	je     ffffffff802143b1 <_RME_Prc_Del+0x338>
ffffffff8021438d:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80214394:	00 ff ff 
ffffffff80214397:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021439b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021439e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802143a2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff802143a6:	48 89 ce             	mov    %rcx,%rsi
ffffffff802143a9:	48 89 c7             	mov    %rax,%rdi
ffffffff802143ac:	e8 ad 83 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802143b1:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff802143b8:	eb 7a                	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>

    /* Remember for deletion */
    Prc_Cpt=Prc_Del->Cpt;
ffffffff802143ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802143be:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802143c2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
#if(RME_PGT_RAW_ENABLE==0U)
    Prc_Pgt=Prc_Del->Pgt;
ffffffff802143c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802143ca:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802143ce:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#endif

    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Prc_Del,Type_Stat);
ffffffff802143d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802143d6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff802143da:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802143df:	48 89 ce             	mov    %rcx,%rsi
ffffffff802143e2:	48 89 c7             	mov    %rax,%rdi
ffffffff802143e5:	e8 74 83 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802143ea:	48 85 c0             	test   %rax,%rax
ffffffff802143ed:	0f 94 c0             	sete   %al
ffffffff802143f0:	0f b6 c0             	movzbl %al,%eax
ffffffff802143f3:	48 85 c0             	test   %rax,%rax
ffffffff802143f6:	74 09                	je     ffffffff80214401 <_RME_Prc_Del+0x388>
ffffffff802143f8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802143ff:	eb 33                	jmp    ffffffff80214434 <_RME_Prc_Del+0x3bb>

    /* Dereference caps */
    RME_FETCH_ADD(&(Prc_Cpt->Head.Root_Ref),-1);
ffffffff80214401:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214405:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214409:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80214410:	48 89 c7             	mov    %rax,%rdi
ffffffff80214413:	e8 7b 83 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Prc_Pgt->Head.Root_Ref),-1);
ffffffff80214418:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021441c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214420:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80214427:	48 89 c7             	mov    %rax,%rdi
ffffffff8021442a:	e8 64 83 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif
    
    return 0;
ffffffff8021442f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80214434:	c9                   	leave
ffffffff80214435:	c3                   	ret

ffffffff80214436 <_RME_Prc_Cpt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Prc_Cpt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Prc,
                              rme_cid_t Cap_Cpt)
{
ffffffff80214436:	f3 0f 1e fa          	endbr64
ffffffff8021443a:	55                   	push   %rbp
ffffffff8021443b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021443e:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80214442:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80214446:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021444a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_New;
    struct RME_Cap_Cpt* Cpt_Old;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8021444e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214452:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214457:	48 85 c0             	test   %rax,%rax
ffffffff8021445a:	0f 85 98 00 00 00    	jne    ffffffff802144f8 <_RME_Prc_Cpt+0xc2>
ffffffff80214460:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214464:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214468:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021446c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021446f:	0f 93 c0             	setae  %al
ffffffff80214472:	0f b6 c0             	movzbl %al,%eax
ffffffff80214475:	48 85 c0             	test   %rax,%rax
ffffffff80214478:	74 0c                	je     ffffffff80214486 <_RME_Prc_Cpt+0x50>
ffffffff8021447a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214481:	e9 6e 04 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff80214486:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021448a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021448e:	48 89 c2             	mov    %rax,%rdx
ffffffff80214491:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214495:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214499:	48 01 d0             	add    %rdx,%rax
ffffffff8021449c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802144a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802144a4:	48 8b 00             	mov    (%rax),%rax
ffffffff802144a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802144ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802144af:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802144b3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802144b6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802144ba:	0f 94 c0             	sete   %al
ffffffff802144bd:	0f b6 c0             	movzbl %al,%eax
ffffffff802144c0:	48 85 c0             	test   %rax,%rax
ffffffff802144c3:	74 0c                	je     ffffffff802144d1 <_RME_Prc_Cpt+0x9b>
ffffffff802144c5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802144cc:	e9 23 04 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff802144d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802144d5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802144d9:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802144dd:	0f 95 c0             	setne  %al
ffffffff802144e0:	0f b6 c0             	movzbl %al,%eax
ffffffff802144e3:	48 85 c0             	test   %rax,%rax
ffffffff802144e6:	0f 84 4c 01 00 00    	je     ffffffff80214638 <_RME_Prc_Cpt+0x202>
ffffffff802144ec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802144f3:	e9 fc 03 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff802144f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802144fc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214500:	48 89 c2             	mov    %rax,%rdx
ffffffff80214503:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214507:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021450b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021450e:	0f 93 c0             	setae  %al
ffffffff80214511:	0f b6 c0             	movzbl %al,%eax
ffffffff80214514:	48 85 c0             	test   %rax,%rax
ffffffff80214517:	74 0c                	je     ffffffff80214525 <_RME_Prc_Cpt+0xef>
ffffffff80214519:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214520:	e9 cf 03 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff80214525:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214529:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021452d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214531:	48 89 c2             	mov    %rax,%rdx
ffffffff80214534:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214538:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021453c:	48 01 d0             	add    %rdx,%rax
ffffffff8021453f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214543:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214547:	48 8b 00             	mov    (%rax),%rax
ffffffff8021454a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021454e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214552:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214556:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214559:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021455d:	0f 94 c0             	sete   %al
ffffffff80214560:	0f b6 c0             	movzbl %al,%eax
ffffffff80214563:	48 85 c0             	test   %rax,%rax
ffffffff80214566:	74 0c                	je     ffffffff80214574 <_RME_Prc_Cpt+0x13e>
ffffffff80214568:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021456f:	e9 80 03 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff80214574:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214578:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021457c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214580:	0f 95 c0             	setne  %al
ffffffff80214583:	0f b6 c0             	movzbl %al,%eax
ffffffff80214586:	48 85 c0             	test   %rax,%rax
ffffffff80214589:	74 0c                	je     ffffffff80214597 <_RME_Prc_Cpt+0x161>
ffffffff8021458b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214592:	e9 5d 03 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff80214597:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021459b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802145a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802145a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802145a7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802145ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff802145ae:	0f 93 c0             	setae  %al
ffffffff802145b1:	0f b6 c0             	movzbl %al,%eax
ffffffff802145b4:	48 85 c0             	test   %rax,%rax
ffffffff802145b7:	74 0c                	je     ffffffff802145c5 <_RME_Prc_Cpt+0x18f>
ffffffff802145b9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802145c0:	e9 2f 03 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff802145c5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802145c9:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802145ce:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802145d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802145d5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802145d9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802145dd:	48 01 d0             	add    %rdx,%rax
ffffffff802145e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802145e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802145e8:	48 8b 00             	mov    (%rax),%rax
ffffffff802145eb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802145ef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802145f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802145f7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802145fa:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802145fe:	0f 94 c0             	sete   %al
ffffffff80214601:	0f b6 c0             	movzbl %al,%eax
ffffffff80214604:	48 85 c0             	test   %rax,%rax
ffffffff80214607:	74 0c                	je     ffffffff80214615 <_RME_Prc_Cpt+0x1df>
ffffffff80214609:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214610:	e9 df 02 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff80214615:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214619:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021461d:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214621:	0f 95 c0             	setne  %al
ffffffff80214624:	0f b6 c0             	movzbl %al,%eax
ffffffff80214627:	48 85 c0             	test   %rax,%rax
ffffffff8021462a:	74 0c                	je     ffffffff80214638 <_RME_Prc_Cpt+0x202>
ffffffff8021462c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214633:	e9 bc 02 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214638:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021463c:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214641:	48 85 c0             	test   %rax,%rax
ffffffff80214644:	0f 85 98 00 00 00    	jne    ffffffff802146e2 <_RME_Prc_Cpt+0x2ac>
ffffffff8021464a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021464e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214652:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80214656:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214659:	0f 93 c0             	setae  %al
ffffffff8021465c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021465f:	48 85 c0             	test   %rax,%rax
ffffffff80214662:	74 0c                	je     ffffffff80214670 <_RME_Prc_Cpt+0x23a>
ffffffff80214664:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021466b:	e9 84 02 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff80214670:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214674:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214678:	48 89 c2             	mov    %rax,%rdx
ffffffff8021467b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021467f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214683:	48 01 d0             	add    %rdx,%rax
ffffffff80214686:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021468a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021468e:	48 8b 00             	mov    (%rax),%rax
ffffffff80214691:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214695:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214699:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021469d:	0f b7 c0             	movzwl %ax,%eax
ffffffff802146a0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802146a4:	0f 94 c0             	sete   %al
ffffffff802146a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802146aa:	48 85 c0             	test   %rax,%rax
ffffffff802146ad:	74 0c                	je     ffffffff802146bb <_RME_Prc_Cpt+0x285>
ffffffff802146af:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802146b6:	e9 39 02 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff802146bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802146bf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802146c3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802146c7:	0f 95 c0             	setne  %al
ffffffff802146ca:	0f b6 c0             	movzbl %al,%eax
ffffffff802146cd:	48 85 c0             	test   %rax,%rax
ffffffff802146d0:	0f 84 4c 01 00 00    	je     ffffffff80214822 <_RME_Prc_Cpt+0x3ec>
ffffffff802146d6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802146dd:	e9 12 02 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff802146e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802146e6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802146ea:	48 89 c2             	mov    %rax,%rdx
ffffffff802146ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802146f1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802146f5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802146f8:	0f 93 c0             	setae  %al
ffffffff802146fb:	0f b6 c0             	movzbl %al,%eax
ffffffff802146fe:	48 85 c0             	test   %rax,%rax
ffffffff80214701:	74 0c                	je     ffffffff8021470f <_RME_Prc_Cpt+0x2d9>
ffffffff80214703:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021470a:	e9 e5 01 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff8021470f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214713:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214717:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021471b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021471e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214722:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214726:	48 01 d0             	add    %rdx,%rax
ffffffff80214729:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021472d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214731:	48 8b 00             	mov    (%rax),%rax
ffffffff80214734:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214738:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021473c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214740:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214743:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214747:	0f 94 c0             	sete   %al
ffffffff8021474a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021474d:	48 85 c0             	test   %rax,%rax
ffffffff80214750:	74 0c                	je     ffffffff8021475e <_RME_Prc_Cpt+0x328>
ffffffff80214752:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214759:	e9 96 01 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff8021475e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214762:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214766:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021476a:	0f 95 c0             	setne  %al
ffffffff8021476d:	0f b6 c0             	movzbl %al,%eax
ffffffff80214770:	48 85 c0             	test   %rax,%rax
ffffffff80214773:	74 0c                	je     ffffffff80214781 <_RME_Prc_Cpt+0x34b>
ffffffff80214775:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021477c:	e9 73 01 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff80214781:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214785:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021478a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021478d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214791:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214795:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214798:	0f 93 c0             	setae  %al
ffffffff8021479b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021479e:	48 85 c0             	test   %rax,%rax
ffffffff802147a1:	74 0c                	je     ffffffff802147af <_RME_Prc_Cpt+0x379>
ffffffff802147a3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802147aa:	e9 45 01 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff802147af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802147b3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802147b8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802147bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802147bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802147c3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802147c7:	48 01 d0             	add    %rdx,%rax
ffffffff802147ca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802147ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802147d2:	48 8b 00             	mov    (%rax),%rax
ffffffff802147d5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802147d9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802147dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802147e1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802147e4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802147e8:	0f 94 c0             	sete   %al
ffffffff802147eb:	0f b6 c0             	movzbl %al,%eax
ffffffff802147ee:	48 85 c0             	test   %rax,%rax
ffffffff802147f1:	74 0c                	je     ffffffff802147ff <_RME_Prc_Cpt+0x3c9>
ffffffff802147f3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802147fa:	e9 f5 00 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
ffffffff802147ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214803:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214807:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021480b:	0f 95 c0             	setne  %al
ffffffff8021480e:	0f b6 c0             	movzbl %al,%eax
ffffffff80214811:	48 85 c0             	test   %rax,%rax
ffffffff80214814:	74 0c                	je     ffffffff80214822 <_RME_Prc_Cpt+0x3ec>
ffffffff80214816:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021481d:	e9 d2 00 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
                   struct RME_Cap_Cpt*,Cpt_New,Type_Stat);     
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
ffffffff80214822:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214826:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021482a:	83 e0 04             	and    $0x4,%eax
ffffffff8021482d:	48 85 c0             	test   %rax,%rax
ffffffff80214830:	0f 94 c0             	sete   %al
ffffffff80214833:	0f b6 c0             	movzbl %al,%eax
ffffffff80214836:	48 85 c0             	test   %rax,%rax
ffffffff80214839:	74 0c                	je     ffffffff80214847 <_RME_Prc_Cpt+0x411>
ffffffff8021483b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214842:	e9 ad 00 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
ffffffff80214847:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021484b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021484f:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80214854:	48 85 c0             	test   %rax,%rax
ffffffff80214857:	0f 94 c0             	sete   %al
ffffffff8021485a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021485d:	48 85 c0             	test   %rax,%rax
ffffffff80214860:	74 0c                	je     ffffffff8021486e <_RME_Prc_Cpt+0x438>
ffffffff80214862:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214869:	e9 86 00 00 00       	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
    
    /* Convert to root */
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
ffffffff8021486e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214872:	48 8b 00             	mov    (%rax),%rax
ffffffff80214875:	89 c0                	mov    %eax,%eax
ffffffff80214877:	48 85 c0             	test   %rax,%rax
ffffffff8021487a:	74 0a                	je     ffffffff80214886 <_RME_Prc_Cpt+0x450>
ffffffff8021487c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214880:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214884:	eb 04                	jmp    ffffffff8021488a <_RME_Prc_Cpt+0x454>
ffffffff80214886:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021488a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    
    /* Commit the change */
    Cpt_Old=Prc_Op->Cpt;
ffffffff8021488e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214892:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214896:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Cpt)),
ffffffff8021489a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8021489e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802148a2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff802148a6:	48 83 c1 28          	add    $0x28,%rcx
ffffffff802148aa:	48 89 c6             	mov    %rax,%rsi
ffffffff802148ad:	48 89 cf             	mov    %rcx,%rdi
ffffffff802148b0:	e8 a9 7e ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802148b5:	48 85 c0             	test   %rax,%rax
ffffffff802148b8:	75 09                	jne    ffffffff802148c3 <_RME_Prc_Cpt+0x48d>
                     (rme_ptr_t)Cpt_Old,(rme_ptr_t)Cpt_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();
        
        return RME_ERR_PTH_CONFLICT;
ffffffff802148ba:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff802148c1:	eb 31                	jmp    ffffffff802148f4 <_RME_Prc_Cpt+0x4be>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Reference new table and dereference the old table */
    RME_FETCH_ADD(&(Cpt_New->Head.Root_Ref),1);
ffffffff802148c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802148c7:	48 83 c0 08          	add    $0x8,%rax
ffffffff802148cb:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802148d0:	48 89 c7             	mov    %rax,%rdi
ffffffff802148d3:	e8 bb 7e ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    RME_FETCH_ADD(&(Cpt_Old->Head.Root_Ref),-1);
ffffffff802148d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802148dc:	48 83 c0 08          	add    $0x8,%rax
ffffffff802148e0:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802148e7:	48 89 c7             	mov    %rax,%rdi
ffffffff802148ea:	e8 a4 7e ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>

    return 0;
ffffffff802148ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802148f4:	c9                   	leave
ffffffff802148f5:	c3                   	ret

ffffffff802148f6 <_RME_Prc_Pgt>:
#else
static rme_ret_t _RME_Prc_Pgt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Raw_Pgt)
#endif
{
ffffffff802148f6:	f3 0f 1e fa          	endbr64
ffffffff802148fa:	55                   	push   %rbp
ffffffff802148fb:	48 89 e5             	mov    %rsp,%rbp
ffffffff802148fe:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80214902:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80214906:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021490a:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Pgt_Old;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8021490e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214912:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214917:	48 85 c0             	test   %rax,%rax
ffffffff8021491a:	0f 85 98 00 00 00    	jne    ffffffff802149b8 <_RME_Prc_Pgt+0xc2>
ffffffff80214920:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214924:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214928:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021492c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021492f:	0f 93 c0             	setae  %al
ffffffff80214932:	0f b6 c0             	movzbl %al,%eax
ffffffff80214935:	48 85 c0             	test   %rax,%rax
ffffffff80214938:	74 0c                	je     ffffffff80214946 <_RME_Prc_Pgt+0x50>
ffffffff8021493a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214941:	e9 6e 04 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214946:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021494a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021494e:	48 89 c2             	mov    %rax,%rdx
ffffffff80214951:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214955:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214959:	48 01 d0             	add    %rdx,%rax
ffffffff8021495c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214960:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214964:	48 8b 00             	mov    (%rax),%rax
ffffffff80214967:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021496b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021496f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214973:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214976:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021497a:	0f 94 c0             	sete   %al
ffffffff8021497d:	0f b6 c0             	movzbl %al,%eax
ffffffff80214980:	48 85 c0             	test   %rax,%rax
ffffffff80214983:	74 0c                	je     ffffffff80214991 <_RME_Prc_Pgt+0x9b>
ffffffff80214985:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021498c:	e9 23 04 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214991:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214995:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214999:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021499d:	0f 95 c0             	setne  %al
ffffffff802149a0:	0f b6 c0             	movzbl %al,%eax
ffffffff802149a3:	48 85 c0             	test   %rax,%rax
ffffffff802149a6:	0f 84 4c 01 00 00    	je     ffffffff80214af8 <_RME_Prc_Pgt+0x202>
ffffffff802149ac:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802149b3:	e9 fc 03 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff802149b8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802149bc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802149c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802149c3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802149c7:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802149cb:	48 39 c2             	cmp    %rax,%rdx
ffffffff802149ce:	0f 93 c0             	setae  %al
ffffffff802149d1:	0f b6 c0             	movzbl %al,%eax
ffffffff802149d4:	48 85 c0             	test   %rax,%rax
ffffffff802149d7:	74 0c                	je     ffffffff802149e5 <_RME_Prc_Pgt+0xef>
ffffffff802149d9:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802149e0:	e9 cf 03 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff802149e5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802149e9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802149ed:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802149f1:	48 89 c2             	mov    %rax,%rdx
ffffffff802149f4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802149f8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802149fc:	48 01 d0             	add    %rdx,%rax
ffffffff802149ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214a03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214a07:	48 8b 00             	mov    (%rax),%rax
ffffffff80214a0a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214a0e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214a12:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214a16:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214a19:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214a1d:	0f 94 c0             	sete   %al
ffffffff80214a20:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a23:	48 85 c0             	test   %rax,%rax
ffffffff80214a26:	74 0c                	je     ffffffff80214a34 <_RME_Prc_Pgt+0x13e>
ffffffff80214a28:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214a2f:	e9 80 03 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214a34:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214a38:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214a3c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214a40:	0f 95 c0             	setne  %al
ffffffff80214a43:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a46:	48 85 c0             	test   %rax,%rax
ffffffff80214a49:	74 0c                	je     ffffffff80214a57 <_RME_Prc_Pgt+0x161>
ffffffff80214a4b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214a52:	e9 5d 03 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214a57:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214a5b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214a60:	48 89 c2             	mov    %rax,%rdx
ffffffff80214a63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214a67:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214a6b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214a6e:	0f 93 c0             	setae  %al
ffffffff80214a71:	0f b6 c0             	movzbl %al,%eax
ffffffff80214a74:	48 85 c0             	test   %rax,%rax
ffffffff80214a77:	74 0c                	je     ffffffff80214a85 <_RME_Prc_Pgt+0x18f>
ffffffff80214a79:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214a80:	e9 2f 03 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214a85:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80214a89:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214a8e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214a92:	48 89 c2             	mov    %rax,%rdx
ffffffff80214a95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214a99:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214a9d:	48 01 d0             	add    %rdx,%rax
ffffffff80214aa0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214aa4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214aa8:	48 8b 00             	mov    (%rax),%rax
ffffffff80214aab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214aaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214ab3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214ab7:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214aba:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214abe:	0f 94 c0             	sete   %al
ffffffff80214ac1:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ac4:	48 85 c0             	test   %rax,%rax
ffffffff80214ac7:	74 0c                	je     ffffffff80214ad5 <_RME_Prc_Pgt+0x1df>
ffffffff80214ac9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214ad0:	e9 df 02 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214ad5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214ad9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214add:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80214ae1:	0f 95 c0             	setne  %al
ffffffff80214ae4:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ae7:	48 85 c0             	test   %rax,%rax
ffffffff80214aea:	74 0c                	je     ffffffff80214af8 <_RME_Prc_Pgt+0x202>
ffffffff80214aec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214af3:	e9 bc 02 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat); 
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
ffffffff80214af8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214afc:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214b01:	48 85 c0             	test   %rax,%rax
ffffffff80214b04:	0f 85 98 00 00 00    	jne    ffffffff80214ba2 <_RME_Prc_Pgt+0x2ac>
ffffffff80214b0a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214b0e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214b12:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80214b16:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214b19:	0f 93 c0             	setae  %al
ffffffff80214b1c:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b1f:	48 85 c0             	test   %rax,%rax
ffffffff80214b22:	74 0c                	je     ffffffff80214b30 <_RME_Prc_Pgt+0x23a>
ffffffff80214b24:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214b2b:	e9 84 02 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214b30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214b34:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214b38:	48 89 c2             	mov    %rax,%rdx
ffffffff80214b3b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214b3f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214b43:	48 01 d0             	add    %rdx,%rax
ffffffff80214b46:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214b4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214b4e:	48 8b 00             	mov    (%rax),%rax
ffffffff80214b51:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214b55:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214b59:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214b5d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214b60:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214b64:	0f 94 c0             	sete   %al
ffffffff80214b67:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b6a:	48 85 c0             	test   %rax,%rax
ffffffff80214b6d:	74 0c                	je     ffffffff80214b7b <_RME_Prc_Pgt+0x285>
ffffffff80214b6f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214b76:	e9 39 02 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214b7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214b7f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214b83:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214b87:	0f 95 c0             	setne  %al
ffffffff80214b8a:	0f b6 c0             	movzbl %al,%eax
ffffffff80214b8d:	48 85 c0             	test   %rax,%rax
ffffffff80214b90:	0f 84 4c 01 00 00    	je     ffffffff80214ce2 <_RME_Prc_Pgt+0x3ec>
ffffffff80214b96:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214b9d:	e9 12 02 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214ba2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214ba6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214baa:	48 89 c2             	mov    %rax,%rdx
ffffffff80214bad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214bb1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214bb5:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214bb8:	0f 93 c0             	setae  %al
ffffffff80214bbb:	0f b6 c0             	movzbl %al,%eax
ffffffff80214bbe:	48 85 c0             	test   %rax,%rax
ffffffff80214bc1:	74 0c                	je     ffffffff80214bcf <_RME_Prc_Pgt+0x2d9>
ffffffff80214bc3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214bca:	e9 e5 01 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214bcf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214bd3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214bd7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214bdb:	48 89 c2             	mov    %rax,%rdx
ffffffff80214bde:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80214be2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214be6:	48 01 d0             	add    %rdx,%rax
ffffffff80214be9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214bed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214bf1:	48 8b 00             	mov    (%rax),%rax
ffffffff80214bf4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214bf8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214bfc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214c00:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214c03:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214c07:	0f 94 c0             	sete   %al
ffffffff80214c0a:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c0d:	48 85 c0             	test   %rax,%rax
ffffffff80214c10:	74 0c                	je     ffffffff80214c1e <_RME_Prc_Pgt+0x328>
ffffffff80214c12:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214c19:	e9 96 01 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214c1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214c22:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214c26:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214c2a:	0f 95 c0             	setne  %al
ffffffff80214c2d:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c30:	48 85 c0             	test   %rax,%rax
ffffffff80214c33:	74 0c                	je     ffffffff80214c41 <_RME_Prc_Pgt+0x34b>
ffffffff80214c35:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214c3c:	e9 73 01 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214c41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214c45:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214c4a:	48 89 c2             	mov    %rax,%rdx
ffffffff80214c4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c51:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214c55:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214c58:	0f 93 c0             	setae  %al
ffffffff80214c5b:	0f b6 c0             	movzbl %al,%eax
ffffffff80214c5e:	48 85 c0             	test   %rax,%rax
ffffffff80214c61:	74 0c                	je     ffffffff80214c6f <_RME_Prc_Pgt+0x379>
ffffffff80214c63:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214c6a:	e9 45 01 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214c6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214c73:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214c78:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214c7c:	48 89 c2             	mov    %rax,%rdx
ffffffff80214c7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c83:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214c87:	48 01 d0             	add    %rdx,%rax
ffffffff80214c8a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80214c8e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214c92:	48 8b 00             	mov    (%rax),%rax
ffffffff80214c95:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214c99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214c9d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214ca1:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214ca4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214ca8:	0f 94 c0             	sete   %al
ffffffff80214cab:	0f b6 c0             	movzbl %al,%eax
ffffffff80214cae:	48 85 c0             	test   %rax,%rax
ffffffff80214cb1:	74 0c                	je     ffffffff80214cbf <_RME_Prc_Pgt+0x3c9>
ffffffff80214cb3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214cba:	e9 f5 00 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
ffffffff80214cbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214cc3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214cc7:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80214ccb:	0f 95 c0             	setne  %al
ffffffff80214cce:	0f b6 c0             	movzbl %al,%eax
ffffffff80214cd1:	48 85 c0             	test   %rax,%rax
ffffffff80214cd4:	74 0c                	je     ffffffff80214ce2 <_RME_Prc_Pgt+0x3ec>
ffffffff80214cd6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214cdd:	e9 d2 00 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
                   struct RME_Cap_Pgt*,Pgt_New,Type_Stat);
#endif
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
ffffffff80214ce2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214ce6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214cea:	83 e0 08             	and    $0x8,%eax
ffffffff80214ced:	48 85 c0             	test   %rax,%rax
ffffffff80214cf0:	0f 94 c0             	sete   %al
ffffffff80214cf3:	0f b6 c0             	movzbl %al,%eax
ffffffff80214cf6:	48 85 c0             	test   %rax,%rax
ffffffff80214cf9:	74 0c                	je     ffffffff80214d07 <_RME_Prc_Pgt+0x411>
ffffffff80214cfb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214d02:	e9 ad 00 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
ffffffff80214d07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d0b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80214d0f:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80214d14:	48 85 c0             	test   %rax,%rax
ffffffff80214d17:	0f 94 c0             	sete   %al
ffffffff80214d1a:	0f b6 c0             	movzbl %al,%eax
ffffffff80214d1d:	48 85 c0             	test   %rax,%rax
ffffffff80214d20:	74 0c                	je     ffffffff80214d2e <_RME_Prc_Pgt+0x438>
ffffffff80214d22:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214d29:	e9 86 00 00 00       	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
#endif
    
    Pgt_Old=Prc_Op->Pgt;
ffffffff80214d2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214d32:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80214d36:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
#if(RME_PGT_RAW_ENABLE==0U)
    /* Convert to root */
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
ffffffff80214d3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d3e:	48 8b 00             	mov    (%rax),%rax
ffffffff80214d41:	89 c0                	mov    %eax,%eax
ffffffff80214d43:	48 85 c0             	test   %rax,%rax
ffffffff80214d46:	74 0a                	je     ffffffff80214d52 <_RME_Prc_Pgt+0x45c>
ffffffff80214d48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d4c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80214d50:	eb 04                	jmp    ffffffff80214d56 <_RME_Prc_Pgt+0x460>
ffffffff80214d52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* Actually commit the change */
    if(RME_COMP_SWAP((rme_ptr_t*)(&(Prc_Op->Pgt)),
ffffffff80214d5a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80214d5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214d62:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80214d66:	48 83 c1 30          	add    $0x30,%rcx
ffffffff80214d6a:	48 89 c6             	mov    %rax,%rsi
ffffffff80214d6d:	48 89 cf             	mov    %rcx,%rdi
ffffffff80214d70:	e8 e9 79 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80214d75:	48 85 c0             	test   %rax,%rax
ffffffff80214d78:	75 09                	jne    ffffffff80214d83 <_RME_Prc_Pgt+0x48d>
                     Raw_Pgt)==RME_CASFAIL)
#endif
    {
        RME_COV_MARKER();
        
        return RME_ERR_PTH_CONFLICT;
ffffffff80214d7a:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff80214d81:	eb 31                	jmp    ffffffff80214db4 <_RME_Prc_Pgt+0x4be>
        /* No action required */
    }
    
    /* Reference new table and dereference the old table */
#if(RME_PGT_RAW_ENABLE==0U)
    RME_FETCH_ADD(&(Pgt_New->Head.Root_Ref),1);
ffffffff80214d83:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80214d87:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214d8b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80214d90:	48 89 c7             	mov    %rax,%rdi
ffffffff80214d93:	e8 fb 79 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    RME_FETCH_ADD(&(Pgt_Old->Head.Root_Ref),-1);
ffffffff80214d98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80214d9c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80214da0:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80214da7:	48 89 c7             	mov    %rax,%rdi
ffffffff80214daa:	e8 e4 79 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
#endif
    
    return 0;
ffffffff80214daf:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80214db4:	c9                   	leave
ffffffff80214db5:	c3                   	ret

ffffffff80214db6 <_RME_Thd_Boot_Crt>:
                            rme_cid_t Cap_Thd,
                            rme_cid_t Cap_Prc,
                            rme_ptr_t Vaddr,
                            rme_ptr_t Prio,
                            struct RME_CPU_Local* Local)
{
ffffffff80214db6:	f3 0f 1e fa          	endbr64
ffffffff80214dba:	55                   	push   %rbp
ffffffff80214dbb:	48 89 e5             	mov    %rsp,%rbp
ffffffff80214dbe:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80214dc2:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80214dc6:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80214dca:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80214dce:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80214dd2:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80214dd6:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    struct RME_Cap_Prc* Prc_Root;
    struct RME_Thd_Struct* Thread;
    rme_ptr_t Type_Stat;
    
    /* Check whether the priority level is allowed */
    if(Prio>=RME_PREEMPT_PRIO_NUM)
ffffffff80214dda:	48 83 7d a0 3f       	cmpq   $0x3f,-0x60(%rbp)
ffffffff80214ddf:	76 0c                	jbe    ffffffff80214ded <_RME_Thd_Boot_Crt+0x37>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80214de1:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80214de8:	e9 44 06 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80214ded:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214df1:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214df6:	48 85 c0             	test   %rax,%rax
ffffffff80214df9:	0f 85 98 00 00 00    	jne    ffffffff80214e97 <_RME_Thd_Boot_Crt+0xe1>
ffffffff80214dff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214e03:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214e07:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80214e0b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214e0e:	0f 93 c0             	setae  %al
ffffffff80214e11:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e14:	48 85 c0             	test   %rax,%rax
ffffffff80214e17:	74 0c                	je     ffffffff80214e25 <_RME_Thd_Boot_Crt+0x6f>
ffffffff80214e19:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214e20:	e9 0c 06 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214e25:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214e29:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214e2d:	48 89 c2             	mov    %rax,%rdx
ffffffff80214e30:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214e34:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214e38:	48 01 d0             	add    %rdx,%rax
ffffffff80214e3b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214e3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214e43:	48 8b 00             	mov    (%rax),%rax
ffffffff80214e46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214e4a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214e4e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214e52:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214e55:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214e59:	0f 94 c0             	sete   %al
ffffffff80214e5c:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e5f:	48 85 c0             	test   %rax,%rax
ffffffff80214e62:	74 0c                	je     ffffffff80214e70 <_RME_Thd_Boot_Crt+0xba>
ffffffff80214e64:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214e6b:	e9 c1 05 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214e70:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214e74:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214e78:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214e7c:	0f 95 c0             	setne  %al
ffffffff80214e7f:	0f b6 c0             	movzbl %al,%eax
ffffffff80214e82:	48 85 c0             	test   %rax,%rax
ffffffff80214e85:	0f 84 4c 01 00 00    	je     ffffffff80214fd7 <_RME_Thd_Boot_Crt+0x221>
ffffffff80214e8b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214e92:	e9 9a 05 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214e97:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214e9b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214e9f:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ea2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214ea6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214eaa:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214ead:	0f 93 c0             	setae  %al
ffffffff80214eb0:	0f b6 c0             	movzbl %al,%eax
ffffffff80214eb3:	48 85 c0             	test   %rax,%rax
ffffffff80214eb6:	74 0c                	je     ffffffff80214ec4 <_RME_Thd_Boot_Crt+0x10e>
ffffffff80214eb8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214ebf:	e9 6d 05 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214ec4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214ec8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80214ecc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214ed0:	48 89 c2             	mov    %rax,%rdx
ffffffff80214ed3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214ed7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214edb:	48 01 d0             	add    %rdx,%rax
ffffffff80214ede:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214ee2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214ee6:	48 8b 00             	mov    (%rax),%rax
ffffffff80214ee9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214eed:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214ef1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214ef5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214ef8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214efc:	0f 94 c0             	sete   %al
ffffffff80214eff:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f02:	48 85 c0             	test   %rax,%rax
ffffffff80214f05:	74 0c                	je     ffffffff80214f13 <_RME_Thd_Boot_Crt+0x15d>
ffffffff80214f07:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214f0e:	e9 1e 05 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214f13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214f17:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214f1b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214f1f:	0f 95 c0             	setne  %al
ffffffff80214f22:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f25:	48 85 c0             	test   %rax,%rax
ffffffff80214f28:	74 0c                	je     ffffffff80214f36 <_RME_Thd_Boot_Crt+0x180>
ffffffff80214f2a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214f31:	e9 fb 04 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214f36:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214f3a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214f3f:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f42:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214f46:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214f4a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214f4d:	0f 93 c0             	setae  %al
ffffffff80214f50:	0f b6 c0             	movzbl %al,%eax
ffffffff80214f53:	48 85 c0             	test   %rax,%rax
ffffffff80214f56:	74 0c                	je     ffffffff80214f64 <_RME_Thd_Boot_Crt+0x1ae>
ffffffff80214f58:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214f5f:	e9 cd 04 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214f64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80214f68:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80214f6d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214f71:	48 89 c2             	mov    %rax,%rdx
ffffffff80214f74:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214f78:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80214f7c:	48 01 d0             	add    %rdx,%rax
ffffffff80214f7f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80214f83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80214f87:	48 8b 00             	mov    (%rax),%rax
ffffffff80214f8a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80214f8e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214f92:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80214f96:	0f b7 c0             	movzwl %ax,%eax
ffffffff80214f99:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80214f9d:	0f 94 c0             	sete   %al
ffffffff80214fa0:	0f b6 c0             	movzbl %al,%eax
ffffffff80214fa3:	48 85 c0             	test   %rax,%rax
ffffffff80214fa6:	74 0c                	je     ffffffff80214fb4 <_RME_Thd_Boot_Crt+0x1fe>
ffffffff80214fa8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214faf:	e9 7d 04 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80214fb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80214fb8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214fbc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214fc0:	0f 95 c0             	setne  %al
ffffffff80214fc3:	0f b6 c0             	movzbl %al,%eax
ffffffff80214fc6:	48 85 c0             	test   %rax,%rax
ffffffff80214fc9:	74 0c                	je     ffffffff80214fd7 <_RME_Thd_Boot_Crt+0x221>
ffffffff80214fcb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214fd2:	e9 5a 04 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80214fd7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80214fdb:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80214fe0:	48 85 c0             	test   %rax,%rax
ffffffff80214fe3:	0f 85 98 00 00 00    	jne    ffffffff80215081 <_RME_Thd_Boot_Crt+0x2cb>
ffffffff80214fe9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80214fed:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80214ff1:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80214ff5:	48 39 c2             	cmp    %rax,%rdx
ffffffff80214ff8:	0f 93 c0             	setae  %al
ffffffff80214ffb:	0f b6 c0             	movzbl %al,%eax
ffffffff80214ffe:	48 85 c0             	test   %rax,%rax
ffffffff80215001:	74 0c                	je     ffffffff8021500f <_RME_Thd_Boot_Crt+0x259>
ffffffff80215003:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021500a:	e9 22 04 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff8021500f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80215013:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215017:	48 89 c2             	mov    %rax,%rdx
ffffffff8021501a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021501e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215022:	48 01 d0             	add    %rdx,%rax
ffffffff80215025:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215029:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021502d:	48 8b 00             	mov    (%rax),%rax
ffffffff80215030:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80215034:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215038:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021503c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021503f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215043:	0f 94 c0             	sete   %al
ffffffff80215046:	0f b6 c0             	movzbl %al,%eax
ffffffff80215049:	48 85 c0             	test   %rax,%rax
ffffffff8021504c:	74 0c                	je     ffffffff8021505a <_RME_Thd_Boot_Crt+0x2a4>
ffffffff8021504e:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215055:	e9 d7 03 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff8021505a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021505e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215062:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80215066:	0f 95 c0             	setne  %al
ffffffff80215069:	0f b6 c0             	movzbl %al,%eax
ffffffff8021506c:	48 85 c0             	test   %rax,%rax
ffffffff8021506f:	0f 84 4c 01 00 00    	je     ffffffff802151c1 <_RME_Thd_Boot_Crt+0x40b>
ffffffff80215075:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021507c:	e9 b0 03 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215081:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80215085:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215089:	48 89 c2             	mov    %rax,%rdx
ffffffff8021508c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215090:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215094:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215097:	0f 93 c0             	setae  %al
ffffffff8021509a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021509d:	48 85 c0             	test   %rax,%rax
ffffffff802150a0:	74 0c                	je     ffffffff802150ae <_RME_Thd_Boot_Crt+0x2f8>
ffffffff802150a2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802150a9:	e9 83 03 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff802150ae:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802150b2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802150b6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802150ba:	48 89 c2             	mov    %rax,%rdx
ffffffff802150bd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802150c1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802150c5:	48 01 d0             	add    %rdx,%rax
ffffffff802150c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802150cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802150d0:	48 8b 00             	mov    (%rax),%rax
ffffffff802150d3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802150d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802150db:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802150df:	0f b7 c0             	movzwl %ax,%eax
ffffffff802150e2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802150e6:	0f 94 c0             	sete   %al
ffffffff802150e9:	0f b6 c0             	movzbl %al,%eax
ffffffff802150ec:	48 85 c0             	test   %rax,%rax
ffffffff802150ef:	74 0c                	je     ffffffff802150fd <_RME_Thd_Boot_Crt+0x347>
ffffffff802150f1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802150f8:	e9 34 03 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff802150fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215101:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215105:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215109:	0f 95 c0             	setne  %al
ffffffff8021510c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021510f:	48 85 c0             	test   %rax,%rax
ffffffff80215112:	74 0c                	je     ffffffff80215120 <_RME_Thd_Boot_Crt+0x36a>
ffffffff80215114:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021511b:	e9 11 03 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215120:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80215124:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215129:	48 89 c2             	mov    %rax,%rdx
ffffffff8021512c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215130:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215134:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215137:	0f 93 c0             	setae  %al
ffffffff8021513a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021513d:	48 85 c0             	test   %rax,%rax
ffffffff80215140:	74 0c                	je     ffffffff8021514e <_RME_Thd_Boot_Crt+0x398>
ffffffff80215142:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215149:	e9 e3 02 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff8021514e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80215152:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215157:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021515b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021515e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215162:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215166:	48 01 d0             	add    %rdx,%rax
ffffffff80215169:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021516d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215171:	48 8b 00             	mov    (%rax),%rax
ffffffff80215174:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80215178:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021517c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215180:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215183:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215187:	0f 94 c0             	sete   %al
ffffffff8021518a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021518d:	48 85 c0             	test   %rax,%rax
ffffffff80215190:	74 0c                	je     ffffffff8021519e <_RME_Thd_Boot_Crt+0x3e8>
ffffffff80215192:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215199:	e9 93 02 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff8021519e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802151a2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802151a6:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802151aa:	0f 95 c0             	setne  %al
ffffffff802151ad:	0f b6 c0             	movzbl %al,%eax
ffffffff802151b0:	48 85 c0             	test   %rax,%rax
ffffffff802151b3:	74 0c                	je     ffffffff802151c1 <_RME_Thd_Boot_Crt+0x40b>
ffffffff802151b5:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802151bc:	e9 70 02 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);   
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff802151c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802151c5:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802151c9:	83 e0 01             	and    $0x1,%eax
ffffffff802151cc:	48 85 c0             	test   %rax,%rax
ffffffff802151cf:	0f 94 c0             	sete   %al
ffffffff802151d2:	0f b6 c0             	movzbl %al,%eax
ffffffff802151d5:	48 85 c0             	test   %rax,%rax
ffffffff802151d8:	74 0c                	je     ffffffff802151e6 <_RME_Thd_Boot_Crt+0x430>
ffffffff802151da:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802151e1:	e9 4b 02 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff802151e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802151ea:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802151ee:	83 e0 02             	and    $0x2,%eax
ffffffff802151f1:	48 85 c0             	test   %rax,%rax
ffffffff802151f4:	0f 94 c0             	sete   %al
ffffffff802151f7:	0f b6 c0             	movzbl %al,%eax
ffffffff802151fa:	48 85 c0             	test   %rax,%rax
ffffffff802151fd:	74 0c                	je     ffffffff8021520b <_RME_Thd_Boot_Crt+0x455>
ffffffff802151ff:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215206:	e9 26 02 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8021520b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021520f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215213:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80215217:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021521a:	0f 93 c0             	setae  %al
ffffffff8021521d:	0f b6 c0             	movzbl %al,%eax
ffffffff80215220:	48 85 c0             	test   %rax,%rax
ffffffff80215223:	74 0c                	je     ffffffff80215231 <_RME_Thd_Boot_Crt+0x47b>
ffffffff80215225:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021522c:	e9 00 02 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215231:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80215235:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215239:	48 89 c2             	mov    %rax,%rdx
ffffffff8021523c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215240:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215244:	48 01 d0             	add    %rdx,%rax
ffffffff80215247:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff8021524b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021524f:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80215256:	00 00 00 
ffffffff80215259:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021525e:	48 89 c7             	mov    %rax,%rdi
ffffffff80215261:	e8 f8 74 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80215266:	48 85 c0             	test   %rax,%rax
ffffffff80215269:	0f 94 c0             	sete   %al
ffffffff8021526c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021526f:	48 85 c0             	test   %rax,%rax
ffffffff80215272:	74 0c                	je     ffffffff80215280 <_RME_Thd_Boot_Crt+0x4ca>
ffffffff80215274:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021527b:	e9 b1 01 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
ffffffff80215280:	48 8b 15 79 4d 01 00 	mov    0x14d79(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff80215287:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021528b:	48 89 50 20          	mov    %rdx,0x20(%rax)
     
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_THD_SIZE(0U))!=0)
ffffffff8021528f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215293:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff80215298:	48 89 c7             	mov    %rax,%rdi
ffffffff8021529b:	e8 18 d1 ff ff       	call   ffffffff802123b8 <_RME_Kot_Mark>
ffffffff802152a0:	48 85 c0             	test   %rax,%rax
ffffffff802152a3:	74 17                	je     ffffffff802152bc <_RME_Thd_Boot_Crt+0x506>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff802152a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802152a9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff802152b0:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff802152b7:	e9 75 01 00 00       	jmp    ffffffff80215431 <_RME_Thd_Boot_Crt+0x67b>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Object init */
    Thread=(struct RME_Thd_Struct*)Vaddr;
ffffffff802152bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802152c0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    /* The TID of these threads are by default taken care of by the kernel */
    Thread->Sched.TID=0U;
ffffffff802152c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152c8:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff802152cf:	00 
    Thread->Sched.Slice=RME_THD_INIT_TIME;
ffffffff802152d0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152d4:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff802152db:	ff ff 7f 
ffffffff802152de:	48 89 48 30          	mov    %rcx,0x30(%rax)
    Thread->Sched.State=RME_THD_READY;
ffffffff802152e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802152e6:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff802152ed:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff802152ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802152f2:	48 8b 00             	mov    (%rax),%rax
ffffffff802152f5:	89 c0                	mov    %eax,%eax
ffffffff802152f7:	48 85 c0             	test   %rax,%rax
ffffffff802152fa:	74 0a                	je     ffffffff80215306 <_RME_Thd_Boot_Crt+0x550>
ffffffff802152fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215300:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80215304:	eb 04                	jmp    ffffffff8021530a <_RME_Thd_Boot_Crt+0x554>
ffffffff80215306:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021530a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Thread->Sched.Prc=Prc_Root;
ffffffff8021530e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215312:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80215316:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Thread->Sched.Signal=0U;
ffffffff8021531a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021531e:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80215325:	00 
    Thread->Sched.Prio=Prio;
ffffffff80215326:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021532a:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8021532e:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Thread->Sched.Prio_Max=RME_PREEMPT_PRIO_NUM-1U;
ffffffff80215332:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215336:	48 c7 40 48 3f 00 00 	movq   $0x3f,0x48(%rax)
ffffffff8021533d:	00 
    /* Set scheduler reference to 1 so cannot be free */
    Thread->Sched.Sched_Ref=1U;
ffffffff8021533e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215342:	48 c7 40 60 01 00 00 	movq   $0x1,0x60(%rax)
ffffffff80215349:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff8021534a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021534e:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff80215355:	00 
    /* Bind the thread to the current CPU */
    Thread->Sched.Local=Local;
ffffffff80215356:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021535a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff8021535e:	48 89 50 28          	mov    %rdx,0x28(%rax)
    /* This is a marking that this thread haven't sent any notifications */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80215362:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215366:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021536a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021536d:	e8 e8 79 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff80215372:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215376:	48 83 c0 78          	add    $0x78,%rax
ffffffff8021537a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021537d:	e8 d8 79 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    /* Point its pointer to itself - this will never be a hypervisor thread */
    Thread->Ctx.Hyp_Attr=0U;
ffffffff80215382:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215386:	48 c7 80 88 00 00 00 	movq   $0x0,0x88(%rax)
ffffffff8021538d:	00 00 00 00 
    Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80215391:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215395:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021539b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021539e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802153a2:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    /* Initialize the invocation stack */
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff802153a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802153ad:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff802153b3:	48 89 c7             	mov    %rax,%rdi
ffffffff802153b6:	e8 9f 79 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    Thread->Ctx.Invstk_Depth=0U;
ffffffff802153bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802153bf:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
ffffffff802153c6:	00 00 00 00 
    
    /* Info init */
    Thd_Crt->Head.Root_Ref=1U;
ffffffff802153ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802153ce:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff802153d5:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff802153d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802153da:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff802153de:	48 89 50 18          	mov    %rdx,0x18(%rax)
    /* This can only be a parent, and not a child, and cannot be freed. Additionally,
     * this should not be blocked on any endpoint. Any attempt to block this thread will fail.
     * Setting execution information for this is also prohibited. */
    Thd_Crt->Head.Flag=RME_THD_FLAG_SCHED_PRIO|RME_THD_FLAG_SCHED_PARENT|
ffffffff802153e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802153e6:	48 c7 40 10 ec 01 00 	movq   $0x1ec,0x10(%rax)
ffffffff802153ed:	00 
                       RME_THD_FLAG_XFER_DST|RME_THD_FLAG_XFER_SRC|
                       RME_THD_FLAG_SCHED_RCV|RME_THD_FLAG_SWT;

    /* Referece process */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref), 1U);
ffffffff802153ee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802153f2:	48 83 c0 08          	add    $0x8,%rax
ffffffff802153f6:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802153fb:	48 89 c7             	mov    %rax,%rdi
ffffffff802153fe:	e8 90 73 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Insert this into the runqueue, and set current thread to it */
    _RME_Run_Ins(Thread);
ffffffff80215403:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215407:	48 89 c7             	mov    %rax,%rdi
ffffffff8021540a:	e8 d3 d9 ff ff       	call   ffffffff80212de2 <_RME_Run_Ins>
    Local->Thd_Cur=Thread;
ffffffff8021540f:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80215413:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80215417:	48 89 50 08          	mov    %rdx,0x8(%rax)

    /* Establish cap */
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff8021541b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021541f:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff80215426:	00 06 00 
ffffffff80215429:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_THD,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021542c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80215431:	c9                   	leave
ffffffff80215432:	c3                   	ret

ffffffff80215433 <_RME_Thd_Crt>:
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Prio_Max,
                              rme_ptr_t Raddr,
                              rme_ptr_t Attr,
                              rme_ptr_t Is_Hyp)
{
ffffffff80215433:	f3 0f 1e fa          	endbr64
ffffffff80215437:	55                   	push   %rbp
ffffffff80215438:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021543b:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff8021543f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff80215443:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff80215447:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8021544b:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff8021544f:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff80215453:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Vaddr;
    rme_ptr_t Size;
    
    /* See if the maximum priority relationship is correct - a thread
     * can never create a thread with higher maximum priority */
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
ffffffff80215457:	e8 e3 63 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021545c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80215460:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80215464:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
ffffffff80215468:	73 0c                	jae    ffffffff80215476 <_RME_Thd_Crt+0x43>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff8021546a:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80215471:	e9 80 09 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215476:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021547a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021547f:	48 85 c0             	test   %rax,%rax
ffffffff80215482:	0f 85 98 00 00 00    	jne    ffffffff80215520 <_RME_Thd_Crt+0xed>
ffffffff80215488:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021548c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215490:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80215494:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215497:	0f 93 c0             	setae  %al
ffffffff8021549a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021549d:	48 85 c0             	test   %rax,%rax
ffffffff802154a0:	74 0c                	je     ffffffff802154ae <_RME_Thd_Crt+0x7b>
ffffffff802154a2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802154a9:	e9 48 09 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff802154ae:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802154b2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802154b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802154b9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802154bd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802154c1:	48 01 d0             	add    %rdx,%rax
ffffffff802154c4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802154c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802154cc:	48 8b 00             	mov    (%rax),%rax
ffffffff802154cf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802154d3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802154d7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802154db:	0f b7 c0             	movzwl %ax,%eax
ffffffff802154de:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802154e2:	0f 94 c0             	sete   %al
ffffffff802154e5:	0f b6 c0             	movzbl %al,%eax
ffffffff802154e8:	48 85 c0             	test   %rax,%rax
ffffffff802154eb:	74 0c                	je     ffffffff802154f9 <_RME_Thd_Crt+0xc6>
ffffffff802154ed:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802154f4:	e9 fd 08 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff802154f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802154fd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215501:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215505:	0f 95 c0             	setne  %al
ffffffff80215508:	0f b6 c0             	movzbl %al,%eax
ffffffff8021550b:	48 85 c0             	test   %rax,%rax
ffffffff8021550e:	0f 84 4c 01 00 00    	je     ffffffff80215660 <_RME_Thd_Crt+0x22d>
ffffffff80215514:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021551b:	e9 d6 08 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215520:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215524:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215528:	48 89 c2             	mov    %rax,%rdx
ffffffff8021552b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021552f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215533:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215536:	0f 93 c0             	setae  %al
ffffffff80215539:	0f b6 c0             	movzbl %al,%eax
ffffffff8021553c:	48 85 c0             	test   %rax,%rax
ffffffff8021553f:	74 0c                	je     ffffffff8021554d <_RME_Thd_Crt+0x11a>
ffffffff80215541:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215548:	e9 a9 08 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff8021554d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80215551:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215555:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215559:	48 89 c2             	mov    %rax,%rdx
ffffffff8021555c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215560:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215564:	48 01 d0             	add    %rdx,%rax
ffffffff80215567:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021556b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021556f:	48 8b 00             	mov    (%rax),%rax
ffffffff80215572:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215576:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021557a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021557e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215581:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215585:	0f 94 c0             	sete   %al
ffffffff80215588:	0f b6 c0             	movzbl %al,%eax
ffffffff8021558b:	48 85 c0             	test   %rax,%rax
ffffffff8021558e:	74 0c                	je     ffffffff8021559c <_RME_Thd_Crt+0x169>
ffffffff80215590:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215597:	e9 5a 08 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff8021559c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802155a0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802155a4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802155a8:	0f 95 c0             	setne  %al
ffffffff802155ab:	0f b6 c0             	movzbl %al,%eax
ffffffff802155ae:	48 85 c0             	test   %rax,%rax
ffffffff802155b1:	74 0c                	je     ffffffff802155bf <_RME_Thd_Crt+0x18c>
ffffffff802155b3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802155ba:	e9 37 08 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff802155bf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802155c3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802155c8:	48 89 c2             	mov    %rax,%rdx
ffffffff802155cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802155cf:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802155d3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802155d6:	0f 93 c0             	setae  %al
ffffffff802155d9:	0f b6 c0             	movzbl %al,%eax
ffffffff802155dc:	48 85 c0             	test   %rax,%rax
ffffffff802155df:	74 0c                	je     ffffffff802155ed <_RME_Thd_Crt+0x1ba>
ffffffff802155e1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802155e8:	e9 09 08 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff802155ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802155f1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802155f6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802155fa:	48 89 c2             	mov    %rax,%rdx
ffffffff802155fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215601:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215605:	48 01 d0             	add    %rdx,%rax
ffffffff80215608:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021560c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215610:	48 8b 00             	mov    (%rax),%rax
ffffffff80215613:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215617:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021561b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021561f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215622:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215626:	0f 94 c0             	sete   %al
ffffffff80215629:	0f b6 c0             	movzbl %al,%eax
ffffffff8021562c:	48 85 c0             	test   %rax,%rax
ffffffff8021562f:	74 0c                	je     ffffffff8021563d <_RME_Thd_Crt+0x20a>
ffffffff80215631:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215638:	e9 b9 07 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff8021563d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215641:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215645:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215649:	0f 95 c0             	setne  %al
ffffffff8021564c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021564f:	48 85 c0             	test   %rax,%rax
ffffffff80215652:	74 0c                	je     ffffffff80215660 <_RME_Thd_Crt+0x22d>
ffffffff80215654:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021565b:	e9 96 07 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat); 
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80215660:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80215664:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215669:	48 85 c0             	test   %rax,%rax
ffffffff8021566c:	0f 85 98 00 00 00    	jne    ffffffff8021570a <_RME_Thd_Crt+0x2d7>
ffffffff80215672:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215676:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021567a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8021567e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215681:	0f 93 c0             	setae  %al
ffffffff80215684:	0f b6 c0             	movzbl %al,%eax
ffffffff80215687:	48 85 c0             	test   %rax,%rax
ffffffff8021568a:	74 0c                	je     ffffffff80215698 <_RME_Thd_Crt+0x265>
ffffffff8021568c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215693:	e9 5e 07 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215698:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021569c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802156a0:	48 89 c2             	mov    %rax,%rdx
ffffffff802156a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802156a7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802156ab:	48 01 d0             	add    %rdx,%rax
ffffffff802156ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802156b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802156b6:	48 8b 00             	mov    (%rax),%rax
ffffffff802156b9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802156bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802156c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802156c5:	0f b7 c0             	movzwl %ax,%eax
ffffffff802156c8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802156cc:	0f 94 c0             	sete   %al
ffffffff802156cf:	0f b6 c0             	movzbl %al,%eax
ffffffff802156d2:	48 85 c0             	test   %rax,%rax
ffffffff802156d5:	74 0c                	je     ffffffff802156e3 <_RME_Thd_Crt+0x2b0>
ffffffff802156d7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802156de:	e9 13 07 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff802156e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802156e7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802156eb:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802156ef:	0f 95 c0             	setne  %al
ffffffff802156f2:	0f b6 c0             	movzbl %al,%eax
ffffffff802156f5:	48 85 c0             	test   %rax,%rax
ffffffff802156f8:	0f 84 4c 01 00 00    	je     ffffffff8021584a <_RME_Thd_Crt+0x417>
ffffffff802156fe:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215705:	e9 ec 06 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff8021570a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021570e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215712:	48 89 c2             	mov    %rax,%rdx
ffffffff80215715:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215719:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021571d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215720:	0f 93 c0             	setae  %al
ffffffff80215723:	0f b6 c0             	movzbl %al,%eax
ffffffff80215726:	48 85 c0             	test   %rax,%rax
ffffffff80215729:	74 0c                	je     ffffffff80215737 <_RME_Thd_Crt+0x304>
ffffffff8021572b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215732:	e9 bf 06 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215737:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8021573b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021573f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215743:	48 89 c2             	mov    %rax,%rdx
ffffffff80215746:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021574a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021574e:	48 01 d0             	add    %rdx,%rax
ffffffff80215751:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80215755:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215759:	48 8b 00             	mov    (%rax),%rax
ffffffff8021575c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215760:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215764:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215768:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021576b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021576f:	0f 94 c0             	sete   %al
ffffffff80215772:	0f b6 c0             	movzbl %al,%eax
ffffffff80215775:	48 85 c0             	test   %rax,%rax
ffffffff80215778:	74 0c                	je     ffffffff80215786 <_RME_Thd_Crt+0x353>
ffffffff8021577a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215781:	e9 70 06 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215786:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021578a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021578e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215792:	0f 95 c0             	setne  %al
ffffffff80215795:	0f b6 c0             	movzbl %al,%eax
ffffffff80215798:	48 85 c0             	test   %rax,%rax
ffffffff8021579b:	74 0c                	je     ffffffff802157a9 <_RME_Thd_Crt+0x376>
ffffffff8021579d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802157a4:	e9 4d 06 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff802157a9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802157ad:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802157b2:	48 89 c2             	mov    %rax,%rdx
ffffffff802157b5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802157b9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802157bd:	48 39 c2             	cmp    %rax,%rdx
ffffffff802157c0:	0f 93 c0             	setae  %al
ffffffff802157c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802157c6:	48 85 c0             	test   %rax,%rax
ffffffff802157c9:	74 0c                	je     ffffffff802157d7 <_RME_Thd_Crt+0x3a4>
ffffffff802157cb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802157d2:	e9 1f 06 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff802157d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802157db:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802157e0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802157e4:	48 89 c2             	mov    %rax,%rdx
ffffffff802157e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802157eb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802157ef:	48 01 d0             	add    %rdx,%rax
ffffffff802157f2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802157f6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802157fa:	48 8b 00             	mov    (%rax),%rax
ffffffff802157fd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80215801:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215805:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215809:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021580c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215810:	0f 94 c0             	sete   %al
ffffffff80215813:	0f b6 c0             	movzbl %al,%eax
ffffffff80215816:	48 85 c0             	test   %rax,%rax
ffffffff80215819:	74 0c                	je     ffffffff80215827 <_RME_Thd_Crt+0x3f4>
ffffffff8021581b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215822:	e9 cf 05 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215827:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021582b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021582f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215833:	0f 95 c0             	setne  %al
ffffffff80215836:	0f b6 c0             	movzbl %al,%eax
ffffffff80215839:	48 85 c0             	test   %rax,%rax
ffffffff8021583c:	74 0c                	je     ffffffff8021584a <_RME_Thd_Crt+0x417>
ffffffff8021583e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215845:	e9 ac 05 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff8021584a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8021584e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215853:	48 85 c0             	test   %rax,%rax
ffffffff80215856:	0f 85 98 00 00 00    	jne    ffffffff802158f4 <_RME_Thd_Crt+0x4c1>
ffffffff8021585c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215860:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215864:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff80215868:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021586b:	0f 93 c0             	setae  %al
ffffffff8021586e:	0f b6 c0             	movzbl %al,%eax
ffffffff80215871:	48 85 c0             	test   %rax,%rax
ffffffff80215874:	74 0c                	je     ffffffff80215882 <_RME_Thd_Crt+0x44f>
ffffffff80215876:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021587d:	e9 74 05 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215882:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80215886:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021588a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021588d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215891:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215895:	48 01 d0             	add    %rdx,%rax
ffffffff80215898:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021589c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802158a0:	48 8b 00             	mov    (%rax),%rax
ffffffff802158a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802158a7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802158ab:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802158af:	0f b7 c0             	movzwl %ax,%eax
ffffffff802158b2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802158b6:	0f 94 c0             	sete   %al
ffffffff802158b9:	0f b6 c0             	movzbl %al,%eax
ffffffff802158bc:	48 85 c0             	test   %rax,%rax
ffffffff802158bf:	74 0c                	je     ffffffff802158cd <_RME_Thd_Crt+0x49a>
ffffffff802158c1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802158c8:	e9 29 05 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff802158cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802158d1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802158d5:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802158d9:	0f 95 c0             	setne  %al
ffffffff802158dc:	0f b6 c0             	movzbl %al,%eax
ffffffff802158df:	48 85 c0             	test   %rax,%rax
ffffffff802158e2:	0f 84 4c 01 00 00    	je     ffffffff80215a34 <_RME_Thd_Crt+0x601>
ffffffff802158e8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802158ef:	e9 02 05 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff802158f4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff802158f8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802158fc:	48 89 c2             	mov    %rax,%rdx
ffffffff802158ff:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215903:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215907:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021590a:	0f 93 c0             	setae  %al
ffffffff8021590d:	0f b6 c0             	movzbl %al,%eax
ffffffff80215910:	48 85 c0             	test   %rax,%rax
ffffffff80215913:	74 0c                	je     ffffffff80215921 <_RME_Thd_Crt+0x4ee>
ffffffff80215915:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021591c:	e9 d5 04 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215921:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80215925:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215929:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021592d:	48 89 c2             	mov    %rax,%rdx
ffffffff80215930:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80215934:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215938:	48 01 d0             	add    %rdx,%rax
ffffffff8021593b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021593f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215943:	48 8b 00             	mov    (%rax),%rax
ffffffff80215946:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021594a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021594e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215952:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215955:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215959:	0f 94 c0             	sete   %al
ffffffff8021595c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021595f:	48 85 c0             	test   %rax,%rax
ffffffff80215962:	74 0c                	je     ffffffff80215970 <_RME_Thd_Crt+0x53d>
ffffffff80215964:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021596b:	e9 86 04 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215970:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215974:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215978:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021597c:	0f 95 c0             	setne  %al
ffffffff8021597f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215982:	48 85 c0             	test   %rax,%rax
ffffffff80215985:	74 0c                	je     ffffffff80215993 <_RME_Thd_Crt+0x560>
ffffffff80215987:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021598e:	e9 63 04 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215993:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80215997:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021599c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021599f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802159a3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802159a7:	48 39 c2             	cmp    %rax,%rdx
ffffffff802159aa:	0f 93 c0             	setae  %al
ffffffff802159ad:	0f b6 c0             	movzbl %al,%eax
ffffffff802159b0:	48 85 c0             	test   %rax,%rax
ffffffff802159b3:	74 0c                	je     ffffffff802159c1 <_RME_Thd_Crt+0x58e>
ffffffff802159b5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802159bc:	e9 35 04 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff802159c1:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff802159c5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802159ca:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802159ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802159d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802159d5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802159d9:	48 01 d0             	add    %rdx,%rax
ffffffff802159dc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802159e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802159e4:	48 8b 00             	mov    (%rax),%rax
ffffffff802159e7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802159eb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802159ef:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802159f3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802159f6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802159fa:	0f 94 c0             	sete   %al
ffffffff802159fd:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a00:	48 85 c0             	test   %rax,%rax
ffffffff80215a03:	74 0c                	je     ffffffff80215a11 <_RME_Thd_Crt+0x5de>
ffffffff80215a05:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215a0c:	e9 e5 03 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215a11:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80215a15:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215a19:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80215a1d:	0f 95 c0             	setne  %al
ffffffff80215a20:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a23:	48 85 c0             	test   %rax,%rax
ffffffff80215a26:	74 0c                	je     ffffffff80215a34 <_RME_Thd_Crt+0x601>
ffffffff80215a28:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215a2f:	e9 c2 03 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80215a34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215a38:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215a3c:	83 e0 01             	and    $0x1,%eax
ffffffff80215a3f:	48 85 c0             	test   %rax,%rax
ffffffff80215a42:	0f 94 c0             	sete   %al
ffffffff80215a45:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a48:	48 85 c0             	test   %rax,%rax
ffffffff80215a4b:	74 0c                	je     ffffffff80215a59 <_RME_Thd_Crt+0x626>
ffffffff80215a4d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a54:	e9 9d 03 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
ffffffff80215a59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215a5d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215a61:	83 e0 02             	and    $0x2,%eax
ffffffff80215a64:	48 85 c0             	test   %rax,%rax
ffffffff80215a67:	0f 94 c0             	sete   %al
ffffffff80215a6a:	0f b6 c0             	movzbl %al,%eax
ffffffff80215a6d:	48 85 c0             	test   %rax,%rax
ffffffff80215a70:	74 0c                	je     ffffffff80215a7e <_RME_Thd_Crt+0x64b>
ffffffff80215a72:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215a79:	e9 78 03 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
    /* See if the creation is valid for this kmem range */
    if(Is_Hyp==0U)
ffffffff80215a7e:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
ffffffff80215a83:	75 23                	jne    ffffffff80215aa8 <_RME_Thd_Crt+0x675>
    {
        RME_COV_MARKER();
        
        Size=RME_THD_SIZE(Attr);
ffffffff80215a85:	48 c7 45 d8 60 01 00 	movq   $0x160,-0x28(%rbp)
ffffffff80215a8c:	00 
#else
        Size=RME_HYP_SIZE;
#endif
    }
    
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff80215a8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215a91:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80215a95:	83 e0 04             	and    $0x4,%eax
ffffffff80215a98:	48 85 c0             	test   %rax,%rax
ffffffff80215a9b:	0f 94 c0             	sete   %al
ffffffff80215a9e:	0f b6 c0             	movzbl %al,%eax
ffffffff80215aa1:	48 85 c0             	test   %rax,%rax
ffffffff80215aa4:	74 26                	je     ffffffff80215acc <_RME_Thd_Crt+0x699>
ffffffff80215aa6:	eb 0c                	jmp    ffffffff80215ab4 <_RME_Thd_Crt+0x681>
        return RME_ERR_PTH_HADDR;
ffffffff80215aa8:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80215aaf:	e9 42 03 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
ffffffff80215ab4:	48 c7 c7 e8 91 22 80 	mov    $0xffffffff802291e8,%rdi
ffffffff80215abb:	e8 4b 6f ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215ac0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215ac7:	e9 2a 03 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215acc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215ad0:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80215ad4:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80215ad8:	48 01 d0             	add    %rdx,%rax
ffffffff80215adb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80215adf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215ae3:	48 3b 45 10          	cmp    0x10(%rbp),%rax
ffffffff80215ae7:	0f 92 c0             	setb   %al
ffffffff80215aea:	0f b6 c0             	movzbl %al,%eax
ffffffff80215aed:	48 85 c0             	test   %rax,%rax
ffffffff80215af0:	74 34                	je     ffffffff80215b26 <_RME_Thd_Crt+0x6f3>
ffffffff80215af2:	48 c7 c7 08 92 22 80 	mov    $0xffffffff80229208,%rdi
ffffffff80215af9:	e8 0d 6f ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215afe:	48 c7 c7 27 92 22 80 	mov    $0xffffffff80229227,%rdi
ffffffff80215b05:	e8 01 6f ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215b0a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215b0e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215b12:	48 89 c7             	mov    %rax,%rdi
ffffffff80215b15:	e8 2f 6e ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
ffffffff80215b1a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215b21:	e9 d0 02 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215b26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215b2a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215b2e:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff80215b32:	0f 92 c0             	setb   %al
ffffffff80215b35:	0f b6 c0             	movzbl %al,%eax
ffffffff80215b38:	48 85 c0             	test   %rax,%rax
ffffffff80215b3b:	74 18                	je     ffffffff80215b55 <_RME_Thd_Crt+0x722>
ffffffff80215b3d:	48 c7 c7 38 92 22 80 	mov    $0xffffffff80229238,%rdi
ffffffff80215b44:	e8 c2 6e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215b49:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215b50:	e9 a1 02 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215b55:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80215b59:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215b5d:	48 01 d0             	add    %rdx,%rax
ffffffff80215b60:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff80215b64:	0f 92 c0             	setb   %al
ffffffff80215b67:	0f b6 c0             	movzbl %al,%eax
ffffffff80215b6a:	48 85 c0             	test   %rax,%rax
ffffffff80215b6d:	74 18                	je     ffffffff80215b87 <_RME_Thd_Crt+0x754>
ffffffff80215b6f:	48 c7 c7 58 92 22 80 	mov    $0xffffffff80229258,%rdi
ffffffff80215b76:	e8 90 6e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215b7b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215b82:	e9 6f 02 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215b87:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80215b8b:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80215b8f:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80215b93:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80215b97:	48 01 c8             	add    %rcx,%rax
ffffffff80215b9a:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80215b9e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215ba1:	0f 92 c0             	setb   %al
ffffffff80215ba4:	0f b6 c0             	movzbl %al,%eax
ffffffff80215ba7:	48 85 c0             	test   %rax,%rax
ffffffff80215baa:	74 18                	je     ffffffff80215bc4 <_RME_Thd_Crt+0x791>
ffffffff80215bac:	48 c7 c7 78 92 22 80 	mov    $0xffffffff80229278,%rdi
ffffffff80215bb3:	e8 53 6e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80215bb8:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215bbf:	e9 32 02 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff80215bc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215bc8:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215bcc:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff80215bd0:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215bd3:	0f 93 c0             	setae  %al
ffffffff80215bd6:	0f b6 c0             	movzbl %al,%eax
ffffffff80215bd9:	48 85 c0             	test   %rax,%rax
ffffffff80215bdc:	74 0c                	je     ffffffff80215bea <_RME_Thd_Crt+0x7b7>
ffffffff80215bde:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215be5:	e9 0c 02 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215bea:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80215bee:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215bf2:	48 89 c2             	mov    %rax,%rdx
ffffffff80215bf5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215bf9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215bfd:	48 01 d0             	add    %rdx,%rax
ffffffff80215c00:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Thd_Crt);
ffffffff80215c04:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c08:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80215c0f:	00 00 00 
ffffffff80215c12:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80215c17:	48 89 c7             	mov    %rax,%rdi
ffffffff80215c1a:	e8 3f 6b ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80215c1f:	48 85 c0             	test   %rax,%rax
ffffffff80215c22:	0f 94 c0             	sete   %al
ffffffff80215c25:	0f b6 c0             	movzbl %al,%eax
ffffffff80215c28:	48 85 c0             	test   %rax,%rax
ffffffff80215c2b:	74 0c                	je     ffffffff80215c39 <_RME_Thd_Crt+0x806>
ffffffff80215c2d:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80215c34:	e9 bd 01 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
ffffffff80215c39:	48 8b 15 c0 43 01 00 	mov    0x143c0(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff80215c40:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c44:	48 89 50 20          	mov    %rdx,0x20(%rax)
     
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,Size)<0)
ffffffff80215c48:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80215c4c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215c50:	48 89 d6             	mov    %rdx,%rsi
ffffffff80215c53:	48 89 c7             	mov    %rax,%rdi
ffffffff80215c56:	e8 5d c7 ff ff       	call   ffffffff802123b8 <_RME_Kot_Mark>
ffffffff80215c5b:	48 85 c0             	test   %rax,%rax
ffffffff80215c5e:	79 17                	jns    ffffffff80215c77 <_RME_Thd_Crt+0x844>
    {
        RME_COV_MARKER();

        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
ffffffff80215c60:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215c64:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff80215c6b:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80215c72:	e9 7f 01 00 00       	jmp    ffffffff80215df6 <_RME_Thd_Crt+0x9c3>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Object init */
    Thread=(struct RME_Thd_Struct*)Vaddr;
ffffffff80215c77:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215c7b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    /* These thread's TID default to 0, and have no timeslices assigned */
    Thread->Sched.TID=0U;
ffffffff80215c7f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c83:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80215c8a:	00 
    Thread->Sched.Slice=0U;
ffffffff80215c8b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c8f:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80215c96:	00 
    Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80215c97:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215c9b:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80215ca2:	00 
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff80215ca3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215ca7:	48 8b 00             	mov    (%rax),%rax
ffffffff80215caa:	89 c0                	mov    %eax,%eax
ffffffff80215cac:	48 85 c0             	test   %rax,%rax
ffffffff80215caf:	74 0a                	je     ffffffff80215cbb <_RME_Thd_Crt+0x888>
ffffffff80215cb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215cb5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80215cb9:	eb 04                	jmp    ffffffff80215cbf <_RME_Thd_Crt+0x88c>
ffffffff80215cbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215cbf:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Thread->Sched.Prc=Prc_Root;
ffffffff80215cc3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cc7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80215ccb:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Thread->Sched.Signal=0U;
ffffffff80215ccf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cd3:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80215cda:	00 
    Thread->Sched.Prio_Max=Prio_Max;
ffffffff80215cdb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cdf:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff80215ce3:	48 89 50 48          	mov    %rdx,0x48(%rax)
    Thread->Sched.Sched_Ref=0U;
ffffffff80215ce7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ceb:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
ffffffff80215cf2:	00 
    Thread->Sched.Sched_Sig=0U;
ffffffff80215cf3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215cf7:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff80215cfe:	00 
    /* Currently the thread is not bound to any particular CPU */
    Thread->Sched.Local=RME_THD_FREE;
ffffffff80215cff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d03:	48 c7 40 28 ff ff ff 	movq   $0xffffffffffffffff,0x28(%rax)
ffffffff80215d0a:	ff 
    /* This is a marking that this thread haven't sent any notifications */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80215d0b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d0f:	48 83 c0 10          	add    $0x10,%rax
ffffffff80215d13:	48 89 c7             	mov    %rax,%rdi
ffffffff80215d16:	e8 3f 70 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    _RME_List_Crt(&(Thread->Sched.Event));
ffffffff80215d1b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d1f:	48 83 c0 78          	add    $0x78,%rax
ffffffff80215d23:	48 89 c7             	mov    %rax,%rdi
ffffffff80215d26:	e8 2f 70 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    /* Point its pointer to itself - this is not a hypervisor thread yet */
    if(Is_Hyp==0U)
ffffffff80215d2b:	48 83 7d 20 00       	cmpq   $0x0,0x20(%rbp)
ffffffff80215d30:	75 29                	jne    ffffffff80215d5b <_RME_Thd_Crt+0x928>
    {
        RME_COV_MARKER();
        
        Thread->Ctx.Hyp_Attr=Attr;
ffffffff80215d32:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d36:	48 8b 55 18          	mov    0x18(%rbp),%rdx
ffffffff80215d3a:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
ffffffff80215d41:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80215d45:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff80215d4b:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d4e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d52:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
ffffffff80215d59:	eb 2b                	jmp    ffffffff80215d86 <_RME_Thd_Crt+0x953>
    /* Default to HYP_VA_BASE for all created hypervisor threads */
    else
    {
        RME_COV_MARKER();
        
        Thread->Ctx.Hyp_Attr=Attr|RME_THD_HYP_FLAG;
ffffffff80215d5b:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff80215d62:	00 00 80 
ffffffff80215d65:	48 0b 45 18          	or     0x18(%rbp),%rax
ffffffff80215d69:	48 89 c2             	mov    %rax,%rdx
ffffffff80215d6c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d70:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
        Thread->Ctx.Reg=RME_HYP_VA_BASE;
ffffffff80215d77:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d7b:	48 c7 80 90 00 00 00 	movq   $0x0,0x90(%rax)
ffffffff80215d82:	00 00 00 00 
    }
    /* Initialize the invocation stack */
    _RME_List_Crt(&(Thread->Ctx.Invstk));
ffffffff80215d86:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d8a:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff80215d90:	48 89 c7             	mov    %rax,%rdi
ffffffff80215d93:	e8 c2 6f ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    Thread->Ctx.Invstk_Depth=0U;
ffffffff80215d98:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215d9c:	48 c7 80 a8 00 00 00 	movq   $0x0,0xa8(%rax)
ffffffff80215da3:	00 00 00 00 

    /* Header init */
    Thd_Crt->Head.Root_Ref=0U;
ffffffff80215da7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215dab:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80215db2:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff80215db3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215db7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80215dbb:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Thd_Crt->Head.Flag=RME_THD_FLAG_ALL;
ffffffff80215dbf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215dc3:	48 c7 40 10 ff 01 00 	movq   $0x1ff,0x10(%rax)
ffffffff80215dca:	00 

    /* Reference process */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref), 1U);
ffffffff80215dcb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80215dcf:	48 83 c0 08          	add    $0x8,%rax
ffffffff80215dd3:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80215dd8:	48 89 c7             	mov    %rax,%rdi
ffffffff80215ddb:	e8 b3 69 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
ffffffff80215de0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215de4:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff80215deb:	00 06 00 
ffffffff80215dee:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_THD,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80215df1:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80215df6:	c9                   	leave
ffffffff80215df7:	c3                   	ret

ffffffff80215df8 <_RME_Thd_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Thd)
{
ffffffff80215df8:	f3 0f 1e fa          	endbr64
ffffffff80215dfc:	55                   	push   %rbp
ffffffff80215dfd:	48 89 e5             	mov    %rsp,%rbp
ffffffff80215e00:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80215e04:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80215e08:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80215e0c:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    /* These are for deletion */
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80215e10:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215e14:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80215e19:	48 85 c0             	test   %rax,%rax
ffffffff80215e1c:	0f 85 98 00 00 00    	jne    ffffffff80215eba <_RME_Thd_Del+0xc2>
ffffffff80215e22:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215e26:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215e2a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80215e2e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215e31:	0f 93 c0             	setae  %al
ffffffff80215e34:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e37:	48 85 c0             	test   %rax,%rax
ffffffff80215e3a:	74 0c                	je     ffffffff80215e48 <_RME_Thd_Del+0x50>
ffffffff80215e3c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215e43:	e9 2d 04 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff80215e48:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215e4c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215e50:	48 89 c2             	mov    %rax,%rdx
ffffffff80215e53:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215e57:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215e5b:	48 01 d0             	add    %rdx,%rax
ffffffff80215e5e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215e62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215e66:	48 8b 00             	mov    (%rax),%rax
ffffffff80215e69:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215e6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215e71:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215e75:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215e78:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215e7c:	0f 94 c0             	sete   %al
ffffffff80215e7f:	0f b6 c0             	movzbl %al,%eax
ffffffff80215e82:	48 85 c0             	test   %rax,%rax
ffffffff80215e85:	74 0c                	je     ffffffff80215e93 <_RME_Thd_Del+0x9b>
ffffffff80215e87:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215e8e:	e9 e2 03 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff80215e93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215e97:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215e9b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215e9f:	0f 95 c0             	setne  %al
ffffffff80215ea2:	0f b6 c0             	movzbl %al,%eax
ffffffff80215ea5:	48 85 c0             	test   %rax,%rax
ffffffff80215ea8:	0f 84 4c 01 00 00    	je     ffffffff80215ffa <_RME_Thd_Del+0x202>
ffffffff80215eae:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215eb5:	e9 bb 03 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff80215eba:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215ebe:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215ec2:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ec5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215ec9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215ecd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215ed0:	0f 93 c0             	setae  %al
ffffffff80215ed3:	0f b6 c0             	movzbl %al,%eax
ffffffff80215ed6:	48 85 c0             	test   %rax,%rax
ffffffff80215ed9:	74 0c                	je     ffffffff80215ee7 <_RME_Thd_Del+0xef>
ffffffff80215edb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215ee2:	e9 8e 03 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff80215ee7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215eeb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80215eef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215ef3:	48 89 c2             	mov    %rax,%rdx
ffffffff80215ef6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80215efa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215efe:	48 01 d0             	add    %rdx,%rax
ffffffff80215f01:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215f05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f09:	48 8b 00             	mov    (%rax),%rax
ffffffff80215f0c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215f10:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215f14:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215f18:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215f1b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215f1f:	0f 94 c0             	sete   %al
ffffffff80215f22:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f25:	48 85 c0             	test   %rax,%rax
ffffffff80215f28:	74 0c                	je     ffffffff80215f36 <_RME_Thd_Del+0x13e>
ffffffff80215f2a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215f31:	e9 3f 03 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff80215f36:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215f3a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215f3e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215f42:	0f 95 c0             	setne  %al
ffffffff80215f45:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f48:	48 85 c0             	test   %rax,%rax
ffffffff80215f4b:	74 0c                	je     ffffffff80215f59 <_RME_Thd_Del+0x161>
ffffffff80215f4d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215f54:	e9 1c 03 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff80215f59:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215f5d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215f62:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f69:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80215f6d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80215f70:	0f 93 c0             	setae  %al
ffffffff80215f73:	0f b6 c0             	movzbl %al,%eax
ffffffff80215f76:	48 85 c0             	test   %rax,%rax
ffffffff80215f79:	74 0c                	je     ffffffff80215f87 <_RME_Thd_Del+0x18f>
ffffffff80215f7b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80215f82:	e9 ee 02 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff80215f87:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80215f8b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80215f90:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215f94:	48 89 c2             	mov    %rax,%rdx
ffffffff80215f97:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215f9b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80215f9f:	48 01 d0             	add    %rdx,%rax
ffffffff80215fa2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80215fa6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215faa:	48 8b 00             	mov    (%rax),%rax
ffffffff80215fad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80215fb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215fb5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80215fb9:	0f b7 c0             	movzwl %ax,%eax
ffffffff80215fbc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215fc0:	0f 94 c0             	sete   %al
ffffffff80215fc3:	0f b6 c0             	movzbl %al,%eax
ffffffff80215fc6:	48 85 c0             	test   %rax,%rax
ffffffff80215fc9:	74 0c                	je     ffffffff80215fd7 <_RME_Thd_Del+0x1df>
ffffffff80215fcb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215fd2:	e9 9e 02 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff80215fd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80215fdb:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215fdf:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215fe3:	0f 95 c0             	setne  %al
ffffffff80215fe6:	0f b6 c0             	movzbl %al,%eax
ffffffff80215fe9:	48 85 c0             	test   %rax,%rax
ffffffff80215fec:	74 0c                	je     ffffffff80215ffa <_RME_Thd_Del+0x202>
ffffffff80215fee:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215ff5:	e9 7b 02 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80215ffa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80215ffe:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216002:	83 e0 02             	and    $0x2,%eax
ffffffff80216005:	48 85 c0             	test   %rax,%rax
ffffffff80216008:	0f 94 c0             	sete   %al
ffffffff8021600b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021600e:	48 85 c0             	test   %rax,%rax
ffffffff80216011:	74 0c                	je     ffffffff8021601f <_RME_Thd_Del+0x227>
ffffffff80216013:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021601a:	e9 56 02 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff8021601f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216023:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216027:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021602b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021602e:	0f 93 c0             	setae  %al
ffffffff80216031:	0f b6 c0             	movzbl %al,%eax
ffffffff80216034:	48 85 c0             	test   %rax,%rax
ffffffff80216037:	74 0c                	je     ffffffff80216045 <_RME_Thd_Del+0x24d>
ffffffff80216039:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216040:	e9 30 02 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff80216045:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216049:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021604d:	48 89 c2             	mov    %rax,%rdx
ffffffff80216050:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216054:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216058:	48 01 d0             	add    %rdx,%rax
ffffffff8021605b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
ffffffff8021605f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216063:	48 8b 00             	mov    (%rax),%rax
ffffffff80216066:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021606a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021606e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216072:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216075:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216079:	0f 95 c0             	setne  %al
ffffffff8021607c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021607f:	48 85 c0             	test   %rax,%rax
ffffffff80216082:	74 0c                	je     ffffffff80216090 <_RME_Thd_Del+0x298>
ffffffff80216084:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021608b:	e9 e5 01 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff80216090:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216094:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216098:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021609c:	0f 95 c0             	setne  %al
ffffffff8021609f:	0f b6 c0             	movzbl %al,%eax
ffffffff802160a2:	48 85 c0             	test   %rax,%rax
ffffffff802160a5:	74 0c                	je     ffffffff802160b3 <_RME_Thd_Del+0x2bb>
ffffffff802160a7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802160ae:	e9 c2 01 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff802160b3:	48 8b 15 46 3f 01 00 	mov    0x13f46(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff802160ba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802160be:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff802160c2:	48 29 c2             	sub    %rax,%rdx
ffffffff802160c5:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff802160c9:	0f 96 c0             	setbe  %al
ffffffff802160cc:	0f b6 c0             	movzbl %al,%eax
ffffffff802160cf:	48 98                	cltq
ffffffff802160d1:	48 85 c0             	test   %rax,%rax
ffffffff802160d4:	74 0c                	je     ffffffff802160e2 <_RME_Thd_Del+0x2ea>
ffffffff802160d6:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff802160dd:	e9 93 01 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
ffffffff802160e2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802160e6:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802160ea:	48 85 c0             	test   %rax,%rax
ffffffff802160ed:	0f 95 c0             	setne  %al
ffffffff802160f0:	0f b6 c0             	movzbl %al,%eax
ffffffff802160f3:	48 85 c0             	test   %rax,%rax
ffffffff802160f6:	74 44                	je     ffffffff8021613c <_RME_Thd_Del+0x344>
ffffffff802160f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802160fc:	89 c0                	mov    %eax,%eax
ffffffff802160fe:	48 85 c0             	test   %rax,%rax
ffffffff80216101:	0f 94 c0             	sete   %al
ffffffff80216104:	0f b6 c0             	movzbl %al,%eax
ffffffff80216107:	48 85 c0             	test   %rax,%rax
ffffffff8021610a:	74 24                	je     ffffffff80216130 <_RME_Thd_Del+0x338>
ffffffff8021610c:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80216113:	00 ff ff 
ffffffff80216116:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021611a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021611d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216121:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80216125:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216128:	48 89 c7             	mov    %rax,%rdi
ffffffff8021612b:	e8 2e 66 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80216130:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80216137:	e9 39 01 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
    
    /* Get the thread */
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff8021613c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216140:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216144:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* See if the thread is free. If still bound, we cannot proceed to deletion */
    if(Thread->Sched.Local!=RME_THD_FREE)
ffffffff80216148:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021614c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216150:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
ffffffff80216154:	74 30                	je     ffffffff80216186 <_RME_Thd_Del+0x38e>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Thd_Del,Type_Stat);
ffffffff80216156:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021615d:	00 ff ff 
ffffffff80216160:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80216164:	48 89 c2             	mov    %rax,%rdx
ffffffff80216167:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021616b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021616f:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216172:	48 89 c7             	mov    %rax,%rdi
ffffffff80216175:	e8 e4 65 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_PTH_INVSTATE;
ffffffff8021617a:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216181:	e9 ef 00 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Thd_Del,Type_Stat);
ffffffff80216186:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021618a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021618e:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80216193:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216196:	48 89 c7             	mov    %rax,%rdi
ffffffff80216199:	e8 c0 65 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021619e:	48 85 c0             	test   %rax,%rax
ffffffff802161a1:	0f 94 c0             	sete   %al
ffffffff802161a4:	0f b6 c0             	movzbl %al,%eax
ffffffff802161a7:	48 85 c0             	test   %rax,%rax
ffffffff802161aa:	74 5b                	je     ffffffff80216207 <_RME_Thd_Del+0x40f>
ffffffff802161ac:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff802161b3:	e9 bd 00 00 00       	jmp    ffffffff80216275 <_RME_Thd_Del+0x47d>
     * stack to empty, and free all the invocation stubs. This can be virtually
     * unbounded if the invocation stack is just too deep. This is left to the
     * user; if this is what he or she wants, be our guest. */
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
    {
        Invocation=(struct RME_Inv_Struct*)(Thread->Ctx.Invstk.Next);
ffffffff802161b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802161bc:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff802161c3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff802161c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802161cb:	48 8b 10             	mov    (%rax),%rdx
ffffffff802161ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802161d2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802161d6:	48 89 d6             	mov    %rdx,%rsi
ffffffff802161d9:	48 89 c7             	mov    %rax,%rdi
ffffffff802161dc:	e8 a3 6b ff ff       	call   ffffffff8020cd84 <_RME_List_Del>
        Invocation->Thd_Act=0U;
ffffffff802161e1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802161e5:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff802161ec:	00 
        Thread->Ctx.Invstk_Depth--;
ffffffff802161ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802161f1:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff802161f8:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff802161fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216200:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
ffffffff80216207:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021620b:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff80216212:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216216:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021621c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021621f:	75 97                	jne    ffffffff802161b8 <_RME_Thd_Del+0x3c0>
    }
    RME_ASSERT(Thread->Ctx.Invstk_Depth==0U);
    
    /* Dereference the process */
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
ffffffff80216221:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216225:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80216229:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021622d:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80216234:	48 89 c7             	mov    %rax,%rdi
ffffffff80216237:	e8 57 65 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Try to depopulate the area - this must be successful */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
ffffffff8021623c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216240:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216247:	48 85 c0             	test   %rax,%rax
ffffffff8021624a:	78 13                	js     ffffffff8021625f <_RME_Thd_Del+0x467>
    {
        RME_COV_MARKER();

        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff8021624c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216250:	be 60 01 00 00       	mov    $0x160,%esi
ffffffff80216255:	48 89 c7             	mov    %rax,%rdi
ffffffff80216258:	e8 a2 c4 ff ff       	call   ffffffff802126ff <_RME_Kot_Erase>
ffffffff8021625d:	eb 11                	jmp    ffffffff80216270 <_RME_Thd_Del+0x478>
    }
    else
    {
        RME_COV_MARKER();

        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
ffffffff8021625f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216263:	be b0 00 00 00       	mov    $0xb0,%esi
ffffffff80216268:	48 89 c7             	mov    %rax,%rdi
ffffffff8021626b:	e8 8f c4 ff ff       	call   ffffffff802126ff <_RME_Kot_Erase>
                   RME_HYP_SIZE)==0);
    }
    
    return 0;
ffffffff80216270:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216275:	c9                   	leave
ffffffff80216276:	c3                   	ret

ffffffff80216277 <_RME_Thd_Sched_Bind>:
                                     rme_cid_t Cap_Thd_Sched,
                                     rme_cid_t Cap_Sig,
                                     rme_tid_t TID,
                                     rme_ptr_t Prio,
                                     rme_ptr_t Haddr)
{
ffffffff80216277:	f3 0f 1e fa          	endbr64
ffffffff8021627b:	55                   	push   %rbp
ffffffff8021627c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021627f:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
ffffffff80216283:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff80216287:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
ffffffff8021628b:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8021628f:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
ffffffff80216293:	4c 89 45 88          	mov    %r8,-0x78(%rbp)
ffffffff80216297:	4c 89 4d 80          	mov    %r9,-0x80(%rbp)
    rme_ptr_t Type_Stat;
    rme_ptr_t Hyp_Attr;
    rme_ptr_t End;

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff8021629b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8021629f:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802162a4:	48 85 c0             	test   %rax,%rax
ffffffff802162a7:	0f 85 98 00 00 00    	jne    ffffffff80216345 <_RME_Thd_Sched_Bind+0xce>
ffffffff802162ad:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802162b1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802162b5:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff802162b9:	48 39 c2             	cmp    %rax,%rdx
ffffffff802162bc:	0f 93 c0             	setae  %al
ffffffff802162bf:	0f b6 c0             	movzbl %al,%eax
ffffffff802162c2:	48 85 c0             	test   %rax,%rax
ffffffff802162c5:	74 0c                	je     ffffffff802162d3 <_RME_Thd_Sched_Bind+0x5c>
ffffffff802162c7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802162ce:	e9 2e 08 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff802162d3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802162d7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802162db:	48 89 c2             	mov    %rax,%rdx
ffffffff802162de:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802162e2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802162e6:	48 01 d0             	add    %rdx,%rax
ffffffff802162e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802162ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802162f1:	48 8b 00             	mov    (%rax),%rax
ffffffff802162f4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802162f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802162fc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216300:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216303:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216307:	0f 94 c0             	sete   %al
ffffffff8021630a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021630d:	48 85 c0             	test   %rax,%rax
ffffffff80216310:	74 0c                	je     ffffffff8021631e <_RME_Thd_Sched_Bind+0xa7>
ffffffff80216312:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216319:	e9 e3 07 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021631e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216322:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216326:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021632a:	0f 95 c0             	setne  %al
ffffffff8021632d:	0f b6 c0             	movzbl %al,%eax
ffffffff80216330:	48 85 c0             	test   %rax,%rax
ffffffff80216333:	0f 84 4c 01 00 00    	je     ffffffff80216485 <_RME_Thd_Sched_Bind+0x20e>
ffffffff80216339:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216340:	e9 bc 07 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216345:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216349:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021634d:	48 89 c2             	mov    %rax,%rdx
ffffffff80216350:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216354:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216358:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021635b:	0f 93 c0             	setae  %al
ffffffff8021635e:	0f b6 c0             	movzbl %al,%eax
ffffffff80216361:	48 85 c0             	test   %rax,%rax
ffffffff80216364:	74 0c                	je     ffffffff80216372 <_RME_Thd_Sched_Bind+0xfb>
ffffffff80216366:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021636d:	e9 8f 07 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216372:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216376:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021637a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021637e:	48 89 c2             	mov    %rax,%rdx
ffffffff80216381:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216385:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216389:	48 01 d0             	add    %rdx,%rax
ffffffff8021638c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216390:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216394:	48 8b 00             	mov    (%rax),%rax
ffffffff80216397:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021639b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021639f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802163a3:	0f b7 c0             	movzwl %ax,%eax
ffffffff802163a6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802163aa:	0f 94 c0             	sete   %al
ffffffff802163ad:	0f b6 c0             	movzbl %al,%eax
ffffffff802163b0:	48 85 c0             	test   %rax,%rax
ffffffff802163b3:	74 0c                	je     ffffffff802163c1 <_RME_Thd_Sched_Bind+0x14a>
ffffffff802163b5:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802163bc:	e9 40 07 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff802163c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802163c5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802163c9:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802163cd:	0f 95 c0             	setne  %al
ffffffff802163d0:	0f b6 c0             	movzbl %al,%eax
ffffffff802163d3:	48 85 c0             	test   %rax,%rax
ffffffff802163d6:	74 0c                	je     ffffffff802163e4 <_RME_Thd_Sched_Bind+0x16d>
ffffffff802163d8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802163df:	e9 1d 07 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff802163e4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff802163e8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802163ed:	48 89 c2             	mov    %rax,%rdx
ffffffff802163f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802163f4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802163f8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802163fb:	0f 93 c0             	setae  %al
ffffffff802163fe:	0f b6 c0             	movzbl %al,%eax
ffffffff80216401:	48 85 c0             	test   %rax,%rax
ffffffff80216404:	74 0c                	je     ffffffff80216412 <_RME_Thd_Sched_Bind+0x19b>
ffffffff80216406:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021640d:	e9 ef 06 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216412:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80216416:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021641b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021641f:	48 89 c2             	mov    %rax,%rdx
ffffffff80216422:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216426:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021642a:	48 01 d0             	add    %rdx,%rax
ffffffff8021642d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216431:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216435:	48 8b 00             	mov    (%rax),%rax
ffffffff80216438:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021643c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216440:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216444:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216447:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021644b:	0f 94 c0             	sete   %al
ffffffff8021644e:	0f b6 c0             	movzbl %al,%eax
ffffffff80216451:	48 85 c0             	test   %rax,%rax
ffffffff80216454:	74 0c                	je     ffffffff80216462 <_RME_Thd_Sched_Bind+0x1eb>
ffffffff80216456:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021645d:	e9 9f 06 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216462:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216466:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021646a:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021646e:	0f 95 c0             	setne  %al
ffffffff80216471:	0f b6 c0             	movzbl %al,%eax
ffffffff80216474:	48 85 c0             	test   %rax,%rax
ffffffff80216477:	74 0c                	je     ffffffff80216485 <_RME_Thd_Sched_Bind+0x20e>
ffffffff80216479:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216480:	e9 7c 06 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
ffffffff80216485:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80216489:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021648e:	48 85 c0             	test   %rax,%rax
ffffffff80216491:	0f 85 98 00 00 00    	jne    ffffffff8021652f <_RME_Thd_Sched_Bind+0x2b8>
ffffffff80216497:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021649b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021649f:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff802164a3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802164a6:	0f 93 c0             	setae  %al
ffffffff802164a9:	0f b6 c0             	movzbl %al,%eax
ffffffff802164ac:	48 85 c0             	test   %rax,%rax
ffffffff802164af:	74 0c                	je     ffffffff802164bd <_RME_Thd_Sched_Bind+0x246>
ffffffff802164b1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802164b8:	e9 44 06 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff802164bd:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802164c1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802164c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802164c8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802164cc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802164d0:	48 01 d0             	add    %rdx,%rax
ffffffff802164d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802164d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802164db:	48 8b 00             	mov    (%rax),%rax
ffffffff802164de:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802164e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802164e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802164ea:	0f b7 c0             	movzwl %ax,%eax
ffffffff802164ed:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802164f1:	0f 94 c0             	sete   %al
ffffffff802164f4:	0f b6 c0             	movzbl %al,%eax
ffffffff802164f7:	48 85 c0             	test   %rax,%rax
ffffffff802164fa:	74 0c                	je     ffffffff80216508 <_RME_Thd_Sched_Bind+0x291>
ffffffff802164fc:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216503:	e9 f9 05 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216508:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021650c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216510:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216514:	0f 95 c0             	setne  %al
ffffffff80216517:	0f b6 c0             	movzbl %al,%eax
ffffffff8021651a:	48 85 c0             	test   %rax,%rax
ffffffff8021651d:	0f 84 4c 01 00 00    	je     ffffffff8021666f <_RME_Thd_Sched_Bind+0x3f8>
ffffffff80216523:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021652a:	e9 d2 05 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021652f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80216533:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216537:	48 89 c2             	mov    %rax,%rdx
ffffffff8021653a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021653e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216542:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216545:	0f 93 c0             	setae  %al
ffffffff80216548:	0f b6 c0             	movzbl %al,%eax
ffffffff8021654b:	48 85 c0             	test   %rax,%rax
ffffffff8021654e:	74 0c                	je     ffffffff8021655c <_RME_Thd_Sched_Bind+0x2e5>
ffffffff80216550:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216557:	e9 a5 05 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021655c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80216560:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216564:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216568:	48 89 c2             	mov    %rax,%rdx
ffffffff8021656b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021656f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216573:	48 01 d0             	add    %rdx,%rax
ffffffff80216576:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021657a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021657e:	48 8b 00             	mov    (%rax),%rax
ffffffff80216581:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216585:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216589:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021658d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216590:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216594:	0f 94 c0             	sete   %al
ffffffff80216597:	0f b6 c0             	movzbl %al,%eax
ffffffff8021659a:	48 85 c0             	test   %rax,%rax
ffffffff8021659d:	74 0c                	je     ffffffff802165ab <_RME_Thd_Sched_Bind+0x334>
ffffffff8021659f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802165a6:	e9 56 05 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff802165ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802165af:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802165b3:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802165b7:	0f 95 c0             	setne  %al
ffffffff802165ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802165bd:	48 85 c0             	test   %rax,%rax
ffffffff802165c0:	74 0c                	je     ffffffff802165ce <_RME_Thd_Sched_Bind+0x357>
ffffffff802165c2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802165c9:	e9 33 05 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff802165ce:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff802165d2:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802165d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802165da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802165de:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802165e2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802165e5:	0f 93 c0             	setae  %al
ffffffff802165e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802165eb:	48 85 c0             	test   %rax,%rax
ffffffff802165ee:	74 0c                	je     ffffffff802165fc <_RME_Thd_Sched_Bind+0x385>
ffffffff802165f0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802165f7:	e9 05 05 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff802165fc:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80216600:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216605:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216609:	48 89 c2             	mov    %rax,%rdx
ffffffff8021660c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216610:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216614:	48 01 d0             	add    %rdx,%rax
ffffffff80216617:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021661b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021661f:	48 8b 00             	mov    (%rax),%rax
ffffffff80216622:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216626:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021662a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021662e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216631:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216635:	0f 94 c0             	sete   %al
ffffffff80216638:	0f b6 c0             	movzbl %al,%eax
ffffffff8021663b:	48 85 c0             	test   %rax,%rax
ffffffff8021663e:	74 0c                	je     ffffffff8021664c <_RME_Thd_Sched_Bind+0x3d5>
ffffffff80216640:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216647:	e9 b5 04 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021664c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216650:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216654:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216658:	0f 95 c0             	setne  %al
ffffffff8021665b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021665e:	48 85 c0             	test   %rax,%rax
ffffffff80216661:	74 0c                	je     ffffffff8021666f <_RME_Thd_Sched_Bind+0x3f8>
ffffffff80216663:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021666a:	e9 92 04 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
                   struct RME_Cap_Thd*,Thd_Sched,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8021666f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216673:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216677:	83 e0 02             	and    $0x2,%eax
ffffffff8021667a:	48 85 c0             	test   %rax,%rax
ffffffff8021667d:	0f 94 c0             	sete   %al
ffffffff80216680:	0f b6 c0             	movzbl %al,%eax
ffffffff80216683:	48 85 c0             	test   %rax,%rax
ffffffff80216686:	74 0c                	je     ffffffff80216694 <_RME_Thd_Sched_Bind+0x41d>
ffffffff80216688:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021668f:	e9 6d 04 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff80216694:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216698:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021669c:	83 e0 04             	and    $0x4,%eax
ffffffff8021669f:	48 85 c0             	test   %rax,%rax
ffffffff802166a2:	0f 94 c0             	sete   %al
ffffffff802166a5:	0f b6 c0             	movzbl %al,%eax
ffffffff802166a8:	48 85 c0             	test   %rax,%rax
ffffffff802166ab:	74 0c                	je     ffffffff802166b9 <_RME_Thd_Sched_Bind+0x442>
ffffffff802166ad:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802166b4:	e9 48 04 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
    
    /* Check if we need the signal endpoint for this operation */
    if(Cap_Sig!=RME_CID_NULL)
ffffffff802166b9:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff802166be:	48 39 45 90          	cmp    %rax,-0x70(%rbp)
ffffffff802166c2:	0f 84 0f 02 00 00    	je     ffffffff802168d7 <_RME_Thd_Sched_Bind+0x660>
    {
        RME_COV_MARKER();

        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802166c8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802166cc:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802166d1:	48 85 c0             	test   %rax,%rax
ffffffff802166d4:	0f 85 98 00 00 00    	jne    ffffffff80216772 <_RME_Thd_Sched_Bind+0x4fb>
ffffffff802166da:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802166de:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802166e2:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
ffffffff802166e6:	48 39 c2             	cmp    %rax,%rdx
ffffffff802166e9:	0f 93 c0             	setae  %al
ffffffff802166ec:	0f b6 c0             	movzbl %al,%eax
ffffffff802166ef:	48 85 c0             	test   %rax,%rax
ffffffff802166f2:	74 0c                	je     ffffffff80216700 <_RME_Thd_Sched_Bind+0x489>
ffffffff802166f4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802166fb:	e9 01 04 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216700:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216704:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216708:	48 89 c2             	mov    %rax,%rdx
ffffffff8021670b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8021670f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216713:	48 01 d0             	add    %rdx,%rax
ffffffff80216716:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021671a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021671e:	48 8b 00             	mov    (%rax),%rax
ffffffff80216721:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216725:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216729:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021672d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216730:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216734:	0f 94 c0             	sete   %al
ffffffff80216737:	0f b6 c0             	movzbl %al,%eax
ffffffff8021673a:	48 85 c0             	test   %rax,%rax
ffffffff8021673d:	74 0c                	je     ffffffff8021674b <_RME_Thd_Sched_Bind+0x4d4>
ffffffff8021673f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216746:	e9 b6 03 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021674b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021674f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216753:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80216757:	0f 95 c0             	setne  %al
ffffffff8021675a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021675d:	48 85 c0             	test   %rax,%rax
ffffffff80216760:	0f 84 4c 01 00 00    	je     ffffffff802168b2 <_RME_Thd_Sched_Bind+0x63b>
ffffffff80216766:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021676d:	e9 8f 03 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216772:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216776:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021677a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021677d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80216781:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216785:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216788:	0f 93 c0             	setae  %al
ffffffff8021678b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021678e:	48 85 c0             	test   %rax,%rax
ffffffff80216791:	74 0c                	je     ffffffff8021679f <_RME_Thd_Sched_Bind+0x528>
ffffffff80216793:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021679a:	e9 62 03 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021679f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff802167a3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802167a7:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802167ab:	48 89 c2             	mov    %rax,%rdx
ffffffff802167ae:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802167b2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802167b6:	48 01 d0             	add    %rdx,%rax
ffffffff802167b9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802167bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802167c1:	48 8b 00             	mov    (%rax),%rax
ffffffff802167c4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802167c8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802167cc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802167d0:	0f b7 c0             	movzwl %ax,%eax
ffffffff802167d3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802167d7:	0f 94 c0             	sete   %al
ffffffff802167da:	0f b6 c0             	movzbl %al,%eax
ffffffff802167dd:	48 85 c0             	test   %rax,%rax
ffffffff802167e0:	74 0c                	je     ffffffff802167ee <_RME_Thd_Sched_Bind+0x577>
ffffffff802167e2:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802167e9:	e9 13 03 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff802167ee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802167f2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802167f6:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802167fa:	0f 95 c0             	setne  %al
ffffffff802167fd:	0f b6 c0             	movzbl %al,%eax
ffffffff80216800:	48 85 c0             	test   %rax,%rax
ffffffff80216803:	74 0c                	je     ffffffff80216811 <_RME_Thd_Sched_Bind+0x59a>
ffffffff80216805:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021680c:	e9 f0 02 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff80216811:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216815:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021681a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021681d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216821:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216825:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216828:	0f 93 c0             	setae  %al
ffffffff8021682b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021682e:	48 85 c0             	test   %rax,%rax
ffffffff80216831:	74 0c                	je     ffffffff8021683f <_RME_Thd_Sched_Bind+0x5c8>
ffffffff80216833:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021683a:	e9 c2 02 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021683f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80216843:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216848:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021684c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021684f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216853:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216857:	48 01 d0             	add    %rdx,%rax
ffffffff8021685a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8021685e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216862:	48 8b 00             	mov    (%rax),%rax
ffffffff80216865:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80216869:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021686d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216871:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216874:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216878:	0f 94 c0             	sete   %al
ffffffff8021687b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021687e:	48 85 c0             	test   %rax,%rax
ffffffff80216881:	74 0c                	je     ffffffff8021688f <_RME_Thd_Sched_Bind+0x618>
ffffffff80216883:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021688a:	e9 72 02 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
ffffffff8021688f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216893:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216897:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff8021689b:	0f 95 c0             	setne  %al
ffffffff8021689e:	0f b6 c0             	movzbl %al,%eax
ffffffff802168a1:	48 85 c0             	test   %rax,%rax
ffffffff802168a4:	74 0c                	je     ffffffff802168b2 <_RME_Thd_Sched_Bind+0x63b>
ffffffff802168a6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802168ad:	e9 4f 02 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
                       struct RME_Cap_Sig*,Sig_Op,Type_Stat);
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
ffffffff802168b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802168b6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802168ba:	83 e0 20             	and    $0x20,%eax
ffffffff802168bd:	48 85 c0             	test   %rax,%rax
ffffffff802168c0:	0f 94 c0             	sete   %al
ffffffff802168c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802168c6:	48 85 c0             	test   %rax,%rax
ffffffff802168c9:	74 14                	je     ffffffff802168df <_RME_Thd_Sched_Bind+0x668>
ffffffff802168cb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802168d2:	e9 2a 02 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
    }
    else
    {
        RME_COV_MARKER();

        Sig_Op=RME_NULL;
ffffffff802168d7:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff802168de:	00 
    }

    /* Check if the target thread is already bound. If yes, we just quit */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff802168df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802168e3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802168e7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Local_Old=Thread->Sched.Local;
ffffffff802168eb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802168ef:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802168f3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Local_Old!=RME_THD_FREE)
ffffffff802168f7:	48 83 7d d0 ff       	cmpq   $0xffffffffffffffff,-0x30(%rbp)
ffffffff802168fc:	74 0c                	je     ffffffff8021690a <_RME_Thd_Sched_Bind+0x693>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802168fe:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216905:	e9 f7 01 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the parent thread is on the same core with the current processor */
    Local_New=RME_CPU_LOCAL();
ffffffff8021690a:	e8 30 4f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021690f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff80216913:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216917:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021691b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    if(Scheduler->Sched.Local!=Local_New)
ffffffff8021691f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80216923:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216927:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
ffffffff8021692b:	74 0c                	je     ffffffff80216939 <_RME_Thd_Sched_Bind+0x6c2>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff8021692d:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216934:	e9 c8 01 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if we are trying to bind to ourself - prohibited */
    if(Thread==Scheduler)
ffffffff80216939:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021693d:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff80216941:	75 0c                	jne    ffffffff8021694f <_RME_Thd_Sched_Bind+0x6d8>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_NOTIF;
ffffffff80216943:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff8021694a:	e9 b2 01 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the priority relationship is correct */
    if(Scheduler->Sched.Prio_Max<Prio)
ffffffff8021694f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80216953:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80216957:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
ffffffff8021695b:	73 0c                	jae    ffffffff80216969 <_RME_Thd_Sched_Bind+0x6f2>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff8021695d:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80216964:	e9 98 01 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check whether the coprocessor context attribute is compatible with this core */
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
ffffffff80216969:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021696d:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216974:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
    }
#else
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
ffffffff80216978:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff8021697f:	ff ff 7f 
ffffffff80216982:	48 23 45 b8          	and    -0x48(%rbp),%rax
ffffffff80216986:	48 85 c0             	test   %rax,%rax
ffffffff80216989:	74 0c                	je     ffffffff80216997 <_RME_Thd_Sched_Bind+0x720>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021698b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216992:	e9 6a 01 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check the hypervisor context buffer passed in to see whether it is good */
    if((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U))
ffffffff80216997:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff8021699c:	74 5c                	je     ffffffff802169fa <_RME_Thd_Sched_Bind+0x783>
ffffffff8021699e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802169a2:	48 85 c0             	test   %rax,%rax
ffffffff802169a5:	79 53                	jns    ffffffff802169fa <_RME_Thd_Sched_Bind+0x783>
    {
        RME_COV_MARKER();
        
        /* Register save area must be aligned to word boundary */
        if(RME_IS_ALIGNED(Haddr)!=0U)
ffffffff802169a7:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802169ab:	83 e0 07             	and    $0x7,%eax
ffffffff802169ae:	48 85 c0             	test   %rax,%rax
ffffffff802169b1:	75 07                	jne    ffffffff802169ba <_RME_Thd_Sched_Bind+0x743>
ffffffff802169b3:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff802169b8:	eb 05                	jmp    ffffffff802169bf <_RME_Thd_Sched_Bind+0x748>
ffffffff802169ba:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802169bf:	84 c0                	test   %al,%al
ffffffff802169c1:	74 2b                	je     ffffffff802169ee <_RME_Thd_Sched_Bind+0x777>
                return RME_ERR_PTH_HADDR;
            }
            else
            {
#endif
                End=Haddr+RME_REG_SIZE(RME_THD_ATTR(Thread->Ctx.Hyp_Attr));
ffffffff802169c3:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802169c7:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff802169cd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
                if((End<=Haddr)||(End>(RME_HYP_VA_BASE+RME_HYP_VA_SIZE)))
ffffffff802169d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802169d5:	48 39 45 10          	cmp    %rax,0x10(%rbp)
ffffffff802169d9:	73 07                	jae    ffffffff802169e2 <_RME_Thd_Sched_Bind+0x76b>
ffffffff802169db:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802169e0:	74 44                	je     ffffffff80216a26 <_RME_Thd_Sched_Bind+0x7af>
                {
                    RME_COV_MARKER();

                    return RME_ERR_PTH_HADDR;
ffffffff802169e2:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff802169e9:	e9 13 01 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
        /* Not aligned, exiting */
        else
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_HADDR;
ffffffff802169ee:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff802169f5:	e9 07 01 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
        }
    }
    /* We don't allow setting HYP addr for normal threads, nor do we allow
     * setting HYP addr to NULL for hypervisor-managed threads. */
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
ffffffff802169fa:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff802169ff:	74 09                	je     ffffffff80216a0a <_RME_Thd_Sched_Bind+0x793>
ffffffff80216a01:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216a05:	48 85 c0             	test   %rax,%rax
ffffffff80216a08:	79 10                	jns    ffffffff80216a1a <_RME_Thd_Sched_Bind+0x7a3>
ffffffff80216a0a:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff80216a0f:	75 16                	jne    ffffffff80216a27 <_RME_Thd_Sched_Bind+0x7b0>
            ((Haddr==RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U)))
ffffffff80216a11:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80216a15:	48 85 c0             	test   %rax,%rax
ffffffff80216a18:	79 0d                	jns    ffffffff80216a27 <_RME_Thd_Sched_Bind+0x7b0>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_HADDR;
ffffffff80216a1a:	48 c7 c0 35 ff ff ff 	mov    $0xffffffffffffff35,%rax
ffffffff80216a21:	e9 db 00 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
        if(RME_IS_ALIGNED(Haddr)!=0U)
ffffffff80216a26:	90                   	nop
        RME_COV_MARKER();
        /* No action required */
    }

    /* Try to bind the thread */
    if(RME_COMP_SWAP((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80216a27:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216a2b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216a2f:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80216a33:	48 83 c1 28          	add    $0x28,%rcx
ffffffff80216a37:	48 89 c6             	mov    %rax,%rsi
ffffffff80216a3a:	48 89 cf             	mov    %rcx,%rdi
ffffffff80216a3d:	e8 1c 5d ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80216a42:	48 85 c0             	test   %rax,%rax
ffffffff80216a45:	75 0c                	jne    ffffffff80216a53 <_RME_Thd_Sched_Bind+0x7dc>
                     (rme_ptr_t)Local_Old,
                     (rme_ptr_t)Local_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_CONFLICT;
ffffffff80216a47:	48 c7 c0 36 ff ff ff 	mov    $0xffffffffffffff36,%rax
ffffffff80216a4e:	e9 ae 00 00 00       	jmp    ffffffff80216b01 <_RME_Thd_Sched_Bind+0x88a>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase the reference count of the scheduler thread struct - same core */
    Scheduler->Sched.Sched_Ref++;
ffffffff80216a53:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80216a57:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80216a5b:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff80216a5f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80216a63:	48 89 50 60          	mov    %rdx,0x60(%rax)
    
    /* Bind successful and finish the work off. No need to worry about other cores'
     * operations on this thread because this thread is already bound to this core.
     * TID is half-word parameter-wise, but is stored and returned as a full word. */
    Thread->Sched.Sched_Thd=Scheduler;
ffffffff80216a67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a6b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff80216a6f:	48 89 50 68          	mov    %rdx,0x68(%rax)
    Thread->Sched.Prio=Prio;
ffffffff80216a73:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a77:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
ffffffff80216a7b:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Thread->Sched.TID=(rme_ptr_t)TID;
ffffffff80216a7f:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
ffffffff80216a83:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a87:	48 89 50 20          	mov    %rdx,0x20(%rax)
    /* The state must be TIMEOUT or EXCPEND at this point */
    RME_ASSERT((Thread->Sched.State==RME_THD_TIMEOUT)||
               (Thread->Sched.State==RME_THD_EXCPEND));

    /* Tie the signal endpoint to it if not zero */
    if(Sig_Op==(void*)0U)
ffffffff80216a8b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80216a90:	75 0e                	jne    ffffffff80216aa0 <_RME_Thd_Sched_Bind+0x829>
    {
        RME_COV_MARKER();

        Thread->Sched.Sched_Sig=0U;
ffffffff80216a92:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216a96:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
ffffffff80216a9d:	00 
ffffffff80216a9e:	eb 3d                	jmp    ffffffff80216add <_RME_Thd_Sched_Bind+0x866>
    else
    {
        RME_COV_MARKER();

        /* Convert to root cap */
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff80216aa0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216aa4:	48 8b 00             	mov    (%rax),%rax
ffffffff80216aa7:	89 c0                	mov    %eax,%eax
ffffffff80216aa9:	48 85 c0             	test   %rax,%rax
ffffffff80216aac:	74 0a                	je     ffffffff80216ab8 <_RME_Thd_Sched_Bind+0x841>
ffffffff80216aae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216ab2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216ab6:	eb 04                	jmp    ffffffff80216abc <_RME_Thd_Sched_Bind+0x845>
ffffffff80216ab8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216abc:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80216ac0:	48 89 42 70          	mov    %rax,0x70(%rdx)
        
        /* Increase refcnt */
        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),1U);
ffffffff80216ac4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216ac8:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216acc:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216ad0:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80216ad5:	48 89 c7             	mov    %rax,%rdi
ffffffff80216ad8:	e8 b6 5c ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    }
    
    /* Set hypervisor context address if we're hypervisor-managed */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
ffffffff80216add:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216ae1:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80216ae8:	48 85 c0             	test   %rax,%rax
ffffffff80216aeb:	79 0f                	jns    ffffffff80216afc <_RME_Thd_Sched_Bind+0x885>
    {
        RME_COV_MARKER();
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
ffffffff80216aed:	48 8b 55 10          	mov    0x10(%rbp),%rdx
ffffffff80216af1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216af5:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff80216afc:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216b01:	c9                   	leave
ffffffff80216b02:	c3                   	ret

ffffffff80216b03 <_RME_Thd_Sched_Free>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Free(struct RME_Cap_Cpt* Cpt, 
                                     struct RME_Reg_Struct* Reg,
                                     rme_cid_t Cap_Thd)
{
ffffffff80216b03:	f3 0f 1e fa          	endbr64
ffffffff80216b07:	55                   	push   %rbp
ffffffff80216b08:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216b0b:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80216b0f:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80216b13:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80216b17:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    /* These are used to free the thread */
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80216b1b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216b1f:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216b24:	48 85 c0             	test   %rax,%rax
ffffffff80216b27:	0f 85 98 00 00 00    	jne    ffffffff80216bc5 <_RME_Thd_Sched_Free+0xc2>
ffffffff80216b2d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216b31:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216b35:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216b39:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216b3c:	0f 93 c0             	setae  %al
ffffffff80216b3f:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b42:	48 85 c0             	test   %rax,%rax
ffffffff80216b45:	74 0c                	je     ffffffff80216b53 <_RME_Thd_Sched_Free+0x50>
ffffffff80216b47:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216b4e:	e9 90 03 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216b53:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216b57:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216b5b:	48 89 c2             	mov    %rax,%rdx
ffffffff80216b5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216b62:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216b66:	48 01 d0             	add    %rdx,%rax
ffffffff80216b69:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216b6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216b71:	48 8b 00             	mov    (%rax),%rax
ffffffff80216b74:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216b78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216b7c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216b80:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216b83:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216b87:	0f 94 c0             	sete   %al
ffffffff80216b8a:	0f b6 c0             	movzbl %al,%eax
ffffffff80216b8d:	48 85 c0             	test   %rax,%rax
ffffffff80216b90:	74 0c                	je     ffffffff80216b9e <_RME_Thd_Sched_Free+0x9b>
ffffffff80216b92:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216b99:	e9 45 03 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216b9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216ba2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216ba6:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216baa:	0f 95 c0             	setne  %al
ffffffff80216bad:	0f b6 c0             	movzbl %al,%eax
ffffffff80216bb0:	48 85 c0             	test   %rax,%rax
ffffffff80216bb3:	0f 84 4c 01 00 00    	je     ffffffff80216d05 <_RME_Thd_Sched_Free+0x202>
ffffffff80216bb9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216bc0:	e9 1e 03 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216bc5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216bc9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216bcd:	48 89 c2             	mov    %rax,%rdx
ffffffff80216bd0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216bd4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216bd8:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216bdb:	0f 93 c0             	setae  %al
ffffffff80216bde:	0f b6 c0             	movzbl %al,%eax
ffffffff80216be1:	48 85 c0             	test   %rax,%rax
ffffffff80216be4:	74 0c                	je     ffffffff80216bf2 <_RME_Thd_Sched_Free+0xef>
ffffffff80216be6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216bed:	e9 f1 02 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216bf2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216bf6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216bfa:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216bfe:	48 89 c2             	mov    %rax,%rdx
ffffffff80216c01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216c05:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216c09:	48 01 d0             	add    %rdx,%rax
ffffffff80216c0c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216c10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216c14:	48 8b 00             	mov    (%rax),%rax
ffffffff80216c17:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216c1b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216c1f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216c23:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216c26:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216c2a:	0f 94 c0             	sete   %al
ffffffff80216c2d:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c30:	48 85 c0             	test   %rax,%rax
ffffffff80216c33:	74 0c                	je     ffffffff80216c41 <_RME_Thd_Sched_Free+0x13e>
ffffffff80216c35:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216c3c:	e9 a2 02 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216c41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216c45:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216c49:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80216c4d:	0f 95 c0             	setne  %al
ffffffff80216c50:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c53:	48 85 c0             	test   %rax,%rax
ffffffff80216c56:	74 0c                	je     ffffffff80216c64 <_RME_Thd_Sched_Free+0x161>
ffffffff80216c58:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216c5f:	e9 7f 02 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216c64:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216c68:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216c6d:	48 89 c2             	mov    %rax,%rdx
ffffffff80216c70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216c74:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216c78:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216c7b:	0f 93 c0             	setae  %al
ffffffff80216c7e:	0f b6 c0             	movzbl %al,%eax
ffffffff80216c81:	48 85 c0             	test   %rax,%rax
ffffffff80216c84:	74 0c                	je     ffffffff80216c92 <_RME_Thd_Sched_Free+0x18f>
ffffffff80216c86:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216c8d:	e9 51 02 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216c92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216c96:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80216c9b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216c9f:	48 89 c2             	mov    %rax,%rdx
ffffffff80216ca2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216ca6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216caa:	48 01 d0             	add    %rdx,%rax
ffffffff80216cad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216cb1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216cb5:	48 8b 00             	mov    (%rax),%rax
ffffffff80216cb8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216cbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216cc0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216cc4:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216cc7:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216ccb:	0f 94 c0             	sete   %al
ffffffff80216cce:	0f b6 c0             	movzbl %al,%eax
ffffffff80216cd1:	48 85 c0             	test   %rax,%rax
ffffffff80216cd4:	74 0c                	je     ffffffff80216ce2 <_RME_Thd_Sched_Free+0x1df>
ffffffff80216cd6:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216cdd:	e9 01 02 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
ffffffff80216ce2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216ce6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216cea:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216cee:	0f 95 c0             	setne  %al
ffffffff80216cf1:	0f b6 c0             	movzbl %al,%eax
ffffffff80216cf4:	48 85 c0             	test   %rax,%rax
ffffffff80216cf7:	74 0c                	je     ffffffff80216d05 <_RME_Thd_Sched_Free+0x202>
ffffffff80216cf9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216d00:	e9 de 01 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff80216d05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216d09:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216d0d:	83 e0 10             	and    $0x10,%eax
ffffffff80216d10:	48 85 c0             	test   %rax,%rax
ffffffff80216d13:	0f 94 c0             	sete   %al
ffffffff80216d16:	0f b6 c0             	movzbl %al,%eax
ffffffff80216d19:	48 85 c0             	test   %rax,%rax
ffffffff80216d1c:	74 0c                	je     ffffffff80216d2a <_RME_Thd_Sched_Free+0x227>
ffffffff80216d1e:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216d25:	e9 b9 01 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
    
    /* Check if the target thread is already bound to this core */
    Local=RME_CPU_LOCAL();
ffffffff80216d2a:	e8 10 4b ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80216d2f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80216d33:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216d37:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216d3b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(Thread->Sched.Local!=Local)
ffffffff80216d3f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d43:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216d47:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80216d4b:	74 0c                	je     ffffffff80216d59 <_RME_Thd_Sched_Free+0x256>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80216d4d:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80216d54:	e9 8a 01 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
        /* No action required */
    }
    
    /* Am I referenced by someone as a scheduler? If yes, we cannot unbind. Because
     * boot-time thread's refcnt will never be 0, thus they will never pass this checking */
    if(Thread->Sched.Sched_Ref!=0U)
ffffffff80216d59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d5d:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80216d61:	48 85 c0             	test   %rax,%rax
ffffffff80216d64:	74 0c                	je     ffffffff80216d72 <_RME_Thd_Sched_Free+0x26f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_REFCNT;
ffffffff80216d66:	48 c7 c0 32 ff ff ff 	mov    $0xffffffffffffff32,%rax
ffffffff80216d6d:	e9 71 01 00 00       	jmp    ffffffff80216ee3 <_RME_Thd_Sched_Free+0x3e0>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Decrease the parent's reference count - on the same core */
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
ffffffff80216d72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d76:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80216d7a:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80216d7e:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80216d82:	48 89 50 60          	mov    %rdx,0x60(%rax)

    /* See if we have any events sent to the parent. If yes, remove that event */
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
ffffffff80216d86:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d8a:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80216d8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d92:	48 83 c0 10          	add    $0x10,%rax
ffffffff80216d96:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216d99:	74 2b                	je     ffffffff80216dc6 <_RME_Thd_Sched_Free+0x2c3>
    {
        RME_COV_MARKER();

        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff80216d9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216d9f:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80216da3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216da7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216dab:	48 89 d6             	mov    %rdx,%rsi
ffffffff80216dae:	48 89 c7             	mov    %rax,%rdi
ffffffff80216db1:	e8 ce 5f ff ff       	call   ffffffff8020cd84 <_RME_List_Del>
        _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80216db6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216dba:	48 83 c0 10          	add    $0x10,%rax
ffffffff80216dbe:	48 89 c7             	mov    %rax,%rdi
ffffffff80216dc1:	e8 94 5f ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
        RME_COV_MARKER();
        /* No action required */
    }

    /* If we have an scheduler event endpoint, release it */
    if(Thread->Sched.Sched_Sig!=(void*)RME_NULL)
ffffffff80216dc6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216dca:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216dce:	48 85 c0             	test   %rax,%rax
ffffffff80216dd1:	74 1b                	je     ffffffff80216dee <_RME_Thd_Sched_Free+0x2eb>
    {
        RME_COV_MARKER();

        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),-1);
ffffffff80216dd3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216dd7:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80216ddb:	48 83 c0 08          	add    $0x8,%rax
ffffffff80216ddf:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80216de6:	48 89 c7             	mov    %rax,%rdi
ffffffff80216de9:	e8 a5 59 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80216dee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216df2:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80216df7:	48 89 c7             	mov    %rax,%rdi
ffffffff80216dfa:	e8 d6 03 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
    /* If the thread is ready, kick it out of the run queue. If it is blocked on
     * some endpoint, end the blocking and set the return value to RME_ERR_SIV_FREE.
     * If the thread is killed due to a fault, we will not clear the fault here, and
     * we will wait for the Exec_Set to clear it. No scheduler notifications are sent
     * because the thread is being freed and notifications at this point are useless. */
    if(Thread->Sched.State==RME_THD_READY)
ffffffff80216dff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e03:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80216e07:	48 85 c0             	test   %rax,%rax
ffffffff80216e0a:	75 1a                	jne    ffffffff80216e26 <_RME_Thd_Sched_Free+0x323>
    {
        RME_COV_MARKER();

        /* Remove from runqueue and timeout but don't notify parent */
        _RME_Run_Del(Thread);
ffffffff80216e0c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e10:	48 89 c7             	mov    %rax,%rdi
ffffffff80216e13:	e8 7a c0 ff ff       	call   ffffffff80212e92 <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80216e18:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e1c:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80216e23:	00 
ffffffff80216e24:	eb 50                	jmp    ffffffff80216e76 <_RME_Thd_Sched_Free+0x373>
    }
    /* BLOCKED */
    else if(Thread->Sched.State==RME_THD_BLOCKED)
ffffffff80216e26:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e2a:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80216e2e:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80216e32:	75 42                	jne    ffffffff80216e76 <_RME_Thd_Sched_Free+0x373>
    {
        RME_COV_MARKER();
        
        /* If it got here, the thread that is operated on cannot be the current 
         * thread, so we are not overwriting the return value of the caller. */
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
ffffffff80216e34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e38:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80216e3f:	48 c7 c6 ce fe ff ff 	mov    $0xfffffffffffffece,%rsi
ffffffff80216e46:	48 89 c7             	mov    %rax,%rdi
ffffffff80216e49:	e8 87 03 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
        /* Release signal and thread from each other */
        Thread->Sched.Signal->Thd=RME_NULL;
ffffffff80216e4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e52:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff80216e56:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80216e5d:	00 
        Thread->Sched.Signal=RME_NULL;
ffffffff80216e5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e62:	48 c7 40 50 00 00 00 	movq   $0x0,0x50(%rax)
ffffffff80216e69:	00 
        /* Timeout but don't notify parent */
        Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff80216e6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e6e:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80216e75:	00 
        RME_COV_MARKER();
        /* No action required */
    }

    /* Cleanup all remaining timeslices on it */
    Thread->Sched.Slice=0U;
ffffffff80216e76:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216e7a:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80216e81:	00 
    
    /* Check if this thread is the current one and we may need to switch away */
    if(Local->Thd_Cur==Thread)
ffffffff80216e82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216e86:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216e8a:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80216e8e:	75 3f                	jne    ffffffff80216ecf <_RME_Thd_Sched_Free+0x3cc>
    {
        RME_COV_MARKER();

        Local->Thd_Cur=_RME_Run_High(Local);
ffffffff80216e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216e94:	48 89 c7             	mov    %rax,%rdi
ffffffff80216e97:	e8 bf c0 ff ff       	call   ffffffff80212f5b <_RME_Run_High>
ffffffff80216e9c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80216ea0:	48 89 42 08          	mov    %rax,0x8(%rdx)
        _RME_Run_Ins(Local->Thd_Cur);
ffffffff80216ea4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216ea8:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80216eac:	48 89 c7             	mov    %rax,%rdi
ffffffff80216eaf:	e8 2e bf ff ff       	call   ffffffff80212de2 <_RME_Run_Ins>
        RME_ASSERT(Local->Thd_Cur->Sched.State==RME_THD_READY);
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
ffffffff80216eb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80216eb8:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80216ebc:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80216ec0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80216ec4:	48 89 ce             	mov    %rcx,%rsi
ffffffff80216ec7:	48 89 c7             	mov    %rax,%rdi
ffffffff80216eca:	e8 e8 c1 ff ff       	call   ffffffff802130b7 <_RME_Run_Swt>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Set the state to free so other cores can bind */
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
ffffffff80216ecf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80216ed3:	48 83 c0 28          	add    $0x28,%rax
ffffffff80216ed7:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
                      (rme_ptr_t)RME_THD_FREE);

    return 0;
ffffffff80216ede:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80216ee3:	c9                   	leave
ffffffff80216ee4:	c3                   	ret

ffffffff80216ee5 <_RME_Thd_Exec_Set>:
                                   struct RME_Reg_Struct* Reg,
                                   rme_cid_t Cap_Thd,
                                   rme_ptr_t Entry,
                                   rme_ptr_t Stack,
                                   rme_ptr_t Param)
{
ffffffff80216ee5:	f3 0f 1e fa          	endbr64
ffffffff80216ee9:	55                   	push   %rbp
ffffffff80216eea:	48 89 e5             	mov    %rsp,%rbp
ffffffff80216eed:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80216ef1:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80216ef5:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80216ef9:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80216efd:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff80216f01:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
ffffffff80216f05:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
    struct RME_Thd_Struct* Thread;
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80216f09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216f0d:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80216f12:	48 85 c0             	test   %rax,%rax
ffffffff80216f15:	0f 85 98 00 00 00    	jne    ffffffff80216fb3 <_RME_Thd_Exec_Set+0xce>
ffffffff80216f1b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216f1f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216f23:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80216f27:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216f2a:	0f 93 c0             	setae  %al
ffffffff80216f2d:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f30:	48 85 c0             	test   %rax,%rax
ffffffff80216f33:	74 0c                	je     ffffffff80216f41 <_RME_Thd_Exec_Set+0x5c>
ffffffff80216f35:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216f3c:	e9 ca 02 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
ffffffff80216f41:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216f45:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216f49:	48 89 c2             	mov    %rax,%rdx
ffffffff80216f4c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216f50:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216f54:	48 01 d0             	add    %rdx,%rax
ffffffff80216f57:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216f5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80216f5f:	48 8b 00             	mov    (%rax),%rax
ffffffff80216f62:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80216f66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216f6a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80216f6e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80216f71:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80216f75:	0f 94 c0             	sete   %al
ffffffff80216f78:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f7b:	48 85 c0             	test   %rax,%rax
ffffffff80216f7e:	74 0c                	je     ffffffff80216f8c <_RME_Thd_Exec_Set+0xa7>
ffffffff80216f80:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216f87:	e9 7f 02 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
ffffffff80216f8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80216f90:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216f94:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80216f98:	0f 95 c0             	setne  %al
ffffffff80216f9b:	0f b6 c0             	movzbl %al,%eax
ffffffff80216f9e:	48 85 c0             	test   %rax,%rax
ffffffff80216fa1:	0f 84 4c 01 00 00    	je     ffffffff802170f3 <_RME_Thd_Exec_Set+0x20e>
ffffffff80216fa7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216fae:	e9 58 02 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
ffffffff80216fb3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216fb7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216fbb:	48 89 c2             	mov    %rax,%rdx
ffffffff80216fbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216fc2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80216fc6:	48 39 c2             	cmp    %rax,%rdx
ffffffff80216fc9:	0f 93 c0             	setae  %al
ffffffff80216fcc:	0f b6 c0             	movzbl %al,%eax
ffffffff80216fcf:	48 85 c0             	test   %rax,%rax
ffffffff80216fd2:	74 0c                	je     ffffffff80216fe0 <_RME_Thd_Exec_Set+0xfb>
ffffffff80216fd4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216fdb:	e9 2b 02 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
ffffffff80216fe0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80216fe4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80216fe8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80216fec:	48 89 c2             	mov    %rax,%rdx
ffffffff80216fef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80216ff3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80216ff7:	48 01 d0             	add    %rdx,%rax
ffffffff80216ffa:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80216ffe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217002:	48 8b 00             	mov    (%rax),%rax
ffffffff80217005:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217009:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021700d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217011:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217014:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217018:	0f 94 c0             	sete   %al
ffffffff8021701b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021701e:	48 85 c0             	test   %rax,%rax
ffffffff80217021:	74 0c                	je     ffffffff8021702f <_RME_Thd_Exec_Set+0x14a>
ffffffff80217023:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021702a:	e9 dc 01 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
ffffffff8021702f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217033:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217037:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021703b:	0f 95 c0             	setne  %al
ffffffff8021703e:	0f b6 c0             	movzbl %al,%eax
ffffffff80217041:	48 85 c0             	test   %rax,%rax
ffffffff80217044:	74 0c                	je     ffffffff80217052 <_RME_Thd_Exec_Set+0x16d>
ffffffff80217046:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021704d:	e9 b9 01 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
ffffffff80217052:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217056:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021705b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021705e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217062:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217066:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217069:	0f 93 c0             	setae  %al
ffffffff8021706c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021706f:	48 85 c0             	test   %rax,%rax
ffffffff80217072:	74 0c                	je     ffffffff80217080 <_RME_Thd_Exec_Set+0x19b>
ffffffff80217074:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021707b:	e9 8b 01 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
ffffffff80217080:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217084:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217089:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021708d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217090:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217094:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217098:	48 01 d0             	add    %rdx,%rax
ffffffff8021709b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021709f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802170a3:	48 8b 00             	mov    (%rax),%rax
ffffffff802170a6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802170aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802170ae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802170b2:	0f b7 c0             	movzwl %ax,%eax
ffffffff802170b5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802170b9:	0f 94 c0             	sete   %al
ffffffff802170bc:	0f b6 c0             	movzbl %al,%eax
ffffffff802170bf:	48 85 c0             	test   %rax,%rax
ffffffff802170c2:	74 0c                	je     ffffffff802170d0 <_RME_Thd_Exec_Set+0x1eb>
ffffffff802170c4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802170cb:	e9 3b 01 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
ffffffff802170d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802170d4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802170d8:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802170dc:	0f 95 c0             	setne  %al
ffffffff802170df:	0f b6 c0             	movzbl %al,%eax
ffffffff802170e2:	48 85 c0             	test   %rax,%rax
ffffffff802170e5:	74 0c                	je     ffffffff802170f3 <_RME_Thd_Exec_Set+0x20e>
ffffffff802170e7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802170ee:	e9 18 01 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff802170f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802170f7:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff802170fb:	83 e0 01             	and    $0x1,%eax
ffffffff802170fe:	48 85 c0             	test   %rax,%rax
ffffffff80217101:	0f 94 c0             	sete   %al
ffffffff80217104:	0f b6 c0             	movzbl %al,%eax
ffffffff80217107:	48 85 c0             	test   %rax,%rax
ffffffff8021710a:	74 0c                	je     ffffffff80217118 <_RME_Thd_Exec_Set+0x233>
ffffffff8021710c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217113:	e9 f3 00 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
    
    /* Check if the target thread is already bound, and quit if it is not on our core */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff80217118:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021711c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217120:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Local=RME_CPU_LOCAL();
ffffffff80217124:	e8 16 47 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80217129:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(Thread->Sched.Local!=Local)
ffffffff8021712d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217131:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217135:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80217139:	74 0c                	je     ffffffff80217147 <_RME_Thd_Exec_Set+0x262>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff8021713b:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217142:	e9 c4 00 00 00       	jmp    ffffffff8021720b <_RME_Thd_Exec_Set+0x326>
        /* No action required */
    }
    
    /* Commit the change if both values are non-zero. If both are zero we are just
     * clearing the error flag and continue from where the exception happened. */
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
ffffffff80217147:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
ffffffff8021714c:	74 47                	je     ffffffff80217195 <_RME_Thd_Exec_Set+0x2b0>
ffffffff8021714e:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff80217153:	74 40                	je     ffffffff80217195 <_RME_Thd_Exec_Set+0x2b0>
    {
        RME_COV_MARKER();

        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
                           Entry,Stack,Param,&(Thread->Ctx.Reg->Reg));
ffffffff80217155:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217159:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
ffffffff80217160:	48 89 c6             	mov    %rax,%rsi
ffffffff80217163:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217167:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff8021716e:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff80217175:	ff ff 7f 
ffffffff80217178:	48 21 d0             	and    %rdx,%rax
ffffffff8021717b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021717e:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80217182:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80217186:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021718a:	49 89 f0             	mov    %rsi,%r8
ffffffff8021718d:	48 89 c6             	mov    %rax,%rsi
ffffffff80217190:	e8 f1 ec 00 00       	call   ffffffff80225e86 <__RME_Thd_Reg_Init>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);  
ffffffff80217195:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217199:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021719e:	48 89 c7             	mov    %rax,%rdi
ffffffff802171a1:	e8 2f 00 01 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
    
    /* Check if there is a exception pending and clear it if there is */
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff802171a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171aa:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802171ae:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802171b2:	75 52                	jne    ffffffff80217206 <_RME_Thd_Exec_Set+0x321>
    {
        RME_COV_MARKER();
        
        /* Check if the thread still have timeslices. If yes, put it into the runqueue;
         * if no, mark it as TIMEOUT and send scheduler notification to its parent. */
        if(Thread->Sched.Slice!=0U)
ffffffff802171b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171b8:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802171bc:	48 85 c0             	test   %rax,%rax
ffffffff802171bf:	74 1a                	je     ffffffff802171db <_RME_Thd_Exec_Set+0x2f6>
        {
            RME_COV_MARKER();
            
            /* Ready and add to runqueue */
            Thread->Sched.State=RME_THD_READY;
ffffffff802171c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171c5:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff802171cc:	00 
            _RME_Run_Ins(Thread);
ffffffff802171cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171d1:	48 89 c7             	mov    %rax,%rdi
ffffffff802171d4:	e8 09 bc ff ff       	call   ffffffff80212de2 <_RME_Run_Ins>
ffffffff802171d9:	eb 18                	jmp    ffffffff802171f3 <_RME_Thd_Exec_Set+0x30e>
        else
        {
            RME_COV_MARKER();
            
            /* Timeout and notify parent */
            Thread->Sched.State=RME_THD_TIMEOUT;
ffffffff802171db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171df:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff802171e6:	00 
            _RME_Run_Notif(Thread);
ffffffff802171e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802171eb:	48 89 c7             	mov    %rax,%rdi
ffffffff802171ee:	e8 ea bd ff ff       	call   ffffffff80212fdd <_RME_Run_Notif>
        }
        
        /* Pick the highest priority thread because something unblocked */
        _RME_Kern_High(Reg,Local);
ffffffff802171f3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802171f7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802171fb:	48 89 d6             	mov    %rdx,%rsi
ffffffff802171fe:	48 89 c7             	mov    %rax,%rdi
ffffffff80217201:	e8 c0 1c 00 00       	call   ffffffff80218ec6 <_RME_Kern_High>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
ffffffff80217206:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021720b:	c9                   	leave
ffffffff8021720c:	c3                   	ret

ffffffff8021720d <_RME_Thd_Sched_Prio>:
                                     rme_ptr_t Prio0,
                                     rme_cid_t Cap_Thd1,
                                     rme_ptr_t Prio1,
                                     rme_cid_t Cap_Thd2,
                                     rme_ptr_t Prio2)
{
ffffffff8021720d:	f3 0f 1e fa          	endbr64
ffffffff80217211:	55                   	push   %rbp
ffffffff80217212:	48 89 e5             	mov    %rsp,%rbp
ffffffff80217215:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
ffffffff8021721c:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
ffffffff80217223:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
ffffffff8021722a:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
ffffffff80217231:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
ffffffff80217238:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
ffffffff8021723f:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
    struct RME_Thd_Struct* Thread[3];
    struct RME_CPU_Local* Local;
    rme_ptr_t Type_Stat;
    
    /* Check parameter validity */
    if((Number==0U)||(Number>3U))
ffffffff80217246:	48 83 bd 58 ff ff ff 	cmpq   $0x0,-0xa8(%rbp)
ffffffff8021724d:	00 
ffffffff8021724e:	74 0a                	je     ffffffff8021725a <_RME_Thd_Sched_Prio+0x4d>
ffffffff80217250:	48 83 bd 58 ff ff ff 	cmpq   $0x3,-0xa8(%rbp)
ffffffff80217257:	03 
ffffffff80217258:	76 0c                	jbe    ffffffff80217266 <_RME_Thd_Sched_Prio+0x59>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff8021725a:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217261:	e9 04 04 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
    }
    
    /* We'll use arrays in the next */
    Cap_Thd[0]=Cap_Thd0;
ffffffff80217266:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
ffffffff8021726d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Cap_Thd[1]=Cap_Thd1;
ffffffff80217271:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
ffffffff80217278:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Cap_Thd[2]=Cap_Thd2;
ffffffff8021727c:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff80217280:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Prio[0]=Prio0;
ffffffff80217284:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
ffffffff8021728b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    Prio[1]=Prio1;
ffffffff8021728f:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff80217293:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Prio[2]=Prio2;
ffffffff80217297:	48 8b 45 20          	mov    0x20(%rbp),%rax
ffffffff8021729b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)

    Local=RME_CPU_LOCAL();
ffffffff8021729f:	e8 9b 45 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802172a4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0U;Count<Number;Count++)
ffffffff802172a8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802172af:	00 
ffffffff802172b0:	e9 e4 02 00 00       	jmp    ffffffff80217599 <_RME_Thd_Sched_Prio+0x38c>
    {
        /* Get the capability slot */
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
ffffffff802172b5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802172b9:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802172be:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802172c3:	48 85 c0             	test   %rax,%rax
ffffffff802172c6:	0f 85 b8 00 00 00    	jne    ffffffff80217384 <_RME_Thd_Sched_Prio+0x177>
ffffffff802172cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802172d0:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802172d5:	48 89 c2             	mov    %rax,%rdx
ffffffff802172d8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff802172df:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802172e3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802172e6:	0f 93 c0             	setae  %al
ffffffff802172e9:	0f b6 c0             	movzbl %al,%eax
ffffffff802172ec:	48 85 c0             	test   %rax,%rax
ffffffff802172ef:	74 0c                	je     ffffffff802172fd <_RME_Thd_Sched_Prio+0xf0>
ffffffff802172f1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802172f8:	e9 6d 03 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
ffffffff802172fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217301:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217306:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021730a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021730d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff80217314:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217318:	48 01 d0             	add    %rdx,%rax
ffffffff8021731b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021731e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217322:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff80217327:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021732b:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217330:	48 8b 00             	mov    (%rax),%rax
ffffffff80217333:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217337:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021733b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021733f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217342:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217346:	0f 94 c0             	sete   %al
ffffffff80217349:	0f b6 c0             	movzbl %al,%eax
ffffffff8021734c:	48 85 c0             	test   %rax,%rax
ffffffff8021734f:	74 0c                	je     ffffffff8021735d <_RME_Thd_Sched_Prio+0x150>
ffffffff80217351:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217358:	e9 0d 03 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
ffffffff8021735d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217361:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217365:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217369:	0f 95 c0             	setne  %al
ffffffff8021736c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021736f:	48 85 c0             	test   %rax,%rax
ffffffff80217372:	0f 84 8a 01 00 00    	je     ffffffff80217502 <_RME_Thd_Sched_Prio+0x2f5>
ffffffff80217378:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021737f:	e9 e6 02 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217384:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217388:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff8021738d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217391:	48 89 c2             	mov    %rax,%rdx
ffffffff80217394:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff8021739b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021739f:	48 39 c2             	cmp    %rax,%rdx
ffffffff802173a2:	0f 93 c0             	setae  %al
ffffffff802173a5:	0f b6 c0             	movzbl %al,%eax
ffffffff802173a8:	48 85 c0             	test   %rax,%rax
ffffffff802173ab:	74 0c                	je     ffffffff802173b9 <_RME_Thd_Sched_Prio+0x1ac>
ffffffff802173ad:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802173b4:	e9 b1 02 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
ffffffff802173b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173bd:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff802173c2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802173c6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802173ca:	48 89 c2             	mov    %rax,%rdx
ffffffff802173cd:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff802173d4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802173d8:	48 01 d0             	add    %rdx,%rax
ffffffff802173db:	48 89 c2             	mov    %rax,%rdx
ffffffff802173de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173e2:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff802173e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802173eb:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802173f0:	48 8b 00             	mov    (%rax),%rax
ffffffff802173f3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802173f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802173fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802173ff:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217402:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217406:	0f 94 c0             	sete   %al
ffffffff80217409:	0f b6 c0             	movzbl %al,%eax
ffffffff8021740c:	48 85 c0             	test   %rax,%rax
ffffffff8021740f:	74 0c                	je     ffffffff8021741d <_RME_Thd_Sched_Prio+0x210>
ffffffff80217411:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217418:	e9 4d 02 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
ffffffff8021741d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217421:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217425:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217429:	0f 95 c0             	setne  %al
ffffffff8021742c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021742f:	48 85 c0             	test   %rax,%rax
ffffffff80217432:	74 0c                	je     ffffffff80217440 <_RME_Thd_Sched_Prio+0x233>
ffffffff80217434:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021743b:	e9 2a 02 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217440:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217444:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217449:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021744e:	48 89 c2             	mov    %rax,%rdx
ffffffff80217451:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217455:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff8021745a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021745e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217461:	0f 93 c0             	setae  %al
ffffffff80217464:	0f b6 c0             	movzbl %al,%eax
ffffffff80217467:	48 85 c0             	test   %rax,%rax
ffffffff8021746a:	74 0c                	je     ffffffff80217478 <_RME_Thd_Sched_Prio+0x26b>
ffffffff8021746c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217473:	e9 f2 01 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
ffffffff80217478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021747c:	48 8b 44 c5 d0       	mov    -0x30(%rbp,%rax,8),%rax
ffffffff80217481:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217486:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021748a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021748d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217491:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217496:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021749a:	48 01 d0             	add    %rdx,%rax
ffffffff8021749d:	48 89 c2             	mov    %rax,%rdx
ffffffff802174a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174a4:	48 89 54 c5 90       	mov    %rdx,-0x70(%rbp,%rax,8)
ffffffff802174a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802174ad:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff802174b2:	48 8b 00             	mov    (%rax),%rax
ffffffff802174b5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802174b9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802174bd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802174c1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802174c4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802174c8:	0f 94 c0             	sete   %al
ffffffff802174cb:	0f b6 c0             	movzbl %al,%eax
ffffffff802174ce:	48 85 c0             	test   %rax,%rax
ffffffff802174d1:	74 0c                	je     ffffffff802174df <_RME_Thd_Sched_Prio+0x2d2>
ffffffff802174d3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802174da:	e9 8b 01 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
ffffffff802174df:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802174e3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802174e7:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802174eb:	0f 95 c0             	setne  %al
ffffffff802174ee:	0f b6 c0             	movzbl %al,%eax
ffffffff802174f1:	48 85 c0             	test   %rax,%rax
ffffffff802174f4:	74 0c                	je     ffffffff80217502 <_RME_Thd_Sched_Prio+0x2f5>
ffffffff802174f6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802174fd:	e9 68 01 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
                       struct RME_Cap_Thd*,Thd_Op[Count],Type_Stat);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
ffffffff80217502:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217506:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff8021750b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021750f:	83 e0 08             	and    $0x8,%eax
ffffffff80217512:	48 85 c0             	test   %rax,%rax
ffffffff80217515:	0f 94 c0             	sete   %al
ffffffff80217518:	0f b6 c0             	movzbl %al,%eax
ffffffff8021751b:	48 85 c0             	test   %rax,%rax
ffffffff8021751e:	74 0c                	je     ffffffff8021752c <_RME_Thd_Sched_Prio+0x31f>
ffffffff80217520:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217527:	e9 3e 01 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
        
        /* See if the target thread is already bound to this core. If no, we just quit */
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
ffffffff8021752c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217530:	48 8b 44 c5 90       	mov    -0x70(%rbp,%rax,8),%rax
ffffffff80217535:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217539:	48 89 c2             	mov    %rax,%rdx
ffffffff8021753c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217540:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
ffffffff80217547:	ff 
        if(Thread[Count]->Sched.Local!=Local)
ffffffff80217548:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021754c:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217553:	ff 
ffffffff80217554:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217558:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8021755c:	74 0c                	je     ffffffff8021756a <_RME_Thd_Sched_Prio+0x35d>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff8021755e:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217565:	e9 00 01 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* See if the priority relationship is correct */
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
ffffffff8021756a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021756e:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217575:	ff 
ffffffff80217576:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff8021757a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021757e:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
ffffffff80217583:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217586:	73 0c                	jae    ffffffff80217594 <_RME_Thd_Sched_Prio+0x387>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_PRIO;
ffffffff80217588:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8021758f:	e9 d6 00 00 00       	jmp    ffffffff8021766a <_RME_Thd_Sched_Prio+0x45d>
    for(Count=0U;Count<Number;Count++)
ffffffff80217594:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80217599:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021759d:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff802175a4:	0f 82 0b fd ff ff    	jb     ffffffff802172b5 <_RME_Thd_Sched_Prio+0xa8>
            /* No action required */
        }
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802175aa:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff802175b1:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802175b6:	48 89 c7             	mov    %rax,%rdi
ffffffff802175b9:	e8 17 fc 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
    
    /* Change priority for each thread, and we'll switch to the real highest priority
     * thread after all these changes. This can help remove the excessive overhead. */
    for(Count=0U;Count<Number;Count++)
ffffffff802175be:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802175c5:	00 
ffffffff802175c6:	eb 76                	jmp    ffffffff8021763e <_RME_Thd_Sched_Prio+0x431>
    {
        /* See if this thread is currently in the runqueue */
        if(Thread[Count]->Sched.State==RME_THD_READY)
ffffffff802175c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802175cc:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff802175d3:	ff 
ffffffff802175d4:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802175d8:	48 85 c0             	test   %rax,%rax
ffffffff802175db:	75 43                	jne    ffffffff80217620 <_RME_Thd_Sched_Prio+0x413>
        {
            RME_COV_MARKER();

            /* Remove from runqueue, change priority, and add it back */
            _RME_Run_Del(Thread[Count]);
ffffffff802175dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802175e1:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff802175e8:	ff 
ffffffff802175e9:	48 89 c7             	mov    %rax,%rdi
ffffffff802175ec:	e8 a1 b8 ff ff       	call   ffffffff80212e92 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff802175f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802175f5:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff802175fc:	ff 
ffffffff802175fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80217601:	48 8b 54 d5 b0       	mov    -0x50(%rbp,%rdx,8),%rdx
ffffffff80217606:	48 89 50 40          	mov    %rdx,0x40(%rax)
            _RME_Run_Ins(Thread[Count]);
ffffffff8021760a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021760e:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff80217615:	ff 
ffffffff80217616:	48 89 c7             	mov    %rax,%rdi
ffffffff80217619:	e8 c4 b7 ff ff       	call   ffffffff80212de2 <_RME_Run_Ins>
ffffffff8021761e:	eb 19                	jmp    ffffffff80217639 <_RME_Thd_Sched_Prio+0x42c>
        /* If it is BLOCKED, TIMEOUT or EXCPEND, changing the number will suffice */
        else
        {
            RME_COV_MARKER();

            Thread[Count]->Sched.Prio=Prio[Count];
ffffffff80217620:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217624:	48 8b 84 c5 70 ff ff 	mov    -0x90(%rbp,%rax,8),%rax
ffffffff8021762b:	ff 
ffffffff8021762c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80217630:	48 8b 54 d5 b0       	mov    -0x50(%rbp,%rdx,8),%rdx
ffffffff80217635:	48 89 50 40          	mov    %rdx,0x40(%rax)
    for(Count=0U;Count<Number;Count++)
ffffffff80217639:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021763e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217642:	48 3b 85 58 ff ff ff 	cmp    -0xa8(%rbp),%rax
ffffffff80217649:	0f 82 79 ff ff ff    	jb     ffffffff802175c8 <_RME_Thd_Sched_Prio+0x3bb>
        }
    }
    
    /* Pick the current highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff8021764f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80217653:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff8021765a:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021765d:	48 89 c7             	mov    %rax,%rdi
ffffffff80217660:	e8 61 18 00 00       	call   ffffffff80218ec6 <_RME_Kern_High>

    return 0;
ffffffff80217665:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021766a:	c9                   	leave
ffffffff8021766b:	c3                   	ret

ffffffff8021766c <_RME_Thd_Sched_Rcv>:
Output      : None.
Return      : rme_ret_t - If successful, the thread ID; or an error code.
******************************************************************************/
static rme_ret_t _RME_Thd_Sched_Rcv(struct RME_Cap_Cpt* Cpt,
                                    rme_cid_t Cap_Thd)
{
ffffffff8021766c:	f3 0f 1e fa          	endbr64
ffffffff80217670:	55                   	push   %rbp
ffffffff80217671:	48 89 e5             	mov    %rsp,%rbp
ffffffff80217674:	53                   	push   %rbx
ffffffff80217675:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80217679:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8021767d:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
    struct RME_Thd_Struct* Thread;
    rme_ptr_t Type_Stat;
    rme_ptr_t Flag;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80217681:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80217685:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021768a:	48 85 c0             	test   %rax,%rax
ffffffff8021768d:	0f 85 98 00 00 00    	jne    ffffffff8021772b <_RME_Thd_Sched_Rcv+0xbf>
ffffffff80217693:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217697:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021769b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8021769f:	48 39 c2             	cmp    %rax,%rdx
ffffffff802176a2:	0f 93 c0             	setae  %al
ffffffff802176a5:	0f b6 c0             	movzbl %al,%eax
ffffffff802176a8:	48 85 c0             	test   %rax,%rax
ffffffff802176ab:	74 0c                	je     ffffffff802176b9 <_RME_Thd_Sched_Rcv+0x4d>
ffffffff802176ad:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802176b4:	e9 c8 02 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
ffffffff802176b9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802176bd:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802176c1:	48 89 c2             	mov    %rax,%rdx
ffffffff802176c4:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802176c8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802176cc:	48 01 d0             	add    %rdx,%rax
ffffffff802176cf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802176d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802176d7:	48 8b 00             	mov    (%rax),%rax
ffffffff802176da:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802176de:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802176e2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802176e6:	0f b7 c0             	movzwl %ax,%eax
ffffffff802176e9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802176ed:	0f 94 c0             	sete   %al
ffffffff802176f0:	0f b6 c0             	movzbl %al,%eax
ffffffff802176f3:	48 85 c0             	test   %rax,%rax
ffffffff802176f6:	74 0c                	je     ffffffff80217704 <_RME_Thd_Sched_Rcv+0x98>
ffffffff802176f8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802176ff:	e9 7d 02 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217704:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217708:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021770c:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217710:	0f 95 c0             	setne  %al
ffffffff80217713:	0f b6 c0             	movzbl %al,%eax
ffffffff80217716:	48 85 c0             	test   %rax,%rax
ffffffff80217719:	0f 84 4c 01 00 00    	je     ffffffff8021786b <_RME_Thd_Sched_Rcv+0x1ff>
ffffffff8021771f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217726:	e9 56 02 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
ffffffff8021772b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021772f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217733:	48 89 c2             	mov    %rax,%rdx
ffffffff80217736:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021773a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021773e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217741:	0f 93 c0             	setae  %al
ffffffff80217744:	0f b6 c0             	movzbl %al,%eax
ffffffff80217747:	48 85 c0             	test   %rax,%rax
ffffffff8021774a:	74 0c                	je     ffffffff80217758 <_RME_Thd_Sched_Rcv+0xec>
ffffffff8021774c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217753:	e9 29 02 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217758:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021775c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217760:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217764:	48 89 c2             	mov    %rax,%rdx
ffffffff80217767:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021776b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021776f:	48 01 d0             	add    %rdx,%rax
ffffffff80217772:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217776:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021777a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021777d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80217781:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217785:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217789:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021778c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217790:	0f 94 c0             	sete   %al
ffffffff80217793:	0f b6 c0             	movzbl %al,%eax
ffffffff80217796:	48 85 c0             	test   %rax,%rax
ffffffff80217799:	74 0c                	je     ffffffff802177a7 <_RME_Thd_Sched_Rcv+0x13b>
ffffffff8021779b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802177a2:	e9 da 01 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
ffffffff802177a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802177ab:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802177af:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802177b3:	0f 95 c0             	setne  %al
ffffffff802177b6:	0f b6 c0             	movzbl %al,%eax
ffffffff802177b9:	48 85 c0             	test   %rax,%rax
ffffffff802177bc:	74 0c                	je     ffffffff802177ca <_RME_Thd_Sched_Rcv+0x15e>
ffffffff802177be:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802177c5:	e9 b7 01 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
ffffffff802177ca:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802177ce:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802177d3:	48 89 c2             	mov    %rax,%rdx
ffffffff802177d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802177da:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802177de:	48 39 c2             	cmp    %rax,%rdx
ffffffff802177e1:	0f 93 c0             	setae  %al
ffffffff802177e4:	0f b6 c0             	movzbl %al,%eax
ffffffff802177e7:	48 85 c0             	test   %rax,%rax
ffffffff802177ea:	74 0c                	je     ffffffff802177f8 <_RME_Thd_Sched_Rcv+0x18c>
ffffffff802177ec:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802177f3:	e9 89 01 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
ffffffff802177f8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802177fc:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217801:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217805:	48 89 c2             	mov    %rax,%rdx
ffffffff80217808:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021780c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217810:	48 01 d0             	add    %rdx,%rax
ffffffff80217813:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217817:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021781b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021781e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80217822:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80217826:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021782a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021782d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217831:	0f 94 c0             	sete   %al
ffffffff80217834:	0f b6 c0             	movzbl %al,%eax
ffffffff80217837:	48 85 c0             	test   %rax,%rax
ffffffff8021783a:	74 0c                	je     ffffffff80217848 <_RME_Thd_Sched_Rcv+0x1dc>
ffffffff8021783c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217843:	e9 39 01 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
ffffffff80217848:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021784c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217850:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217854:	0f 95 c0             	setne  %al
ffffffff80217857:	0f b6 c0             	movzbl %al,%eax
ffffffff8021785a:	48 85 c0             	test   %rax,%rax
ffffffff8021785d:	74 0c                	je     ffffffff8021786b <_RME_Thd_Sched_Rcv+0x1ff>
ffffffff8021785f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217866:	e9 16 01 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff8021786b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021786f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217873:	83 e0 20             	and    $0x20,%eax
ffffffff80217876:	48 85 c0             	test   %rax,%rax
ffffffff80217879:	0f 94 c0             	sete   %al
ffffffff8021787c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021787f:	48 85 c0             	test   %rax,%rax
ffffffff80217882:	74 0c                	je     ffffffff80217890 <_RME_Thd_Sched_Rcv+0x224>
ffffffff80217884:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021788b:	e9 f1 00 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
    
    /* Check if we are on the same core with the target thread */
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff80217890:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217894:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217898:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
ffffffff8021789c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802178a0:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffff802178a4:	e8 96 3f ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff802178a9:	48 39 c3             	cmp    %rax,%rbx
ffffffff802178ac:	74 0c                	je     ffffffff802178ba <_RME_Thd_Sched_Rcv+0x24e>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802178ae:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802178b5:	e9 c7 00 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if there are any notifications */
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
ffffffff802178ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802178be:	48 8b 50 78          	mov    0x78(%rax),%rdx
ffffffff802178c2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802178c6:	48 83 c0 78          	add    $0x78,%rax
ffffffff802178ca:	48 39 c2             	cmp    %rax,%rdx
ffffffff802178cd:	75 0c                	jne    ffffffff802178db <_RME_Thd_Sched_Rcv+0x26f>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_NOTIF;
ffffffff802178cf:	48 c7 c0 31 ff ff ff 	mov    $0xffffffffffffff31,%rax
ffffffff802178d6:	e9 a6 00 00 00       	jmp    ffffffff80217981 <_RME_Thd_Sched_Rcv+0x315>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Return one notification and delete it from the notification list */
    Thread=(struct RME_Thd_Struct*)(Scheduler->Sched.Event.Next-1U);
ffffffff802178db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802178df:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff802178e3:	48 83 e8 10          	sub    $0x10,%rax
ffffffff802178e7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
ffffffff802178eb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802178ef:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff802178f3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802178f7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802178fb:	48 89 d6             	mov    %rdx,%rsi
ffffffff802178fe:	48 89 c7             	mov    %rax,%rdi
ffffffff80217901:	e8 7e 54 ff ff       	call   ffffffff8020cd84 <_RME_List_Del>
    /* We need to do this because we are using this to detect whether the notification is sent */
    _RME_List_Crt(&(Thread->Sched.Notif));
ffffffff80217906:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021790a:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021790e:	48 89 c7             	mov    %rax,%rdi
ffffffff80217911:	e8 44 54 ff ff       	call   ffffffff8020cd5a <_RME_List_Crt>
    
    /* Exception pending */
    if(Thread->Sched.State==RME_THD_EXCPEND)
ffffffff80217916:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021791a:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff8021791e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217922:	75 2b                	jne    ffffffff8021794f <_RME_Thd_Sched_Rcv+0x2e3>
    {
        RME_COV_MARKER();
        
        Flag=RME_THD_EXCPEND_FLAG;
ffffffff80217924:	48 b8 00 00 00 00 00 	movabs $0x4000000000000000,%rax
ffffffff8021792b:	00 00 40 
ffffffff8021792e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        
        /* Is it also out of timeslice? */
        if(Thread->Sched.Slice==0U)
ffffffff80217932:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217936:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021793a:	48 85 c0             	test   %rax,%rax
ffffffff8021793d:	75 36                	jne    ffffffff80217975 <_RME_Thd_Sched_Rcv+0x309>
        {
            RME_COV_MARKER();
            
            Flag|=RME_THD_TIMEOUT_FLAG;
ffffffff8021793f:	48 b8 00 00 00 00 00 	movabs $0x2000000000000000,%rax
ffffffff80217946:	00 00 20 
ffffffff80217949:	48 09 45 e0          	or     %rax,-0x20(%rbp)
ffffffff8021794d:	eb 26                	jmp    ffffffff80217975 <_RME_Thd_Sched_Rcv+0x309>
            RME_COV_MARKER();
            /* No action required */
        }
    }
    /* Timeout */
    else if(Thread->Sched.State==RME_THD_TIMEOUT)
ffffffff8021794f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217953:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80217957:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021795b:	75 10                	jne    ffffffff8021796d <_RME_Thd_Sched_Rcv+0x301>
    {
        RME_COV_MARKER();
        
        Flag=RME_THD_TIMEOUT_FLAG;
ffffffff8021795d:	48 b8 00 00 00 00 00 	movabs $0x2000000000000000,%rax
ffffffff80217964:	00 00 20 
ffffffff80217967:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8021796b:	eb 08                	jmp    ffffffff80217975 <_RME_Thd_Sched_Rcv+0x309>
    /* Spurious notification, cause eliminated before this sched rcv */
    else
    {
        RME_COV_MARKER();
        
        Flag=0U;
ffffffff8021796d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80217974:	00 
    }
    
    /* Return the notification TID with the flags */
    return (rme_ret_t)(Thread->Sched.TID|Flag);
ffffffff80217975:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217979:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021797d:	48 0b 45 e0          	or     -0x20(%rbp),%rax
}
ffffffff80217981:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80217985:	c9                   	leave
ffffffff80217986:	c3                   	ret

ffffffff80217987 <_RME_Thd_Time_Xfer>:
static rme_ret_t _RME_Thd_Time_Xfer(struct RME_Cap_Cpt* Cpt,
                                    struct RME_Reg_Struct* Reg,
                                    rme_cid_t Cap_Thd_Dst,
                                    rme_cid_t Cap_Thd_Src,
                                    rme_ptr_t Time)
{
ffffffff80217987:	f3 0f 1e fa          	endbr64
ffffffff8021798b:	55                   	push   %rbp
ffffffff8021798c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021798f:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff80217993:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80217997:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8021799b:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff8021799f:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff802179a3:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
    struct RME_CPU_Local* Local;
    rme_ptr_t Time_Xfer;
    rme_ptr_t Type_Stat;
    
    /* We may allow transferring infinite time here */
    if(Time==0U)
ffffffff802179a7:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
ffffffff802179ac:	75 0c                	jne    ffffffff802179ba <_RME_Thd_Time_Xfer+0x33>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff802179ae:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802179b5:	e9 3c 07 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
ffffffff802179ba:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802179be:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802179c3:	48 85 c0             	test   %rax,%rax
ffffffff802179c6:	0f 85 98 00 00 00    	jne    ffffffff80217a64 <_RME_Thd_Time_Xfer+0xdd>
ffffffff802179cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802179d0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802179d4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff802179d8:	48 39 c2             	cmp    %rax,%rdx
ffffffff802179db:	0f 93 c0             	setae  %al
ffffffff802179de:	0f b6 c0             	movzbl %al,%eax
ffffffff802179e1:	48 85 c0             	test   %rax,%rax
ffffffff802179e4:	74 0c                	je     ffffffff802179f2 <_RME_Thd_Time_Xfer+0x6b>
ffffffff802179e6:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802179ed:	e9 04 07 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff802179f2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff802179f6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802179fa:	48 89 c2             	mov    %rax,%rdx
ffffffff802179fd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217a01:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217a05:	48 01 d0             	add    %rdx,%rax
ffffffff80217a08:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217a0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217a10:	48 8b 00             	mov    (%rax),%rax
ffffffff80217a13:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217a17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217a1b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217a1f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217a22:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217a26:	0f 94 c0             	sete   %al
ffffffff80217a29:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a2c:	48 85 c0             	test   %rax,%rax
ffffffff80217a2f:	74 0c                	je     ffffffff80217a3d <_RME_Thd_Time_Xfer+0xb6>
ffffffff80217a31:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217a38:	e9 b9 06 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a3d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217a41:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217a45:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217a49:	0f 95 c0             	setne  %al
ffffffff80217a4c:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a4f:	48 85 c0             	test   %rax,%rax
ffffffff80217a52:	0f 84 4c 01 00 00    	je     ffffffff80217ba4 <_RME_Thd_Time_Xfer+0x21d>
ffffffff80217a58:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217a5f:	e9 92 06 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a64:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217a68:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217a6c:	48 89 c2             	mov    %rax,%rdx
ffffffff80217a6f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217a73:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217a77:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217a7a:	0f 93 c0             	setae  %al
ffffffff80217a7d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217a80:	48 85 c0             	test   %rax,%rax
ffffffff80217a83:	74 0c                	je     ffffffff80217a91 <_RME_Thd_Time_Xfer+0x10a>
ffffffff80217a85:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217a8c:	e9 65 06 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217a91:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217a95:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217a99:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217a9d:	48 89 c2             	mov    %rax,%rdx
ffffffff80217aa0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217aa4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217aa8:	48 01 d0             	add    %rdx,%rax
ffffffff80217aab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217aaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217ab3:	48 8b 00             	mov    (%rax),%rax
ffffffff80217ab6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217aba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217abe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217ac2:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217ac5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217ac9:	0f 94 c0             	sete   %al
ffffffff80217acc:	0f b6 c0             	movzbl %al,%eax
ffffffff80217acf:	48 85 c0             	test   %rax,%rax
ffffffff80217ad2:	74 0c                	je     ffffffff80217ae0 <_RME_Thd_Time_Xfer+0x159>
ffffffff80217ad4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217adb:	e9 16 06 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217ae0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217ae4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217ae8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217aec:	0f 95 c0             	setne  %al
ffffffff80217aef:	0f b6 c0             	movzbl %al,%eax
ffffffff80217af2:	48 85 c0             	test   %rax,%rax
ffffffff80217af5:	74 0c                	je     ffffffff80217b03 <_RME_Thd_Time_Xfer+0x17c>
ffffffff80217af7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217afe:	e9 f3 05 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b03:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217b07:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217b0c:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217b13:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217b17:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217b1a:	0f 93 c0             	setae  %al
ffffffff80217b1d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b20:	48 85 c0             	test   %rax,%rax
ffffffff80217b23:	74 0c                	je     ffffffff80217b31 <_RME_Thd_Time_Xfer+0x1aa>
ffffffff80217b25:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217b2c:	e9 c5 05 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b31:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80217b35:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217b3a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217b3e:	48 89 c2             	mov    %rax,%rdx
ffffffff80217b41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217b45:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217b49:	48 01 d0             	add    %rdx,%rax
ffffffff80217b4c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80217b50:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217b54:	48 8b 00             	mov    (%rax),%rax
ffffffff80217b57:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217b5b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217b5f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217b63:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217b66:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217b6a:	0f 94 c0             	sete   %al
ffffffff80217b6d:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b70:	48 85 c0             	test   %rax,%rax
ffffffff80217b73:	74 0c                	je     ffffffff80217b81 <_RME_Thd_Time_Xfer+0x1fa>
ffffffff80217b75:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217b7c:	e9 75 05 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217b81:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217b85:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217b89:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217b8d:	0f 95 c0             	setne  %al
ffffffff80217b90:	0f b6 c0             	movzbl %al,%eax
ffffffff80217b93:	48 85 c0             	test   %rax,%rax
ffffffff80217b96:	74 0c                	je     ffffffff80217ba4 <_RME_Thd_Time_Xfer+0x21d>
ffffffff80217b98:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217b9f:	e9 52 05 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
                   struct RME_Cap_Thd*,Thd_Dst_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
ffffffff80217ba4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217ba8:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80217bad:	48 85 c0             	test   %rax,%rax
ffffffff80217bb0:	0f 85 98 00 00 00    	jne    ffffffff80217c4e <_RME_Thd_Time_Xfer+0x2c7>
ffffffff80217bb6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217bba:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217bbe:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80217bc2:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217bc5:	0f 93 c0             	setae  %al
ffffffff80217bc8:	0f b6 c0             	movzbl %al,%eax
ffffffff80217bcb:	48 85 c0             	test   %rax,%rax
ffffffff80217bce:	74 0c                	je     ffffffff80217bdc <_RME_Thd_Time_Xfer+0x255>
ffffffff80217bd0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217bd7:	e9 1a 05 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217bdc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217be0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217be4:	48 89 c2             	mov    %rax,%rdx
ffffffff80217be7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217beb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217bef:	48 01 d0             	add    %rdx,%rax
ffffffff80217bf2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217bf6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217bfa:	48 8b 00             	mov    (%rax),%rax
ffffffff80217bfd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217c01:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217c05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217c09:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217c0c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217c10:	0f 94 c0             	sete   %al
ffffffff80217c13:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c16:	48 85 c0             	test   %rax,%rax
ffffffff80217c19:	74 0c                	je     ffffffff80217c27 <_RME_Thd_Time_Xfer+0x2a0>
ffffffff80217c1b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217c22:	e9 cf 04 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217c2b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217c2f:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217c33:	0f 95 c0             	setne  %al
ffffffff80217c36:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c39:	48 85 c0             	test   %rax,%rax
ffffffff80217c3c:	0f 84 4c 01 00 00    	je     ffffffff80217d8e <_RME_Thd_Time_Xfer+0x407>
ffffffff80217c42:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217c49:	e9 a8 04 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c4e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217c52:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217c56:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c59:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217c5d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217c61:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217c64:	0f 93 c0             	setae  %al
ffffffff80217c67:	0f b6 c0             	movzbl %al,%eax
ffffffff80217c6a:	48 85 c0             	test   %rax,%rax
ffffffff80217c6d:	74 0c                	je     ffffffff80217c7b <_RME_Thd_Time_Xfer+0x2f4>
ffffffff80217c6f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217c76:	e9 7b 04 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217c7b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217c7f:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80217c83:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217c87:	48 89 c2             	mov    %rax,%rdx
ffffffff80217c8a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80217c8e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217c92:	48 01 d0             	add    %rdx,%rax
ffffffff80217c95:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217c99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217c9d:	48 8b 00             	mov    (%rax),%rax
ffffffff80217ca0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217ca4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217ca8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217cac:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217caf:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217cb3:	0f 94 c0             	sete   %al
ffffffff80217cb6:	0f b6 c0             	movzbl %al,%eax
ffffffff80217cb9:	48 85 c0             	test   %rax,%rax
ffffffff80217cbc:	74 0c                	je     ffffffff80217cca <_RME_Thd_Time_Xfer+0x343>
ffffffff80217cbe:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217cc5:	e9 2c 04 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217cca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217cce:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217cd2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217cd6:	0f 95 c0             	setne  %al
ffffffff80217cd9:	0f b6 c0             	movzbl %al,%eax
ffffffff80217cdc:	48 85 c0             	test   %rax,%rax
ffffffff80217cdf:	74 0c                	je     ffffffff80217ced <_RME_Thd_Time_Xfer+0x366>
ffffffff80217ce1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217ce8:	e9 09 04 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217ced:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217cf1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217cf6:	48 89 c2             	mov    %rax,%rdx
ffffffff80217cf9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217cfd:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217d01:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217d04:	0f 93 c0             	setae  %al
ffffffff80217d07:	0f b6 c0             	movzbl %al,%eax
ffffffff80217d0a:	48 85 c0             	test   %rax,%rax
ffffffff80217d0d:	74 0c                	je     ffffffff80217d1b <_RME_Thd_Time_Xfer+0x394>
ffffffff80217d0f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217d16:	e9 db 03 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217d1b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80217d1f:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80217d24:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217d28:	48 89 c2             	mov    %rax,%rdx
ffffffff80217d2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217d2f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217d33:	48 01 d0             	add    %rdx,%rax
ffffffff80217d36:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80217d3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217d3e:	48 8b 00             	mov    (%rax),%rax
ffffffff80217d41:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80217d45:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217d49:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217d4d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80217d50:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80217d54:	0f 94 c0             	sete   %al
ffffffff80217d57:	0f b6 c0             	movzbl %al,%eax
ffffffff80217d5a:	48 85 c0             	test   %rax,%rax
ffffffff80217d5d:	74 0c                	je     ffffffff80217d6b <_RME_Thd_Time_Xfer+0x3e4>
ffffffff80217d5f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217d66:	e9 8b 03 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
ffffffff80217d6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80217d6f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217d73:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff80217d77:	0f 95 c0             	setne  %al
ffffffff80217d7a:	0f b6 c0             	movzbl %al,%eax
ffffffff80217d7d:	48 85 c0             	test   %rax,%rax
ffffffff80217d80:	74 0c                	je     ffffffff80217d8e <_RME_Thd_Time_Xfer+0x407>
ffffffff80217d82:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217d89:	e9 68 03 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
                   struct RME_Cap_Thd*,Thd_Src_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
ffffffff80217d8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217d92:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217d96:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80217d9b:	48 85 c0             	test   %rax,%rax
ffffffff80217d9e:	0f 94 c0             	sete   %al
ffffffff80217da1:	0f b6 c0             	movzbl %al,%eax
ffffffff80217da4:	48 85 c0             	test   %rax,%rax
ffffffff80217da7:	74 0c                	je     ffffffff80217db5 <_RME_Thd_Time_Xfer+0x42e>
ffffffff80217da9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217db0:	e9 41 03 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
ffffffff80217db5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217db9:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80217dbd:	83 e0 40             	and    $0x40,%eax
ffffffff80217dc0:	48 85 c0             	test   %rax,%rax
ffffffff80217dc3:	0f 94 c0             	sete   %al
ffffffff80217dc6:	0f b6 c0             	movzbl %al,%eax
ffffffff80217dc9:	48 85 c0             	test   %rax,%rax
ffffffff80217dcc:	74 0c                	je     ffffffff80217dda <_RME_Thd_Time_Xfer+0x453>
ffffffff80217dce:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217dd5:	e9 1c 03 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>

    /* Check if the two threads are on the core that is accordance with what we are on */
    Local=RME_CPU_LOCAL();
ffffffff80217dda:	e8 60 3a ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80217ddf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
ffffffff80217de3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80217de7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217deb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Thd_Src->Sched.Local!=Local)
ffffffff80217def:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217df3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217df7:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80217dfb:	74 0c                	je     ffffffff80217e09 <_RME_Thd_Time_Xfer+0x482>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217dfd:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217e04:	e9 ed 02 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check if we have slices to transfer; 0 implies TIMEOUT, BLOCKED, or EXCPEND */
    if(Thd_Src->Sched.Slice==0U)
ffffffff80217e09:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e0d:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e11:	48 85 c0             	test   %rax,%rax
ffffffff80217e14:	75 0c                	jne    ffffffff80217e22 <_RME_Thd_Time_Xfer+0x49b>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217e16:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217e1d:	e9 d4 02 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
ffffffff80217e22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80217e26:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80217e2a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    
    if(Thd_Dst->Sched.Local!=Local)
ffffffff80217e2e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e32:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80217e36:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80217e3a:	74 0c                	je     ffffffff80217e48 <_RME_Thd_Time_Xfer+0x4c1>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_INVSTATE;
ffffffff80217e3c:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff80217e43:	e9 ae 02 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
        /* No action required */
    }

    /* The destination must never have higher maximum priority than the source,
     * unless it is a init thread which could be used as a black hole */
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80217e48:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e4c:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80217e50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e54:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80217e58:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e5b:	73 23                	jae    ffffffff80217e80 <_RME_Thd_Time_Xfer+0x4f9>
       (Thd_Dst->Sched.Slice!=RME_THD_INIT_TIME))
ffffffff80217e5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217e61:	48 8b 50 30          	mov    0x30(%rax),%rdx
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
ffffffff80217e65:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217e6c:	ff ff 7f 
ffffffff80217e6f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e72:	74 0c                	je     ffffffff80217e80 <_RME_Thd_Time_Xfer+0x4f9>
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_PRIO;
ffffffff80217e74:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff80217e7b:	e9 76 02 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Delegating from a normal thread */
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217e80:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217e84:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217e88:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217e8f:	ff ff 7f 
ffffffff80217e92:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217e95:	0f 82 e4 00 00 00    	jb     ffffffff80217f7f <_RME_Thd_Time_Xfer+0x5f8>
    {
        RME_COV_MARKER();

        /* Delegate all our time */
        if(Time>=RME_THD_INF_TIME)
ffffffff80217e9b:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217ea2:	ff ff 7f 
ffffffff80217ea5:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
ffffffff80217ea9:	73 0e                	jae    ffffffff80217eb9 <_RME_Thd_Time_Xfer+0x532>
        {
            RME_COV_MARKER();

            Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80217eab:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217eaf:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217eb3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217eb7:	eb 24                	jmp    ffffffff80217edd <_RME_Thd_Time_Xfer+0x556>
        /* Delegate some time, if not sufficient, clean up the source time */
        else
        {
            RME_COV_MARKER();
            
            if(Thd_Src->Sched.Slice>Time)
ffffffff80217eb9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ebd:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217ec1:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217ec5:	73 0a                	jae    ffffffff80217ed1 <_RME_Thd_Time_Xfer+0x54a>
            {
                RME_COV_MARKER();

                Time_Xfer=Time;
ffffffff80217ec7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217ecb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80217ecf:	eb 0c                	jmp    ffffffff80217edd <_RME_Thd_Time_Xfer+0x556>
            }
            else
            {
                RME_COV_MARKER();

                Time_Xfer=Thd_Src->Sched.Slice;
ffffffff80217ed1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217ed5:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217ed9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
            }
        }
        
        /* See if we are transferring to an infinite budget thread. If yes, we
         * are revoking timeslices; If not, this is a finite transfer */
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217edd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217ee1:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217ee5:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217eec:	ff ff 7f 
ffffffff80217eef:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217ef2:	72 6f                	jb     ffffffff80217f63 <_RME_Thd_Time_Xfer+0x5dc>
        {
            RME_COV_MARKER();
            
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
ffffffff80217ef4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217ef8:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217efc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217f00:	48 01 d0             	add    %rdx,%rax
ffffffff80217f03:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217f0a:	ff ff 7f 
ffffffff80217f0d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f10:	0f 92 c0             	setb   %al
ffffffff80217f13:	0f b6 c0             	movzbl %al,%eax
ffffffff80217f16:	48 85 c0             	test   %rax,%rax
ffffffff80217f19:	75 25                	jne    ffffffff80217f40 <_RME_Thd_Time_Xfer+0x5b9>
ffffffff80217f1b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f1f:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217f27:	48 01 c2             	add    %rax,%rdx
ffffffff80217f2a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f2e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217f32:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217f35:	0f 92 c0             	setb   %al
ffffffff80217f38:	0f b6 c0             	movzbl %al,%eax
ffffffff80217f3b:	48 85 c0             	test   %rax,%rax
ffffffff80217f3e:	74 0c                	je     ffffffff80217f4c <_RME_Thd_Time_Xfer+0x5c5>
ffffffff80217f40:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff80217f47:	e9 aa 01 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
            Thd_Dst->Sched.Slice+=Time_Xfer;
ffffffff80217f4c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f50:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217f54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80217f58:	48 01 c2             	add    %rax,%rdx
ffffffff80217f5b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217f5f:	48 89 50 30          	mov    %rdx,0x30(%rax)
        {
            RME_COV_MARKER();
            /* No action required */
        }
        
        Thd_Src->Sched.Slice-=Time_Xfer;
ffffffff80217f63:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217f67:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217f6b:	48 2b 45 e8          	sub    -0x18(%rbp),%rax
ffffffff80217f6f:	48 89 c2             	mov    %rax,%rdx
ffffffff80217f72:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217f76:	48 89 50 30          	mov    %rdx,0x30(%rax)
ffffffff80217f7a:	e9 e1 00 00 00       	jmp    ffffffff80218060 <_RME_Thd_Time_Xfer+0x6d9>
    else
    {
        RME_COV_MARKER();

        /* Infinite transfer to the destination */
        if(Time>=RME_THD_INF_TIME)
ffffffff80217f7f:	48 b8 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rax
ffffffff80217f86:	ff ff 7f 
ffffffff80217f89:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
ffffffff80217f8d:	73 62                	jae    ffffffff80217ff1 <_RME_Thd_Time_Xfer+0x66a>
        {
            RME_COV_MARKER();

            /* This transfer will revoke the infinite budget */
            if(Time==RME_THD_INIT_TIME)
ffffffff80217f8f:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217f96:	ff ff 7f 
ffffffff80217f99:	48 39 45 98          	cmp    %rax,-0x68(%rbp)
ffffffff80217f9d:	75 23                	jne    ffffffff80217fc2 <_RME_Thd_Time_Xfer+0x63b>
            {
                RME_COV_MARKER();
                
                /* Will not revoke, source is an init thread */
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
ffffffff80217f9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fa3:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217fa7:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80217fae:	ff ff 7f 
ffffffff80217fb1:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217fb4:	74 0c                	je     ffffffff80217fc2 <_RME_Thd_Time_Xfer+0x63b>
                {
                    RME_COV_MARKER();
                    
                    Thd_Src->Sched.Slice=0U;
ffffffff80217fb6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80217fba:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80217fc1:	00 
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* Set destination to infinite if it is not an init thread */
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
ffffffff80217fc2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217fc6:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80217fca:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80217fd1:	ff ff 7f 
ffffffff80217fd4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80217fd7:	0f 82 83 00 00 00    	jb     ffffffff80218060 <_RME_Thd_Time_Xfer+0x6d9>
            {
                RME_COV_MARKER();
                
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
ffffffff80217fdd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217fe1:	48 b9 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rcx
ffffffff80217fe8:	ff ff 7f 
ffffffff80217feb:	48 89 48 30          	mov    %rcx,0x30(%rax)
ffffffff80217fef:	eb 6f                	jmp    ffffffff80218060 <_RME_Thd_Time_Xfer+0x6d9>
        else
        {
            RME_COV_MARKER();

            /* Just increase the budget of the other thread - check first */
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
ffffffff80217ff1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80217ff5:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80217ff9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80217ffd:	48 01 d0             	add    %rdx,%rax
ffffffff80218000:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff80218007:	ff ff 7f 
ffffffff8021800a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021800d:	0f 92 c0             	setb   %al
ffffffff80218010:	0f b6 c0             	movzbl %al,%eax
ffffffff80218013:	48 85 c0             	test   %rax,%rax
ffffffff80218016:	75 25                	jne    ffffffff8021803d <_RME_Thd_Time_Xfer+0x6b6>
ffffffff80218018:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021801c:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80218020:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80218024:	48 01 c2             	add    %rax,%rdx
ffffffff80218027:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021802b:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021802f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218032:	0f 92 c0             	setb   %al
ffffffff80218035:	0f b6 c0             	movzbl %al,%eax
ffffffff80218038:	48 85 c0             	test   %rax,%rax
ffffffff8021803b:	74 0c                	je     ffffffff80218049 <_RME_Thd_Time_Xfer+0x6c2>
ffffffff8021803d:	48 c7 c0 30 ff ff ff 	mov    $0xffffffffffffff30,%rax
ffffffff80218044:	e9 ad 00 00 00       	jmp    ffffffff802180f6 <_RME_Thd_Time_Xfer+0x76f>
            Thd_Dst->Sched.Slice+=Time;
ffffffff80218049:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021804d:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80218051:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80218055:	48 01 c2             	add    %rax,%rdx
ffffffff80218058:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021805c:	48 89 50 30          	mov    %rdx,0x30(%rax)
        }
    }

    /* Is the source time used up? If yes, delete it from the run queue, and notify its 
     * parent. If it is not in the run queue, The state of the source must be BLOCKED. */
    if(Thd_Src->Sched.Slice==0U)
ffffffff80218060:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218064:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218068:	48 85 c0             	test   %rax,%rax
ffffffff8021806b:	75 31                	jne    ffffffff8021809e <_RME_Thd_Time_Xfer+0x717>
        
        /* If it is blocked or have an exception, we neither change its state nor send
         * the scheduler notification. It will be sent when the thread unblocks, or gets
         * its exception handled. The rule of the thumb is, we only send scheduler 
         * notifications when the thread really enter TIMEOUT or EXCPEND state. */
        if(Thd_Src->Sched.State==RME_THD_READY)
ffffffff8021806d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218071:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80218075:	48 85 c0             	test   %rax,%rax
ffffffff80218078:	75 24                	jne    ffffffff8021809e <_RME_Thd_Time_Xfer+0x717>
        {
            RME_COV_MARKER();
            
            /* Remove from runqueue */
            _RME_Run_Del(Thd_Src);
ffffffff8021807a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021807e:	48 89 c7             	mov    %rax,%rdi
ffffffff80218081:	e8 0c ae ff ff       	call   ffffffff80212e92 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
ffffffff80218086:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021808a:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80218091:	00 
            _RME_Run_Notif(Thd_Src);
ffffffff80218092:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218096:	48 89 c7             	mov    %rax,%rdi
ffffffff80218099:	e8 3f af ff ff       	call   ffffffff80212fdd <_RME_Run_Notif>
        /* No action required */
    }

    /* Now save the system call return value to the caller 
     * stack - how much time the destination have now */
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
ffffffff8021809e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802180a2:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802180a6:	48 89 c2             	mov    %rax,%rdx
ffffffff802180a9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802180ad:	48 89 d6             	mov    %rdx,%rsi
ffffffff802180b0:	48 89 c7             	mov    %rax,%rdi
ffffffff802180b3:	e8 1d f1 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>

    /* See what was the state of the destination thread. If it is timeout, then activate
     * it. If it is BLOCKED or EXCPEND, then leave it alone, and it will be activated
     * when it unblocks or when the exception is handled. */
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
ffffffff802180b8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802180bc:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802180c0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802180c4:	75 18                	jne    ffffffff802180de <_RME_Thd_Time_Xfer+0x757>
    {
        RME_COV_MARKER();

        /* Ready and add to runqueue */
        Thd_Dst->Sched.State=RME_THD_READY;
ffffffff802180c6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802180ca:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff802180d1:	00 
        _RME_Run_Ins(Thd_Dst);
ffffffff802180d2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802180d6:	48 89 c7             	mov    %rax,%rdi
ffffffff802180d9:	e8 04 ad ff ff       	call   ffffffff80212de2 <_RME_Run_Ins>
        RME_COV_MARKER();
    }
    
    /* All possible kernel send (scheduler notifications) done,
     * now pick the highest priority thread to run */
    _RME_Kern_High(Reg,Local);
ffffffff802180de:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff802180e2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802180e6:	48 89 d6             	mov    %rdx,%rsi
ffffffff802180e9:	48 89 c7             	mov    %rax,%rdi
ffffffff802180ec:	e8 d5 0d 00 00       	call   ffffffff80218ec6 <_RME_Kern_High>

    return 0;
ffffffff802180f1:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802180f6:	c9                   	leave
ffffffff802180f7:	c3                   	ret

ffffffff802180f8 <_RME_Thd_Swt>:
******************************************************************************/
static rme_ret_t _RME_Thd_Swt(struct RME_Cap_Cpt* Cpt,
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Thd,
                              rme_ptr_t Is_Yield)
{
ffffffff802180f8:	f3 0f 1e fa          	endbr64
ffffffff802180fc:	55                   	push   %rbp
ffffffff802180fd:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218100:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80218104:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80218108:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021810c:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80218110:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    struct RME_Thd_Struct* Thd_High;
    struct RME_CPU_Local* Local;
    struct RME_Thd_Struct* Thd_Cur;
    rme_ptr_t Type_Stat;

    Local=RME_CPU_LOCAL();
ffffffff80218114:	e8 26 37 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80218119:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff8021811d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218121:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218125:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* The caller have picked a thread to switch to */
    if(Cap_Thd<RME_CID_NULL)
ffffffff80218129:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff8021812e:	48 39 45 b8          	cmp    %rax,-0x48(%rbp)
ffffffff80218132:	0f 8d 21 03 00 00    	jge    ffffffff80218459 <_RME_Thd_Swt+0x361>
    {
        RME_COV_MARKER();
        
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
ffffffff80218138:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021813c:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218141:	48 85 c0             	test   %rax,%rax
ffffffff80218144:	0f 85 98 00 00 00    	jne    ffffffff802181e2 <_RME_Thd_Swt+0xea>
ffffffff8021814a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021814e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218152:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80218156:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218159:	0f 93 c0             	setae  %al
ffffffff8021815c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021815f:	48 85 c0             	test   %rax,%rax
ffffffff80218162:	74 0c                	je     ffffffff80218170 <_RME_Thd_Swt+0x78>
ffffffff80218164:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021816b:	e9 ab 03 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
ffffffff80218170:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218174:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218178:	48 89 c2             	mov    %rax,%rdx
ffffffff8021817b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021817f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218183:	48 01 d0             	add    %rdx,%rax
ffffffff80218186:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021818a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021818e:	48 8b 00             	mov    (%rax),%rax
ffffffff80218191:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80218195:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218199:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021819d:	0f b7 c0             	movzwl %ax,%eax
ffffffff802181a0:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802181a4:	0f 94 c0             	sete   %al
ffffffff802181a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802181aa:	48 85 c0             	test   %rax,%rax
ffffffff802181ad:	74 0c                	je     ffffffff802181bb <_RME_Thd_Swt+0xc3>
ffffffff802181af:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802181b6:	e9 60 03 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
ffffffff802181bb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802181bf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802181c3:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802181c7:	0f 95 c0             	setne  %al
ffffffff802181ca:	0f b6 c0             	movzbl %al,%eax
ffffffff802181cd:	48 85 c0             	test   %rax,%rax
ffffffff802181d0:	0f 84 4c 01 00 00    	je     ffffffff80218322 <_RME_Thd_Swt+0x22a>
ffffffff802181d6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802181dd:	e9 39 03 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
ffffffff802181e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802181e6:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802181ea:	48 89 c2             	mov    %rax,%rdx
ffffffff802181ed:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802181f1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802181f5:	48 39 c2             	cmp    %rax,%rdx
ffffffff802181f8:	0f 93 c0             	setae  %al
ffffffff802181fb:	0f b6 c0             	movzbl %al,%eax
ffffffff802181fe:	48 85 c0             	test   %rax,%rax
ffffffff80218201:	74 0c                	je     ffffffff8021820f <_RME_Thd_Swt+0x117>
ffffffff80218203:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021820a:	e9 0c 03 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
ffffffff8021820f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218213:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218217:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021821b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021821e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218222:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218226:	48 01 d0             	add    %rdx,%rax
ffffffff80218229:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021822d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218231:	48 8b 00             	mov    (%rax),%rax
ffffffff80218234:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80218238:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021823c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218240:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218243:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218247:	0f 94 c0             	sete   %al
ffffffff8021824a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021824d:	48 85 c0             	test   %rax,%rax
ffffffff80218250:	74 0c                	je     ffffffff8021825e <_RME_Thd_Swt+0x166>
ffffffff80218252:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218259:	e9 bd 02 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
ffffffff8021825e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218262:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218266:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021826a:	0f 95 c0             	setne  %al
ffffffff8021826d:	0f b6 c0             	movzbl %al,%eax
ffffffff80218270:	48 85 c0             	test   %rax,%rax
ffffffff80218273:	74 0c                	je     ffffffff80218281 <_RME_Thd_Swt+0x189>
ffffffff80218275:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021827c:	e9 9a 02 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
ffffffff80218281:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80218285:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021828a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021828d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218291:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218295:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218298:	0f 93 c0             	setae  %al
ffffffff8021829b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021829e:	48 85 c0             	test   %rax,%rax
ffffffff802182a1:	74 0c                	je     ffffffff802182af <_RME_Thd_Swt+0x1b7>
ffffffff802182a3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802182aa:	e9 6c 02 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
ffffffff802182af:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802182b3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802182b8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802182bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802182bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802182c3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802182c7:	48 01 d0             	add    %rdx,%rax
ffffffff802182ca:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802182ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802182d2:	48 8b 00             	mov    (%rax),%rax
ffffffff802182d5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff802182d9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802182dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802182e1:	0f b7 c0             	movzwl %ax,%eax
ffffffff802182e4:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802182e8:	0f 94 c0             	sete   %al
ffffffff802182eb:	0f b6 c0             	movzbl %al,%eax
ffffffff802182ee:	48 85 c0             	test   %rax,%rax
ffffffff802182f1:	74 0c                	je     ffffffff802182ff <_RME_Thd_Swt+0x207>
ffffffff802182f3:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802182fa:	e9 1c 02 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
ffffffff802182ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218303:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218307:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff8021830b:	0f 95 c0             	setne  %al
ffffffff8021830e:	0f b6 c0             	movzbl %al,%eax
ffffffff80218311:	48 85 c0             	test   %rax,%rax
ffffffff80218314:	74 0c                	je     ffffffff80218322 <_RME_Thd_Swt+0x22a>
ffffffff80218316:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021831d:	e9 f9 01 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
                       struct RME_Cap_Thd*,Thd_Cap_New,Type_Stat);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
ffffffff80218322:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218326:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021832a:	25 00 01 00 00       	and    $0x100,%eax
ffffffff8021832f:	48 85 c0             	test   %rax,%rax
ffffffff80218332:	0f 94 c0             	sete   %al
ffffffff80218335:	0f b6 c0             	movzbl %al,%eax
ffffffff80218338:	48 85 c0             	test   %rax,%rax
ffffffff8021833b:	74 0c                	je     ffffffff80218349 <_RME_Thd_Swt+0x251>
ffffffff8021833d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218344:	e9 d2 01 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
        /* See if we can do operation on this core */
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
ffffffff80218349:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021834d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218351:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        if(Thd_New->Sched.Local!=Local)
ffffffff80218355:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218359:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021835d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff80218361:	74 0c                	je     ffffffff8021836f <_RME_Thd_Swt+0x277>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff80218363:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff8021836a:	e9 ac 01 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
            
        /* See if we can yield to the thread */
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
ffffffff8021836f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218373:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80218377:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021837b:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff8021837f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218382:	74 0c                	je     ffffffff80218390 <_RME_Thd_Swt+0x298>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_PRIO;
ffffffff80218384:	48 c7 c0 33 ff ff ff 	mov    $0xffffffffffffff33,%rax
ffffffff8021838b:	e9 8b 01 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
            
        /* Check if the target thread state is valid */
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff80218390:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218394:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80218398:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021839c:	74 1c                	je     ffffffff802183ba <_RME_Thd_Swt+0x2c2>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff8021839e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802183a2:	48 8b 40 38          	mov    0x38(%rax),%rax
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
ffffffff802183a6:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802183aa:	74 0e                	je     ffffffff802183ba <_RME_Thd_Swt+0x2c2>
           (Thd_New->Sched.State==RME_THD_EXCPEND))
ffffffff802183ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802183b0:	48 8b 40 38          	mov    0x38(%rax),%rax
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
ffffffff802183b4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802183b8:	75 0c                	jne    ffffffff802183c6 <_RME_Thd_Swt+0x2ce>
        {
            RME_COV_MARKER();

            return RME_ERR_PTH_INVSTATE;
ffffffff802183ba:	48 c7 c0 34 ff ff ff 	mov    $0xffffffffffffff34,%rax
ffffffff802183c1:	e9 55 01 00 00       	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* See if we need to give up all our timeslices in this yield */
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff802183c6:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802183cb:	0f 84 00 01 00 00    	je     ffffffff802184d1 <_RME_Thd_Swt+0x3d9>
ffffffff802183d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183d5:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802183d9:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff802183e0:	ff ff 7f 
ffffffff802183e3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802183e6:	0f 82 e5 00 00 00    	jb     ffffffff802184d1 <_RME_Thd_Swt+0x3d9>
        {
            RME_COV_MARKER();
            
            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff802183ec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183f0:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff802183f7:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff802183f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802183fc:	48 89 c7             	mov    %rax,%rdi
ffffffff802183ff:	e8 8e aa ff ff       	call   ffffffff80212e92 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff80218404:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218408:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8021840f:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff80218410:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218414:	48 89 c7             	mov    %rax,%rdi
ffffffff80218417:	e8 c1 ab ff ff       	call   ffffffff80212fdd <_RME_Run_Notif>
            
            /* Because we have sent a notification, we could have unblocked a
             * thread at higher priority. Additionally, if the new thread is
             * the current thread, we are forced to switch to someone else,
             * because the current thread's timeslice must be exhausted. */
            Thd_High=_RME_Run_High(Local);
ffffffff8021841c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218420:	48 89 c7             	mov    %rax,%rdi
ffffffff80218423:	e8 33 ab ff ff       	call   ffffffff80212f5b <_RME_Run_High>
ffffffff80218428:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
ffffffff8021842c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218430:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80218434:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218438:	48 8b 52 40          	mov    0x40(%rdx),%rdx
ffffffff8021843c:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021843f:	72 0e                	jb     ffffffff8021844f <_RME_Thd_Swt+0x357>
ffffffff80218441:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218445:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218449:	0f 85 82 00 00 00    	jne    ffffffff802184d1 <_RME_Thd_Swt+0x3d9>
            {
                RME_COV_MARKER();

                Thd_New=Thd_High;
ffffffff8021844f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218453:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218457:	eb 78                	jmp    ffffffff802184d1 <_RME_Thd_Swt+0x3d9>
    else
    {
        RME_COV_MARKER();
        
        /* See if we need to give up all our timeslices in this yield */
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
ffffffff80218459:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8021845e:	74 49                	je     ffffffff802184a9 <_RME_Thd_Swt+0x3b1>
ffffffff80218460:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218464:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218468:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8021846f:	ff ff 7f 
ffffffff80218472:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218475:	72 32                	jb     ffffffff802184a9 <_RME_Thd_Swt+0x3b1>
        {
            RME_COV_MARKER();
            
            /* Deprive all timeslices and remove from runqueue */
            Thd_Cur->Sched.Slice=0U;
ffffffff80218477:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021847b:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218482:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80218483:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218487:	48 89 c7             	mov    %rax,%rdi
ffffffff8021848a:	e8 03 aa ff ff       	call   ffffffff80212e92 <_RME_Run_Del>
            
            /* Timeout and notify parent */
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
ffffffff8021848f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218493:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8021849a:	00 
            _RME_Run_Notif(Thd_Cur);
ffffffff8021849b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021849f:	48 89 c7             	mov    %rax,%rdi
ffffffff802184a2:	e8 36 ab ff ff       	call   ffffffff80212fdd <_RME_Run_Notif>
ffffffff802184a7:	eb 18                	jmp    ffffffff802184c1 <_RME_Thd_Swt+0x3c9>
            RME_COV_MARKER();
            
            /* This operation is just to make sure that if there are any other
             * thread at the same priority level, we're not switching to ourself */
            RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
            _RME_Run_Del(Thd_Cur);
ffffffff802184a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802184ad:	48 89 c7             	mov    %rax,%rdi
ffffffff802184b0:	e8 dd a9 ff ff       	call   ffffffff80212e92 <_RME_Run_Del>
            _RME_Run_Ins(Thd_Cur);
ffffffff802184b5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802184b9:	48 89 c7             	mov    %rax,%rdi
ffffffff802184bc:	e8 21 a9 ff ff       	call   ffffffff80212de2 <_RME_Run_Ins>
        }
        
        Thd_New=_RME_Run_High(Local);
ffffffff802184c1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802184c5:	48 89 c7             	mov    %rax,%rdi
ffffffff802184c8:	e8 8e aa ff ff       	call   ffffffff80212f5b <_RME_Run_High>
ffffffff802184cd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    }
    
    /* Now that we are successful, save the return value to the caller stack */
    __RME_Svc_Retval_Set(Reg,0);
ffffffff802184d1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802184d5:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802184da:	48 89 c7             	mov    %rax,%rdi
ffffffff802184dd:	e8 f3 ec 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>

    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
    /* We cannot call _RME_Kern_High because it picks some random thread. Instead,
     * we use a manual implementation that is faster than the _RME_Kern_High. */
    if(Thd_Cur==Thd_New)
ffffffff802184e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802184e6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff802184ea:	75 07                	jne    ffffffff802184f3 <_RME_Thd_Swt+0x3fb>
    {
        RME_COV_MARKER();
        
        return 0;
ffffffff802184ec:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802184f1:	eb 28                	jmp    ffffffff8021851b <_RME_Thd_Swt+0x423>
        RME_COV_MARKER();
        /* No action required */
    }
            
    /* We have a solid context switch at this point */
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff802184f3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802184f7:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff802184fb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802184ff:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218502:	48 89 c7             	mov    %rax,%rdi
ffffffff80218505:	e8 ad ab ff ff       	call   ffffffff802130b7 <_RME_Run_Swt>
    Local->Thd_Cur=Thd_New;
ffffffff8021850a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021850e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218512:	48 89 50 08          	mov    %rdx,0x8(%rax)

    return 0;
ffffffff80218516:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021851b:	c9                   	leave
ffffffff8021851c:	c3                   	ret

ffffffff8021851d <_RME_Sig_Boot_Crt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
rme_ret_t _RME_Sig_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Sig)
{
ffffffff8021851d:	f3 0f 1e fa          	endbr64
ffffffff80218521:	55                   	push   %rbp
ffffffff80218522:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218525:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218529:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021852d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80218531:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Crt;
    struct RME_Cap_Sig* Sig_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80218535:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218539:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021853e:	48 85 c0             	test   %rax,%rax
ffffffff80218541:	0f 85 98 00 00 00    	jne    ffffffff802185df <_RME_Sig_Boot_Crt+0xc2>
ffffffff80218547:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021854b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021854f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80218553:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218556:	0f 93 c0             	setae  %al
ffffffff80218559:	0f b6 c0             	movzbl %al,%eax
ffffffff8021855c:	48 85 c0             	test   %rax,%rax
ffffffff8021855f:	74 0c                	je     ffffffff8021856d <_RME_Sig_Boot_Crt+0x50>
ffffffff80218561:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218568:	e9 aa 02 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff8021856d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218571:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218575:	48 89 c2             	mov    %rax,%rdx
ffffffff80218578:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021857c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218580:	48 01 d0             	add    %rdx,%rax
ffffffff80218583:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218587:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021858b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021858e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218592:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218596:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021859a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021859d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802185a1:	0f 94 c0             	sete   %al
ffffffff802185a4:	0f b6 c0             	movzbl %al,%eax
ffffffff802185a7:	48 85 c0             	test   %rax,%rax
ffffffff802185aa:	74 0c                	je     ffffffff802185b8 <_RME_Sig_Boot_Crt+0x9b>
ffffffff802185ac:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802185b3:	e9 5f 02 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff802185b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802185bc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802185c0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802185c4:	0f 95 c0             	setne  %al
ffffffff802185c7:	0f b6 c0             	movzbl %al,%eax
ffffffff802185ca:	48 85 c0             	test   %rax,%rax
ffffffff802185cd:	0f 84 4c 01 00 00    	je     ffffffff8021871f <_RME_Sig_Boot_Crt+0x202>
ffffffff802185d3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802185da:	e9 38 02 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff802185df:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802185e3:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802185e7:	48 89 c2             	mov    %rax,%rdx
ffffffff802185ea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802185ee:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802185f2:	48 39 c2             	cmp    %rax,%rdx
ffffffff802185f5:	0f 93 c0             	setae  %al
ffffffff802185f8:	0f b6 c0             	movzbl %al,%eax
ffffffff802185fb:	48 85 c0             	test   %rax,%rax
ffffffff802185fe:	74 0c                	je     ffffffff8021860c <_RME_Sig_Boot_Crt+0xef>
ffffffff80218600:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218607:	e9 0b 02 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff8021860c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218610:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218614:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218618:	48 89 c2             	mov    %rax,%rdx
ffffffff8021861b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021861f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218623:	48 01 d0             	add    %rdx,%rax
ffffffff80218626:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021862a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021862e:	48 8b 00             	mov    (%rax),%rax
ffffffff80218631:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218635:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218639:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021863d:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218640:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218644:	0f 94 c0             	sete   %al
ffffffff80218647:	0f b6 c0             	movzbl %al,%eax
ffffffff8021864a:	48 85 c0             	test   %rax,%rax
ffffffff8021864d:	74 0c                	je     ffffffff8021865b <_RME_Sig_Boot_Crt+0x13e>
ffffffff8021864f:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218656:	e9 bc 01 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff8021865b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021865f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218663:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218667:	0f 95 c0             	setne  %al
ffffffff8021866a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021866d:	48 85 c0             	test   %rax,%rax
ffffffff80218670:	74 0c                	je     ffffffff8021867e <_RME_Sig_Boot_Crt+0x161>
ffffffff80218672:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218679:	e9 99 01 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff8021867e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218682:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218687:	48 89 c2             	mov    %rax,%rdx
ffffffff8021868a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021868e:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218692:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218695:	0f 93 c0             	setae  %al
ffffffff80218698:	0f b6 c0             	movzbl %al,%eax
ffffffff8021869b:	48 85 c0             	test   %rax,%rax
ffffffff8021869e:	74 0c                	je     ffffffff802186ac <_RME_Sig_Boot_Crt+0x18f>
ffffffff802186a0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802186a7:	e9 6b 01 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff802186ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802186b0:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802186b5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802186b9:	48 89 c2             	mov    %rax,%rdx
ffffffff802186bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802186c0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802186c4:	48 01 d0             	add    %rdx,%rax
ffffffff802186c7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802186cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802186cf:	48 8b 00             	mov    (%rax),%rax
ffffffff802186d2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802186d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802186da:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802186de:	0f b7 c0             	movzwl %ax,%eax
ffffffff802186e1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802186e5:	0f 94 c0             	sete   %al
ffffffff802186e8:	0f b6 c0             	movzbl %al,%eax
ffffffff802186eb:	48 85 c0             	test   %rax,%rax
ffffffff802186ee:	74 0c                	je     ffffffff802186fc <_RME_Sig_Boot_Crt+0x1df>
ffffffff802186f0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802186f7:	e9 1b 01 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff802186fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218700:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218704:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218708:	0f 95 c0             	setne  %al
ffffffff8021870b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021870e:	48 85 c0             	test   %rax,%rax
ffffffff80218711:	74 0c                	je     ffffffff8021871f <_RME_Sig_Boot_Crt+0x202>
ffffffff80218713:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021871a:	e9 f8 00 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
ffffffff8021871f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218723:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218727:	83 e0 01             	and    $0x1,%eax
ffffffff8021872a:	48 85 c0             	test   %rax,%rax
ffffffff8021872d:	0f 94 c0             	sete   %al
ffffffff80218730:	0f b6 c0             	movzbl %al,%eax
ffffffff80218733:	48 85 c0             	test   %rax,%rax
ffffffff80218736:	74 0c                	je     ffffffff80218744 <_RME_Sig_Boot_Crt+0x227>
ffffffff80218738:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021873f:	e9 d3 00 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80218744:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218748:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021874c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80218750:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218753:	0f 93 c0             	setae  %al
ffffffff80218756:	0f b6 c0             	movzbl %al,%eax
ffffffff80218759:	48 85 c0             	test   %rax,%rax
ffffffff8021875c:	74 0c                	je     ffffffff8021876a <_RME_Sig_Boot_Crt+0x24d>
ffffffff8021875e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218765:	e9 ad 00 00 00       	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff8021876a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021876e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218772:	48 89 c2             	mov    %rax,%rdx
ffffffff80218775:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218779:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021877d:	48 01 d0             	add    %rdx,%rax
ffffffff80218780:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80218784:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218788:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021878f:	00 00 00 
ffffffff80218792:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80218797:	48 89 c7             	mov    %rax,%rdi
ffffffff8021879a:	e8 bf 3f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021879f:	48 85 c0             	test   %rax,%rax
ffffffff802187a2:	0f 94 c0             	sete   %al
ffffffff802187a5:	0f b6 c0             	movzbl %al,%eax
ffffffff802187a8:	48 85 c0             	test   %rax,%rax
ffffffff802187ab:	74 09                	je     ffffffff802187b6 <_RME_Sig_Boot_Crt+0x299>
ffffffff802187ad:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff802187b4:	eb 61                	jmp    ffffffff80218817 <_RME_Sig_Boot_Crt+0x2fa>
ffffffff802187b6:	48 8b 15 43 18 01 00 	mov    0x11843(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff802187bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187c1:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Header init */
    Sig_Crt->Head.Root_Ref=1U;
ffffffff802187c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187c9:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff802187d0:	00 
    Sig_Crt->Head.Object=0U;
ffffffff802187d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187d5:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff802187dc:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff802187dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187e1:	48 c7 40 10 3f 00 00 	movq   $0x3f,0x10(%rax)
ffffffff802187e8:	00 
    
    /* Info init */
    Sig_Crt->Sig_Num=0U;
ffffffff802187e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187ed:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff802187f4:	00 
    Sig_Crt->Thd=RME_NULL;
ffffffff802187f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802187f9:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218800:	00 

    /* Establish cap */
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80218801:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218805:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff8021880c:	00 08 00 
ffffffff8021880f:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_SIG,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80218812:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218817:	c9                   	leave
ffffffff80218818:	c3                   	ret

ffffffff80218819 <_RME_Sig_Crt>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Crt(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Sig)
{
ffffffff80218819:	f3 0f 1e fa          	endbr64
ffffffff8021881d:	55                   	push   %rbp
ffffffff8021881e:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218821:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218825:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218829:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021882d:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Sig* Sig_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80218831:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218835:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021883a:	48 85 c0             	test   %rax,%rax
ffffffff8021883d:	0f 85 98 00 00 00    	jne    ffffffff802188db <_RME_Sig_Crt+0xc2>
ffffffff80218843:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218847:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021884b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021884f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218852:	0f 93 c0             	setae  %al
ffffffff80218855:	0f b6 c0             	movzbl %al,%eax
ffffffff80218858:	48 85 c0             	test   %rax,%rax
ffffffff8021885b:	74 0c                	je     ffffffff80218869 <_RME_Sig_Crt+0x50>
ffffffff8021885d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218864:	e9 aa 02 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
ffffffff80218869:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021886d:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218871:	48 89 c2             	mov    %rax,%rdx
ffffffff80218874:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218878:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021887c:	48 01 d0             	add    %rdx,%rax
ffffffff8021887f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218883:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218887:	48 8b 00             	mov    (%rax),%rax
ffffffff8021888a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021888e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218892:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218896:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218899:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021889d:	0f 94 c0             	sete   %al
ffffffff802188a0:	0f b6 c0             	movzbl %al,%eax
ffffffff802188a3:	48 85 c0             	test   %rax,%rax
ffffffff802188a6:	74 0c                	je     ffffffff802188b4 <_RME_Sig_Crt+0x9b>
ffffffff802188a8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802188af:	e9 5f 02 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
ffffffff802188b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802188b8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802188bc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802188c0:	0f 95 c0             	setne  %al
ffffffff802188c3:	0f b6 c0             	movzbl %al,%eax
ffffffff802188c6:	48 85 c0             	test   %rax,%rax
ffffffff802188c9:	0f 84 4c 01 00 00    	je     ffffffff80218a1b <_RME_Sig_Crt+0x202>
ffffffff802188cf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802188d6:	e9 38 02 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
ffffffff802188db:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802188df:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802188e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802188e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802188ea:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802188ee:	48 39 c2             	cmp    %rax,%rdx
ffffffff802188f1:	0f 93 c0             	setae  %al
ffffffff802188f4:	0f b6 c0             	movzbl %al,%eax
ffffffff802188f7:	48 85 c0             	test   %rax,%rax
ffffffff802188fa:	74 0c                	je     ffffffff80218908 <_RME_Sig_Crt+0xef>
ffffffff802188fc:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218903:	e9 0b 02 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
ffffffff80218908:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021890c:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218910:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218914:	48 89 c2             	mov    %rax,%rdx
ffffffff80218917:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021891b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021891f:	48 01 d0             	add    %rdx,%rax
ffffffff80218922:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218926:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021892a:	48 8b 00             	mov    (%rax),%rax
ffffffff8021892d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218931:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218935:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218939:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021893c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218940:	0f 94 c0             	sete   %al
ffffffff80218943:	0f b6 c0             	movzbl %al,%eax
ffffffff80218946:	48 85 c0             	test   %rax,%rax
ffffffff80218949:	74 0c                	je     ffffffff80218957 <_RME_Sig_Crt+0x13e>
ffffffff8021894b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218952:	e9 bc 01 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
ffffffff80218957:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021895b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021895f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218963:	0f 95 c0             	setne  %al
ffffffff80218966:	0f b6 c0             	movzbl %al,%eax
ffffffff80218969:	48 85 c0             	test   %rax,%rax
ffffffff8021896c:	74 0c                	je     ffffffff8021897a <_RME_Sig_Crt+0x161>
ffffffff8021896e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218975:	e9 99 01 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
ffffffff8021897a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021897e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218983:	48 89 c2             	mov    %rax,%rdx
ffffffff80218986:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021898a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021898e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218991:	0f 93 c0             	setae  %al
ffffffff80218994:	0f b6 c0             	movzbl %al,%eax
ffffffff80218997:	48 85 c0             	test   %rax,%rax
ffffffff8021899a:	74 0c                	je     ffffffff802189a8 <_RME_Sig_Crt+0x18f>
ffffffff8021899c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802189a3:	e9 6b 01 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
ffffffff802189a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802189ac:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802189b1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802189b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802189b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802189bc:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802189c0:	48 01 d0             	add    %rdx,%rax
ffffffff802189c3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802189c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802189cb:	48 8b 00             	mov    (%rax),%rax
ffffffff802189ce:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802189d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802189d6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802189da:	0f b7 c0             	movzwl %ax,%eax
ffffffff802189dd:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802189e1:	0f 94 c0             	sete   %al
ffffffff802189e4:	0f b6 c0             	movzbl %al,%eax
ffffffff802189e7:	48 85 c0             	test   %rax,%rax
ffffffff802189ea:	74 0c                	je     ffffffff802189f8 <_RME_Sig_Crt+0x1df>
ffffffff802189ec:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802189f3:	e9 1b 01 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
ffffffff802189f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802189fc:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218a00:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218a04:	0f 95 c0             	setne  %al
ffffffff80218a07:	0f b6 c0             	movzbl %al,%eax
ffffffff80218a0a:	48 85 c0             	test   %rax,%rax
ffffffff80218a0d:	74 0c                	je     ffffffff80218a1b <_RME_Sig_Crt+0x202>
ffffffff80218a0f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218a16:	e9 f8 00 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80218a1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218a1f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218a23:	83 e0 01             	and    $0x1,%eax
ffffffff80218a26:	48 85 c0             	test   %rax,%rax
ffffffff80218a29:	0f 94 c0             	sete   %al
ffffffff80218a2c:	0f b6 c0             	movzbl %al,%eax
ffffffff80218a2f:	48 85 c0             	test   %rax,%rax
ffffffff80218a32:	74 0c                	je     ffffffff80218a40 <_RME_Sig_Crt+0x227>
ffffffff80218a34:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218a3b:	e9 d3 00 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff80218a40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218a44:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218a48:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80218a4c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218a4f:	0f 93 c0             	setae  %al
ffffffff80218a52:	0f b6 c0             	movzbl %al,%eax
ffffffff80218a55:	48 85 c0             	test   %rax,%rax
ffffffff80218a58:	74 0c                	je     ffffffff80218a66 <_RME_Sig_Crt+0x24d>
ffffffff80218a5a:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218a61:	e9 ad 00 00 00       	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
ffffffff80218a66:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218a6a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218a6e:	48 89 c2             	mov    %rax,%rdx
ffffffff80218a71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218a75:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218a79:	48 01 d0             	add    %rdx,%rax
ffffffff80218a7c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Sig_Crt);
ffffffff80218a80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218a84:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff80218a8b:	00 00 00 
ffffffff80218a8e:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80218a93:	48 89 c7             	mov    %rax,%rdi
ffffffff80218a96:	e8 c3 3c ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218a9b:	48 85 c0             	test   %rax,%rax
ffffffff80218a9e:	0f 94 c0             	sete   %al
ffffffff80218aa1:	0f b6 c0             	movzbl %al,%eax
ffffffff80218aa4:	48 85 c0             	test   %rax,%rax
ffffffff80218aa7:	74 09                	je     ffffffff80218ab2 <_RME_Sig_Crt+0x299>
ffffffff80218aa9:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80218ab0:	eb 61                	jmp    ffffffff80218b13 <_RME_Sig_Crt+0x2fa>
ffffffff80218ab2:	48 8b 15 47 15 01 00 	mov    0x11547(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff80218ab9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218abd:	48 89 50 20          	mov    %rdx,0x20(%rax)

    /* Header init */
    Sig_Crt->Head.Root_Ref=0U;
ffffffff80218ac1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218ac5:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80218acc:	00 
    Sig_Crt->Head.Object=0U;
ffffffff80218acd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218ad1:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80218ad8:	00 
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
ffffffff80218ad9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218add:	48 c7 40 10 3f 00 00 	movq   $0x3f,0x10(%rax)
ffffffff80218ae4:	00 
    
    /* Info init */
    Sig_Crt->Sig_Num=0U;
ffffffff80218ae5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218ae9:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff80218af0:	00 
    Sig_Crt->Thd=0U;
ffffffff80218af1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218af5:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80218afc:	00 
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
ffffffff80218afd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218b01:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff80218b08:	00 08 00 
ffffffff80218b0b:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_SIG,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff80218b0e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218b13:	c9                   	leave
ffffffff80218b14:	c3                   	ret

ffffffff80218b15 <_RME_Sig_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Sig)
{
ffffffff80218b15:	f3 0f 1e fa          	endbr64
ffffffff80218b19:	55                   	push   %rbp
ffffffff80218b1a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218b1d:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80218b21:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80218b25:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80218b29:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Sig* Sig_Del;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80218b2d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218b31:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80218b36:	48 85 c0             	test   %rax,%rax
ffffffff80218b39:	0f 85 98 00 00 00    	jne    ffffffff80218bd7 <_RME_Sig_Del+0xc2>
ffffffff80218b3f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218b43:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218b47:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80218b4b:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218b4e:	0f 93 c0             	setae  %al
ffffffff80218b51:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b54:	48 85 c0             	test   %rax,%rax
ffffffff80218b57:	74 0c                	je     ffffffff80218b65 <_RME_Sig_Del+0x50>
ffffffff80218b59:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218b60:	e9 5f 03 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218b65:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218b69:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218b6d:	48 89 c2             	mov    %rax,%rdx
ffffffff80218b70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218b74:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218b78:	48 01 d0             	add    %rdx,%rax
ffffffff80218b7b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218b7f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218b83:	48 8b 00             	mov    (%rax),%rax
ffffffff80218b86:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218b8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218b8e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218b92:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218b95:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218b99:	0f 94 c0             	sete   %al
ffffffff80218b9c:	0f b6 c0             	movzbl %al,%eax
ffffffff80218b9f:	48 85 c0             	test   %rax,%rax
ffffffff80218ba2:	74 0c                	je     ffffffff80218bb0 <_RME_Sig_Del+0x9b>
ffffffff80218ba4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218bab:	e9 14 03 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218bb0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218bb4:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218bb8:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218bbc:	0f 95 c0             	setne  %al
ffffffff80218bbf:	0f b6 c0             	movzbl %al,%eax
ffffffff80218bc2:	48 85 c0             	test   %rax,%rax
ffffffff80218bc5:	0f 84 4c 01 00 00    	je     ffffffff80218d17 <_RME_Sig_Del+0x202>
ffffffff80218bcb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218bd2:	e9 ed 02 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218bd7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218bdb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218bdf:	48 89 c2             	mov    %rax,%rdx
ffffffff80218be2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218be6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218bea:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218bed:	0f 93 c0             	setae  %al
ffffffff80218bf0:	0f b6 c0             	movzbl %al,%eax
ffffffff80218bf3:	48 85 c0             	test   %rax,%rax
ffffffff80218bf6:	74 0c                	je     ffffffff80218c04 <_RME_Sig_Del+0xef>
ffffffff80218bf8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218bff:	e9 c0 02 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218c04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218c08:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80218c0c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218c10:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218c17:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218c1b:	48 01 d0             	add    %rdx,%rax
ffffffff80218c1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218c22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c26:	48 8b 00             	mov    (%rax),%rax
ffffffff80218c29:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218c2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218c31:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218c35:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218c38:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218c3c:	0f 94 c0             	sete   %al
ffffffff80218c3f:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c42:	48 85 c0             	test   %rax,%rax
ffffffff80218c45:	74 0c                	je     ffffffff80218c53 <_RME_Sig_Del+0x13e>
ffffffff80218c47:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218c4e:	e9 71 02 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218c53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218c57:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218c5b:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218c5f:	0f 95 c0             	setne  %al
ffffffff80218c62:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c65:	48 85 c0             	test   %rax,%rax
ffffffff80218c68:	74 0c                	je     ffffffff80218c76 <_RME_Sig_Del+0x161>
ffffffff80218c6a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218c71:	e9 4e 02 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218c76:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218c7a:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218c7f:	48 89 c2             	mov    %rax,%rdx
ffffffff80218c82:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218c86:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218c8a:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218c8d:	0f 93 c0             	setae  %al
ffffffff80218c90:	0f b6 c0             	movzbl %al,%eax
ffffffff80218c93:	48 85 c0             	test   %rax,%rax
ffffffff80218c96:	74 0c                	je     ffffffff80218ca4 <_RME_Sig_Del+0x18f>
ffffffff80218c98:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218c9f:	e9 20 02 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218ca4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80218ca8:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80218cad:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218cb1:	48 89 c2             	mov    %rax,%rdx
ffffffff80218cb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218cb8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218cbc:	48 01 d0             	add    %rdx,%rax
ffffffff80218cbf:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80218cc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218cc7:	48 8b 00             	mov    (%rax),%rax
ffffffff80218cca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218cce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218cd2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218cd6:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218cd9:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218cdd:	0f 94 c0             	sete   %al
ffffffff80218ce0:	0f b6 c0             	movzbl %al,%eax
ffffffff80218ce3:	48 85 c0             	test   %rax,%rax
ffffffff80218ce6:	74 0c                	je     ffffffff80218cf4 <_RME_Sig_Del+0x1df>
ffffffff80218ce8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218cef:	e9 d0 01 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218cf4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218cf8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218cfc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80218d00:	0f 95 c0             	setne  %al
ffffffff80218d03:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d06:	48 85 c0             	test   %rax,%rax
ffffffff80218d09:	74 0c                	je     ffffffff80218d17 <_RME_Sig_Del+0x202>
ffffffff80218d0b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218d12:	e9 ad 01 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff80218d17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218d1b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218d1f:	83 e0 02             	and    $0x2,%eax
ffffffff80218d22:	48 85 c0             	test   %rax,%rax
ffffffff80218d25:	0f 94 c0             	sete   %al
ffffffff80218d28:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d2b:	48 85 c0             	test   %rax,%rax
ffffffff80218d2e:	74 0c                	je     ffffffff80218d3c <_RME_Sig_Del+0x227>
ffffffff80218d30:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218d37:	e9 88 01 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff80218d3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218d40:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80218d44:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80218d48:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218d4b:	0f 93 c0             	setae  %al
ffffffff80218d4e:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d51:	48 85 c0             	test   %rax,%rax
ffffffff80218d54:	74 0c                	je     ffffffff80218d62 <_RME_Sig_Del+0x24d>
ffffffff80218d56:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218d5d:	e9 62 01 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218d62:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80218d66:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218d6a:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218d71:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80218d75:	48 01 d0             	add    %rdx,%rax
ffffffff80218d78:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
ffffffff80218d7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218d80:	48 8b 00             	mov    (%rax),%rax
ffffffff80218d83:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80218d87:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218d8b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80218d8f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80218d92:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80218d96:	0f 95 c0             	setne  %al
ffffffff80218d99:	0f b6 c0             	movzbl %al,%eax
ffffffff80218d9c:	48 85 c0             	test   %rax,%rax
ffffffff80218d9f:	74 0c                	je     ffffffff80218dad <_RME_Sig_Del+0x298>
ffffffff80218da1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218da8:	e9 17 01 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218dad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218db1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218db5:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80218db9:	0f 95 c0             	setne  %al
ffffffff80218dbc:	0f b6 c0             	movzbl %al,%eax
ffffffff80218dbf:	48 85 c0             	test   %rax,%rax
ffffffff80218dc2:	74 0c                	je     ffffffff80218dd0 <_RME_Sig_Del+0x2bb>
ffffffff80218dc4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218dcb:	e9 f4 00 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218dd0:	48 8b 15 29 12 01 00 	mov    0x11229(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff80218dd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218ddb:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80218ddf:	48 29 c2             	sub    %rax,%rdx
ffffffff80218de2:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80218de6:	0f 96 c0             	setbe  %al
ffffffff80218de9:	0f b6 c0             	movzbl %al,%eax
ffffffff80218dec:	48 98                	cltq
ffffffff80218dee:	48 85 c0             	test   %rax,%rax
ffffffff80218df1:	74 0c                	je     ffffffff80218dff <_RME_Sig_Del+0x2ea>
ffffffff80218df3:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80218dfa:	e9 c5 00 00 00       	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
ffffffff80218dff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e03:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218e07:	48 85 c0             	test   %rax,%rax
ffffffff80218e0a:	0f 95 c0             	setne  %al
ffffffff80218e0d:	0f b6 c0             	movzbl %al,%eax
ffffffff80218e10:	48 85 c0             	test   %rax,%rax
ffffffff80218e13:	74 41                	je     ffffffff80218e56 <_RME_Sig_Del+0x341>
ffffffff80218e15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218e19:	89 c0                	mov    %eax,%eax
ffffffff80218e1b:	48 85 c0             	test   %rax,%rax
ffffffff80218e1e:	0f 94 c0             	sete   %al
ffffffff80218e21:	0f b6 c0             	movzbl %al,%eax
ffffffff80218e24:	48 85 c0             	test   %rax,%rax
ffffffff80218e27:	74 24                	je     ffffffff80218e4d <_RME_Sig_Del+0x338>
ffffffff80218e29:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80218e30:	00 ff ff 
ffffffff80218e33:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80218e37:	48 89 c2             	mov    %rax,%rdx
ffffffff80218e3a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e3e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218e42:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218e45:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e48:	e8 11 39 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218e4d:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80218e54:	eb 6e                	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>

    /* Check if the signal endpoint is currently used and cannot be deleted */
    if(Sig_Del->Thd!=(void*)0U)
ffffffff80218e56:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e5a:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218e5e:	48 85 c0             	test   %rax,%rax
ffffffff80218e61:	74 2d                	je     ffffffff80218e90 <_RME_Sig_Del+0x37b>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Sig_Del,Type_Stat);
ffffffff80218e63:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff80218e6a:	00 ff ff 
ffffffff80218e6d:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80218e71:	48 89 c2             	mov    %rax,%rdx
ffffffff80218e74:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e78:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218e7c:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218e7f:	48 89 c7             	mov    %rax,%rdi
ffffffff80218e82:	e8 d7 38 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff80218e87:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff80218e8e:	eb 34                	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Sig_Del,Type_Stat);
ffffffff80218e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218e94:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218e98:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80218e9d:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218ea0:	48 89 c7             	mov    %rax,%rdi
ffffffff80218ea3:	e8 b6 38 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80218ea8:	48 85 c0             	test   %rax,%rax
ffffffff80218eab:	0f 94 c0             	sete   %al
ffffffff80218eae:	0f b6 c0             	movzbl %al,%eax
ffffffff80218eb1:	48 85 c0             	test   %rax,%rax
ffffffff80218eb4:	74 09                	je     ffffffff80218ebf <_RME_Sig_Del+0x3aa>
ffffffff80218eb6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80218ebd:	eb 05                	jmp    ffffffff80218ec4 <_RME_Sig_Del+0x3af>
    
    return 0;
ffffffff80218ebf:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80218ec4:	c9                   	leave
ffffffff80218ec5:	c3                   	ret

ffffffff80218ec6 <_RME_Kern_High>:
Output      : volatile struct RME_Reg_Struct* Reg - The updated register set.
Return      : None.
******************************************************************************/
void _RME_Kern_High(struct RME_Reg_Struct* Reg,
                    struct RME_CPU_Local* Local)
{
ffffffff80218ec6:	f3 0f 1e fa          	endbr64
ffffffff80218eca:	55                   	push   %rbp
ffffffff80218ecb:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218ece:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80218ed2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80218ed6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    struct RME_Thd_Struct* Thd_New;
    struct RME_Thd_Struct* Thd_Cur;

    Thd_New=_RME_Run_High(Local);
ffffffff80218eda:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218ede:	48 89 c7             	mov    %rax,%rdi
ffffffff80218ee1:	e8 75 a0 ff ff       	call   ffffffff80212f5b <_RME_Run_High>
ffffffff80218ee6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_ASSERT(Thd_New!=(void*)RME_NULL);
    Thd_Cur=Local->Thd_Cur;
ffffffff80218eea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218eee:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80218ef2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Are these two threads the same? */
    if(Thd_New==Thd_Cur)
ffffffff80218ef6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218efa:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff80218efe:	74 47                	je     ffffffff80218f47 <_RME_Kern_High+0x81>
        /* No action required */
    }

    /* Check if we need to do the context switch regardless of priority
     * because the current thread is not ready yet. */
    if(Thd_Cur->Sched.State==RME_THD_READY)
ffffffff80218f00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80218f04:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80218f08:	48 85 c0             	test   %rax,%rax
ffffffff80218f0b:	75 15                	jne    ffffffff80218f22 <_RME_Kern_High+0x5c>
    {
        RME_COV_MARKER();

        /* Check priority to see if the switch is necessary */
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
ffffffff80218f0d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80218f11:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80218f15:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80218f19:	48 8b 52 40          	mov    0x40(%rdx),%rdx
ffffffff80218f1d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218f20:	73 28                	jae    ffffffff80218f4a <_RME_Kern_High+0x84>
    }

    /* We will have a solid context switch on this point. The current 
     * thread is not necessarily READY, it could be EXCPEND as well. */
    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
ffffffff80218f22:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80218f26:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80218f2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80218f2e:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218f31:	48 89 c7             	mov    %rax,%rdi
ffffffff80218f34:	e8 7e a1 ff ff       	call   ffffffff802130b7 <_RME_Run_Swt>
    Local->Thd_Cur=Thd_New;
ffffffff80218f39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f3d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80218f41:	48 89 50 08          	mov    %rdx,0x8(%rax)
ffffffff80218f45:	eb 04                	jmp    ffffffff80218f4b <_RME_Kern_High+0x85>
        return;
ffffffff80218f47:	90                   	nop
ffffffff80218f48:	eb 01                	jmp    ffffffff80218f4b <_RME_Kern_High+0x85>
            return;
ffffffff80218f4a:	90                   	nop
}
ffffffff80218f4b:	c9                   	leave
ffffffff80218f4c:	c3                   	ret

ffffffff80218f4d <_RME_Kern_Snd>:
Input       : struct RME_Cap_Sig* Cap_Sig - The signal root capability.
Output      : None.
Return      : rme_ret_t - If successful, 0, or an error code.
******************************************************************************/
rme_ret_t _RME_Kern_Snd(struct RME_Cap_Sig* Cap_Sig)
{
ffffffff80218f4d:	f3 0f 1e fa          	endbr64
ffffffff80218f51:	55                   	push   %rbp
ffffffff80218f52:	48 89 e5             	mov    %rsp,%rbp
ffffffff80218f55:	53                   	push   %rbx
ffffffff80218f56:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80218f5a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
    rme_ptr_t Unblock;
    struct RME_Thd_Struct* Thd_Sig;
    
    Thd_Sig=Cap_Sig->Thd;
ffffffff80218f5e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80218f62:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218f66:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* If and only if we are calling from the same core do we unblock */
    if(Thd_Sig!=(void*)RME_NULL)
ffffffff80218f6a:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80218f6f:	74 26                	je     ffffffff80218f97 <_RME_Kern_Snd+0x4a>
    {
        RME_COV_MARKER();

        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
ffffffff80218f71:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218f75:	48 8b 58 28          	mov    0x28(%rax),%rbx
ffffffff80218f79:	e8 c1 28 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80218f7e:	48 39 c3             	cmp    %rax,%rbx
ffffffff80218f81:	75 0a                	jne    ffffffff80218f8d <_RME_Kern_Snd+0x40>
        {
            RME_COV_MARKER();

            Unblock=1U;
ffffffff80218f83:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
ffffffff80218f8a:	00 
ffffffff80218f8b:	eb 12                	jmp    ffffffff80218f9f <_RME_Kern_Snd+0x52>
        }
        else
        {
            RME_COV_MARKER();

            Unblock=0U;
ffffffff80218f8d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80218f94:	00 
ffffffff80218f95:	eb 08                	jmp    ffffffff80218f9f <_RME_Kern_Snd+0x52>
    }
    else
    {
        RME_COV_MARKER();

        Unblock=0U;
ffffffff80218f97:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80218f9e:	00 
    }

    if(Unblock!=0U)
ffffffff80218f9f:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80218fa4:	74 65                	je     ffffffff8021900b <_RME_Kern_Snd+0xbe>

        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value to one as always, Even if we were specifying
         * multi-receive. This is because other cores may reduce the count
         * to zero while we are doing this. */
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
ffffffff80218fa6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218faa:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80218fb1:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80218fb6:	48 89 c7             	mov    %rax,%rdi
ffffffff80218fb9:	e8 17 e2 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
        
        /* See if the thread still have time left */
        if(Thd_Sig->Sched.Slice!=0U)
ffffffff80218fbe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218fc2:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80218fc6:	48 85 c0             	test   %rax,%rax
ffffffff80218fc9:	74 1a                	je     ffffffff80218fe5 <_RME_Kern_Snd+0x98>
        {
            RME_COV_MARKER();

            /* Ready and add to runqueue */
            Thd_Sig->Sched.State=RME_THD_READY;
ffffffff80218fcb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218fcf:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80218fd6:	00 
            _RME_Run_Ins(Thd_Sig);
ffffffff80218fd7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218fdb:	48 89 c7             	mov    %rax,%rdi
ffffffff80218fde:	e8 ff 9d ff ff       	call   ffffffff80212de2 <_RME_Run_Ins>
ffffffff80218fe3:	eb 18                	jmp    ffffffff80218ffd <_RME_Kern_Snd+0xb0>
        else
        {
            RME_COV_MARKER();

            /* Timeout and notify parent */
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
ffffffff80218fe5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218fe9:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff80218ff0:	00 
            _RME_Run_Notif(Thd_Sig);
ffffffff80218ff1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80218ff5:	48 89 c7             	mov    %rax,%rdi
ffffffff80218ff8:	e8 e0 9f ff ff       	call   ffffffff80212fdd <_RME_Run_Notif>
         * we hope to perform the context switch only once when exiting that
         * handler. Also note that the current thread could be EXCPEND as well;
         * this is different from the normal signal sending system call. */
        
        /* Clear endpoint blocking status - no write release required */
        Cap_Sig->Thd=RME_NULL;
ffffffff80218ffd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219001:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80219008:	00 
ffffffff80219009:	eb 44                	jmp    ffffffff8021904f <_RME_Kern_Snd+0x102>
    {
        RME_COV_MARKER();

        /* The guy who blocked on it is not on our core, or nobody blocked.
         * We just faa the counter value and return. */
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff8021900b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021900f:	48 83 c0 28          	add    $0x28,%rax
ffffffff80219013:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219018:	48 89 c7             	mov    %rax,%rdi
ffffffff8021901b:	e8 73 37 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff80219020:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80219027:	ff ff 7f 
ffffffff8021902a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021902d:	73 20                	jae    ffffffff8021904f <_RME_Kern_Snd+0x102>
        {
            RME_COV_MARKER();

            RME_FETCH_ADD(&(Cap_Sig->Sig_Num),-1);
ffffffff8021902f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219033:	48 83 c0 28          	add    $0x28,%rax
ffffffff80219037:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021903e:	48 89 c7             	mov    %rax,%rdi
ffffffff80219041:	e8 4d 37 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff80219046:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff8021904d:	eb 05                	jmp    ffffffff80219054 <_RME_Kern_Snd+0x107>
            RME_COV_MARKER();
            /* No action required */
        }
    }

    return 0;
ffffffff8021904f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80219054:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
ffffffff80219058:	c9                   	leave
ffffffff80219059:	c3                   	ret

ffffffff8021905a <_RME_Sig_Snd>:
Return      : rme_ret_t - If successful, 0, or an error code.
******************************************************************************/
static rme_ret_t _RME_Sig_Snd(struct RME_Cap_Cpt* Cpt, 
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Sig)
{
ffffffff8021905a:	f3 0f 1e fa          	endbr64
ffffffff8021905e:	55                   	push   %rbp
ffffffff8021905f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80219062:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80219066:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021906a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021906e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    struct RME_CPU_Local* Local;
    rme_ptr_t Unblock;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff80219072:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219076:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021907b:	48 85 c0             	test   %rax,%rax
ffffffff8021907e:	0f 85 98 00 00 00    	jne    ffffffff8021911c <_RME_Sig_Snd+0xc2>
ffffffff80219084:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219088:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021908c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80219090:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219093:	0f 93 c0             	setae  %al
ffffffff80219096:	0f b6 c0             	movzbl %al,%eax
ffffffff80219099:	48 85 c0             	test   %rax,%rax
ffffffff8021909c:	74 0c                	je     ffffffff802190aa <_RME_Sig_Snd+0x50>
ffffffff8021909e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802190a5:	e9 2b 03 00 00       	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
ffffffff802190aa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802190ae:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802190b2:	48 89 c2             	mov    %rax,%rdx
ffffffff802190b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802190b9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802190bd:	48 01 d0             	add    %rdx,%rax
ffffffff802190c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802190c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802190c8:	48 8b 00             	mov    (%rax),%rax
ffffffff802190cb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff802190cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802190d3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802190d7:	0f b7 c0             	movzwl %ax,%eax
ffffffff802190da:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802190de:	0f 94 c0             	sete   %al
ffffffff802190e1:	0f b6 c0             	movzbl %al,%eax
ffffffff802190e4:	48 85 c0             	test   %rax,%rax
ffffffff802190e7:	74 0c                	je     ffffffff802190f5 <_RME_Sig_Snd+0x9b>
ffffffff802190e9:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802190f0:	e9 e0 02 00 00       	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
ffffffff802190f5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802190f9:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802190fd:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80219101:	0f 95 c0             	setne  %al
ffffffff80219104:	0f b6 c0             	movzbl %al,%eax
ffffffff80219107:	48 85 c0             	test   %rax,%rax
ffffffff8021910a:	0f 84 4c 01 00 00    	je     ffffffff8021925c <_RME_Sig_Snd+0x202>
ffffffff80219110:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219117:	e9 b9 02 00 00       	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
ffffffff8021911c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219120:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219124:	48 89 c2             	mov    %rax,%rdx
ffffffff80219127:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021912b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021912f:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219132:	0f 93 c0             	setae  %al
ffffffff80219135:	0f b6 c0             	movzbl %al,%eax
ffffffff80219138:	48 85 c0             	test   %rax,%rax
ffffffff8021913b:	74 0c                	je     ffffffff80219149 <_RME_Sig_Snd+0xef>
ffffffff8021913d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219144:	e9 8c 02 00 00       	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
ffffffff80219149:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021914d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219151:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219155:	48 89 c2             	mov    %rax,%rdx
ffffffff80219158:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021915c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219160:	48 01 d0             	add    %rdx,%rax
ffffffff80219163:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219167:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021916b:	48 8b 00             	mov    (%rax),%rax
ffffffff8021916e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219172:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219176:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021917a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021917d:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219181:	0f 94 c0             	sete   %al
ffffffff80219184:	0f b6 c0             	movzbl %al,%eax
ffffffff80219187:	48 85 c0             	test   %rax,%rax
ffffffff8021918a:	74 0c                	je     ffffffff80219198 <_RME_Sig_Snd+0x13e>
ffffffff8021918c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219193:	e9 3d 02 00 00       	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
ffffffff80219198:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021919c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802191a0:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802191a4:	0f 95 c0             	setne  %al
ffffffff802191a7:	0f b6 c0             	movzbl %al,%eax
ffffffff802191aa:	48 85 c0             	test   %rax,%rax
ffffffff802191ad:	74 0c                	je     ffffffff802191bb <_RME_Sig_Snd+0x161>
ffffffff802191af:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802191b6:	e9 1a 02 00 00       	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
ffffffff802191bb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802191bf:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802191c4:	48 89 c2             	mov    %rax,%rdx
ffffffff802191c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191cb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802191cf:	48 39 c2             	cmp    %rax,%rdx
ffffffff802191d2:	0f 93 c0             	setae  %al
ffffffff802191d5:	0f b6 c0             	movzbl %al,%eax
ffffffff802191d8:	48 85 c0             	test   %rax,%rax
ffffffff802191db:	74 0c                	je     ffffffff802191e9 <_RME_Sig_Snd+0x18f>
ffffffff802191dd:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802191e4:	e9 ec 01 00 00       	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
ffffffff802191e9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802191ed:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802191f2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802191f6:	48 89 c2             	mov    %rax,%rdx
ffffffff802191f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802191fd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219201:	48 01 d0             	add    %rdx,%rax
ffffffff80219204:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219208:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021920c:	48 8b 00             	mov    (%rax),%rax
ffffffff8021920f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219213:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219217:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021921b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021921e:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219222:	0f 94 c0             	sete   %al
ffffffff80219225:	0f b6 c0             	movzbl %al,%eax
ffffffff80219228:	48 85 c0             	test   %rax,%rax
ffffffff8021922b:	74 0c                	je     ffffffff80219239 <_RME_Sig_Snd+0x1df>
ffffffff8021922d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219234:	e9 9c 01 00 00       	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
ffffffff80219239:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021923d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219241:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80219245:	0f 95 c0             	setne  %al
ffffffff80219248:	0f b6 c0             	movzbl %al,%eax
ffffffff8021924b:	48 85 c0             	test   %rax,%rax
ffffffff8021924e:	74 0c                	je     ffffffff8021925c <_RME_Sig_Snd+0x202>
ffffffff80219250:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219257:	e9 79 01 00 00       	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
                   struct RME_Cap_Sig*,Sig_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff8021925c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219260:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219264:	83 e0 01             	and    $0x1,%eax
ffffffff80219267:	48 85 c0             	test   %rax,%rax
ffffffff8021926a:	0f 94 c0             	sete   %al
ffffffff8021926d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219270:	48 85 c0             	test   %rax,%rax
ffffffff80219273:	74 0c                	je     ffffffff80219281 <_RME_Sig_Snd+0x227>
ffffffff80219275:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021927c:	e9 54 01 00 00       	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
    
    Local=RME_CPU_LOCAL();
ffffffff80219281:	e8 b9 25 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80219286:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff8021928a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021928e:	48 8b 00             	mov    (%rax),%rax
ffffffff80219291:	89 c0                	mov    %eax,%eax
ffffffff80219293:	48 85 c0             	test   %rax,%rax
ffffffff80219296:	74 0a                	je     ffffffff802192a2 <_RME_Sig_Snd+0x248>
ffffffff80219298:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021929c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802192a0:	eb 04                	jmp    ffffffff802192a6 <_RME_Sig_Snd+0x24c>
ffffffff802192a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802192a6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Thd_Rcv=Sig_Root->Thd;
ffffffff802192aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802192ae:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802192b2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    /* If and only if we are calling from the same core do we unblock */
    if(Thd_Rcv!=(void*)RME_NULL)
ffffffff802192b6:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff802192bb:	74 22                	je     ffffffff802192df <_RME_Sig_Snd+0x285>
    {
        RME_COV_MARKER();

        if(Thd_Rcv->Sched.Local==Local)
ffffffff802192bd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802192c1:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802192c5:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff802192c9:	75 0a                	jne    ffffffff802192d5 <_RME_Sig_Snd+0x27b>
        {
            RME_COV_MARKER();

            Unblock=1U;
ffffffff802192cb:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff802192d2:	00 
ffffffff802192d3:	eb 12                	jmp    ffffffff802192e7 <_RME_Sig_Snd+0x28d>
        }
        else
        {
            RME_COV_MARKER();

            Unblock=0U;
ffffffff802192d5:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802192dc:	00 
ffffffff802192dd:	eb 08                	jmp    ffffffff802192e7 <_RME_Sig_Snd+0x28d>
    }
    else
    {
        RME_COV_MARKER();

        Unblock=0U;
ffffffff802192df:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802192e6:	00 
    }
    
    if(Unblock!=0U)
ffffffff802192e7:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff802192ec:	0f 84 89 00 00 00    	je     ffffffff8021937b <_RME_Sig_Snd+0x321>
    {
        RME_COV_MARKER();

        /* Now save the system call return value to the caller stack */
        __RME_Svc_Retval_Set(Reg,0);
ffffffff802192f2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802192f6:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802192fb:	48 89 c7             	mov    %rax,%rdi
ffffffff802192fe:	e8 d2 de 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
        
        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value to one as always, Even if we were specifying
         * multi-receive. This is because other cores may reduce the count
         * to zero while we are doing this. */
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
ffffffff80219303:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219307:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff8021930e:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219313:	48 89 c7             	mov    %rax,%rdi
ffffffff80219316:	e8 ba de 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
        
        /* See if the thread still have time left */
        if(Thd_Rcv->Sched.Slice!=0U)
ffffffff8021931b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021931f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80219323:	48 85 c0             	test   %rax,%rax
ffffffff80219326:	74 1a                	je     ffffffff80219342 <_RME_Sig_Snd+0x2e8>
        {
            RME_COV_MARKER();

            /* Ready and add to runqueue */
            Thd_Rcv->Sched.State=RME_THD_READY;
ffffffff80219328:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021932c:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80219333:	00 
            _RME_Run_Ins(Thd_Rcv);
ffffffff80219334:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219338:	48 89 c7             	mov    %rax,%rdi
ffffffff8021933b:	e8 a2 9a ff ff       	call   ffffffff80212de2 <_RME_Run_Ins>
ffffffff80219340:	eb 18                	jmp    ffffffff8021935a <_RME_Sig_Snd+0x300>
        else
        {
            RME_COV_MARKER();

            /* Timeout and notify parent */
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
ffffffff80219342:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219346:	48 c7 40 38 02 00 00 	movq   $0x2,0x38(%rax)
ffffffff8021934d:	00 
            _RME_Run_Notif(Thd_Rcv);
ffffffff8021934e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219352:	48 89 c7             	mov    %rax,%rdi
ffffffff80219355:	e8 83 9c ff ff       	call   ffffffff80212fdd <_RME_Run_Notif>
        }
        
        /* Pick the highest priority thread to run */
        _RME_Kern_High(Reg,Local);
ffffffff8021935a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021935e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219362:	48 89 d6             	mov    %rdx,%rsi
ffffffff80219365:	48 89 c7             	mov    %rax,%rdi
ffffffff80219368:	e8 59 fb ff ff       	call   ffffffff80218ec6 <_RME_Kern_High>
        
        /* Clear endpoint blocking status - no write release required */
        Sig_Root->Thd=RME_NULL;
ffffffff8021936d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219371:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff80219378:	00 
ffffffff80219379:	eb 55                	jmp    ffffffff802193d0 <_RME_Sig_Snd+0x376>
    else
    {
        RME_COV_MARKER();

        /* The guy who blocked on it is not on our core, we just faa and return */
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
ffffffff8021937b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021937f:	48 83 c0 28          	add    $0x28,%rax
ffffffff80219383:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219388:	48 89 c7             	mov    %rax,%rdi
ffffffff8021938b:	e8 03 34 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
ffffffff80219390:	48 ba fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdx
ffffffff80219397:	ff ff 7f 
ffffffff8021939a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021939d:	73 20                	jae    ffffffff802193bf <_RME_Sig_Snd+0x365>
        {
            RME_COV_MARKER();

            RME_FETCH_ADD(&(Sig_Root->Sig_Num),-1);
ffffffff8021939f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802193a3:	48 83 c0 28          	add    $0x28,%rax
ffffffff802193a7:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802193ae:	48 89 c7             	mov    %rax,%rdi
ffffffff802193b1:	e8 dd 33 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff802193b6:	48 c7 c0 d1 fe ff ff 	mov    $0xfffffffffffffed1,%rax
ffffffff802193bd:	eb 16                	jmp    ffffffff802193d5 <_RME_Sig_Snd+0x37b>
            RME_COV_MARKER();
            /* No action required */
        }
        
        /* Now save the system call return value to the caller stack */
        __RME_Svc_Retval_Set(Reg,0);
ffffffff802193bf:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802193c3:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802193c8:	48 89 c7             	mov    %rax,%rdi
ffffffff802193cb:	e8 05 de 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
    }

    return 0;
ffffffff802193d0:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff802193d5:	c9                   	leave
ffffffff802193d6:	c3                   	ret

ffffffff802193d7 <_RME_Sig_Rcv>:
******************************************************************************/
static rme_ret_t _RME_Sig_Rcv(struct RME_Cap_Cpt* Cpt,
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Sig,
                              rme_ptr_t Option)
{
ffffffff802193d7:	f3 0f 1e fa          	endbr64
ffffffff802193db:	55                   	push   %rbp
ffffffff802193dc:	48 89 e5             	mov    %rsp,%rbp
ffffffff802193df:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff802193e3:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff802193e7:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff802193eb:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff802193ef:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
    struct RME_Thd_Struct* Thd_Cur;
    rme_ptr_t Old_Value;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
ffffffff802193f3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802193f7:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff802193fc:	48 85 c0             	test   %rax,%rax
ffffffff802193ff:	0f 85 98 00 00 00    	jne    ffffffff8021949d <_RME_Sig_Rcv+0xc6>
ffffffff80219405:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80219409:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021940d:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80219411:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219414:	0f 93 c0             	setae  %al
ffffffff80219417:	0f b6 c0             	movzbl %al,%eax
ffffffff8021941a:	48 85 c0             	test   %rax,%rax
ffffffff8021941d:	74 0c                	je     ffffffff8021942b <_RME_Sig_Rcv+0x54>
ffffffff8021941f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219426:	e9 45 04 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
ffffffff8021942b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021942f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219433:	48 89 c2             	mov    %rax,%rdx
ffffffff80219436:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021943a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021943e:	48 01 d0             	add    %rdx,%rax
ffffffff80219441:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219445:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219449:	48 8b 00             	mov    (%rax),%rax
ffffffff8021944c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219450:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219454:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219458:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021945b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021945f:	0f 94 c0             	sete   %al
ffffffff80219462:	0f b6 c0             	movzbl %al,%eax
ffffffff80219465:	48 85 c0             	test   %rax,%rax
ffffffff80219468:	74 0c                	je     ffffffff80219476 <_RME_Sig_Rcv+0x9f>
ffffffff8021946a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219471:	e9 fa 03 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
ffffffff80219476:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021947a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021947e:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80219482:	0f 95 c0             	setne  %al
ffffffff80219485:	0f b6 c0             	movzbl %al,%eax
ffffffff80219488:	48 85 c0             	test   %rax,%rax
ffffffff8021948b:	0f 84 4c 01 00 00    	je     ffffffff802195dd <_RME_Sig_Rcv+0x206>
ffffffff80219491:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219498:	e9 d3 03 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
ffffffff8021949d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802194a1:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802194a5:	48 89 c2             	mov    %rax,%rdx
ffffffff802194a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802194ac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802194b0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802194b3:	0f 93 c0             	setae  %al
ffffffff802194b6:	0f b6 c0             	movzbl %al,%eax
ffffffff802194b9:	48 85 c0             	test   %rax,%rax
ffffffff802194bc:	74 0c                	je     ffffffff802194ca <_RME_Sig_Rcv+0xf3>
ffffffff802194be:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802194c5:	e9 a6 03 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
ffffffff802194ca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802194ce:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802194d2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802194d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802194d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802194dd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802194e1:	48 01 d0             	add    %rdx,%rax
ffffffff802194e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802194e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802194ec:	48 8b 00             	mov    (%rax),%rax
ffffffff802194ef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff802194f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802194f7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802194fb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802194fe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219502:	0f 94 c0             	sete   %al
ffffffff80219505:	0f b6 c0             	movzbl %al,%eax
ffffffff80219508:	48 85 c0             	test   %rax,%rax
ffffffff8021950b:	74 0c                	je     ffffffff80219519 <_RME_Sig_Rcv+0x142>
ffffffff8021950d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219514:	e9 57 03 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
ffffffff80219519:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021951d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219521:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219525:	0f 95 c0             	setne  %al
ffffffff80219528:	0f b6 c0             	movzbl %al,%eax
ffffffff8021952b:	48 85 c0             	test   %rax,%rax
ffffffff8021952e:	74 0c                	je     ffffffff8021953c <_RME_Sig_Rcv+0x165>
ffffffff80219530:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219537:	e9 34 03 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
ffffffff8021953c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219540:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219545:	48 89 c2             	mov    %rax,%rdx
ffffffff80219548:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021954c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219550:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219553:	0f 93 c0             	setae  %al
ffffffff80219556:	0f b6 c0             	movzbl %al,%eax
ffffffff80219559:	48 85 c0             	test   %rax,%rax
ffffffff8021955c:	74 0c                	je     ffffffff8021956a <_RME_Sig_Rcv+0x193>
ffffffff8021955e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219565:	e9 06 03 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
ffffffff8021956a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021956e:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219573:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219577:	48 89 c2             	mov    %rax,%rdx
ffffffff8021957a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021957e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219582:	48 01 d0             	add    %rdx,%rax
ffffffff80219585:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219589:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021958d:	48 8b 00             	mov    (%rax),%rax
ffffffff80219590:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219594:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219598:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021959c:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021959f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802195a3:	0f 94 c0             	sete   %al
ffffffff802195a6:	0f b6 c0             	movzbl %al,%eax
ffffffff802195a9:	48 85 c0             	test   %rax,%rax
ffffffff802195ac:	74 0c                	je     ffffffff802195ba <_RME_Sig_Rcv+0x1e3>
ffffffff802195ae:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802195b5:	e9 b6 02 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
ffffffff802195ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802195be:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802195c2:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802195c6:	0f 95 c0             	setne  %al
ffffffff802195c9:	0f b6 c0             	movzbl %al,%eax
ffffffff802195cc:	48 85 c0             	test   %rax,%rax
ffffffff802195cf:	74 0c                	je     ffffffff802195dd <_RME_Sig_Rcv+0x206>
ffffffff802195d1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802195d8:	e9 93 02 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
                   struct RME_Cap_Sig*,Sig_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    switch(Option)
ffffffff802195dd:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
ffffffff802195e2:	0f 84 a3 00 00 00    	je     ffffffff8021968b <_RME_Sig_Rcv+0x2b4>
ffffffff802195e8:	48 83 7d b0 03       	cmpq   $0x3,-0x50(%rbp)
ffffffff802195ed:	0f 87 bd 00 00 00    	ja     ffffffff802196b0 <_RME_Sig_Rcv+0x2d9>
ffffffff802195f3:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff802195f8:	74 6c                	je     ffffffff80219666 <_RME_Sig_Rcv+0x28f>
ffffffff802195fa:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff802195ff:	0f 87 ab 00 00 00    	ja     ffffffff802196b0 <_RME_Sig_Rcv+0x2d9>
ffffffff80219605:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8021960a:	74 0c                	je     ffffffff80219618 <_RME_Sig_Rcv+0x241>
ffffffff8021960c:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
ffffffff80219611:	74 2e                	je     ffffffff80219641 <_RME_Sig_Rcv+0x26a>
ffffffff80219613:	e9 98 00 00 00       	jmp    ffffffff802196b0 <_RME_Sig_Rcv+0x2d9>
    {
        case RME_RCV_BS:
        {
            RME_COV_MARKER();

            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
ffffffff80219618:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021961c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219620:	83 e0 02             	and    $0x2,%eax
ffffffff80219623:	48 85 c0             	test   %rax,%rax
ffffffff80219626:	0f 94 c0             	sete   %al
ffffffff80219629:	0f b6 c0             	movzbl %al,%eax
ffffffff8021962c:	48 85 c0             	test   %rax,%rax
ffffffff8021962f:	0f 84 87 00 00 00    	je     ffffffff802196bc <_RME_Sig_Rcv+0x2e5>
ffffffff80219635:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021963c:	e9 2f 02 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_BM:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
ffffffff80219641:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219645:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219649:	83 e0 04             	and    $0x4,%eax
ffffffff8021964c:	48 85 c0             	test   %rax,%rax
ffffffff8021964f:	0f 94 c0             	sete   %al
ffffffff80219652:	0f b6 c0             	movzbl %al,%eax
ffffffff80219655:	48 85 c0             	test   %rax,%rax
ffffffff80219658:	74 65                	je     ffffffff802196bf <_RME_Sig_Rcv+0x2e8>
ffffffff8021965a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219661:	e9 0a 02 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_NS:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
ffffffff80219666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021966a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021966e:	83 e0 08             	and    $0x8,%eax
ffffffff80219671:	48 85 c0             	test   %rax,%rax
ffffffff80219674:	0f 94 c0             	sete   %al
ffffffff80219677:	0f b6 c0             	movzbl %al,%eax
ffffffff8021967a:	48 85 c0             	test   %rax,%rax
ffffffff8021967d:	74 43                	je     ffffffff802196c2 <_RME_Sig_Rcv+0x2eb>
ffffffff8021967f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219686:	e9 e5 01 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
        }
        case RME_RCV_NM:
        {
            RME_COV_MARKER();
            
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
ffffffff8021968b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021968f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219693:	83 e0 10             	and    $0x10,%eax
ffffffff80219696:	48 85 c0             	test   %rax,%rax
ffffffff80219699:	0f 94 c0             	sete   %al
ffffffff8021969c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021969f:	48 85 c0             	test   %rax,%rax
ffffffff802196a2:	74 21                	je     ffffffff802196c5 <_RME_Sig_Rcv+0x2ee>
ffffffff802196a4:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802196ab:	e9 c0 01 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
        }
        default:
        {
            RME_COV_MARKER();
            
            return RME_ERR_SIV_ACT;
ffffffff802196b0:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff802196b7:	e9 b4 01 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
            break;
ffffffff802196bc:	90                   	nop
ffffffff802196bd:	eb 07                	jmp    ffffffff802196c6 <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff802196bf:	90                   	nop
ffffffff802196c0:	eb 04                	jmp    ffffffff802196c6 <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff802196c2:	90                   	nop
ffffffff802196c3:	eb 01                	jmp    ffffffff802196c6 <_RME_Sig_Rcv+0x2ef>
            break;
ffffffff802196c5:	90                   	nop
        }
    }
    
    /* Convert to root cap */
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
ffffffff802196c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802196ca:	48 8b 00             	mov    (%rax),%rax
ffffffff802196cd:	89 c0                	mov    %eax,%eax
ffffffff802196cf:	48 85 c0             	test   %rax,%rax
ffffffff802196d2:	74 0a                	je     ffffffff802196de <_RME_Sig_Rcv+0x307>
ffffffff802196d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802196d8:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802196dc:	eb 04                	jmp    ffffffff802196e2 <_RME_Sig_Rcv+0x30b>
ffffffff802196de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802196e2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    
    /* See if we can receive on that endpoint - if someone blocks on it, we 
     * must wait for it to unblock before we can proceed. */
    if(Sig_Root->Thd!=(void*)RME_NULL)
ffffffff802196e6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802196ea:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802196ee:	48 85 c0             	test   %rax,%rax
ffffffff802196f1:	74 0c                	je     ffffffff802196ff <_RME_Sig_Rcv+0x328>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff802196f3:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff802196fa:	e9 71 01 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    Local=RME_CPU_LOCAL();
ffffffff802196ff:	e8 3b 21 ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80219704:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    Thd_Cur=Local->Thd_Cur;
ffffffff80219708:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021970c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80219710:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    
    /* Check if we trying to let a boot-time thread block on a signal, which is
     * disallowed. Additionally, if the current thread have no timeslice left
     * (which shouldn't happen under any circumstances), we assert and die. */
    RME_ASSERT(Thd_Cur->Sched.Slice!=0U);
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
ffffffff80219714:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219718:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8021971c:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80219723:	ff ff 7f 
ffffffff80219726:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219729:	75 0c                	jne    ffffffff80219737 <_RME_Sig_Rcv+0x360>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_BOOT;
ffffffff8021972b:	48 c7 c0 cd fe ff ff 	mov    $0xfffffffffffffecd,%rax
ffffffff80219732:	e9 39 01 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check if there are signals available */
    Old_Value=Sig_Root->Sig_Num;
ffffffff80219737:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021973b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021973f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(Old_Value>0U)
ffffffff80219743:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80219748:	0f 84 9b 00 00 00    	je     ffffffff802197e9 <_RME_Sig_Rcv+0x412>
    {
        RME_COV_MARKER();

        /* Can't use faa, other cores may reduce count to zero in the meantime */
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
ffffffff8021974e:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80219753:	74 07                	je     ffffffff8021975c <_RME_Sig_Rcv+0x385>
ffffffff80219755:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff8021975a:	75 43                	jne    ffffffff8021979f <_RME_Sig_Rcv+0x3c8>
        {
            RME_COV_MARKER();

            /* Try to take one */
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff8021975c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219760:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff80219764:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219768:	48 8d 48 28          	lea    0x28(%rax),%rcx
ffffffff8021976c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219770:	48 89 c6             	mov    %rax,%rsi
ffffffff80219773:	48 89 cf             	mov    %rcx,%rdi
ffffffff80219776:	e8 e3 2f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021977b:	48 85 c0             	test   %rax,%rax
ffffffff8021977e:	75 0c                	jne    ffffffff8021978c <_RME_Sig_Rcv+0x3b5>
                             Old_Value,
                             Old_Value-1U)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff80219780:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff80219787:	e9 e4 00 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* We have taken it, now return what we have taken */
            __RME_Svc_Retval_Set(Reg,1);
ffffffff8021978c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80219790:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219795:	48 89 c7             	mov    %rax,%rdi
ffffffff80219798:	e8 38 da 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8021979d:	eb 40                	jmp    ffffffff802197df <_RME_Sig_Rcv+0x408>
        else
        {
            RME_COV_MARKER();

            /* Try to take all */
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
ffffffff8021979f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802197a3:	48 8d 48 28          	lea    0x28(%rax),%rcx
ffffffff802197a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802197ab:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff802197b0:	48 89 c6             	mov    %rax,%rsi
ffffffff802197b3:	48 89 cf             	mov    %rcx,%rdi
ffffffff802197b6:	e8 a3 2f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff802197bb:	48 85 c0             	test   %rax,%rax
ffffffff802197be:	75 0c                	jne    ffffffff802197cc <_RME_Sig_Rcv+0x3f5>
                             Old_Value,
                             0U)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff802197c0:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff802197c7:	e9 a4 00 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
                RME_COV_MARKER();
                /* No action required */
            }
            
            /* We have taken all, now return what we have taken */
            __RME_Svc_Retval_Set(Reg,(rme_ret_t)Old_Value);
ffffffff802197cc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff802197d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff802197d4:	48 89 d6             	mov    %rdx,%rsi
ffffffff802197d7:	48 89 c7             	mov    %rax,%rdi
ffffffff802197da:	e8 f6 d9 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
        }
        
        return 0;
ffffffff802197df:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff802197e4:	e9 87 00 00 00       	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
    else
    {
        RME_COV_MARKER();

        /* There's no value, try to block */
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
ffffffff802197e9:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff802197ee:	74 07                	je     ffffffff802197f7 <_RME_Sig_Rcv+0x420>
ffffffff802197f0:	48 83 7d b0 01       	cmpq   $0x1,-0x50(%rbp)
ffffffff802197f5:	75 63                	jne    ffffffff8021985a <_RME_Sig_Rcv+0x483>
        {
            RME_COV_MARKER();

            if(RME_COMP_SWAP((rme_ptr_t*)&(Sig_Root->Thd),
ffffffff802197f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802197fb:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff802197ff:	48 8d 4a 30          	lea    0x30(%rdx),%rcx
ffffffff80219803:	48 89 c2             	mov    %rax,%rdx
ffffffff80219806:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021980b:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021980e:	e8 4b 2f ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff80219813:	48 85 c0             	test   %rax,%rax
ffffffff80219816:	75 09                	jne    ffffffff80219821 <_RME_Sig_Rcv+0x44a>
                             RME_NULL,
                             (rme_ptr_t)Thd_Cur)==RME_CASFAIL)
            {
                RME_COV_MARKER();

                return RME_ERR_SIV_CONFLICT;
ffffffff80219818:	48 c7 c0 cf fe ff ff 	mov    $0xfffffffffffffecf,%rax
ffffffff8021981f:	eb 4f                	jmp    ffffffff80219870 <_RME_Sig_Rcv+0x499>
            /* Now we block our current thread. No need to set any return value
             * to the register set here, because we do not yet know how many
             * signals will be there when the thread unblocks. The unblocking
             * does not need an option so we don't keep that; we always treat
             * it as single receive when we unblock anyway. */
            Thd_Cur->Sched.Signal=Sig_Root;
ffffffff80219821:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219825:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80219829:	48 89 50 50          	mov    %rdx,0x50(%rax)
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
ffffffff8021982d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219831:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff80219838:	00 
            _RME_Run_Del(Thd_Cur);
ffffffff80219839:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021983d:	48 89 c7             	mov    %rax,%rdi
ffffffff80219840:	e8 4d 96 ff ff       	call   ffffffff80212e92 <_RME_Run_Del>
            
            /* Pick the highest priority thread to run */
            _RME_Kern_High(Reg,Local);
ffffffff80219845:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80219849:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021984d:	48 89 d6             	mov    %rdx,%rsi
ffffffff80219850:	48 89 c7             	mov    %rax,%rdi
ffffffff80219853:	e8 6e f6 ff ff       	call   ffffffff80218ec6 <_RME_Kern_High>
ffffffff80219858:	eb 11                	jmp    ffffffff8021986b <_RME_Sig_Rcv+0x494>
        else
        {
            RME_COV_MARKER();

            /* We have taken nothing but the system call is successful anyway */
            __RME_Svc_Retval_Set(Reg,0);
ffffffff8021985a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021985e:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80219863:	48 89 c7             	mov    %rax,%rdi
ffffffff80219866:	e8 6a d9 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
        }
    }
    
    return 0;
ffffffff8021986b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80219870:	c9                   	leave
ffffffff80219871:	c3                   	ret

ffffffff80219872 <_RME_Inv_Crt>:
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Kom,
                              rme_cid_t Cap_Inv,
                              rme_cid_t Cap_Prc,
                              rme_ptr_t Raddr)
{
ffffffff80219872:	f3 0f 1e fa          	endbr64
ffffffff80219876:	55                   	push   %rbp
ffffffff80219877:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021987a:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff8021987e:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80219882:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80219886:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff8021988a:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
ffffffff8021988e:	4c 89 45 98          	mov    %r8,-0x68(%rbp)
ffffffff80219892:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    struct RME_Cap_Prc* Prc_Root;
    struct RME_Inv_Struct* Invocation;
    rme_ptr_t Type_Stat;
    rme_ptr_t Vaddr;
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff80219896:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8021989a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021989f:	48 85 c0             	test   %rax,%rax
ffffffff802198a2:	0f 85 98 00 00 00    	jne    ffffffff80219940 <_RME_Inv_Crt+0xce>
ffffffff802198a8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802198ac:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802198b0:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff802198b4:	48 39 c2             	cmp    %rax,%rdx
ffffffff802198b7:	0f 93 c0             	setae  %al
ffffffff802198ba:	0f b6 c0             	movzbl %al,%eax
ffffffff802198bd:	48 85 c0             	test   %rax,%rax
ffffffff802198c0:	74 0c                	je     ffffffff802198ce <_RME_Inv_Crt+0x5c>
ffffffff802198c2:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802198c9:	e9 34 08 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff802198ce:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802198d2:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802198d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802198d9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff802198dd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802198e1:	48 01 d0             	add    %rdx,%rax
ffffffff802198e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff802198e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802198ec:	48 8b 00             	mov    (%rax),%rax
ffffffff802198ef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802198f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802198f7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802198fb:	0f b7 c0             	movzwl %ax,%eax
ffffffff802198fe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219902:	0f 94 c0             	sete   %al
ffffffff80219905:	0f b6 c0             	movzbl %al,%eax
ffffffff80219908:	48 85 c0             	test   %rax,%rax
ffffffff8021990b:	74 0c                	je     ffffffff80219919 <_RME_Inv_Crt+0xa7>
ffffffff8021990d:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219914:	e9 e9 07 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219919:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021991d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219921:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219925:	0f 95 c0             	setne  %al
ffffffff80219928:	0f b6 c0             	movzbl %al,%eax
ffffffff8021992b:	48 85 c0             	test   %rax,%rax
ffffffff8021992e:	0f 84 4c 01 00 00    	je     ffffffff80219a80 <_RME_Inv_Crt+0x20e>
ffffffff80219934:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021993b:	e9 c2 07 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219940:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219944:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219948:	48 89 c2             	mov    %rax,%rdx
ffffffff8021994b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021994f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219953:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219956:	0f 93 c0             	setae  %al
ffffffff80219959:	0f b6 c0             	movzbl %al,%eax
ffffffff8021995c:	48 85 c0             	test   %rax,%rax
ffffffff8021995f:	74 0c                	je     ffffffff8021996d <_RME_Inv_Crt+0xfb>
ffffffff80219961:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219968:	e9 95 07 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff8021996d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219971:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219975:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219979:	48 89 c2             	mov    %rax,%rdx
ffffffff8021997c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219980:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219984:	48 01 d0             	add    %rdx,%rax
ffffffff80219987:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021998b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021998f:	48 8b 00             	mov    (%rax),%rax
ffffffff80219992:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219996:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021999a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021999e:	0f b7 c0             	movzwl %ax,%eax
ffffffff802199a1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802199a5:	0f 94 c0             	sete   %al
ffffffff802199a8:	0f b6 c0             	movzbl %al,%eax
ffffffff802199ab:	48 85 c0             	test   %rax,%rax
ffffffff802199ae:	74 0c                	je     ffffffff802199bc <_RME_Inv_Crt+0x14a>
ffffffff802199b0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802199b7:	e9 46 07 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff802199bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802199c0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802199c4:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802199c8:	0f 95 c0             	setne  %al
ffffffff802199cb:	0f b6 c0             	movzbl %al,%eax
ffffffff802199ce:	48 85 c0             	test   %rax,%rax
ffffffff802199d1:	74 0c                	je     ffffffff802199df <_RME_Inv_Crt+0x16d>
ffffffff802199d3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802199da:	e9 23 07 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff802199df:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff802199e3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802199e8:	48 89 c2             	mov    %rax,%rdx
ffffffff802199eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802199ef:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802199f3:	48 39 c2             	cmp    %rax,%rdx
ffffffff802199f6:	0f 93 c0             	setae  %al
ffffffff802199f9:	0f b6 c0             	movzbl %al,%eax
ffffffff802199fc:	48 85 c0             	test   %rax,%rax
ffffffff802199ff:	74 0c                	je     ffffffff80219a0d <_RME_Inv_Crt+0x19b>
ffffffff80219a01:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219a08:	e9 f5 06 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219a0d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80219a11:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219a16:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219a1a:	48 89 c2             	mov    %rax,%rdx
ffffffff80219a1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219a21:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219a25:	48 01 d0             	add    %rdx,%rax
ffffffff80219a28:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80219a2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219a30:	48 8b 00             	mov    (%rax),%rax
ffffffff80219a33:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219a37:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219a3b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219a3f:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219a42:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219a46:	0f 94 c0             	sete   %al
ffffffff80219a49:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a4c:	48 85 c0             	test   %rax,%rax
ffffffff80219a4f:	74 0c                	je     ffffffff80219a5d <_RME_Inv_Crt+0x1eb>
ffffffff80219a51:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219a58:	e9 a5 06 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219a5d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219a61:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219a65:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219a69:	0f 95 c0             	setne  %al
ffffffff80219a6c:	0f b6 c0             	movzbl %al,%eax
ffffffff80219a6f:	48 85 c0             	test   %rax,%rax
ffffffff80219a72:	74 0c                	je     ffffffff80219a80 <_RME_Inv_Crt+0x20e>
ffffffff80219a74:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219a7b:	e9 82 06 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
ffffffff80219a80:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219a84:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219a89:	48 85 c0             	test   %rax,%rax
ffffffff80219a8c:	0f 85 98 00 00 00    	jne    ffffffff80219b2a <_RME_Inv_Crt+0x2b8>
ffffffff80219a92:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219a96:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219a9a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80219a9e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219aa1:	0f 93 c0             	setae  %al
ffffffff80219aa4:	0f b6 c0             	movzbl %al,%eax
ffffffff80219aa7:	48 85 c0             	test   %rax,%rax
ffffffff80219aaa:	74 0c                	je     ffffffff80219ab8 <_RME_Inv_Crt+0x246>
ffffffff80219aac:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219ab3:	e9 4a 06 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219ab8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219abc:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219ac0:	48 89 c2             	mov    %rax,%rdx
ffffffff80219ac3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219ac7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219acb:	48 01 d0             	add    %rdx,%rax
ffffffff80219ace:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219ad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219ad6:	48 8b 00             	mov    (%rax),%rax
ffffffff80219ad9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219add:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219ae1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219ae5:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219ae8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219aec:	0f 94 c0             	sete   %al
ffffffff80219aef:	0f b6 c0             	movzbl %al,%eax
ffffffff80219af2:	48 85 c0             	test   %rax,%rax
ffffffff80219af5:	74 0c                	je     ffffffff80219b03 <_RME_Inv_Crt+0x291>
ffffffff80219af7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219afe:	e9 ff 05 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219b03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219b07:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219b0b:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80219b0f:	0f 95 c0             	setne  %al
ffffffff80219b12:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b15:	48 85 c0             	test   %rax,%rax
ffffffff80219b18:	0f 84 4c 01 00 00    	je     ffffffff80219c6a <_RME_Inv_Crt+0x3f8>
ffffffff80219b1e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219b25:	e9 d8 05 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219b2a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219b2e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219b32:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b35:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219b39:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219b3d:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219b40:	0f 93 c0             	setae  %al
ffffffff80219b43:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b46:	48 85 c0             	test   %rax,%rax
ffffffff80219b49:	74 0c                	je     ffffffff80219b57 <_RME_Inv_Crt+0x2e5>
ffffffff80219b4b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219b52:	e9 ab 05 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219b57:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219b5b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219b5f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219b63:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b66:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219b6a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219b6e:	48 01 d0             	add    %rdx,%rax
ffffffff80219b71:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219b75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219b79:	48 8b 00             	mov    (%rax),%rax
ffffffff80219b7c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219b80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219b84:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219b88:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219b8b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219b8f:	0f 94 c0             	sete   %al
ffffffff80219b92:	0f b6 c0             	movzbl %al,%eax
ffffffff80219b95:	48 85 c0             	test   %rax,%rax
ffffffff80219b98:	74 0c                	je     ffffffff80219ba6 <_RME_Inv_Crt+0x334>
ffffffff80219b9a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219ba1:	e9 5c 05 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219ba6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219baa:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219bae:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219bb2:	0f 95 c0             	setne  %al
ffffffff80219bb5:	0f b6 c0             	movzbl %al,%eax
ffffffff80219bb8:	48 85 c0             	test   %rax,%rax
ffffffff80219bbb:	74 0c                	je     ffffffff80219bc9 <_RME_Inv_Crt+0x357>
ffffffff80219bbd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219bc4:	e9 39 05 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219bc9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219bcd:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219bd2:	48 89 c2             	mov    %rax,%rdx
ffffffff80219bd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219bd9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219bdd:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219be0:	0f 93 c0             	setae  %al
ffffffff80219be3:	0f b6 c0             	movzbl %al,%eax
ffffffff80219be6:	48 85 c0             	test   %rax,%rax
ffffffff80219be9:	74 0c                	je     ffffffff80219bf7 <_RME_Inv_Crt+0x385>
ffffffff80219beb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219bf2:	e9 0b 05 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219bf7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80219bfb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219c00:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219c04:	48 89 c2             	mov    %rax,%rdx
ffffffff80219c07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219c0b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219c0f:	48 01 d0             	add    %rdx,%rax
ffffffff80219c12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80219c16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219c1a:	48 8b 00             	mov    (%rax),%rax
ffffffff80219c1d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219c21:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219c25:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219c29:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219c2c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219c30:	0f 94 c0             	sete   %al
ffffffff80219c33:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c36:	48 85 c0             	test   %rax,%rax
ffffffff80219c39:	74 0c                	je     ffffffff80219c47 <_RME_Inv_Crt+0x3d5>
ffffffff80219c3b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219c42:	e9 bb 04 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219c47:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219c4b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219c4f:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80219c53:	0f 95 c0             	setne  %al
ffffffff80219c56:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c59:	48 85 c0             	test   %rax,%rax
ffffffff80219c5c:	74 0c                	je     ffffffff80219c6a <_RME_Inv_Crt+0x3f8>
ffffffff80219c5e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219c65:	e9 98 04 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
                   struct RME_Cap_Prc*,Prc_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
ffffffff80219c6a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219c6e:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff80219c73:	48 85 c0             	test   %rax,%rax
ffffffff80219c76:	0f 85 98 00 00 00    	jne    ffffffff80219d14 <_RME_Inv_Crt+0x4a2>
ffffffff80219c7c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219c80:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219c84:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff80219c88:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219c8b:	0f 93 c0             	setae  %al
ffffffff80219c8e:	0f b6 c0             	movzbl %al,%eax
ffffffff80219c91:	48 85 c0             	test   %rax,%rax
ffffffff80219c94:	74 0c                	je     ffffffff80219ca2 <_RME_Inv_Crt+0x430>
ffffffff80219c96:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219c9d:	e9 60 04 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219ca2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219ca6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219caa:	48 89 c2             	mov    %rax,%rdx
ffffffff80219cad:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219cb1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219cb5:	48 01 d0             	add    %rdx,%rax
ffffffff80219cb8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219cbc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219cc0:	48 8b 00             	mov    (%rax),%rax
ffffffff80219cc3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219cc7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219ccb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219ccf:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219cd2:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219cd6:	0f 94 c0             	sete   %al
ffffffff80219cd9:	0f b6 c0             	movzbl %al,%eax
ffffffff80219cdc:	48 85 c0             	test   %rax,%rax
ffffffff80219cdf:	74 0c                	je     ffffffff80219ced <_RME_Inv_Crt+0x47b>
ffffffff80219ce1:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219ce8:	e9 15 04 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219ced:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219cf1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219cf5:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219cf9:	0f 95 c0             	setne  %al
ffffffff80219cfc:	0f b6 c0             	movzbl %al,%eax
ffffffff80219cff:	48 85 c0             	test   %rax,%rax
ffffffff80219d02:	0f 84 4c 01 00 00    	je     ffffffff80219e54 <_RME_Inv_Crt+0x5e2>
ffffffff80219d08:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219d0f:	e9 ee 03 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219d14:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219d18:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219d1c:	48 89 c2             	mov    %rax,%rdx
ffffffff80219d1f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219d23:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219d27:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219d2a:	0f 93 c0             	setae  %al
ffffffff80219d2d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d30:	48 85 c0             	test   %rax,%rax
ffffffff80219d33:	74 0c                	je     ffffffff80219d41 <_RME_Inv_Crt+0x4cf>
ffffffff80219d35:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219d3c:	e9 c1 03 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219d41:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219d45:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80219d49:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219d4d:	48 89 c2             	mov    %rax,%rdx
ffffffff80219d50:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80219d54:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219d58:	48 01 d0             	add    %rdx,%rax
ffffffff80219d5b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219d5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219d63:	48 8b 00             	mov    (%rax),%rax
ffffffff80219d66:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219d6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219d6e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219d72:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219d75:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219d79:	0f 94 c0             	sete   %al
ffffffff80219d7c:	0f b6 c0             	movzbl %al,%eax
ffffffff80219d7f:	48 85 c0             	test   %rax,%rax
ffffffff80219d82:	74 0c                	je     ffffffff80219d90 <_RME_Inv_Crt+0x51e>
ffffffff80219d84:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219d8b:	e9 72 03 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219d90:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219d94:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219d98:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219d9c:	0f 95 c0             	setne  %al
ffffffff80219d9f:	0f b6 c0             	movzbl %al,%eax
ffffffff80219da2:	48 85 c0             	test   %rax,%rax
ffffffff80219da5:	74 0c                	je     ffffffff80219db3 <_RME_Inv_Crt+0x541>
ffffffff80219da7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219dae:	e9 4f 03 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219db3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219db7:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219dbc:	48 89 c2             	mov    %rax,%rdx
ffffffff80219dbf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219dc3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219dc7:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219dca:	0f 93 c0             	setae  %al
ffffffff80219dcd:	0f b6 c0             	movzbl %al,%eax
ffffffff80219dd0:	48 85 c0             	test   %rax,%rax
ffffffff80219dd3:	74 0c                	je     ffffffff80219de1 <_RME_Inv_Crt+0x56f>
ffffffff80219dd5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219ddc:	e9 21 03 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219de1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80219de5:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff80219dea:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219dee:	48 89 c2             	mov    %rax,%rdx
ffffffff80219df1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219df5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219df9:	48 01 d0             	add    %rdx,%rax
ffffffff80219dfc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80219e00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219e04:	48 8b 00             	mov    (%rax),%rax
ffffffff80219e07:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80219e0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219e0f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80219e13:	0f b7 c0             	movzwl %ax,%eax
ffffffff80219e16:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219e1a:	0f 94 c0             	sete   %al
ffffffff80219e1d:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e20:	48 85 c0             	test   %rax,%rax
ffffffff80219e23:	74 0c                	je     ffffffff80219e31 <_RME_Inv_Crt+0x5bf>
ffffffff80219e25:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219e2c:	e9 d1 02 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219e31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80219e35:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219e39:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80219e3d:	0f 95 c0             	setne  %al
ffffffff80219e40:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e43:	48 85 c0             	test   %rax,%rax
ffffffff80219e46:	74 0c                	je     ffffffff80219e54 <_RME_Inv_Crt+0x5e2>
ffffffff80219e48:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219e4f:	e9 ae 02 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
                   struct RME_Cap_Kom*,Kom_Op,Type_Stat);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff80219e54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219e58:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219e5c:	83 e0 01             	and    $0x1,%eax
ffffffff80219e5f:	48 85 c0             	test   %rax,%rax
ffffffff80219e62:	0f 94 c0             	sete   %al
ffffffff80219e65:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e68:	48 85 c0             	test   %rax,%rax
ffffffff80219e6b:	74 0c                	je     ffffffff80219e79 <_RME_Inv_Crt+0x607>
ffffffff80219e6d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e74:	e9 89 02 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
ffffffff80219e79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80219e7d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219e81:	83 e0 01             	and    $0x1,%eax
ffffffff80219e84:	48 85 c0             	test   %rax,%rax
ffffffff80219e87:	0f 94 c0             	sete   %al
ffffffff80219e8a:	0f b6 c0             	movzbl %al,%eax
ffffffff80219e8d:	48 85 c0             	test   %rax,%rax
ffffffff80219e90:	74 0c                	je     ffffffff80219e9e <_RME_Inv_Crt+0x62c>
ffffffff80219e92:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219e99:	e9 64 02 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
    /* See if the creation is valid for this kmem range */
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
ffffffff80219e9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219ea2:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80219ea6:	83 e0 08             	and    $0x8,%eax
ffffffff80219ea9:	48 85 c0             	test   %rax,%rax
ffffffff80219eac:	0f 94 c0             	sete   %al
ffffffff80219eaf:	0f b6 c0             	movzbl %al,%eax
ffffffff80219eb2:	48 85 c0             	test   %rax,%rax
ffffffff80219eb5:	74 18                	je     ffffffff80219ecf <_RME_Inv_Crt+0x65d>
ffffffff80219eb7:	48 c7 c7 e8 91 22 80 	mov    $0xffffffff802291e8,%rdi
ffffffff80219ebe:	e8 48 2b ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219ec3:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219eca:	e9 33 02 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219ecf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219ed3:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80219ed7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80219edb:	48 01 d0             	add    %rdx,%rax
ffffffff80219ede:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80219ee2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219ee6:	48 3b 45 90          	cmp    -0x70(%rbp),%rax
ffffffff80219eea:	0f 92 c0             	setb   %al
ffffffff80219eed:	0f b6 c0             	movzbl %al,%eax
ffffffff80219ef0:	48 85 c0             	test   %rax,%rax
ffffffff80219ef3:	74 34                	je     ffffffff80219f29 <_RME_Inv_Crt+0x6b7>
ffffffff80219ef5:	48 c7 c7 08 92 22 80 	mov    $0xffffffff80229208,%rdi
ffffffff80219efc:	e8 0a 2b ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219f01:	48 c7 c7 27 92 22 80 	mov    $0xffffffff80229227,%rdi
ffffffff80219f08:	e8 fe 2a ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219f0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219f11:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219f15:	48 89 c7             	mov    %rax,%rdi
ffffffff80219f18:	e8 2c 2a ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
ffffffff80219f1d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219f24:	e9 d9 01 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219f29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219f2d:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219f31:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff80219f35:	0f 92 c0             	setb   %al
ffffffff80219f38:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f3b:	48 85 c0             	test   %rax,%rax
ffffffff80219f3e:	74 18                	je     ffffffff80219f58 <_RME_Inv_Crt+0x6e6>
ffffffff80219f40:	48 c7 c7 38 92 22 80 	mov    $0xffffffff80229238,%rdi
ffffffff80219f47:	e8 bf 2a ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219f4c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219f53:	e9 aa 01 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219f58:	48 83 7d d8 b7       	cmpq   $0xffffffffffffffb7,-0x28(%rbp)
ffffffff80219f5d:	0f 97 c0             	seta   %al
ffffffff80219f60:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f63:	48 85 c0             	test   %rax,%rax
ffffffff80219f66:	74 18                	je     ffffffff80219f80 <_RME_Inv_Crt+0x70e>
ffffffff80219f68:	48 c7 c7 58 92 22 80 	mov    $0xffffffff80229258,%rdi
ffffffff80219f6f:	e8 97 2a ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219f74:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219f7b:	e9 82 01 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219f80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80219f84:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80219f88:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80219f8c:	48 83 c0 47          	add    $0x47,%rax
ffffffff80219f90:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219f93:	0f 92 c0             	setb   %al
ffffffff80219f96:	0f b6 c0             	movzbl %al,%eax
ffffffff80219f99:	48 85 c0             	test   %rax,%rax
ffffffff80219f9c:	74 18                	je     ffffffff80219fb6 <_RME_Inv_Crt+0x744>
ffffffff80219f9e:	48 c7 c7 78 92 22 80 	mov    $0xffffffff80229278,%rdi
ffffffff80219fa5:	e8 61 2a ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80219faa:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219fb1:	e9 4c 01 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff80219fb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219fba:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80219fbe:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff80219fc2:	48 39 c2             	cmp    %rax,%rdx
ffffffff80219fc5:	0f 93 c0             	setae  %al
ffffffff80219fc8:	0f b6 c0             	movzbl %al,%eax
ffffffff80219fcb:	48 85 c0             	test   %rax,%rax
ffffffff80219fce:	74 0c                	je     ffffffff80219fdc <_RME_Inv_Crt+0x76a>
ffffffff80219fd0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80219fd7:	e9 26 01 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff80219fdc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80219fe0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219fe4:	48 89 c2             	mov    %rax,%rdx
ffffffff80219fe7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80219feb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80219fef:	48 01 d0             	add    %rdx,%rax
ffffffff80219ff2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Inv_Crt);
ffffffff80219ff6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80219ffa:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021a001:	00 00 00 
ffffffff8021a004:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021a009:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a00c:	e8 4d 27 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a011:	48 85 c0             	test   %rax,%rax
ffffffff8021a014:	0f 94 c0             	sete   %al
ffffffff8021a017:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a01a:	48 85 c0             	test   %rax,%rax
ffffffff8021a01d:	74 0c                	je     ffffffff8021a02b <_RME_Inv_Crt+0x7b9>
ffffffff8021a01f:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021a026:	e9 d7 00 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
ffffffff8021a02b:	48 8b 15 ce ff 00 00 	mov    0xffce(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8021a032:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a036:	48 89 50 20          	mov    %rdx,0x20(%rax)
    /* Try to populate the area */
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
ffffffff8021a03a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a03e:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021a043:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a046:	e8 6d 83 ff ff       	call   ffffffff802123b8 <_RME_Kot_Mark>
ffffffff8021a04b:	48 85 c0             	test   %rax,%rax
ffffffff8021a04e:	74 17                	je     ffffffff8021a067 <_RME_Inv_Crt+0x7f5>
    {
        RME_COV_MARKER();
        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
ffffffff8021a050:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a054:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        return RME_ERR_CPT_KOT;
ffffffff8021a05b:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8021a062:	e9 9b 00 00 00       	jmp    ffffffff8021a102 <_RME_Inv_Crt+0x890>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    /* Object init */
    Invocation=(struct RME_Inv_Struct*)Vaddr;
ffffffff8021a067:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a06b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
ffffffff8021a06f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a073:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a076:	89 c0                	mov    %eax,%eax
ffffffff8021a078:	48 85 c0             	test   %rax,%rax
ffffffff8021a07b:	74 0a                	je     ffffffff8021a087 <_RME_Inv_Crt+0x815>
ffffffff8021a07d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a081:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a085:	eb 04                	jmp    ffffffff8021a08b <_RME_Inv_Crt+0x819>
ffffffff8021a087:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a08b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    Invocation->Prc=Prc_Root;
ffffffff8021a08f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a093:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021a097:	48 89 50 10          	mov    %rdx,0x10(%rax)
    Invocation->Thd_Act=RME_NULL;
ffffffff8021a09b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a09f:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021a0a6:	00 
    /* By default we do not return on exception */
    Invocation->Is_Exc_Ret=0U;
ffffffff8021a0a7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a0ab:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021a0b2:	00 
    
    /* Header init */
    Inv_Crt->Head.Root_Ref=0U;
ffffffff8021a0b3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0b7:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8021a0be:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff8021a0bf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0c3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021a0c7:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
ffffffff8021a0cb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0cf:	48 c7 40 10 03 00 00 	movq   $0x3,0x10(%rax)
ffffffff8021a0d6:	00 
    
    /* Reference object */
    RME_FETCH_ADD(&(Prc_Root->Head.Root_Ref),1U);
ffffffff8021a0d7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021a0db:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021a0df:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a0e4:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a0e7:	e8 a7 26 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
ffffffff8021a0ec:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a0f0:	48 b9 00 00 00 00 00 	movabs $0x7000000000000,%rcx
ffffffff8021a0f7:	00 07 00 
ffffffff8021a0fa:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_INV,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021a0fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a102:	c9                   	leave
ffffffff8021a103:	c3                   	ret

ffffffff8021a104 <_RME_Inv_Del>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Del(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Cpt,
                              rme_cid_t Cap_Inv)
{
ffffffff8021a104:	f3 0f 1e fa          	endbr64
ffffffff8021a108:	55                   	push   %rbp
ffffffff8021a109:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a10c:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021a110:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021a114:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021a118:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t Type_Stat;
    /* These are for deletion */
    struct RME_Inv_Struct* Invocation;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021a11c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a120:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a125:	48 85 c0             	test   %rax,%rax
ffffffff8021a128:	0f 85 98 00 00 00    	jne    ffffffff8021a1c6 <_RME_Inv_Del+0xc2>
ffffffff8021a12e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a132:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a136:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021a13a:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a13d:	0f 93 c0             	setae  %al
ffffffff8021a140:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a143:	48 85 c0             	test   %rax,%rax
ffffffff8021a146:	74 0c                	je     ffffffff8021a154 <_RME_Inv_Del+0x50>
ffffffff8021a148:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a14f:	e9 9a 03 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a154:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a158:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a15c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a15f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a163:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a167:	48 01 d0             	add    %rdx,%rax
ffffffff8021a16a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a16e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a172:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a175:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a179:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a17d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a181:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a184:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a188:	0f 94 c0             	sete   %al
ffffffff8021a18b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a18e:	48 85 c0             	test   %rax,%rax
ffffffff8021a191:	74 0c                	je     ffffffff8021a19f <_RME_Inv_Del+0x9b>
ffffffff8021a193:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a19a:	e9 4f 03 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a19f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a1a3:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a1a7:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a1ab:	0f 95 c0             	setne  %al
ffffffff8021a1ae:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1b1:	48 85 c0             	test   %rax,%rax
ffffffff8021a1b4:	0f 84 4c 01 00 00    	je     ffffffff8021a306 <_RME_Inv_Del+0x202>
ffffffff8021a1ba:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a1c1:	e9 28 03 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a1c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a1ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a1ce:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a1d1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a1d5:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a1d9:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a1dc:	0f 93 c0             	setae  %al
ffffffff8021a1df:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a1e2:	48 85 c0             	test   %rax,%rax
ffffffff8021a1e5:	74 0c                	je     ffffffff8021a1f3 <_RME_Inv_Del+0xef>
ffffffff8021a1e7:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a1ee:	e9 fb 02 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a1f3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a1f7:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a1fb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a1ff:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a202:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a206:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a20a:	48 01 d0             	add    %rdx,%rax
ffffffff8021a20d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a211:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a215:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a218:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a21c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a220:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a224:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a227:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a22b:	0f 94 c0             	sete   %al
ffffffff8021a22e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a231:	48 85 c0             	test   %rax,%rax
ffffffff8021a234:	74 0c                	je     ffffffff8021a242 <_RME_Inv_Del+0x13e>
ffffffff8021a236:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a23d:	e9 ac 02 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a242:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a246:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a24a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a24e:	0f 95 c0             	setne  %al
ffffffff8021a251:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a254:	48 85 c0             	test   %rax,%rax
ffffffff8021a257:	74 0c                	je     ffffffff8021a265 <_RME_Inv_Del+0x161>
ffffffff8021a259:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a260:	e9 89 02 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a265:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a269:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a26e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a271:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a275:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a279:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a27c:	0f 93 c0             	setae  %al
ffffffff8021a27f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a282:	48 85 c0             	test   %rax,%rax
ffffffff8021a285:	74 0c                	je     ffffffff8021a293 <_RME_Inv_Del+0x18f>
ffffffff8021a287:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a28e:	e9 5b 02 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a293:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a297:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a29c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a2a0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a2a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a2a7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a2ab:	48 01 d0             	add    %rdx,%rax
ffffffff8021a2ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a2b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a2b6:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a2b9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a2bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a2c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a2c5:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a2c8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a2cc:	0f 94 c0             	sete   %al
ffffffff8021a2cf:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a2d2:	48 85 c0             	test   %rax,%rax
ffffffff8021a2d5:	74 0c                	je     ffffffff8021a2e3 <_RME_Inv_Del+0x1df>
ffffffff8021a2d7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a2de:	e9 0b 02 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a2e3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a2e7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a2eb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a2ef:	0f 95 c0             	setne  %al
ffffffff8021a2f2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a2f5:	48 85 c0             	test   %rax,%rax
ffffffff8021a2f8:	74 0c                	je     ffffffff8021a306 <_RME_Inv_Del+0x202>
ffffffff8021a2fa:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a301:	e9 e8 01 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
ffffffff8021a306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a30a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a30e:	83 e0 02             	and    $0x2,%eax
ffffffff8021a311:	48 85 c0             	test   %rax,%rax
ffffffff8021a314:	0f 94 c0             	sete   %al
ffffffff8021a317:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a31a:	48 85 c0             	test   %rax,%rax
ffffffff8021a31d:	74 0c                	je     ffffffff8021a32b <_RME_Inv_Del+0x227>
ffffffff8021a31f:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a326:	e9 c3 01 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff8021a32b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a32f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a333:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021a337:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a33a:	0f 93 c0             	setae  %al
ffffffff8021a33d:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a340:	48 85 c0             	test   %rax,%rax
ffffffff8021a343:	74 0c                	je     ffffffff8021a351 <_RME_Inv_Del+0x24d>
ffffffff8021a345:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a34c:	e9 9d 01 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a351:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a355:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a359:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a35c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a360:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a364:	48 01 d0             	add    %rdx,%rax
ffffffff8021a367:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Delete check */
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
ffffffff8021a36b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a36f:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a372:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a376:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a37a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a37e:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a381:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a385:	0f 95 c0             	setne  %al
ffffffff8021a388:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a38b:	48 85 c0             	test   %rax,%rax
ffffffff8021a38e:	74 0c                	je     ffffffff8021a39c <_RME_Inv_Del+0x298>
ffffffff8021a390:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a397:	e9 52 01 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a39c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a3a0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a3a4:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a3a8:	0f 95 c0             	setne  %al
ffffffff8021a3ab:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a3ae:	48 85 c0             	test   %rax,%rax
ffffffff8021a3b1:	74 0c                	je     ffffffff8021a3bf <_RME_Inv_Del+0x2bb>
ffffffff8021a3b3:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a3ba:	e9 2f 01 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a3bf:	48 8b 15 3a fc 00 00 	mov    0xfc3a(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8021a3c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a3ca:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021a3ce:	48 29 c2             	sub    %rax,%rdx
ffffffff8021a3d1:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021a3d5:	0f 96 c0             	setbe  %al
ffffffff8021a3d8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a3db:	48 98                	cltq
ffffffff8021a3dd:	48 85 c0             	test   %rax,%rax
ffffffff8021a3e0:	74 0c                	je     ffffffff8021a3ee <_RME_Inv_Del+0x2ea>
ffffffff8021a3e2:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff8021a3e9:	e9 00 01 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
ffffffff8021a3ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a3f2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a3f6:	48 85 c0             	test   %rax,%rax
ffffffff8021a3f9:	0f 95 c0             	setne  %al
ffffffff8021a3fc:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a3ff:	48 85 c0             	test   %rax,%rax
ffffffff8021a402:	74 44                	je     ffffffff8021a448 <_RME_Inv_Del+0x344>
ffffffff8021a404:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a408:	89 c0                	mov    %eax,%eax
ffffffff8021a40a:	48 85 c0             	test   %rax,%rax
ffffffff8021a40d:	0f 94 c0             	sete   %al
ffffffff8021a410:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a413:	48 85 c0             	test   %rax,%rax
ffffffff8021a416:	74 24                	je     ffffffff8021a43c <_RME_Inv_Del+0x338>
ffffffff8021a418:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021a41f:	00 ff ff 
ffffffff8021a422:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021a426:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a429:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a42d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a431:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a434:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a437:	e8 22 23 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a43c:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021a443:	e9 a6 00 00 00       	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
    
    /* Get the invocation */
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff8021a448:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a44c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a450:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    
    /* See if the invocation is currently being used. If yes, we cannot delete it */
    if(Invocation->Thd_Act!=(void*)RME_NULL)
ffffffff8021a454:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a458:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a45c:	48 85 c0             	test   %rax,%rax
ffffffff8021a45f:	74 2d                	je     ffffffff8021a48e <_RME_Inv_Del+0x38a>
    {
        RME_COV_MARKER();

        RME_CAP_DEFROST(Inv_Del,Type_Stat);
ffffffff8021a461:	48 b8 ff ff ff ff 00 	movabs $0xffff0000ffffffff,%rax
ffffffff8021a468:	00 ff ff 
ffffffff8021a46b:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff8021a46f:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a472:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a476:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a47a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a47d:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a480:	e8 d9 22 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff8021a485:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a48c:	eb 60                	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_DELETE(Inv_Del,Type_Stat);
ffffffff8021a48e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a492:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8021a496:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8021a49b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a49e:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a4a1:	e8 b8 22 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a4a6:	48 85 c0             	test   %rax,%rax
ffffffff8021a4a9:	0f 94 c0             	sete   %al
ffffffff8021a4ac:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a4af:	48 85 c0             	test   %rax,%rax
ffffffff8021a4b2:	74 09                	je     ffffffff8021a4bd <_RME_Inv_Del+0x3b9>
ffffffff8021a4b4:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021a4bb:	eb 31                	jmp    ffffffff8021a4ee <_RME_Inv_Del+0x3ea>
    
    /* Dereference the process */
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
ffffffff8021a4bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a4c1:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a4c5:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021a4c9:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021a4d0:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a4d3:	e8 bb 22 ff ff       	call   ffffffff8020c793 <_RME_X64_Fetch_Add>
    
    /* Try to clear the area - this must be successful */
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
ffffffff8021a4d8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a4dc:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021a4e1:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a4e4:	e8 16 82 ff ff       	call   ffffffff802126ff <_RME_Kot_Erase>
    
    return 0;
ffffffff8021a4e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a4ee:	c9                   	leave
ffffffff8021a4ef:	c3                   	ret

ffffffff8021a4f0 <_RME_Inv_Set>:
static rme_ret_t _RME_Inv_Set(struct RME_Cap_Cpt* Cpt,
                              rme_cid_t Cap_Inv,
                              rme_ptr_t Entry,
                              rme_ptr_t Stack,
                              rme_ptr_t Is_Exc_Ret)
{
ffffffff8021a4f0:	f3 0f 1e fa          	endbr64
ffffffff8021a4f4:	55                   	push   %rbp
ffffffff8021a4f5:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a4f8:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8021a4fc:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021a500:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021a504:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8021a508:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff8021a50c:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
    struct RME_Cap_Inv* Inv_Op;
    volatile struct RME_Inv_Struct* Invocation;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021a510:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a514:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a519:	48 85 c0             	test   %rax,%rax
ffffffff8021a51c:	0f 85 98 00 00 00    	jne    ffffffff8021a5ba <_RME_Inv_Set+0xca>
ffffffff8021a522:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a526:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a52a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021a52e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a531:	0f 93 c0             	setae  %al
ffffffff8021a534:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a537:	48 85 c0             	test   %rax,%rax
ffffffff8021a53a:	74 0c                	je     ffffffff8021a548 <_RME_Inv_Set+0x58>
ffffffff8021a53c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a543:	e9 03 02 00 00       	jmp    ffffffff8021a74b <_RME_Inv_Set+0x25b>
ffffffff8021a548:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a54c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a550:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a553:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a557:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a55b:	48 01 d0             	add    %rdx,%rax
ffffffff8021a55e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a562:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a566:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a569:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a56d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a571:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a575:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a578:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a57c:	0f 94 c0             	sete   %al
ffffffff8021a57f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a582:	48 85 c0             	test   %rax,%rax
ffffffff8021a585:	74 0c                	je     ffffffff8021a593 <_RME_Inv_Set+0xa3>
ffffffff8021a587:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a58e:	e9 b8 01 00 00       	jmp    ffffffff8021a74b <_RME_Inv_Set+0x25b>
ffffffff8021a593:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a597:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a59b:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a59f:	0f 95 c0             	setne  %al
ffffffff8021a5a2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a5a5:	48 85 c0             	test   %rax,%rax
ffffffff8021a5a8:	0f 84 46 01 00 00    	je     ffffffff8021a6f4 <_RME_Inv_Set+0x204>
ffffffff8021a5ae:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a5b5:	e9 91 01 00 00       	jmp    ffffffff8021a74b <_RME_Inv_Set+0x25b>
ffffffff8021a5ba:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a5be:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a5c2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a5c5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a5c9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a5cd:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a5d0:	0f 93 c0             	setae  %al
ffffffff8021a5d3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a5d6:	48 85 c0             	test   %rax,%rax
ffffffff8021a5d9:	74 0c                	je     ffffffff8021a5e7 <_RME_Inv_Set+0xf7>
ffffffff8021a5db:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a5e2:	e9 64 01 00 00       	jmp    ffffffff8021a74b <_RME_Inv_Set+0x25b>
ffffffff8021a5e7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a5eb:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a5ef:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a5f3:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a5f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021a5fa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a5fe:	48 01 d0             	add    %rdx,%rax
ffffffff8021a601:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a605:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a609:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a60c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a610:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a614:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a618:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a61b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a61f:	0f 94 c0             	sete   %al
ffffffff8021a622:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a625:	48 85 c0             	test   %rax,%rax
ffffffff8021a628:	74 0c                	je     ffffffff8021a636 <_RME_Inv_Set+0x146>
ffffffff8021a62a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a631:	e9 15 01 00 00       	jmp    ffffffff8021a74b <_RME_Inv_Set+0x25b>
ffffffff8021a636:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a63a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a63e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a642:	0f 95 c0             	setne  %al
ffffffff8021a645:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a648:	48 85 c0             	test   %rax,%rax
ffffffff8021a64b:	74 0c                	je     ffffffff8021a659 <_RME_Inv_Set+0x169>
ffffffff8021a64d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a654:	e9 f2 00 00 00       	jmp    ffffffff8021a74b <_RME_Inv_Set+0x25b>
ffffffff8021a659:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a65d:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a662:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a665:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a669:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a66d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a670:	0f 93 c0             	setae  %al
ffffffff8021a673:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a676:	48 85 c0             	test   %rax,%rax
ffffffff8021a679:	74 0c                	je     ffffffff8021a687 <_RME_Inv_Set+0x197>
ffffffff8021a67b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a682:	e9 c4 00 00 00       	jmp    ffffffff8021a74b <_RME_Inv_Set+0x25b>
ffffffff8021a687:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021a68b:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a690:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a694:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a697:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a69b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a69f:	48 01 d0             	add    %rdx,%rax
ffffffff8021a6a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a6a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a6aa:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a6ad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a6b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a6b5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a6b9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a6bc:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a6c0:	0f 94 c0             	sete   %al
ffffffff8021a6c3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a6c6:	48 85 c0             	test   %rax,%rax
ffffffff8021a6c9:	74 09                	je     ffffffff8021a6d4 <_RME_Inv_Set+0x1e4>
ffffffff8021a6cb:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a6d2:	eb 77                	jmp    ffffffff8021a74b <_RME_Inv_Set+0x25b>
ffffffff8021a6d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a6d8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a6dc:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a6e0:	0f 95 c0             	setne  %al
ffffffff8021a6e3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a6e6:	48 85 c0             	test   %rax,%rax
ffffffff8021a6e9:	74 09                	je     ffffffff8021a6f4 <_RME_Inv_Set+0x204>
ffffffff8021a6eb:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a6f2:	eb 57                	jmp    ffffffff8021a74b <_RME_Inv_Set+0x25b>
                   struct RME_Cap_Inv*,Inv_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff8021a6f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a6f8:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a6fc:	83 e0 01             	and    $0x1,%eax
ffffffff8021a6ff:	48 85 c0             	test   %rax,%rax
ffffffff8021a702:	0f 94 c0             	sete   %al
ffffffff8021a705:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a708:	48 85 c0             	test   %rax,%rax
ffffffff8021a70b:	74 09                	je     ffffffff8021a716 <_RME_Inv_Set+0x226>
ffffffff8021a70d:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a714:	eb 35                	jmp    ffffffff8021a74b <_RME_Inv_Set+0x25b>
    
    /* Commit the change - we do not care if the invocation is in use, it is
     * the user's responsibility to guarantee the integrity of applications */
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021a716:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a71a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a71e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Invocation->Entry=Entry;
ffffffff8021a722:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a726:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021a72a:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Invocation->Stack=Stack;
ffffffff8021a72e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a732:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8021a736:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
ffffffff8021a73a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a73e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021a742:	48 89 50 30          	mov    %rdx,0x30(%rax)
    
    return 0;
ffffffff8021a746:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021a74b:	c9                   	leave
ffffffff8021a74c:	c3                   	ret

ffffffff8021a74d <_RME_Inv_Act>:
******************************************************************************/
static rme_ret_t _RME_Inv_Act(struct RME_Cap_Cpt* Cpt, 
                              struct RME_Reg_Struct* Reg,
                              rme_cid_t Cap_Inv,
                              rme_ptr_t Param)
{
ffffffff8021a74d:	f3 0f 1e fa          	endbr64
ffffffff8021a751:	55                   	push   %rbp
ffffffff8021a752:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021a755:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8021a759:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8021a75d:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8021a761:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8021a765:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
        /* No action required */
    }
#endif

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
ffffffff8021a769:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a76d:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021a772:	48 85 c0             	test   %rax,%rax
ffffffff8021a775:	0f 85 98 00 00 00    	jne    ffffffff8021a813 <_RME_Inv_Act+0xc6>
ffffffff8021a77b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a77f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a783:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8021a787:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a78a:	0f 93 c0             	setae  %al
ffffffff8021a78d:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a790:	48 85 c0             	test   %rax,%rax
ffffffff8021a793:	74 0c                	je     ffffffff8021a7a1 <_RME_Inv_Act+0x54>
ffffffff8021a795:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a79c:	e9 fa 02 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>
ffffffff8021a7a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a7a5:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a7a9:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a7ac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a7b0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a7b4:	48 01 d0             	add    %rdx,%rax
ffffffff8021a7b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a7bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a7bf:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a7c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a7c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a7ca:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a7ce:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a7d1:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a7d5:	0f 94 c0             	sete   %al
ffffffff8021a7d8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a7db:	48 85 c0             	test   %rax,%rax
ffffffff8021a7de:	74 0c                	je     ffffffff8021a7ec <_RME_Inv_Act+0x9f>
ffffffff8021a7e0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a7e7:	e9 af 02 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>
ffffffff8021a7ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a7f0:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a7f4:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a7f8:	0f 95 c0             	setne  %al
ffffffff8021a7fb:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a7fe:	48 85 c0             	test   %rax,%rax
ffffffff8021a801:	0f 84 4c 01 00 00    	je     ffffffff8021a953 <_RME_Inv_Act+0x206>
ffffffff8021a807:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a80e:	e9 88 02 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>
ffffffff8021a813:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a817:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a81b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a81e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a822:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a826:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a829:	0f 93 c0             	setae  %al
ffffffff8021a82c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a82f:	48 85 c0             	test   %rax,%rax
ffffffff8021a832:	74 0c                	je     ffffffff8021a840 <_RME_Inv_Act+0xf3>
ffffffff8021a834:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a83b:	e9 5b 02 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>
ffffffff8021a840:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a844:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021a848:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a84c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a84f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021a853:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a857:	48 01 d0             	add    %rdx,%rax
ffffffff8021a85a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a85e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a862:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a865:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a869:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a86d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a871:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a874:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a878:	0f 94 c0             	sete   %al
ffffffff8021a87b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a87e:	48 85 c0             	test   %rax,%rax
ffffffff8021a881:	74 0c                	je     ffffffff8021a88f <_RME_Inv_Act+0x142>
ffffffff8021a883:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a88a:	e9 0c 02 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>
ffffffff8021a88f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a893:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a897:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021a89b:	0f 95 c0             	setne  %al
ffffffff8021a89e:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8a1:	48 85 c0             	test   %rax,%rax
ffffffff8021a8a4:	74 0c                	je     ffffffff8021a8b2 <_RME_Inv_Act+0x165>
ffffffff8021a8a6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a8ad:	e9 e9 01 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>
ffffffff8021a8b2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a8b6:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a8bb:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a8be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a8c2:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021a8c6:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021a8c9:	0f 93 c0             	setae  %al
ffffffff8021a8cc:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a8cf:	48 85 c0             	test   %rax,%rax
ffffffff8021a8d2:	74 0c                	je     ffffffff8021a8e0 <_RME_Inv_Act+0x193>
ffffffff8021a8d4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a8db:	e9 bb 01 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>
ffffffff8021a8e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8021a8e4:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021a8e9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a8ed:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a8f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a8f4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a8f8:	48 01 d0             	add    %rdx,%rax
ffffffff8021a8fb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021a8ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a903:	48 8b 00             	mov    (%rax),%rax
ffffffff8021a906:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021a90a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a90e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021a912:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021a915:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021a919:	0f 94 c0             	sete   %al
ffffffff8021a91c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a91f:	48 85 c0             	test   %rax,%rax
ffffffff8021a922:	74 0c                	je     ffffffff8021a930 <_RME_Inv_Act+0x1e3>
ffffffff8021a924:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a92b:	e9 6b 01 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>
ffffffff8021a930:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021a934:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a938:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff8021a93c:	0f 95 c0             	setne  %al
ffffffff8021a93f:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a942:	48 85 c0             	test   %rax,%rax
ffffffff8021a945:	74 0c                	je     ffffffff8021a953 <_RME_Inv_Act+0x206>
ffffffff8021a947:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a94e:	e9 48 01 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>
                   struct RME_Cap_Inv*,Inv_Op,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8021a953:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a957:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021a95b:	83 e0 02             	and    $0x2,%eax
ffffffff8021a95e:	48 85 c0             	test   %rax,%rax
ffffffff8021a961:	0f 94 c0             	sete   %al
ffffffff8021a964:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a967:	48 85 c0             	test   %rax,%rax
ffffffff8021a96a:	74 0c                	je     ffffffff8021a978 <_RME_Inv_Act+0x22b>
ffffffff8021a96c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a973:	e9 23 01 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>

    /* Get the invocation struct */
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021a978:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021a97c:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a980:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Check if this invocation port is already active */
    Thd_Act=Invocation->Thd_Act;
ffffffff8021a984:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a988:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021a98c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if(RME_UNLIKELY(Thd_Act!=(void*)0U))
ffffffff8021a990:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8021a995:	0f 95 c0             	setne  %al
ffffffff8021a998:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a99b:	48 85 c0             	test   %rax,%rax
ffffffff8021a99e:	74 0c                	je     ffffffff8021a9ac <_RME_Inv_Act+0x25f>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021a9a0:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a9a7:	e9 ef 00 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>
        RME_COV_MARKER();
        /* No action required */
    }

#if(RME_CPT_ENTRY_MAX==0U)
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8021a9ac:	e8 8e 0e ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021a9b1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021a9b5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
#endif
    
    /* Try to do CAS and activate this port */
    if(RME_UNLIKELY(RME_COMP_SWAP((volatile rme_ptr_t*)&(Invocation->Thd_Act),
ffffffff8021a9b9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021a9bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021a9c1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8021a9c5:	48 83 c1 18          	add    $0x18,%rcx
ffffffff8021a9c9:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a9cc:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021a9cf:	e8 8a 1d ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021a9d4:	48 85 c0             	test   %rax,%rax
ffffffff8021a9d7:	0f 94 c0             	sete   %al
ffffffff8021a9da:	0f b6 c0             	movzbl %al,%eax
ffffffff8021a9dd:	48 85 c0             	test   %rax,%rax
ffffffff8021a9e0:	74 0c                	je     ffffffff8021a9ee <_RME_Inv_Act+0x2a1>
                                  (rme_ptr_t)Thd_Act,
                                  (rme_ptr_t)Thd_Cur)==RME_CASFAIL))
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_ACT;
ffffffff8021a9e2:	48 c7 c0 d3 fe ff ff 	mov    $0xfffffffffffffed3,%rax
ffffffff8021a9e9:	e9 ad 00 00 00       	jmp    ffffffff8021aa9b <_RME_Inv_Act+0x34e>

    /* Save whatever is needed to return to the point - normally only SP and IP needed
     * because all other registers, including the coprocessor registers, are saved at
     * user-level. We do not set the return value because it will be set by Inv_Ret.
     * The coprocessor state will be consistent across the call */
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
ffffffff8021a9ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021a9f2:	48 8d 50 38          	lea    0x38(%rax),%rdx
ffffffff8021a9f6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8021a9fa:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a9fd:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021aa00:	e8 f4 b6 00 00       	call   ffffffff802260f9 <__RME_Inv_Reg_Save>
    /* Push this into the stack: insert after the thread list header */
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021aa05:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aa09:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
                  &(Thd_Cur->Ctx.Invstk),
ffffffff8021aa10:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aa14:	48 8d 88 98 00 00 00 	lea    0x98(%rax),%rcx
    _RME_List_Ins(&(Invocation->Head),
ffffffff8021aa1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa1f:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021aa22:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aa25:	e8 88 23 ff ff       	call   ffffffff8020cdb2 <_RME_List_Ins>
                  Thd_Cur->Ctx.Invstk.Next);
    /* Increase invocation depth - no atomic operation needed */
    Thd_Cur->Ctx.Invstk_Depth++;
ffffffff8021aa2a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aa2e:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021aa35:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff8021aa39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aa3d:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
    /* Setup the register contents, and do the invocation */
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
ffffffff8021aa44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa48:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff8021aa4c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa50:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8021aa54:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021aa58:	48 8b 89 88 00 00 00 	mov    0x88(%rcx),%rcx
ffffffff8021aa5f:	48 be ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rsi
ffffffff8021aa66:	ff ff 7f 
ffffffff8021aa69:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021aa6c:	48 21 f7             	and    %rsi,%rdi
ffffffff8021aa6f:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff8021aa73:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8021aa77:	49 89 f0             	mov    %rsi,%r8
ffffffff8021aa7a:	48 89 c6             	mov    %rax,%rsi
ffffffff8021aa7d:	e8 04 b4 00 00       	call   ffffffff80225e86 <__RME_Thd_Reg_Init>
    /* We are assuming that we are always invoking into a new process (why use synchronous
     * invocation if you don't do so?). So we always switch page tables regardless. */
#if(RME_PGT_RAW_ENABLE==0U)
    RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
    __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8021aa82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aa86:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021aa8a:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021aa8e:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aa91:	e8 2d be 00 00       	call   ffffffff802268c3 <__RME_Pgt_Set>
    
    return 0;
ffffffff8021aa96:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021aa9b:	c9                   	leave
ffffffff8021aa9c:	c3                   	ret

ffffffff8021aa9d <_RME_Inv_Ret>:
Return      : rme_ret_t - If successful, 0; or an error code.
******************************************************************************/
static rme_ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg,
                              rme_ptr_t Retval,
                              rme_ptr_t Is_Exc)
{
ffffffff8021aa9d:	f3 0f 1e fa          	endbr64
ffffffff8021aaa1:	55                   	push   %rbp
ffffffff8021aaa2:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021aaa5:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021aaa9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021aaad:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021aab1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
ffffffff8021aab5:	e8 85 0d ff ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8021aaba:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021aabe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8021aac2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aac6:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021aacd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aad1:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021aad7:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021aada:	74 0d                	je     ffffffff8021aae9 <_RME_Inv_Ret+0x4c>
ffffffff8021aadc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aae0:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021aae7:	eb 05                	jmp    ffffffff8021aaee <_RME_Inv_Ret+0x51>
ffffffff8021aae9:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021aaee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(RME_UNLIKELY(Invocation==(void*)RME_NULL))
ffffffff8021aaf2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021aaf7:	0f 94 c0             	sete   %al
ffffffff8021aafa:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aafd:	48 85 c0             	test   %rax,%rax
ffffffff8021ab00:	74 0c                	je     ffffffff8021ab0e <_RME_Inv_Ret+0x71>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_EMPTY;
ffffffff8021ab02:	48 c7 c0 d0 fe ff ff 	mov    $0xfffffffffffffed0,%rax
ffffffff8021ab09:	e9 38 01 00 00       	jmp    ffffffff8021ac46 <_RME_Inv_Ret+0x1a9>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
ffffffff8021ab0e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8021ab13:	0f 95 c0             	setne  %al
ffffffff8021ab16:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ab19:	48 85 c0             	test   %rax,%rax
ffffffff8021ab1c:	74 22                	je     ffffffff8021ab40 <_RME_Inv_Ret+0xa3>
ffffffff8021ab1e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ab22:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ab26:	48 85 c0             	test   %rax,%rax
ffffffff8021ab29:	0f 94 c0             	sete   %al
ffffffff8021ab2c:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ab2f:	48 85 c0             	test   %rax,%rax
ffffffff8021ab32:	74 0c                	je     ffffffff8021ab40 <_RME_Inv_Ret+0xa3>
    {
        RME_COV_MARKER();

        return RME_ERR_SIV_FAULT;
ffffffff8021ab34:	48 c7 c0 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rax
ffffffff8021ab3b:	e9 06 01 00 00       	jmp    ffffffff8021ac46 <_RME_Inv_Ret+0x1a9>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
ffffffff8021ab40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ab44:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021ab47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ab4b:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021ab4f:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021ab52:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ab55:	e8 2a 22 ff ff       	call   ffffffff8020cd84 <_RME_List_Del>
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;
ffffffff8021ab5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ab5e:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8021ab65:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
ffffffff8021ab69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ab6d:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
ffffffff8021ab74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ab78:	48 8d 50 38          	lea    0x38(%rax),%rdx
ffffffff8021ab7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ab80:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021ab83:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ab86:	e8 aa b5 00 00       	call   ffffffff80226135 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
ffffffff8021ab8b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021ab8f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021ab93:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021ab96:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ab99:	e8 59 c6 00 00       	call   ffffffff802271f7 <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
ffffffff8021ab9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021aba2:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021aba9:	00 

    /* Decide the system call's return value */
    if(RME_UNLIKELY(Is_Exc!=0U))
ffffffff8021abaa:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8021abaf:	0f 95 c0             	setne  %al
ffffffff8021abb2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021abb5:	48 85 c0             	test   %rax,%rax
ffffffff8021abb8:	74 15                	je     ffffffff8021abcf <_RME_Inv_Ret+0x132>
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
ffffffff8021abba:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021abbe:	48 c7 c6 d2 fe ff ff 	mov    $0xfffffffffffffed2,%rsi
ffffffff8021abc5:	48 89 c7             	mov    %rax,%rdi
ffffffff8021abc8:	e8 08 c6 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
ffffffff8021abcd:	eb 11                	jmp    ffffffff8021abe0 <_RME_Inv_Ret+0x143>
    }
    else
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg,0);
ffffffff8021abcf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021abd3:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021abd8:	48 89 c7             	mov    %rax,%rdi
ffffffff8021abdb:	e8 f5 c5 00 00       	call   ffffffff802271d5 <__RME_Svc_Retval_Set>
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
ffffffff8021abe0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021abe4:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8021abeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021abef:	48 05 98 00 00 00    	add    $0x98,%rax
ffffffff8021abf5:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021abf8:	74 0d                	je     ffffffff8021ac07 <_RME_Inv_Ret+0x16a>
ffffffff8021abfa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021abfe:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8021ac05:	eb 05                	jmp    ffffffff8021ac0c <_RME_Inv_Ret+0x16f>
ffffffff8021ac07:	b8 00 00 00 00       	mov    $0x0,%eax
ffffffff8021ac0c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Invocation!=(void*)RME_NULL)
ffffffff8021ac10:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021ac15:	74 16                	je     ffffffff8021ac2d <_RME_Inv_Ret+0x190>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Invocation->Prc->Pgt);
ffffffff8021ac17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ac1b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021ac1f:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ac23:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ac26:	e8 98 bc 00 00       	call   ffffffff802268c3 <__RME_Pgt_Set>
ffffffff8021ac2b:	eb 14                	jmp    ffffffff8021ac41 <_RME_Inv_Ret+0x1a4>
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
#endif
        __RME_Pgt_Set((rme_ptr_t)Thread->Sched.Prc->Pgt);
ffffffff8021ac2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ac31:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8021ac35:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8021ac39:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ac3c:	e8 82 bc 00 00       	call   ffffffff802268c3 <__RME_Pgt_Set>
    }
    
    return 0;
ffffffff8021ac41:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021ac46:	c9                   	leave
ffffffff8021ac47:	c3                   	ret

ffffffff8021ac48 <_RME_Kfn_Boot_Crt>:
Return      : rme_ret_t - If successful, 0; or error code.
******************************************************************************/
rme_ret_t _RME_Kfn_Boot_Crt(struct RME_Cap_Cpt* Cpt,
                            rme_cid_t Cap_Cpt,
                            rme_cid_t Cap_Kfn)
{
ffffffff8021ac48:	f3 0f 1e fa          	endbr64
ffffffff8021ac4c:	55                   	push   %rbp
ffffffff8021ac4d:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021ac50:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8021ac54:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021ac58:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8021ac5c:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    struct RME_Cap_Cpt* Cpt_Op;
    volatile struct RME_Cap_Kfn* Kfn_Crt;
    rme_ptr_t Type_Stat;
    
    /* Get the cap location that we care about */
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
ffffffff8021ac60:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ac64:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021ac69:	48 85 c0             	test   %rax,%rax
ffffffff8021ac6c:	0f 85 98 00 00 00    	jne    ffffffff8021ad0a <_RME_Kfn_Boot_Crt+0xc2>
ffffffff8021ac72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ac76:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ac7a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021ac7e:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ac81:	0f 93 c0             	setae  %al
ffffffff8021ac84:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ac87:	48 85 c0             	test   %rax,%rax
ffffffff8021ac8a:	74 0c                	je     ffffffff8021ac98 <_RME_Kfn_Boot_Crt+0x50>
ffffffff8021ac8c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ac93:	e9 98 02 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ac98:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ac9c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021aca0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021aca3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021aca7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021acab:	48 01 d0             	add    %rdx,%rax
ffffffff8021acae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021acb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021acb6:	48 8b 00             	mov    (%rax),%rax
ffffffff8021acb9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021acbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021acc1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021acc5:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021acc8:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021accc:	0f 94 c0             	sete   %al
ffffffff8021accf:	0f b6 c0             	movzbl %al,%eax
ffffffff8021acd2:	48 85 c0             	test   %rax,%rax
ffffffff8021acd5:	74 0c                	je     ffffffff8021ace3 <_RME_Kfn_Boot_Crt+0x9b>
ffffffff8021acd7:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021acde:	e9 4d 02 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ace3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ace7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021aceb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021acef:	0f 95 c0             	setne  %al
ffffffff8021acf2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021acf5:	48 85 c0             	test   %rax,%rax
ffffffff8021acf8:	0f 84 4c 01 00 00    	je     ffffffff8021ae4a <_RME_Kfn_Boot_Crt+0x202>
ffffffff8021acfe:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ad05:	e9 26 02 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ad0a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ad0e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ad12:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ad15:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ad19:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ad1d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ad20:	0f 93 c0             	setae  %al
ffffffff8021ad23:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad26:	48 85 c0             	test   %rax,%rax
ffffffff8021ad29:	74 0c                	je     ffffffff8021ad37 <_RME_Kfn_Boot_Crt+0xef>
ffffffff8021ad2b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ad32:	e9 f9 01 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ad37:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021ad3b:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ad3f:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ad43:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ad46:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021ad4a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021ad4e:	48 01 d0             	add    %rdx,%rax
ffffffff8021ad51:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021ad55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ad59:	48 8b 00             	mov    (%rax),%rax
ffffffff8021ad5c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ad60:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ad64:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ad68:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ad6b:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ad6f:	0f 94 c0             	sete   %al
ffffffff8021ad72:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad75:	48 85 c0             	test   %rax,%rax
ffffffff8021ad78:	74 0c                	je     ffffffff8021ad86 <_RME_Kfn_Boot_Crt+0x13e>
ffffffff8021ad7a:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ad81:	e9 aa 01 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ad86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ad8a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ad8e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ad92:	0f 95 c0             	setne  %al
ffffffff8021ad95:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ad98:	48 85 c0             	test   %rax,%rax
ffffffff8021ad9b:	74 0c                	je     ffffffff8021ada9 <_RME_Kfn_Boot_Crt+0x161>
ffffffff8021ad9d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ada4:	e9 87 01 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ada9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021adad:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021adb2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021adb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021adb9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021adbd:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021adc0:	0f 93 c0             	setae  %al
ffffffff8021adc3:	0f b6 c0             	movzbl %al,%eax
ffffffff8021adc6:	48 85 c0             	test   %rax,%rax
ffffffff8021adc9:	74 0c                	je     ffffffff8021add7 <_RME_Kfn_Boot_Crt+0x18f>
ffffffff8021adcb:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021add2:	e9 59 01 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021add7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021addb:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021ade0:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ade4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ade7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021adeb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021adef:	48 01 d0             	add    %rdx,%rax
ffffffff8021adf2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021adf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021adfa:	48 8b 00             	mov    (%rax),%rax
ffffffff8021adfd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021ae01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ae05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ae09:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021ae0c:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021ae10:	0f 94 c0             	sete   %al
ffffffff8021ae13:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae16:	48 85 c0             	test   %rax,%rax
ffffffff8021ae19:	74 0c                	je     ffffffff8021ae27 <_RME_Kfn_Boot_Crt+0x1df>
ffffffff8021ae1b:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021ae22:	e9 09 01 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ae27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ae2b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ae2f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ae33:	0f 95 c0             	setne  %al
ffffffff8021ae36:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae39:	48 85 c0             	test   %rax,%rax
ffffffff8021ae3c:	74 0c                	je     ffffffff8021ae4a <_RME_Kfn_Boot_Crt+0x202>
ffffffff8021ae3e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ae45:	e9 e6 00 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
ffffffff8021ae4a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ae4e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021ae52:	83 e0 01             	and    $0x1,%eax
ffffffff8021ae55:	48 85 c0             	test   %rax,%rax
ffffffff8021ae58:	0f 94 c0             	sete   %al
ffffffff8021ae5b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae5e:	48 85 c0             	test   %rax,%rax
ffffffff8021ae61:	74 0c                	je     ffffffff8021ae6f <_RME_Kfn_Boot_Crt+0x227>
ffffffff8021ae63:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021ae6a:	e9 c1 00 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Op,Cap_Kfn,struct RME_Cap_Kfn*,Kfn_Crt);
ffffffff8021ae6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ae73:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021ae77:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8021ae7b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ae7e:	0f 93 c0             	setae  %al
ffffffff8021ae81:	0f b6 c0             	movzbl %al,%eax
ffffffff8021ae84:	48 85 c0             	test   %rax,%rax
ffffffff8021ae87:	74 0c                	je     ffffffff8021ae95 <_RME_Kfn_Boot_Crt+0x24d>
ffffffff8021ae89:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ae90:	e9 9b 00 00 00       	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021ae95:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021ae99:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ae9d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021aea0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021aea4:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021aea8:	48 01 d0             	add    %rdx,%rax
ffffffff8021aeab:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Kfn_Crt);
ffffffff8021aeaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aeb3:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8021aeba:	00 00 00 
ffffffff8021aebd:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021aec2:	48 89 c7             	mov    %rax,%rdi
ffffffff8021aec5:	e8 94 18 ff ff       	call   ffffffff8020c75e <_RME_X64_Comp_Swap>
ffffffff8021aeca:	48 85 c0             	test   %rax,%rax
ffffffff8021aecd:	0f 94 c0             	sete   %al
ffffffff8021aed0:	0f b6 c0             	movzbl %al,%eax
ffffffff8021aed3:	48 85 c0             	test   %rax,%rax
ffffffff8021aed6:	74 09                	je     ffffffff8021aee1 <_RME_Kfn_Boot_Crt+0x299>
ffffffff8021aed8:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021aedf:	eb 4f                	jmp    ffffffff8021af30 <_RME_Kfn_Boot_Crt+0x2e8>
ffffffff8021aee1:	48 8b 15 18 f1 00 00 	mov    0xf118(%rip),%rdx        # ffffffff8022a000 <RME_x64_timestamp>
ffffffff8021aee8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aeec:	48 89 50 20          	mov    %rdx,0x20(%rax)
    
    /* Header init */
    Kfn_Crt->Head.Root_Ref=1U;
ffffffff8021aef0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021aef4:	48 c7 40 08 01 00 00 	movq   $0x1,0x8(%rax)
ffffffff8021aefb:	00 
    Kfn_Crt->Head.Object=0U;
ffffffff8021aefc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af00:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021af07:	00 
    Kfn_Crt->Head.Flag=RME_KFN_FLAG_FULL_RANGE;
ffffffff8021af08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af0c:	48 b9 00 00 00 00 ff 	movabs $0xffffffff00000000,%rcx
ffffffff8021af13:	ff ff ff 
ffffffff8021af16:	48 89 48 10          	mov    %rcx,0x10(%rax)
    
    /* Establish cap */
    RME_WRITE_RELEASE(&(Kfn_Crt->Head.Type_Stat),
ffffffff8021af1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af1e:	48 b9 00 00 00 00 00 	movabs $0x1000000000000,%rcx
ffffffff8021af25:	00 01 00 
ffffffff8021af28:	48 89 08             	mov    %rcx,(%rax)
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_KFN,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
ffffffff8021af2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021af30:	c9                   	leave
ffffffff8021af31:	c3                   	ret

ffffffff8021af32 <_RME_Kfn_Act>:
                              rme_cid_t Cap_Kfn,
                              rme_ptr_t Func_ID,
                              rme_ptr_t Sub_ID,
                              rme_ptr_t Param1,
                              rme_ptr_t Param2)
{
ffffffff8021af32:	f3 0f 1e fa          	endbr64
ffffffff8021af36:	55                   	push   %rbp
ffffffff8021af37:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021af3a:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021af3e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021af42:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021af46:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8021af4a:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff8021af4e:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff8021af52:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
ffffffff8021af56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021af5a:	25 00 80 00 00       	and    $0x8000,%eax
ffffffff8021af5f:	48 85 c0             	test   %rax,%rax
ffffffff8021af62:	0f 85 98 00 00 00    	jne    ffffffff8021b000 <_RME_Kfn_Act+0xce>
ffffffff8021af68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af6c:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021af70:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021af74:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021af77:	0f 93 c0             	setae  %al
ffffffff8021af7a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021af7d:	48 85 c0             	test   %rax,%rax
ffffffff8021af80:	74 0c                	je     ffffffff8021af8e <_RME_Kfn_Act+0x5c>
ffffffff8021af82:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021af89:	e9 fd 01 00 00       	jmp    ffffffff8021b18b <_RME_Kfn_Act+0x259>
ffffffff8021af8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021af92:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021af96:	48 89 c2             	mov    %rax,%rdx
ffffffff8021af99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021af9d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021afa1:	48 01 d0             	add    %rdx,%rax
ffffffff8021afa4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021afa8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021afac:	48 8b 00             	mov    (%rax),%rax
ffffffff8021afaf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021afb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021afb7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021afbb:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021afbe:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021afc2:	0f 94 c0             	sete   %al
ffffffff8021afc5:	0f b6 c0             	movzbl %al,%eax
ffffffff8021afc8:	48 85 c0             	test   %rax,%rax
ffffffff8021afcb:	74 0c                	je     ffffffff8021afd9 <_RME_Kfn_Act+0xa7>
ffffffff8021afcd:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021afd4:	e9 b2 01 00 00       	jmp    ffffffff8021b18b <_RME_Kfn_Act+0x259>
ffffffff8021afd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021afdd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021afe1:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021afe5:	0f 95 c0             	setne  %al
ffffffff8021afe8:	0f b6 c0             	movzbl %al,%eax
ffffffff8021afeb:	48 85 c0             	test   %rax,%rax
ffffffff8021afee:	0f 84 46 01 00 00    	je     ffffffff8021b13a <_RME_Kfn_Act+0x208>
ffffffff8021aff4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021affb:	e9 8b 01 00 00       	jmp    ffffffff8021b18b <_RME_Kfn_Act+0x259>
ffffffff8021b000:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b004:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021b008:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b00b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b00f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021b013:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b016:	0f 93 c0             	setae  %al
ffffffff8021b019:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b01c:	48 85 c0             	test   %rax,%rax
ffffffff8021b01f:	74 0c                	je     ffffffff8021b02d <_RME_Kfn_Act+0xfb>
ffffffff8021b021:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021b028:	e9 5e 01 00 00       	jmp    ffffffff8021b18b <_RME_Kfn_Act+0x259>
ffffffff8021b02d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b031:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021b035:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021b039:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b03c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b040:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021b044:	48 01 d0             	add    %rdx,%rax
ffffffff8021b047:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021b04b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b04f:	48 8b 00             	mov    (%rax),%rax
ffffffff8021b052:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021b056:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b05a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b05e:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b061:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021b065:	0f 94 c0             	sete   %al
ffffffff8021b068:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b06b:	48 85 c0             	test   %rax,%rax
ffffffff8021b06e:	74 0c                	je     ffffffff8021b07c <_RME_Kfn_Act+0x14a>
ffffffff8021b070:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021b077:	e9 0f 01 00 00       	jmp    ffffffff8021b18b <_RME_Kfn_Act+0x259>
ffffffff8021b07c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b080:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021b084:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021b088:	0f 95 c0             	setne  %al
ffffffff8021b08b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b08e:	48 85 c0             	test   %rax,%rax
ffffffff8021b091:	74 0c                	je     ffffffff8021b09f <_RME_Kfn_Act+0x16d>
ffffffff8021b093:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021b09a:	e9 ec 00 00 00       	jmp    ffffffff8021b18b <_RME_Kfn_Act+0x259>
ffffffff8021b09f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b0a3:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021b0a8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b0ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b0af:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8021b0b3:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b0b6:	0f 93 c0             	setae  %al
ffffffff8021b0b9:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b0bc:	48 85 c0             	test   %rax,%rax
ffffffff8021b0bf:	74 0c                	je     ffffffff8021b0cd <_RME_Kfn_Act+0x19b>
ffffffff8021b0c1:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021b0c8:	e9 be 00 00 00       	jmp    ffffffff8021b18b <_RME_Kfn_Act+0x259>
ffffffff8021b0cd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b0d1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021b0d6:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021b0da:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b0dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b0e1:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021b0e5:	48 01 d0             	add    %rdx,%rax
ffffffff8021b0e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8021b0ec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b0f0:	48 8b 00             	mov    (%rax),%rax
ffffffff8021b0f3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8021b0f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b0fb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b0ff:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b102:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021b106:	0f 94 c0             	sete   %al
ffffffff8021b109:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b10c:	48 85 c0             	test   %rax,%rax
ffffffff8021b10f:	74 09                	je     ffffffff8021b11a <_RME_Kfn_Act+0x1e8>
ffffffff8021b111:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021b118:	eb 71                	jmp    ffffffff8021b18b <_RME_Kfn_Act+0x259>
ffffffff8021b11a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b11e:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021b122:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b126:	0f 95 c0             	setne  %al
ffffffff8021b129:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b12c:	48 85 c0             	test   %rax,%rax
ffffffff8021b12f:	74 09                	je     ffffffff8021b13a <_RME_Kfn_Act+0x208>
ffffffff8021b131:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021b138:	eb 51                	jmp    ffffffff8021b18b <_RME_Kfn_Act+0x259>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021b13a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b13e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b142:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021b146:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021b14a:	72 10                	jb     ffffffff8021b15c <_RME_Kfn_Act+0x22a>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
ffffffff8021b14c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b150:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b154:	89 c0                	mov    %eax,%eax
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
ffffffff8021b156:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
ffffffff8021b15a:	73 09                	jae    ffffffff8021b165 <_RME_Kfn_Act+0x233>
    {
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
ffffffff8021b15c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021b163:	eb 26                	jmp    ffffffff8021b18b <_RME_Kfn_Act+0x259>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
ffffffff8021b165:	4c 8b 45 10          	mov    0x10(%rbp),%r8
ffffffff8021b169:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8021b16d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021b171:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8021b175:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8021b179:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b17d:	4d 89 c1             	mov    %r8,%r9
ffffffff8021b180:	49 89 f8             	mov    %rdi,%r8
ffffffff8021b183:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b186:	e8 75 00 00 00       	call   ffffffff8021b200 <__RME_Kfn_Handler>
}
ffffffff8021b18b:	c9                   	leave
ffffffff8021b18c:	c3                   	ret

ffffffff8021b18d <_RME_X64_Comp_Swap>:
                Checksum+=( rme_ptr_t)Pos[Count+Check_Cnt];
            }
            /* Is the checksum good? */
            if((Checksum&0xFF)==0)
            {
                return (struct RME_X64_ACPI_RDSP_Desc*)&(Pos[Count]);
ffffffff8021b18d:	55                   	push   %rbp
ffffffff8021b18e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b191:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8021b195:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8021b199:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8021b19d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
            }
        }
ffffffff8021b1a1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021b1a5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8021b1a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b1ad:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8021b1b1:	f0 48 0f b1 0a       	lock cmpxchg %rcx,(%rdx)
ffffffff8021b1b6:	0f 94 c0             	sete   %al
ffffffff8021b1b9:	88 45 ff             	mov    %al,-0x1(%rbp)
    }
    return 0;
}
/* End Function:__RME_X64_RDSP_Scan ******************************************/
ffffffff8021b1bc:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax

ffffffff8021b1c0:	c9                   	leave
ffffffff8021b1c1:	c3                   	ret

ffffffff8021b1c2 <main>:
{
ffffffff8021b1c2:	f3 0f 1e fa          	endbr64
ffffffff8021b1c6:	55                   	push   %rbp
ffffffff8021b1c7:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b1ca:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8021b1ce:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021b1d2:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021b1d9:	80 ff ff 
ffffffff8021b1dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b1e0:	48 01 d0             	add    %rdx,%rax
ffffffff8021b1e3:	48 89 05 3e 6e 01 00 	mov    %rax,0x16e3e(%rip)        # ffffffff80232028 <RME_X64_MBInfo>
    _RME_Kmain(RME_KOM_STACK_ADDR);
ffffffff8021b1ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
ffffffff8021b1f1:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b1f4:	e8 ba 06 ff ff       	call   ffffffff8020b8b3 <_RME_Kmain>
    return 0;
ffffffff8021b1f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b1fe:	c9                   	leave
ffffffff8021b1ff:	c3                   	ret

ffffffff8021b200 <__RME_Kfn_Handler>:
{
ffffffff8021b200:	f3 0f 1e fa          	endbr64
ffffffff8021b204:	55                   	push   %rbp
ffffffff8021b205:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b208:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021b20c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8021b210:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8021b214:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8021b218:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff8021b21c:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
ffffffff8021b220:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    RME_DBG_S("\nSystem call successfully processed!");
ffffffff8021b224:	48 c7 c7 a8 96 22 80 	mov    $0xffffffff802296a8,%rdi
ffffffff8021b22b:	e8 db 17 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    return 0;
ffffffff8021b230:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b235:	c9                   	leave
ffffffff8021b236:	c3                   	ret

ffffffff8021b237 <__RME_Putchar>:
{
ffffffff8021b237:	f3 0f 1e fa          	endbr64
ffffffff8021b23b:	55                   	push   %rbp
ffffffff8021b23c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b23f:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8021b243:	89 f8                	mov    %edi,%eax
ffffffff8021b245:	88 45 fc             	mov    %al,-0x4(%rbp)
    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff8021b248:	90                   	nop
ffffffff8021b249:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021b24e:	e8 ad 05 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021b253:	83 e0 20             	and    $0x20,%eax
ffffffff8021b256:	48 85 c0             	test   %rax,%rax
ffffffff8021b259:	74 ee                	je     ffffffff8021b249 <__RME_Putchar+0x12>
    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff8021b25b:	48 0f be 45 fc       	movsbq -0x4(%rbp),%rax
ffffffff8021b260:	48 89 c6             	mov    %rax,%rsi
ffffffff8021b263:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021b268:	e8 9d 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    return 0;
ffffffff8021b26d:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b272:	c9                   	leave
ffffffff8021b273:	c3                   	ret

ffffffff8021b274 <__RME_X64_UART_Init>:
{
ffffffff8021b274:	f3 0f 1e fa          	endbr64
ffffffff8021b278:	55                   	push   %rbp
ffffffff8021b279:	48 89 e5             	mov    %rsp,%rbp
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021b27c:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b281:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021b286:	e8 7f 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff8021b28b:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff8021b290:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021b295:	e8 70 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff8021b29a:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff8021b29f:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff8021b2a4:	e8 61 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021b2a9:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b2ae:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff8021b2b3:	e8 52 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff8021b2b8:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8021b2bd:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff8021b2c2:	e8 43 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff8021b2c7:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff8021b2cc:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff8021b2d1:	e8 34 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff8021b2d6:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff8021b2db:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff8021b2e0:	e8 25 05 ff ff       	call   ffffffff8020b80a <__RME_X64_Out>
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff8021b2e5:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff8021b2ea:	e8 11 05 ff ff       	call   ffffffff8020b800 <__RME_X64_In>
ffffffff8021b2ef:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff8021b2f5:	75 0d                	jne    ffffffff8021b304 <__RME_X64_UART_Init+0x90>
        RME_X64_UART_Exist=0;
ffffffff8021b2f7:	48 c7 05 1e 6d 01 00 	movq   $0x0,0x16d1e(%rip)        # ffffffff80232020 <RME_X64_UART_Exist>
ffffffff8021b2fe:	00 00 00 00 
}
ffffffff8021b302:	eb 0b                	jmp    ffffffff8021b30f <__RME_X64_UART_Init+0x9b>
        RME_X64_UART_Exist=1;
ffffffff8021b304:	48 c7 05 11 6d 01 00 	movq   $0x1,0x16d11(%rip)        # ffffffff80232020 <RME_X64_UART_Exist>
ffffffff8021b30b:	01 00 00 00 
}
ffffffff8021b30f:	90                   	nop
ffffffff8021b310:	5d                   	pop    %rbp
ffffffff8021b311:	c3                   	ret

ffffffff8021b312 <__RME_X64_RDSP_Scan>:
{
ffffffff8021b312:	f3 0f 1e fa          	endbr64
ffffffff8021b316:	55                   	push   %rbp
ffffffff8021b317:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b31a:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021b31e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021b322:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    Pos=(rme_u8_t*)RME_X64_PA2VA(Base);
ffffffff8021b326:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021b32d:	80 ff ff 
ffffffff8021b330:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b334:	48 01 d0             	add    %rdx,%rax
ffffffff8021b337:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff8021b33b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021b342:	00 
ffffffff8021b343:	eb 7f                	jmp    ffffffff8021b3c4 <__RME_X64_RDSP_Scan+0xb2>
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff8021b345:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b349:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b34d:	48 01 d0             	add    %rdx,%rax
ffffffff8021b350:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021b355:	48 c7 c6 cd 96 22 80 	mov    $0xffffffff802296cd,%rsi
ffffffff8021b35c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b35f:	e8 d6 1a ff ff       	call   ffffffff8020ce3a <_RME_Memcmp>
ffffffff8021b364:	48 85 c0             	test   %rax,%rax
ffffffff8021b367:	75 56                	jne    ffffffff8021b3bf <__RME_X64_RDSP_Scan+0xad>
            Checksum=0;
ffffffff8021b369:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b370:	00 
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff8021b371:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b378:	00 
ffffffff8021b379:	eb 24                	jmp    ffffffff8021b39f <__RME_X64_RDSP_Scan+0x8d>
                Checksum+=( rme_ptr_t)Pos[Count+Check_Cnt];
ffffffff8021b37b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b37f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b383:	48 01 d0             	add    %rdx,%rax
ffffffff8021b386:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b389:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b38d:	48 01 d0             	add    %rdx,%rax
ffffffff8021b390:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b393:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b396:	48 01 45 f0          	add    %rax,-0x10(%rbp)
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff8021b39a:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff8021b39f:	48 83 7d e8 13       	cmpq   $0x13,-0x18(%rbp)
ffffffff8021b3a4:	7e d5                	jle    ffffffff8021b37b <__RME_X64_RDSP_Scan+0x69>
            if((Checksum&0xFF)==0)
ffffffff8021b3a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b3aa:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b3ad:	48 85 c0             	test   %rax,%rax
ffffffff8021b3b0:	75 0d                	jne    ffffffff8021b3bf <__RME_X64_RDSP_Scan+0xad>
                return (struct RME_X64_ACPI_RDSP_Desc*)&(Pos[Count]);
ffffffff8021b3b2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b3b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b3ba:	48 01 d0             	add    %rdx,%rax
ffffffff8021b3bd:	eb 1f                	jmp    ffffffff8021b3de <__RME_X64_RDSP_Scan+0xcc>
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=16)
ffffffff8021b3bf:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
ffffffff8021b3c4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b3c8:	48 8d 50 dc          	lea    -0x24(%rax),%rdx
ffffffff8021b3cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b3d0:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b3d3:	0f 83 6c ff ff ff    	jae    ffffffff8021b345 <__RME_X64_RDSP_Scan+0x33>
    return 0;
ffffffff8021b3d9:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b3de:	c9                   	leave
ffffffff8021b3df:	c3                   	ret

ffffffff8021b3e0 <__RME_X64_RDSP_Find>:
Input       : None.
Output      : None.
Return      : struct RME_X64_ACPI_RDSP_Desc* - The descriptor address.
******************************************************************************/
struct RME_X64_ACPI_RDSP_Desc*__RME_X64_RDSP_Find(void)
{
ffffffff8021b3e0:	f3 0f 1e fa          	endbr64
ffffffff8021b3e4:	55                   	push   %rbp
ffffffff8021b3e5:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b3e8:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_X64_ACPI_RDSP_Desc* RDSP;
    rme_ptr_t Paddr;
    /* 0x40E contains the address of Extended BIOS Data Area (EBDA). Let's try
     * to find the RDSP there first */
    Paddr=*((rme_u16_t*)RME_X64_PA2VA(0x40E))<<4;
ffffffff8021b3ec:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff8021b3f3:	80 ff ff 
ffffffff8021b3f6:	0f b7 00             	movzwl (%rax),%eax
ffffffff8021b3f9:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b3fc:	c1 e0 04             	shl    $0x4,%eax
ffffffff8021b3ff:	48 98                	cltq
ffffffff8021b401:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    if(Paddr!=0)
ffffffff8021b405:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8021b40a:	74 22                	je     ffffffff8021b42e <__RME_X64_RDSP_Find+0x4e>
    {
        RDSP=__RME_X64_RDSP_Scan(Paddr,1024);
ffffffff8021b40c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b410:	be 00 04 00 00       	mov    $0x400,%esi
ffffffff8021b415:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b418:	e8 f5 fe ff ff       	call   ffffffff8021b312 <__RME_X64_RDSP_Scan>
ffffffff8021b41d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
        /* Found */
        if(RDSP!=0)
ffffffff8021b421:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8021b426:	74 06                	je     ffffffff8021b42e <__RME_X64_RDSP_Find+0x4e>
            return RDSP;
ffffffff8021b428:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b42c:	eb 0f                	jmp    ffffffff8021b43d <__RME_X64_RDSP_Find+0x5d>
    }

    /* If that fails, the RDSP must be here */
    return __RME_X64_RDSP_Scan(0xE0000, 0x20000);
ffffffff8021b42e:	be 00 00 02 00       	mov    $0x20000,%esi
ffffffff8021b433:	bf 00 00 0e 00       	mov    $0xe0000,%edi
ffffffff8021b438:	e8 d5 fe ff ff       	call   ffffffff8021b312 <__RME_X64_RDSP_Scan>
}
ffffffff8021b43d:	c9                   	leave
ffffffff8021b43e:	c3                   	ret

ffffffff8021b43f <__RME_X64_SMP_Detect>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
rme_ret_t __RME_X64_SMP_Detect(struct RME_X64_ACPI_MADT_Hdr* MADT)
{
ffffffff8021b43f:	f3 0f 1e fa          	endbr64
ffffffff8021b443:	55                   	push   %rbp
ffffffff8021b444:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b447:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021b44b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_ptr_t Length;
    rme_u8_t* Ptr;
    rme_u8_t* End;

    /* Is there a MADT? */
    if(MADT==0)
ffffffff8021b44f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8021b454:	75 0c                	jne    ffffffff8021b462 <__RME_X64_SMP_Detect+0x23>
        return -1;
ffffffff8021b456:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b45d:	e9 18 03 00 00       	jmp    ffffffff8021b77a <__RME_X64_SMP_Detect+0x33b>
    /* Is the MADT valid? */
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
ffffffff8021b462:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b466:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b469:	83 f8 2b             	cmp    $0x2b,%eax
ffffffff8021b46c:	77 0c                	ja     ffffffff8021b47a <__RME_X64_SMP_Detect+0x3b>
        return -1;
ffffffff8021b46e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff8021b475:	e9 00 03 00 00       	jmp    ffffffff8021b77a <__RME_X64_SMP_Detect+0x33b>

    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff8021b47a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b47e:	8b 40 24             	mov    0x24(%rax),%eax
ffffffff8021b481:	89 c0                	mov    %eax,%eax
ffffffff8021b483:	48 89 05 96 7e 01 00 	mov    %rax,0x17e96(%rip)        # ffffffff80233320 <RME_X64_LAPIC_Addr>

    /* Where does the actual table contents start? */
    Ptr=MADT->Table;
ffffffff8021b48a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b48e:	48 83 c0 2c          	add    $0x2c,%rax
ffffffff8021b492:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff8021b496:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b49a:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b49d:	89 c0                	mov    %eax,%eax
ffffffff8021b49f:	48 8d 50 d4          	lea    -0x2c(%rax),%rdx
ffffffff8021b4a3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b4a7:	48 01 d0             	add    %rdx,%rax
ffffffff8021b4aa:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    RME_X64_Num_IOAPIC=0;
ffffffff8021b4ae:	48 c7 05 07 7e 01 00 	movq   $0x0,0x17e07(%rip)        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
ffffffff8021b4b5:	00 00 00 00 
    RME_X64_Num_CPU=0;
ffffffff8021b4b9:	48 c7 05 e4 6d 01 00 	movq   $0x0,0x16de4(%rip)        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021b4c0:	00 00 00 00 
    while(Ptr<End)
ffffffff8021b4c4:	e9 98 02 00 00       	jmp    ffffffff8021b761 <__RME_X64_SMP_Detect+0x322>
    {
        /* See if we have finished scanning the table */
        if((End-Ptr)<2)
ffffffff8021b4c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b4cd:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8021b4d1:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b4d5:	0f 8e 96 02 00 00    	jle    ffffffff8021b771 <__RME_X64_SMP_Detect+0x332>
            break;
        Length=Ptr[1];
ffffffff8021b4db:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b4df:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b4e3:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b4e6:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b4e9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        if((End-Ptr)<Length)
ffffffff8021b4ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b4f1:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8021b4f5:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8021b4f9:	0f 82 75 02 00 00    	jb     ffffffff8021b774 <__RME_X64_SMP_Detect+0x335>
            break;

        /* See what is in the table */
        switch(Ptr[0])
ffffffff8021b4ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b503:	0f b6 00             	movzbl (%rax),%eax
ffffffff8021b506:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b509:	83 f8 02             	cmp    $0x2,%eax
ffffffff8021b50c:	0f 84 a9 01 00 00    	je     ffffffff8021b6bb <__RME_X64_SMP_Detect+0x27c>
ffffffff8021b512:	83 f8 02             	cmp    $0x2,%eax
ffffffff8021b515:	0f 8f 31 02 00 00    	jg     ffffffff8021b74c <__RME_X64_SMP_Detect+0x30d>
ffffffff8021b51b:	85 c0                	test   %eax,%eax
ffffffff8021b51d:	74 0e                	je     ffffffff8021b52d <__RME_X64_SMP_Detect+0xee>
ffffffff8021b51f:	83 f8 01             	cmp    $0x1,%eax
ffffffff8021b522:	0f 84 ba 00 00 00    	je     ffffffff8021b5e2 <__RME_X64_SMP_Detect+0x1a3>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);

                break;
            }
            /* All other types are ignored */
            default:break;
ffffffff8021b528:	e9 1f 02 00 00       	jmp    ffffffff8021b74c <__RME_X64_SMP_Detect+0x30d>
                LAPIC=(struct RME_X64_ACPI_MADT_LAPIC_Record*)Ptr;
ffffffff8021b52d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b531:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_LAPIC_Record))
ffffffff8021b535:	48 83 7d e8 07       	cmpq   $0x7,-0x18(%rbp)
ffffffff8021b53a:	0f 86 0f 02 00 00    	jbe    ffffffff8021b74f <__RME_X64_SMP_Detect+0x310>
                if((LAPIC->Flags&RME_X64_APIC_LAPIC_ENABLED)==0)
ffffffff8021b540:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b544:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b547:	83 e0 01             	and    $0x1,%eax
ffffffff8021b54a:	85 c0                	test   %eax,%eax
ffffffff8021b54c:	0f 84 00 02 00 00    	je     ffffffff8021b752 <__RME_X64_SMP_Detect+0x313>
                RME_DBG_S("\n\rACPI: CPU ");
ffffffff8021b552:	48 c7 c7 d6 96 22 80 	mov    $0xffffffff802296d6,%rdi
ffffffff8021b559:	e8 ad 14 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print((rme_cnt_t)RME_X64_Num_CPU);
ffffffff8021b55e:	48 8b 05 43 6d 01 00 	mov    0x16d43(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021b565:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b568:	e8 a4 12 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_DBG_S(", LAPIC ID ");
ffffffff8021b56d:	48 c7 c7 e3 96 22 80 	mov    $0xffffffff802296e3,%rdi
ffffffff8021b574:	e8 92 14 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(LAPIC->APIC_ID);
ffffffff8021b579:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b57d:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b581:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b584:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b587:	e8 85 12 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_X64_CPU_Info[RME_X64_Num_CPU].LAPIC_ID=LAPIC->APIC_ID;
ffffffff8021b58c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8021b590:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b594:	48 8b 15 0d 6d 01 00 	mov    0x16d0d(%rip),%rdx        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021b59b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b59e:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8021b5a2:	48 81 c2 c0 22 23 80 	add    $0xffffffff802322c0,%rdx
ffffffff8021b5a9:	48 89 02             	mov    %rax,(%rdx)
                RME_X64_CPU_Info[RME_X64_Num_CPU].Boot_Done=0;
ffffffff8021b5ac:	48 8b 05 f5 6c 01 00 	mov    0x16cf5(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021b5b3:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021b5b7:	48 05 c8 22 23 80    	add    $0xffffffff802322c8,%rax
ffffffff8021b5bd:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
                RME_X64_Num_CPU++;
ffffffff8021b5c4:	48 8b 05 dd 6c 01 00 	mov    0x16cdd(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021b5cb:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b5cf:	48 89 05 d2 6c 01 00 	mov    %rax,0x16cd2(%rip)        # ffffffff802322a8 <RME_X64_Num_CPU>
                RME_ASSERT(RME_X64_Num_CPU<=RME_X64_CPU_NUM);
ffffffff8021b5d6:	48 8b 05 cb 6c 01 00 	mov    0x16ccb(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
                break;
ffffffff8021b5dd:	e9 77 01 00 00       	jmp    ffffffff8021b759 <__RME_X64_SMP_Detect+0x31a>
                IOAPIC=(struct RME_X64_ACPI_MADT_IOAPIC_Record*)Ptr;
ffffffff8021b5e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b5e6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_IOAPIC_Record))
ffffffff8021b5ea:	48 83 7d e8 0b       	cmpq   $0xb,-0x18(%rbp)
ffffffff8021b5ef:	0f 86 60 01 00 00    	jbe    ffffffff8021b755 <__RME_X64_SMP_Detect+0x316>
                RME_DBG_S("\n\rACPI: IOAPIC ");
ffffffff8021b5f5:	48 c7 c7 ef 96 22 80 	mov    $0xffffffff802296ef,%rdi
ffffffff8021b5fc:	e8 0a 14 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print((rme_cnt_t)RME_X64_Num_IOAPIC);
ffffffff8021b601:	48 8b 05 b8 7c 01 00 	mov    0x17cb8(%rip),%rax        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
ffffffff8021b608:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b60b:	e8 01 12 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_DBG_S(" @ ");
ffffffff8021b610:	48 c7 c7 ff 96 22 80 	mov    $0xffffffff802296ff,%rdi
ffffffff8021b617:	e8 ef 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Hex_Print(IOAPIC->Addr);
ffffffff8021b61c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b620:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b623:	89 c0                	mov    %eax,%eax
ffffffff8021b625:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b628:	e8 1c 13 ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
                RME_DBG_S(", ID ");
ffffffff8021b62d:	48 c7 c7 03 97 22 80 	mov    $0xffffffff80229703,%rdi
ffffffff8021b634:	e8 d2 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(IOAPIC->ID);
ffffffff8021b639:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b63d:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff8021b641:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b644:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b647:	e8 c5 11 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_DBG_S(", IBASE ");
ffffffff8021b64c:	48 c7 c7 09 97 22 80 	mov    $0xffffffff80229709,%rdi
ffffffff8021b653:	e8 b3 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(IOAPIC->Interrupt_Base);
ffffffff8021b658:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b65c:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff8021b65f:	89 c0                	mov    %eax,%eax
ffffffff8021b661:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b664:	e8 a8 11 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                if(RME_X64_Num_IOAPIC!=0)
ffffffff8021b669:	48 8b 05 50 7c 01 00 	mov    0x17c50(%rip),%rax        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
ffffffff8021b670:	48 85 c0             	test   %rax,%rax
ffffffff8021b673:	74 0e                	je     ffffffff8021b683 <__RME_X64_SMP_Detect+0x244>
                    RME_DBG_S("Warning: multiple ioapics are not supported - currently we will not initialize IOAPIC > 1\n");
ffffffff8021b675:	48 c7 c7 18 97 22 80 	mov    $0xffffffff80229718,%rdi
ffffffff8021b67c:	e8 8a 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8021b681:	eb 1a                	jmp    ffffffff8021b69d <__RME_X64_SMP_Detect+0x25e>
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
ffffffff8021b683:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b687:	0f b6 50 02          	movzbl 0x2(%rax),%edx
ffffffff8021b68b:	48 8b 05 2e 7c 01 00 	mov    0x17c2e(%rip),%rax        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
ffffffff8021b692:	0f b6 d2             	movzbl %dl,%edx
ffffffff8021b695:	48 89 14 c5 e0 32 23 	mov    %rdx,-0x7fdccd20(,%rax,8)
ffffffff8021b69c:	80 
                RME_X64_Num_IOAPIC++;
ffffffff8021b69d:	48 8b 05 1c 7c 01 00 	mov    0x17c1c(%rip),%rax        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
ffffffff8021b6a4:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021b6a8:	48 89 05 11 7c 01 00 	mov    %rax,0x17c11(%rip)        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
                RME_ASSERT(RME_X64_Num_IOAPIC<=RME_X64_IOAPIC_NUM);
ffffffff8021b6af:	48 8b 05 0a 7c 01 00 	mov    0x17c0a(%rip),%rax        # ffffffff802332c0 <RME_X64_Num_IOAPIC>
                break;
ffffffff8021b6b6:	e9 9e 00 00 00       	jmp    ffffffff8021b759 <__RME_X64_SMP_Detect+0x31a>
                OVERRIDE=(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record*)Ptr;
ffffffff8021b6bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b6bf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
ffffffff8021b6c3:	48 83 7d e8 06       	cmpq   $0x6,-0x18(%rbp)
ffffffff8021b6c8:	0f 86 8a 00 00 00    	jbe    ffffffff8021b758 <__RME_X64_SMP_Detect+0x319>
                RME_DBG_S("\n\rACPI: OVERRIDE Bus ");
ffffffff8021b6ce:	48 c7 c7 73 97 22 80 	mov    $0xffffffff80229773,%rdi
ffffffff8021b6d5:	e8 31 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(OVERRIDE->Bus);
ffffffff8021b6da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b6de:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff8021b6e2:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b6e5:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b6e8:	e8 24 11 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_DBG_S(", Source ");
ffffffff8021b6ed:	48 c7 c7 89 97 22 80 	mov    $0xffffffff80229789,%rdi
ffffffff8021b6f4:	e8 12 13 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Hex_Print(OVERRIDE->Source);
ffffffff8021b6f9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b6fd:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff8021b701:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b704:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b707:	e8 3d 12 ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
                RME_DBG_S(", GSI ");
ffffffff8021b70c:	48 c7 c7 93 97 22 80 	mov    $0xffffffff80229793,%rdi
ffffffff8021b713:	e8 f3 12 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(OVERRIDE->GS_Interrupt);
ffffffff8021b718:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b71c:	0f b6 40 04          	movzbl 0x4(%rax),%eax
ffffffff8021b720:	0f b6 c0             	movzbl %al,%eax
ffffffff8021b723:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b726:	e8 e6 10 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                RME_DBG_S(", Flags ");
ffffffff8021b72b:	48 c7 c7 9a 97 22 80 	mov    $0xffffffff8022979a,%rdi
ffffffff8021b732:	e8 d4 12 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
                RME_Int_Print(OVERRIDE->MPS_Int_Flags);
ffffffff8021b737:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b73b:	0f b7 40 05          	movzwl 0x5(%rax),%eax
ffffffff8021b73f:	0f b7 c0             	movzwl %ax,%eax
ffffffff8021b742:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b745:	e8 c7 10 ff ff       	call   ffffffff8020c811 <RME_Int_Print>
                break;
ffffffff8021b74a:	eb 0d                	jmp    ffffffff8021b759 <__RME_X64_SMP_Detect+0x31a>
            default:break;
ffffffff8021b74c:	90                   	nop
ffffffff8021b74d:	eb 0a                	jmp    ffffffff8021b759 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b74f:	90                   	nop
ffffffff8021b750:	eb 07                	jmp    ffffffff8021b759 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b752:	90                   	nop
ffffffff8021b753:	eb 04                	jmp    ffffffff8021b759 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b755:	90                   	nop
ffffffff8021b756:	eb 01                	jmp    ffffffff8021b759 <__RME_X64_SMP_Detect+0x31a>
                    break;
ffffffff8021b758:	90                   	nop
        }
        
        Ptr+=Length;
ffffffff8021b759:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b75d:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    while(Ptr<End)
ffffffff8021b761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b765:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8021b769:	0f 82 5a fd ff ff    	jb     ffffffff8021b4c9 <__RME_X64_SMP_Detect+0x8a>
ffffffff8021b76f:	eb 04                	jmp    ffffffff8021b775 <__RME_X64_SMP_Detect+0x336>
            break;
ffffffff8021b771:	90                   	nop
ffffffff8021b772:	eb 01                	jmp    ffffffff8021b775 <__RME_X64_SMP_Detect+0x336>
            break;
ffffffff8021b774:	90                   	nop
    }

    return 0;
ffffffff8021b775:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8021b77a:	c9                   	leave
ffffffff8021b77b:	c3                   	ret

ffffffff8021b77c <__RME_X64_ACPI_Debug>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
void __RME_X64_ACPI_Debug(struct RME_X64_ACPI_Desc_Hdr *Header)
{
ffffffff8021b77c:	f3 0f 1e fa          	endbr64
ffffffff8021b780:	55                   	push   %rbp
ffffffff8021b781:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b784:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8021b788:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
    rme_u8_t Creator[5];
    rme_ptr_t OEM_Rev;
    rme_ptr_t Creator_Rev;

    /* Copy everything into our buffer */
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff8021b78c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8021b790:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
ffffffff8021b794:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b799:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b79c:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b79f:	e8 27 17 ff ff       	call   ffffffff8020cecb <_RME_Memcpy>
    Signature[4]='\0';
ffffffff8021b7a4:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff8021b7a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b7ac:	48 8d 48 0a          	lea    0xa(%rax),%rcx
ffffffff8021b7b0:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
ffffffff8021b7b4:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021b7b9:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b7bc:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b7bf:	e8 07 17 ff ff       	call   ffffffff8020cecb <_RME_Memcpy>
    ID[6]='\0';
ffffffff8021b7c4:	c6 45 ea 00          	movb   $0x0,-0x16(%rbp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff8021b7c8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b7cc:	48 8d 48 10          	lea    0x10(%rax),%rcx
ffffffff8021b7d0:	48 8d 45 db          	lea    -0x25(%rbp),%rax
ffffffff8021b7d4:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8021b7d9:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b7dc:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b7df:	e8 e7 16 ff ff       	call   ffffffff8020cecb <_RME_Memcpy>
    Table_ID[8]='\0';
ffffffff8021b7e4:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff8021b7e8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b7ec:	48 8d 48 1c          	lea    0x1c(%rax),%rcx
ffffffff8021b7f0:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
ffffffff8021b7f4:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b7f9:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b7fc:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b7ff:	e8 c7 16 ff ff       	call   ffffffff8020cecb <_RME_Memcpy>
    Creator[4]='\0';
ffffffff8021b804:	c6 45 da 00          	movb   $0x0,-0x26(%rbp)

    OEM_Rev=Header->OEM_Revision;
ffffffff8021b808:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b80c:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff8021b80f:	89 c0                	mov    %eax,%eax
ffffffff8021b811:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Creator_Rev=Header->Creator_Revision;
ffffffff8021b815:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8021b819:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff8021b81c:	89 c0                	mov    %eax,%eax
ffffffff8021b81e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* And print these entries */
    RME_DBG_S("\n\rACPI:");
ffffffff8021b822:	48 c7 c7 a3 97 22 80 	mov    $0xffffffff802297a3,%rdi
ffffffff8021b829:	e8 dd 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(Signature);
ffffffff8021b82e:	48 8d 45 eb          	lea    -0x15(%rbp),%rax
ffffffff8021b832:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b835:	e8 d1 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b83a:	48 c7 c7 ab 97 22 80 	mov    $0xffffffff802297ab,%rdi
ffffffff8021b841:	e8 c5 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(ID);
ffffffff8021b846:	48 8d 45 e4          	lea    -0x1c(%rbp),%rax
ffffffff8021b84a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b84d:	e8 b9 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b852:	48 c7 c7 ab 97 22 80 	mov    $0xffffffff802297ab,%rdi
ffffffff8021b859:	e8 ad 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(Table_ID);
ffffffff8021b85e:	48 8d 45 db          	lea    -0x25(%rbp),%rax
ffffffff8021b862:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b865:	e8 a1 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b86a:	48 c7 c7 ab 97 22 80 	mov    $0xffffffff802297ab,%rdi
ffffffff8021b871:	e8 95 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(OEM_Rev);
ffffffff8021b876:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b87a:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b87d:	e8 8f 0f ff ff       	call   ffffffff8020c811 <RME_Int_Print>
    RME_DBG_S(", ");
ffffffff8021b882:	48 c7 c7 ab 97 22 80 	mov    $0xffffffff802297ab,%rdi
ffffffff8021b889:	e8 7d 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(Creator);
ffffffff8021b88e:	48 8d 45 d6          	lea    -0x2a(%rbp),%rax
ffffffff8021b892:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b895:	e8 71 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_S(", ");
ffffffff8021b89a:	48 c7 c7 ab 97 22 80 	mov    $0xffffffff802297ab,%rdi
ffffffff8021b8a1:	e8 65 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(Creator_Rev);
ffffffff8021b8a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b8aa:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b8ad:	e8 5f 0f ff ff       	call   ffffffff8020c811 <RME_Int_Print>
    RME_DBG_S(".");
ffffffff8021b8b2:	48 c7 c7 ae 97 22 80 	mov    $0xffffffff802297ae,%rdi
ffffffff8021b8b9:	e8 4d 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
}
ffffffff8021b8be:	90                   	nop
ffffffff8021b8bf:	c9                   	leave
ffffffff8021b8c0:	c3                   	ret

ffffffff8021b8c1 <__RME_X64_ACPI_Init>:
Input       : struct RME_X64_ACPI_MADT_Hdr* MADT - The pointer to the MADT header.
Output      : None.
Return      : rme_ret_t - If successful, 0; else -1.
******************************************************************************/
rme_ret_t __RME_X64_ACPI_Init(void)
{
ffffffff8021b8c1:	f3 0f 1e fa          	endbr64
ffffffff8021b8c5:	55                   	push   %rbp
ffffffff8021b8c6:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b8c9:	48 83 ec 30          	sub    $0x30,%rsp
    rme_cnt_t Count;
    rme_cnt_t Table_Num;
    struct RME_X64_ACPI_RDSP_Desc* RDSP=RME_NULL;
ffffffff8021b8cd:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021b8d4:	00 
    struct RME_X64_ACPI_RSDT_Hdr* RSDT=RME_NULL;
ffffffff8021b8d5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8021b8dc:	00 
    struct RME_X64_ACPI_MADT_Hdr* MADT=RME_NULL;
ffffffff8021b8dd:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021b8e4:	00 
    struct RME_X64_ACPI_Desc_Hdr* Header=RME_NULL;
ffffffff8021b8e5:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8021b8ec:	00 

    /* Try to find RDSP */
    RDSP=__RME_X64_RDSP_Find();
ffffffff8021b8ed:	e8 ee fa ff ff       	call   ffffffff8021b3e0 <__RME_X64_RDSP_Find>
ffffffff8021b8f2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    RME_DBG_S("\r\nRDSP address: ");
ffffffff8021b8f6:	48 c7 c7 b0 97 22 80 	mov    $0xffffffff802297b0,%rdi
ffffffff8021b8fd:	e8 09 11 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)RDSP);
ffffffff8021b902:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b906:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b909:	e8 3b 10 ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
    /* Find the RSDT */
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff8021b90e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021b912:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8021b915:	89 c2                	mov    %eax,%edx
ffffffff8021b917:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b91e:	80 ff ff 
ffffffff8021b921:	48 01 d0             	add    %rdx,%rax
ffffffff8021b924:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    RME_DBG_S("\r\nRSDT address: ");
ffffffff8021b928:	48 c7 c7 c1 97 22 80 	mov    $0xffffffff802297c1,%rdi
ffffffff8021b92f:	e8 d7 10 ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)RSDT);
ffffffff8021b934:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b938:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b93b:	e8 09 10 ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff8021b940:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b944:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8021b947:	89 c0                	mov    %eax,%eax
ffffffff8021b949:	48 83 e8 24          	sub    $0x24,%rax
ffffffff8021b94d:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff8021b951:	48 89 45 d0          	mov    %rax,-0x30(%rbp)

    for(Count=0;Count<Table_Num;Count++)
ffffffff8021b955:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021b95c:	00 
ffffffff8021b95d:	eb 59                	jmp    ffffffff8021b9b8 <__RME_X64_ACPI_Init+0xf7>
    {
        /* See what did we find */
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff8021b95f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021b963:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021b967:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8021b96b:	8b 44 90 04          	mov    0x4(%rax,%rdx,4),%eax
ffffffff8021b96f:	89 c2                	mov    %eax,%edx
ffffffff8021b971:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8021b978:	80 ff ff 
ffffffff8021b97b:	48 01 d0             	add    %rdx,%rax
ffffffff8021b97e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        __RME_X64_ACPI_Debug(Header);
ffffffff8021b982:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b986:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b989:	e8 ee fd ff ff       	call   ffffffff8021b77c <__RME_X64_ACPI_Debug>
        /* See if this is the MADT */
        if(_RME_Memcmp(Header->Signature, "APIC", 4)==0)
ffffffff8021b98e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b992:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021b997:	48 c7 c6 d2 97 22 80 	mov    $0xffffffff802297d2,%rsi
ffffffff8021b99e:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b9a1:	e8 94 14 ff ff       	call   ffffffff8020ce3a <_RME_Memcmp>
ffffffff8021b9a6:	48 85 c0             	test   %rax,%rax
ffffffff8021b9a9:	75 08                	jne    ffffffff8021b9b3 <__RME_X64_ACPI_Init+0xf2>
            MADT=(struct RME_X64_ACPI_MADT_Hdr*)Header;
ffffffff8021b9ab:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8021b9af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0;Count<Table_Num;Count++)
ffffffff8021b9b3:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021b9b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021b9bc:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021b9c0:	7c 9d                	jl     ffffffff8021b95f <__RME_X64_ACPI_Init+0x9e>
    }

    return __RME_X64_SMP_Detect(MADT);
ffffffff8021b9c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021b9c6:	48 89 c7             	mov    %rax,%rdi
ffffffff8021b9c9:	e8 71 fa ff ff       	call   ffffffff8021b43f <__RME_X64_SMP_Detect>
}
ffffffff8021b9ce:	c9                   	leave
ffffffff8021b9cf:	c3                   	ret

ffffffff8021b9d0 <__RME_X64_Feature_Get>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_Feature_Get(void)
{
ffffffff8021b9d0:	f3 0f 1e fa          	endbr64
ffffffff8021b9d4:	55                   	push   %rbp
ffffffff8021b9d5:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021b9d8:	48 83 ec 10          	sub    $0x10,%rsp
    rme_cnt_t Count;

    /* What's the maximum feature? */
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff8021b9dc:	48 c7 c1 68 33 23 80 	mov    $0xffffffff80233368,%rcx
ffffffff8021b9e3:	48 c7 c2 60 33 23 80 	mov    $0xffffffff80233360,%rdx
ffffffff8021b9ea:	48 c7 c6 58 33 23 80 	mov    $0xffffffff80233358,%rsi
ffffffff8021b9f1:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff8021b9f6:	e8 4e fe fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021b9fb:	48 89 05 3e 79 01 00 	mov    %rax,0x1793e(%rip)        # ffffffff80233340 <RME_X64_Feature>
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][1]),
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][2]),
                                                 (rme_ptr_t*)&(RME_X64_Feature.Func[0][3]));
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;
ffffffff8021ba02:	48 8b 05 37 79 01 00 	mov    0x17937(%rip),%rax        # ffffffff80233340 <RME_X64_Feature>
ffffffff8021ba09:	48 89 05 40 79 01 00 	mov    %rax,0x17940(%rip)        # ffffffff80233350 <RME_X64_Feature+0x10>

    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021ba10:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8021ba17:	00 
ffffffff8021ba18:	eb 5c                	jmp    ffffffff8021ba76 <__RME_X64_Feature_Get+0xa6>
    {
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][1]),
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][3]));
ffffffff8021ba1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba1e:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021ba22:	48 83 c0 28          	add    $0x28,%rax
ffffffff8021ba26:	48 8d 88 40 33 23 80 	lea    -0x7fdcccc0(%rax),%rcx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][2]),
ffffffff8021ba2d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba31:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021ba35:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021ba39:	48 8d 90 40 33 23 80 	lea    -0x7fdcccc0(%rax),%rdx
                                                           (rme_ptr_t*)&(RME_X64_Feature.Func[Count][1]),
ffffffff8021ba40:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba44:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021ba48:	48 83 c0 18          	add    $0x18,%rax
ffffffff8021ba4c:	48 8d b0 40 33 23 80 	lea    -0x7fdcccc0(%rax),%rsi
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff8021ba53:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba57:	48 89 c7             	mov    %rax,%rdi
ffffffff8021ba5a:	e8 ea fd fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021ba5f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021ba63:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021ba67:	48 81 c2 50 33 23 80 	add    $0xffffffff80233350,%rdx
ffffffff8021ba6e:	48 89 02             	mov    %rax,(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff8021ba71:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021ba76:	48 8b 15 c3 78 01 00 	mov    0x178c3(%rip),%rdx        # ffffffff80233340 <RME_X64_Feature>
ffffffff8021ba7d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021ba81:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ba84:	73 94                	jae    ffffffff8021ba1a <__RME_X64_Feature_Get+0x4a>
    }

    /* What's the maximum extended feature? */
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff8021ba86:	48 c7 c1 68 35 23 80 	mov    $0xffffffff80233568,%rcx
ffffffff8021ba8d:	48 c7 c2 60 35 23 80 	mov    $0xffffffff80233560,%rdx
ffffffff8021ba94:	48 c7 c6 58 35 23 80 	mov    $0xffffffff80233558,%rsi
ffffffff8021ba9b:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff8021baa0:	48 89 c7             	mov    %rax,%rdi
ffffffff8021baa3:	e8 a1 fd fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021baa8:	48 89 05 99 78 01 00 	mov    %rax,0x17899(%rip)        # ffffffff80233348 <RME_X64_Feature+0x8>
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][1]),
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][2]),
                                                (rme_ptr_t*)&(RME_X64_Feature.Ext[0][3]));
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;
ffffffff8021baaf:	48 8b 05 92 78 01 00 	mov    0x17892(%rip),%rax        # ffffffff80233348 <RME_X64_Feature+0x8>
ffffffff8021bab6:	48 89 05 93 7a 01 00 	mov    %rax,0x17a93(%rip)        # ffffffff80233550 <RME_X64_Feature+0x210>


    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021babd:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8021bac4:	00 
ffffffff8021bac5:	eb 67                	jmp    ffffffff8021bb2e <__RME_X64_Feature_Get+0x15e>
    {
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][1]),
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][3]));
ffffffff8021bac7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bacb:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021bacf:	48 05 28 02 00 00    	add    $0x228,%rax
ffffffff8021bad5:	48 8d 88 40 33 23 80 	lea    -0x7fdcccc0(%rax),%rcx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][2]),
ffffffff8021badc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bae0:	48 83 c0 11          	add    $0x11,%rax
ffffffff8021bae4:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021bae8:	48 8d 90 40 33 23 80 	lea    -0x7fdcccc0(%rax),%rdx
                                                          (rme_ptr_t*)&(RME_X64_Feature.Ext[Count][1]),
ffffffff8021baef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021baf3:	48 c1 e0 05          	shl    $0x5,%rax
ffffffff8021baf7:	48 05 18 02 00 00    	add    $0x218,%rax
ffffffff8021bafd:	48 05 40 33 23 80    	add    $0xffffffff80233340,%rax
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff8021bb03:	be 00 00 00 80       	mov    $0x80000000,%esi
ffffffff8021bb08:	48 0b 75 f8          	or     -0x8(%rbp),%rsi
ffffffff8021bb0c:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021bb0f:	48 89 c6             	mov    %rax,%rsi
ffffffff8021bb12:	e8 32 fd fe ff       	call   ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff8021bb17:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021bb1b:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bb1f:	48 81 c2 50 35 23 80 	add    $0xffffffff80233550,%rdx
ffffffff8021bb26:	48 89 02             	mov    %rax,(%rdx)
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff8021bb29:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021bb2e:	48 8b 05 13 78 01 00 	mov    0x17813(%rip),%rax        # ffffffff80233348 <RME_X64_Feature+0x8>
ffffffff8021bb35:	48 8d 90 00 00 00 80 	lea    -0x80000000(%rax),%rdx
ffffffff8021bb3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bb40:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021bb43:	73 82                	jae    ffffffff8021bac7 <__RME_X64_Feature_Get+0xf7>
    }

    /* TODO: Check these flags. If not satisfied, we hang immediately. */
}
ffffffff8021bb45:	90                   	nop
ffffffff8021bb46:	90                   	nop
ffffffff8021bb47:	c9                   	leave
ffffffff8021bb48:	c3                   	ret

ffffffff8021bb49 <__RME_X64_Mem_Init>:
volatile struct RME_List RME_X64_Phys_Mem;
/* The BIOS wouldn't really report more than 1024 blocks of memory */
struct __RME_X64_Mem RME_X64_Mem[1024];

void __RME_X64_Mem_Init(rme_ptr_t MMap_Addr, rme_ptr_t MMap_Length)
{
ffffffff8021bb49:	f3 0f 1e fa          	endbr64
ffffffff8021bb4d:	55                   	push   %rbp
ffffffff8021bb4e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021bb51:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8021bb55:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8021bb59:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
    struct multiboot_mmap_entry* MMap;
    volatile struct RME_List* Trav_Ptr;
    rme_ptr_t MMap_Cnt;
    rme_ptr_t Info_Cnt;
    MMap_Cnt=0;
ffffffff8021bb5d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021bb64:	00 
    Info_Cnt=0;
ffffffff8021bb65:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8021bb6c:	00 

    __RME_List_Crt(&RME_X64_Phys_Mem);
ffffffff8021bb6d:	48 c7 c7 10 a0 22 80 	mov    $0xffffffff8022a010,%rdi
ffffffff8021bb74:	e8 a1 b6 00 00       	call   ffffffff8022721a <__RME_List_Crt>

    while(MMap_Cnt<MMap_Length)
ffffffff8021bb79:	e9 72 01 00 00       	jmp    ffffffff8021bcf0 <__RME_X64_Mem_Init+0x1a7>
    {
        MMap=(struct multiboot_mmap_entry*)(MMap_Addr+MMap_Cnt);
ffffffff8021bb7e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8021bb82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bb86:	48 01 d0             	add    %rdx,%rax
ffffffff8021bb89:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        MMap_Cnt+=MMap->size+4;
ffffffff8021bb8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bb91:	8b 00                	mov    (%rax),%eax
ffffffff8021bb93:	83 c0 04             	add    $0x4,%eax
ffffffff8021bb96:	89 c0                	mov    %eax,%eax
ffffffff8021bb98:	48 01 45 f0          	add    %rax,-0x10(%rbp)

        if(MMap->type!=1)
ffffffff8021bb9c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bba0:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021bba3:	83 f8 01             	cmp    $0x1,%eax
ffffffff8021bba6:	74 5a                	je     ffffffff8021bc02 <__RME_X64_Mem_Init+0xb9>
        {
            RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff8021bba8:	48 c7 c7 d7 97 22 80 	mov    $0xffffffff802297d7,%rdi
ffffffff8021bbaf:	e8 57 0e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_Hex_Print(MMap->addr);
ffffffff8021bbb4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bbb8:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bbbc:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bbbf:	e8 85 0d ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
            RME_DBG_S(", 0x");
ffffffff8021bbc4:	48 c7 c7 ed 97 22 80 	mov    $0xffffffff802297ed,%rdi
ffffffff8021bbcb:	e8 3b 0e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_Hex_Print(MMap->len);
ffffffff8021bbd0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bbd4:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bbd8:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bbdb:	e8 69 0d ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
            RME_DBG_S(", ");
ffffffff8021bbe0:	48 c7 c7 ab 97 22 80 	mov    $0xffffffff802297ab,%rdi
ffffffff8021bbe7:	e8 1f 0e ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_Hex_Print(MMap->type);
ffffffff8021bbec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bbf0:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021bbf3:	89 c0                	mov    %eax,%eax
ffffffff8021bbf5:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bbf8:	e8 4c 0d ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
            continue;
ffffffff8021bbfd:	e9 ee 00 00 00       	jmp    ffffffff8021bcf0 <__RME_X64_Mem_Init+0x1a7>
        }

        Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bc02:	48 8b 05 07 e4 00 00 	mov    0xe407(%rip),%rax        # ffffffff8022a010 <RME_X64_Phys_Mem>
ffffffff8021bc09:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bc0d:	eb 20                	jmp    ffffffff8021bc2f <__RME_X64_Mem_Init+0xe6>
        {
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
ffffffff8021bc0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc13:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021bc17:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8021bc1b:	48 8b 52 04          	mov    0x4(%rdx),%rdx
ffffffff8021bc1f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021bc22:	72 17                	jb     ffffffff8021bc3b <__RME_X64_Mem_Init+0xf2>
                break;
            Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bc24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc28:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bc2b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bc2f:	48 81 7d f8 10 a0 22 	cmpq   $0xffffffff8022a010,-0x8(%rbp)
ffffffff8021bc36:	80 
ffffffff8021bc37:	75 d6                	jne    ffffffff8021bc0f <__RME_X64_Mem_Init+0xc6>
ffffffff8021bc39:	eb 01                	jmp    ffffffff8021bc3c <__RME_X64_Mem_Init+0xf3>
                break;
ffffffff8021bc3b:	90                   	nop
        }
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff8021bc3c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bc40:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bc44:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bc48:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bc4c:	48 81 c2 30 a0 22 80 	add    $0xffffffff8022a030,%rdx
ffffffff8021bc53:	48 89 02             	mov    %rax,(%rdx)
        RME_X64_Mem[Info_Cnt].Length=MMap->len;
ffffffff8021bc56:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bc5a:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bc5e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bc62:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bc66:	48 81 c2 38 a0 22 80 	add    $0xffffffff8022a038,%rdx
ffffffff8021bc6d:	48 89 02             	mov    %rax,(%rdx)
        __RME_List_Ins(&(RME_X64_Mem[Info_Cnt].Head),Trav_Ptr->Prev,Trav_Ptr);
ffffffff8021bc70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bc74:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8021bc78:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8021bc7c:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff8021bc80:	48 8d 8a 20 a0 22 80 	lea    -0x7fdd5fe0(%rdx),%rcx
ffffffff8021bc87:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8021bc8b:	48 89 c6             	mov    %rax,%rsi
ffffffff8021bc8e:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021bc91:	e8 ae b5 00 00       	call   ffffffff80227244 <__RME_List_Ins>

        /* Just print them then */
        RME_DBG_S("\n\rPhysical memory: 0x");
ffffffff8021bc96:	48 c7 c7 d7 97 22 80 	mov    $0xffffffff802297d7,%rdi
ffffffff8021bc9d:	e8 69 0d ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_Hex_Print(MMap->addr);
ffffffff8021bca2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bca6:	48 8b 40 04          	mov    0x4(%rax),%rax
ffffffff8021bcaa:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bcad:	e8 97 0c ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
        RME_DBG_S(", 0x");
ffffffff8021bcb2:	48 c7 c7 ed 97 22 80 	mov    $0xffffffff802297ed,%rdi
ffffffff8021bcb9:	e8 4d 0d ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_Hex_Print(MMap->len);
ffffffff8021bcbe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bcc2:	48 8b 40 0c          	mov    0xc(%rax),%rax
ffffffff8021bcc6:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bcc9:	e8 7b 0c ff ff       	call   ffffffff8020c949 <RME_Hex_Print>
        RME_DBG_S(", ");
ffffffff8021bcce:	48 c7 c7 ab 97 22 80 	mov    $0xffffffff802297ab,%rdi
ffffffff8021bcd5:	e8 31 0d ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_Hex_Print(MMap->type);
ffffffff8021bcda:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8021bcde:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff8021bce1:	89 c0                	mov    %eax,%eax
ffffffff8021bce3:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bce6:	e8 5e 0c ff ff       	call   ffffffff8020c949 <RME_Hex_Print>

        Info_Cnt++;
ffffffff8021bceb:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    while(MMap_Cnt<MMap_Length)
ffffffff8021bcf0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bcf4:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8021bcf8:	0f 82 80 fe ff ff    	jb     ffffffff8021bb7e <__RME_X64_Mem_Init+0x35>
    }

    /* Check if any memory segment overlaps. If yes, merge them into one,
     * until there is no overlapping segments */
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bcfe:	48 8b 05 0b e3 00 00 	mov    0xe30b(%rip),%rax        # ffffffff8022a010 <RME_X64_Phys_Mem>
ffffffff8021bd05:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021bd09:	eb 75                	jmp    ffffffff8021bd80 <__RME_X64_Mem_Init+0x237>
    {
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bd0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd0f:	48 8b 50 10          	mov    0x10(%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length)>
ffffffff8021bd13:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd17:	48 8b 40 18          	mov    0x18(%rax),%rax
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bd1b:	48 01 c2             	add    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
ffffffff8021bd1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd22:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bd25:	48 8b 40 10          	mov    0x10(%rax),%rax
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff8021bd29:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021bd2c:	73 47                	jae    ffffffff8021bd75 <__RME_X64_Mem_Init+0x22c>
        {
            /* Merge these two blocks */
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021bd2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd32:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bd35:	48 8b 50 10          	mov    0x10(%rax),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021bd39:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd3d:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bd40:	48 8b 40 18          	mov    0x18(%rax),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff8021bd44:	48 01 c2             	add    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr;
ffffffff8021bd47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd4b:	48 8b 40 10          	mov    0x10(%rax),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff8021bd4f:	48 29 c2             	sub    %rax,%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
ffffffff8021bd52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd56:	48 89 50 18          	mov    %rdx,0x18(%rax)
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff8021bd5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd5e:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bd61:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021bd64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd68:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021bd6b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bd6e:	e8 1a b5 00 00       	call   ffffffff8022728d <__RME_List_Del>
            continue;
ffffffff8021bd73:	eb 0b                	jmp    ffffffff8021bd80 <__RME_X64_Mem_Init+0x237>
        }
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bd75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd79:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bd7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff8021bd80:	48 81 7d f8 10 a0 22 	cmpq   $0xffffffff8022a010,-0x8(%rbp)
ffffffff8021bd87:	80 
ffffffff8021bd88:	74 13                	je     ffffffff8021bd9d <__RME_X64_Mem_Init+0x254>
ffffffff8021bd8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bd8e:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bd91:	48 3d 10 a0 22 80    	cmp    $0xffffffff8022a010,%rax
ffffffff8021bd97:	0f 85 6e ff ff ff    	jne    ffffffff8021bd0b <__RME_X64_Mem_Init+0x1c2>
    }

    /* Calculate total memory */
    MMap_Cnt=0;
ffffffff8021bd9d:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8021bda4:	00 
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff8021bda5:	48 8b 05 64 e2 00 00 	mov    0xe264(%rip),%rax        # ffffffff8022a010 <RME_X64_Phys_Mem>
ffffffff8021bdac:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bdb0:	eb 17                	jmp    ffffffff8021bdc9 <__RME_X64_Mem_Init+0x280>
    {
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
ffffffff8021bdb2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bdb6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8021bdba:	48 01 45 f0          	add    %rax,-0x10(%rbp)
        Trav_Ptr=Trav_Ptr->Next;
ffffffff8021bdbe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021bdc2:	48 8b 00             	mov    (%rax),%rax
ffffffff8021bdc5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff8021bdc9:	48 81 7d f8 10 a0 22 	cmpq   $0xffffffff8022a010,-0x8(%rbp)
ffffffff8021bdd0:	80 
ffffffff8021bdd1:	75 df                	jne    ffffffff8021bdb2 <__RME_X64_Mem_Init+0x269>
    }
    RME_DBG_S("\n\rTotal physical memory: 0x");
ffffffff8021bdd3:	48 c7 c7 f2 97 22 80 	mov    $0xffffffff802297f2,%rdi
ffffffff8021bdda:	e8 2c 0c ff ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_Hex_Print(MMap_Cnt);
ffffffff8021bddf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bde3:	48 89 c7             	mov    %rax,%rdi
ffffffff8021bde6:	e8 5e 0b ff ff       	call   ffffffff8020c949 <RME_Hex_Print>

    /* At least 256MB memory required on x64 architecture */
    RME_ASSERT(MMap_Cnt>=RME_POW2(RME_PGT_SIZE_256M));

    /* Kernel virtual memory layout */
    RME_X64_Layout.Kot_Start=(rme_ptr_t)RME_KOT_VA_BASE;
ffffffff8021bdeb:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021bdf2:	80 ff ff 
ffffffff8021bdf5:	48 89 05 44 62 01 00 	mov    %rax,0x16244(%rip)        # ffffffff80232040 <RME_X64_Layout>
    /* +1G in cases where we have > 3GB memory for covering the memory hole */
    Info_Cnt=(MMap_Cnt>3*RME_POW2(RME_PGT_SIZE_1G))?(MMap_Cnt+RME_POW2(RME_PGT_SIZE_1G)):MMap_Cnt;
ffffffff8021bdfc:	b8 00 00 00 c0       	mov    $0xc0000000,%eax
ffffffff8021be01:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8021be05:	73 0c                	jae    ffffffff8021be13 <__RME_X64_Mem_Init+0x2ca>
ffffffff8021be07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be0b:	48 05 00 00 00 40    	add    $0x40000000,%rax
ffffffff8021be11:	eb 04                	jmp    ffffffff8021be17 <__RME_X64_Mem_Init+0x2ce>
ffffffff8021be13:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021be17:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    RME_X64_Layout.Kot_Size=((Info_Cnt>>RME_KOM_SLOT_ORDER)>>RME_WORD_ORDER)+1;
ffffffff8021be1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8021be1f:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff8021be23:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021be27:	48 89 05 1a 62 01 00 	mov    %rax,0x1621a(%rip)        # ffffffff80232048 <RME_X64_Layout+0x8>

    /* Calculate the per-CPU data structure size - each CPU have two 4k pages */
    RME_X64_Layout.PerCPU_Start=RME_ROUND_UP(RME_X64_Layout.Kot_Start+RME_X64_Layout.Kot_Size,RME_PGT_SIZE_4K);
ffffffff8021be2e:	48 8b 15 0b 62 01 00 	mov    0x1620b(%rip),%rdx        # ffffffff80232040 <RME_X64_Layout>
ffffffff8021be35:	48 8b 05 0c 62 01 00 	mov    0x1620c(%rip),%rax        # ffffffff80232048 <RME_X64_Layout+0x8>
ffffffff8021be3c:	48 01 d0             	add    %rdx,%rax
ffffffff8021be3f:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff8021be45:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff8021be4b:	48 89 05 fe 61 01 00 	mov    %rax,0x161fe(%rip)        # ffffffff80232050 <RME_X64_Layout+0x10>
    RME_X64_Layout.PerCPU_Size=2*RME_POW2(RME_PGT_SIZE_4K)*RME_X64_Num_CPU;
ffffffff8021be52:	48 8b 05 4f 64 01 00 	mov    0x1644f(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021be59:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8021be5d:	48 89 05 f4 61 01 00 	mov    %rax,0x161f4(%rip)        # ffffffff80232058 <RME_X64_Layout+0x18>

    /* Now decide the size of the stack */
    RME_X64_Layout.Stack_Size=RME_X64_Num_CPU<<RME_X64_KSTACK_ORDER;
ffffffff8021be64:	48 8b 05 3d 64 01 00 	mov    0x1643d(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff8021be6b:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff8021be6f:	48 89 05 2a 64 01 00 	mov    %rax,0x1642a(%rip)        # ffffffff802322a0 <RME_X64_Layout+0x260>
}
ffffffff8021be76:	90                   	nop
ffffffff8021be77:	c9                   	leave
ffffffff8021be78:	c3                   	ret

ffffffff8021be79 <__RME_X64_CPU_Local_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_CPU_Local_Init(void)
{
ffffffff8021be79:	f3 0f 1e fa          	endbr64
ffffffff8021be7d:	55                   	push   %rbp
ffffffff8021be7e:	48 89 e5             	mov    %rsp,%rbp
ffffffff8021be81:	48 83 ec 40          	sub    $0x40,%rsp
    struct RME_CPU_Local* CPU_Local;
    rme_ptr_t* GDT_Table;
    rme_ptr_t TSS_Table;
    rme_cnt_t Count;

    IDT_Table=(struct RME_X64_IDT_Entry*)RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt);
ffffffff8021be85:	48 8b 05 c4 61 01 00 	mov    0x161c4(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff8021be8c:	48 8b 15 1d 64 01 00 	mov    0x1641d(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff8021be93:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021be97:	48 01 d0             	add    %rdx,%rax
ffffffff8021be9a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
ffffffff8021be9e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8021bea5:	00 
ffffffff8021bea6:	eb 1b                	jmp    ffffffff8021bec3 <__RME_X64_CPU_Local_Init+0x4a>
        IDT_Table[Count].Type_Attr=0;
ffffffff8021bea8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8021beac:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021beb0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021beb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021beb7:	48 01 d0             	add    %rdx,%rax
ffffffff8021beba:	c6 40 05 00          	movb   $0x0,0x5(%rax)
    for(Count=0;Count<256;Count++)
ffffffff8021bebe:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8021bec3:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff8021beca:	00 
ffffffff8021becb:	7e db                	jle    ffffffff8021bea8 <__RME_X64_CPU_Local_Init+0x2f>

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8021becd:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bed4:	89 c2                	mov    %eax,%edx
ffffffff8021bed6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021beda:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bedd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bee1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bee7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021beeb:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021beef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bef3:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bef7:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021befe:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bf02:	89 c2                	mov    %eax,%edx
ffffffff8021bf04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf08:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bf0c:	48 c7 c0 d3 b8 20 80 	mov    $0xffffffff8020b8d3,%rax
ffffffff8021bf13:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bf17:	89 c2                	mov    %eax,%edx
ffffffff8021bf19:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf1d:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bf20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf24:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8021bf2b:	48 c7 c2 df b8 20 80 	mov    $0xffffffff8020b8df,%rdx
ffffffff8021bf32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf36:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bf3a:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bf3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf41:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bf45:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bf4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf4f:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bf53:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bf57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf5b:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bf5f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bf63:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
ffffffff8021bf6a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bf6e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf75:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bf79:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bf7d:	48 c7 c0 df b8 20 80 	mov    $0xffffffff8020b8df,%rax
ffffffff8021bf84:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021bf88:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bf8b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf8f:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bf93:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021bf96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bf9a:	48 83 c0 10          	add    $0x10,%rax
ffffffff8021bf9e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8021bfa5:	48 c7 c2 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rdx
ffffffff8021bfac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfb0:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bfb4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021bfb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfbb:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bfbf:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021bfc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfc9:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bfcd:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021bfd1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfd5:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bfd9:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021bfdd:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
ffffffff8021bfe4:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021bfe8:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bfeb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021bfef:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021bff3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021bff7:	48 c7 c0 eb b8 20 80 	mov    $0xffffffff8020b8eb,%rax
ffffffff8021bffe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c002:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c005:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c009:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021c00d:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c010:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c014:	48 83 c0 20          	add    $0x20,%rax
ffffffff8021c018:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8021c01f:	48 c7 c2 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rdx
ffffffff8021c026:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c02a:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c02e:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c031:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c035:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c039:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c03f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c043:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c047:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c04b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c04f:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c053:	c6 40 05 ee          	movb   $0xee,0x5(%rax)
ffffffff8021c057:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
ffffffff8021c05e:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c062:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c065:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c069:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c06d:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c071:	48 c7 c0 f7 b8 20 80 	mov    $0xffffffff8020b8f7,%rax
ffffffff8021c078:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c07c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c07f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c083:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c087:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c08a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c08e:	48 83 c0 30          	add    $0x30,%rax
ffffffff8021c092:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8021c099:	48 c7 c2 03 b9 20 80 	mov    $0xffffffff8020b903,%rdx
ffffffff8021c0a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0a4:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c0a8:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c0ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0af:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c0b3:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c0b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0bd:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c0c1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c0c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0c9:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c0cd:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c0d1:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
ffffffff8021c0d8:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c0dc:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c0df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0e3:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c0e7:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c0eb:	48 c7 c0 03 b9 20 80 	mov    $0xffffffff8020b903,%rax
ffffffff8021c0f2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c0f6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c0f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c0fd:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c101:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c104:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c108:	48 83 c0 40          	add    $0x40,%rax
ffffffff8021c10c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8021c113:	48 c7 c2 0c b9 20 80 	mov    $0xffffffff8020b90c,%rdx
ffffffff8021c11a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c11e:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c122:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c125:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c129:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c12d:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c133:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c137:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c13b:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c13f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c143:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c147:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c14b:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
ffffffff8021c152:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c156:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c159:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c15d:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c161:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c165:	48 c7 c0 0c b9 20 80 	mov    $0xffffffff8020b90c,%rax
ffffffff8021c16c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c170:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c173:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c177:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c17b:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c17e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c182:	48 83 c0 50          	add    $0x50,%rax
ffffffff8021c186:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8021c18d:	48 c7 c2 15 b9 20 80 	mov    $0xffffffff8020b915,%rdx
ffffffff8021c194:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c198:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c19c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c19f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1a3:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c1a7:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c1ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1b1:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c1b5:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c1b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1bd:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c1c1:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c1c5:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
ffffffff8021c1cc:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c1d0:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c1d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1d7:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c1db:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c1df:	48 c7 c0 15 b9 20 80 	mov    $0xffffffff8020b915,%rax
ffffffff8021c1e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c1ea:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c1ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1f1:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c1f5:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c1f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c1fc:	48 83 c0 60          	add    $0x60,%rax
ffffffff8021c200:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff8021c207:	48 c7 c2 1e b9 20 80 	mov    $0xffffffff8020b91e,%rdx
ffffffff8021c20e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c212:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c216:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c219:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c21d:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c221:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c227:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c22b:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c22f:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c233:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c237:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c23b:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c23f:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021c246:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c24a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c24d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c251:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c255:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c259:	48 c7 c0 1e b9 20 80 	mov    $0xffffffff8020b91e,%rax
ffffffff8021c260:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c264:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c267:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c26b:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c26f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c272:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c276:	48 83 c0 70          	add    $0x70,%rax
ffffffff8021c27a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8021c281:	48 c7 c2 27 b9 20 80 	mov    $0xffffffff8020b927,%rdx
ffffffff8021c288:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c28c:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c290:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c293:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c297:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c29b:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c2a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2a5:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c2a9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c2ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2b1:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c2b5:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c2b9:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
ffffffff8021c2c0:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c2c4:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c2c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2cb:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c2cf:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c2d3:	48 c7 c0 27 b9 20 80 	mov    $0xffffffff8020b927,%rax
ffffffff8021c2da:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c2de:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c2e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2e5:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c2e9:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c2ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c2f0:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
ffffffff8021c2f4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8021c2fb:	48 c7 c2 2e b9 20 80 	mov    $0xffffffff8020b92e,%rdx
ffffffff8021c302:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c306:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c30c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c30f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c313:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c319:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c31f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c323:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c329:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c32d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c331:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c337:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c33b:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8021c342:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c346:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c349:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c34d:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c353:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c357:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8021c35e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c362:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c365:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c369:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c36f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c372:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c376:	48 05 90 00 00 00    	add    $0x90,%rax
ffffffff8021c37c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8021c383:	48 c7 c2 37 b9 20 80 	mov    $0xffffffff8020b937,%rdx
ffffffff8021c38a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c38e:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c394:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c397:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c39b:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c3a1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c3a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3ab:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c3b1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c3b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3b9:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c3bf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c3c3:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
ffffffff8021c3ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c3ce:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c3d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3d5:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c3db:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c3df:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
ffffffff8021c3e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c3ea:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c3ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3f1:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c3f7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c3fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c3fe:	48 05 a0 00 00 00    	add    $0xa0,%rax
ffffffff8021c404:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8021c40b:	48 c7 c2 3e b9 20 80 	mov    $0xffffffff8020b93e,%rdx
ffffffff8021c412:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c416:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c41c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c41f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c423:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c429:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c42f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c433:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c439:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c43d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c441:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c447:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c44b:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
ffffffff8021c452:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c456:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c459:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c45d:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c463:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c467:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
ffffffff8021c46e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c472:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c475:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c479:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c47f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c482:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c486:	48 05 b0 00 00 00    	add    $0xb0,%rax
ffffffff8021c48c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8021c493:	48 c7 c2 45 b9 20 80 	mov    $0xffffffff8020b945,%rdx
ffffffff8021c49a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c49e:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c4a4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c4a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4ab:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c4b1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c4b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4bb:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c4c1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c4c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4c9:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c4cf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c4d3:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
ffffffff8021c4da:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c4de:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c4e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c4e5:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c4eb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c4ef:	48 c7 c0 45 b9 20 80 	mov    $0xffffffff8020b945,%rax
ffffffff8021c4f6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c4fa:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c4fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c501:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c507:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c50a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c50e:	48 05 c0 00 00 00    	add    $0xc0,%rax
ffffffff8021c514:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8021c51b:	48 c7 c2 4c b9 20 80 	mov    $0xffffffff8020b94c,%rdx
ffffffff8021c522:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c526:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c52c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c52f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c533:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c539:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c53f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c543:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c549:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c54d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c551:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c557:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c55b:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
ffffffff8021c562:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c566:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c569:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c56d:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c573:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c577:	48 c7 c0 4c b9 20 80 	mov    $0xffffffff8020b94c,%rax
ffffffff8021c57e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c582:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c585:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c589:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c58f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c592:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c596:	48 05 d0 00 00 00    	add    $0xd0,%rax
ffffffff8021c59c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8021c5a3:	48 c7 c2 53 b9 20 80 	mov    $0xffffffff8020b953,%rdx
ffffffff8021c5aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5ae:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c5b4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c5b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5bb:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c5c1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c5c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5cb:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c5d1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c5d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5d9:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c5df:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c5e3:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
ffffffff8021c5ea:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c5ee:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c5f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c5f5:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c5fb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c5ff:	48 c7 c0 53 b9 20 80 	mov    $0xffffffff8020b953,%rax
ffffffff8021c606:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c60a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c60d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c611:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c617:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c61a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c61e:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff8021c624:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8021c62b:	48 c7 c2 5a b9 20 80 	mov    $0xffffffff8020b95a,%rdx
ffffffff8021c632:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c636:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c63c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c63f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c643:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c649:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c64f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c653:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c659:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c65d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c661:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c667:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c66b:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
ffffffff8021c672:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c676:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c679:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c67d:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c683:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c687:	48 c7 c0 5a b9 20 80 	mov    $0xffffffff8020b95a,%rax
ffffffff8021c68e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c692:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c695:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c699:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c69f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c6a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6a6:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff8021c6ac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8021c6b3:	48 c7 c2 63 b9 20 80 	mov    $0xffffffff8020b963,%rdx
ffffffff8021c6ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6be:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c6c4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c6c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6cb:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c6d1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c6d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6db:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c6e1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c6e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c6e9:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c6ef:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c6f3:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
ffffffff8021c6fa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c6fe:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c701:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c705:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c70b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c70f:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
ffffffff8021c716:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c71a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c71d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c721:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c727:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c72a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c72e:	48 05 10 01 00 00    	add    $0x110,%rax
ffffffff8021c734:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8021c73b:	48 c7 c2 6a b9 20 80 	mov    $0xffffffff8020b96a,%rdx
ffffffff8021c742:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c746:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c74c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c74f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c753:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c759:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c75f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c763:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c769:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c76d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c771:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c777:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c77b:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
ffffffff8021c782:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c786:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c789:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c78d:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c793:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c797:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
ffffffff8021c79e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c7a2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c7a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7a9:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c7af:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c7b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7b6:	48 05 20 01 00 00    	add    $0x120,%rax
ffffffff8021c7bc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8021c7c3:	48 c7 c2 73 b9 20 80 	mov    $0xffffffff8020b973,%rdx
ffffffff8021c7ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7ce:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c7d4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c7d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7db:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c7e1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c7e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7eb:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c7f1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c7f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c7f9:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c7ff:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c803:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
ffffffff8021c80a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c80e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c811:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c815:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c81b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c81f:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
ffffffff8021c826:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c82a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c82d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c831:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c837:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c83a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c83e:	48 05 30 01 00 00    	add    $0x130,%rax
ffffffff8021c844:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8021c84b:	48 c7 c2 7c b9 20 80 	mov    $0xffffffff8020b97c,%rdx
ffffffff8021c852:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c856:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c85c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c85f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c863:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c869:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c86f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c873:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c879:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c87d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c881:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c887:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c88b:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
ffffffff8021c892:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c896:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c899:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c89d:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c8a3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c8a7:	48 c7 c0 7c b9 20 80 	mov    $0xffffffff8020b97c,%rax
ffffffff8021c8ae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c8b2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c8b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8b9:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c8bf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c8c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8c6:	48 05 40 01 00 00    	add    $0x140,%rax
ffffffff8021c8cc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8021c8d3:	48 c7 c2 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rdx
ffffffff8021c8da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8de:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c8e4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c8e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8eb:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c8f1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c8f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c8fb:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c901:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c905:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c909:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c90f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c913:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021c91a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c91e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c921:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c925:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c92b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c92f:	48 c7 c0 d5 b9 20 80 	mov    $0xffffffff8020b9d5,%rax
ffffffff8021c936:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c93a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c93d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c941:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c947:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c94a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c94e:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8021c954:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021c95b:	48 c7 c2 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rdx
ffffffff8021c962:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c966:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c96c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c96f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c973:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c979:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021c97f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c983:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c989:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021c98d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c991:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c997:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021c99b:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021c9a2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021c9a6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c9a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9ad:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c9b3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021c9b7:	48 c7 c0 e1 b9 20 80 	mov    $0xffffffff8020b9e1,%rax
ffffffff8021c9be:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021c9c2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c9c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9c9:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c9cf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021c9d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9d6:	48 05 10 02 00 00    	add    $0x210,%rax
ffffffff8021c9dc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8021c9e3:	48 c7 c2 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rdx
ffffffff8021c9ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9ee:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021c9f4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021c9f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021c9fb:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca01:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ca07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca0b:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca11:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ca15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca19:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca1f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ca23:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
ffffffff8021ca2a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ca2e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca35:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca3b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ca3f:	48 c7 c0 ed b9 20 80 	mov    $0xffffffff8020b9ed,%rax
ffffffff8021ca46:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ca4a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ca4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca51:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca57:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ca5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca5e:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8021ca64:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ca6b:	48 c7 c2 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rdx
ffffffff8021ca72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca76:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021ca7c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ca7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca83:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021ca89:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ca8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ca93:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021ca99:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ca9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021caa1:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021caa7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021caab:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff8021cab2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cab6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cab9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cabd:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021cac3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cac7:	48 c7 c0 f9 b9 20 80 	mov    $0xffffffff8020b9f9,%rax
ffffffff8021cace:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cad2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cad5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cad9:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021cadf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cae2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cae6:	48 05 30 02 00 00    	add    $0x230,%rax
ffffffff8021caec:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8021caf3:	48 c7 c2 05 ba 20 80 	mov    $0xffffffff8020ba05,%rdx
ffffffff8021cafa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cafe:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb04:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cb07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb0b:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb11:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cb17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb1b:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb21:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cb25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb29:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb2f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cb33:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
ffffffff8021cb3a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cb3e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb45:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb4b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cb4f:	48 c7 c0 05 ba 20 80 	mov    $0xffffffff8020ba05,%rax
ffffffff8021cb56:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cb5a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cb5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb61:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb67:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cb6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb6e:	48 05 40 02 00 00    	add    $0x240,%rax
ffffffff8021cb74:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cb7b:	48 c7 c2 11 ba 20 80 	mov    $0xffffffff8020ba11,%rdx
ffffffff8021cb82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb86:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cb8c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cb8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cb93:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cb99:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cb9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cba3:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cba9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cbad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbb1:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cbb7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cbbb:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff8021cbc2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cbc6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cbc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbcd:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cbd3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cbd7:	48 c7 c0 11 ba 20 80 	mov    $0xffffffff8020ba11,%rax
ffffffff8021cbde:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cbe2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cbe5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbe9:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cbef:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cbf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cbf6:	48 05 50 02 00 00    	add    $0x250,%rax
ffffffff8021cbfc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8021cc03:	48 c7 c2 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rdx
ffffffff8021cc0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc0e:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc14:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cc17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc1b:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc21:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cc27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc2b:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc31:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cc35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc39:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc3f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cc43:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
ffffffff8021cc4a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cc4e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc55:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc5b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cc5f:	48 c7 c0 1d ba 20 80 	mov    $0xffffffff8020ba1d,%rax
ffffffff8021cc66:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cc6a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc71:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc77:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cc7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc7e:	48 05 60 02 00 00    	add    $0x260,%rax
ffffffff8021cc84:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cc8b:	48 c7 c2 29 ba 20 80 	mov    $0xffffffff8020ba29,%rdx
ffffffff8021cc92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cc96:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cc9c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cc9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cca3:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cca9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ccaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccb3:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ccb9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ccbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccc1:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ccc7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cccb:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff8021ccd2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ccd6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ccd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccdd:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cce3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cce7:	48 c7 c0 29 ba 20 80 	mov    $0xffffffff8020ba29,%rax
ffffffff8021ccee:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ccf2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ccf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ccf9:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021ccff:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cd02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd06:	48 05 70 02 00 00    	add    $0x270,%rax
ffffffff8021cd0c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8021cd13:	48 c7 c2 35 ba 20 80 	mov    $0xffffffff8020ba35,%rdx
ffffffff8021cd1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd1e:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cd24:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cd27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd2b:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cd31:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cd37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd3b:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cd41:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cd45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd49:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cd4f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cd53:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
ffffffff8021cd5a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cd5e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd65:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cd6b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cd6f:	48 c7 c0 35 ba 20 80 	mov    $0xffffffff8020ba35,%rax
ffffffff8021cd76:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cd7a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cd7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd81:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cd87:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cd8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cd8e:	48 05 80 02 00 00    	add    $0x280,%rax
ffffffff8021cd94:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cd9b:	48 c7 c2 41 ba 20 80 	mov    $0xffffffff8020ba41,%rdx
ffffffff8021cda2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cda6:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cdac:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cdaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdb3:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cdb9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cdbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdc3:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cdc9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cdcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cdd1:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cdd7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cddb:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021cde2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cde6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cde9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cded:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021cdf3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cdf7:	48 c7 c0 41 ba 20 80 	mov    $0xffffffff8020ba41,%rax
ffffffff8021cdfe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ce02:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce09:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ce0f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ce12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce16:	48 05 90 02 00 00    	add    $0x290,%rax
ffffffff8021ce1c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8021ce23:	48 c7 c2 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rdx
ffffffff8021ce2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce2e:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ce34:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ce37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce3b:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ce41:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ce47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce4b:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ce51:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ce55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce59:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ce5f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ce63:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
ffffffff8021ce6a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ce6e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce75:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ce7b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ce7f:	48 c7 c0 4d ba 20 80 	mov    $0xffffffff8020ba4d,%rax
ffffffff8021ce86:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ce8a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce91:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021ce97:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ce9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ce9e:	48 05 a0 02 00 00    	add    $0x2a0,%rax
ffffffff8021cea4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ceab:	48 c7 c2 59 ba 20 80 	mov    $0xffffffff8020ba59,%rdx
ffffffff8021ceb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ceb6:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cebc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cebf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cec3:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cec9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cecf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ced3:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021ced9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cedd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cee1:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cee7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ceeb:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff8021cef2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cef6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cef9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cefd:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cf03:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cf07:	48 c7 c0 59 ba 20 80 	mov    $0xffffffff8020ba59,%rax
ffffffff8021cf0e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cf12:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf19:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cf1f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cf22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf26:	48 05 b0 02 00 00    	add    $0x2b0,%rax
ffffffff8021cf2c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8021cf33:	48 c7 c2 65 ba 20 80 	mov    $0xffffffff8020ba65,%rdx
ffffffff8021cf3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf3e:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cf44:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cf47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf4b:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cf51:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cf57:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf5b:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cf61:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cf65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf69:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cf6f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cf73:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
ffffffff8021cf7a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021cf7e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cf85:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cf8b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021cf8f:	48 c7 c0 65 ba 20 80 	mov    $0xffffffff8020ba65,%rax
ffffffff8021cf96:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021cf9a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cf9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfa1:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cfa7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021cfaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfae:	48 05 c0 02 00 00    	add    $0x2c0,%rax
ffffffff8021cfb4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021cfbb:	48 c7 c2 71 ba 20 80 	mov    $0xffffffff8020ba71,%rdx
ffffffff8021cfc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfc6:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cfcc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021cfcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfd3:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cfd9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021cfdf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cfe3:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cfe9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021cfed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021cff1:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021cff7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021cffb:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff8021d002:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d006:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d009:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d00d:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021d013:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d017:	48 c7 c0 71 ba 20 80 	mov    $0xffffffff8020ba71,%rax
ffffffff8021d01e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d022:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d025:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d029:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021d02f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d032:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d036:	48 05 d0 02 00 00    	add    $0x2d0,%rax
ffffffff8021d03c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8021d043:	48 c7 c2 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rdx
ffffffff8021d04a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d04e:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d054:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d057:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d05b:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d061:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d067:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d06b:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d071:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d075:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d079:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d07f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d083:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
ffffffff8021d08a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d08e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d091:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d095:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d09b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d09f:	48 c7 c0 7d ba 20 80 	mov    $0xffffffff8020ba7d,%rax
ffffffff8021d0a6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d0aa:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d0ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0b1:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d0b7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d0ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0be:	48 05 e0 02 00 00    	add    $0x2e0,%rax
ffffffff8021d0c4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d0cb:	48 c7 c2 89 ba 20 80 	mov    $0xffffffff8020ba89,%rdx
ffffffff8021d0d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0d6:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d0dc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d0df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0e3:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d0e9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d0ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d0f3:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d0f9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d0fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d101:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d107:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d10b:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff8021d112:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d116:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d119:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d11d:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d123:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d127:	48 c7 c0 89 ba 20 80 	mov    $0xffffffff8020ba89,%rax
ffffffff8021d12e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d132:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d135:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d139:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d13f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d142:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d146:	48 05 f0 02 00 00    	add    $0x2f0,%rax
ffffffff8021d14c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8021d153:	48 c7 c2 95 ba 20 80 	mov    $0xffffffff8020ba95,%rdx
ffffffff8021d15a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d15e:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d164:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d167:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d16b:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d171:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d177:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d17b:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d181:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d185:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d189:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d18f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d193:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
ffffffff8021d19a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d19e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d1a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1a5:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d1ab:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d1af:	48 c7 c0 95 ba 20 80 	mov    $0xffffffff8020ba95,%rax
ffffffff8021d1b6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d1ba:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d1bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1c1:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d1c7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d1ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1ce:	48 05 00 03 00 00    	add    $0x300,%rax
ffffffff8021d1d4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d1db:	48 c7 c2 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rdx
ffffffff8021d1e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1e6:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d1ec:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d1ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d1f3:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d1f9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d1ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d203:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d209:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d20d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d211:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d217:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d21b:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021d222:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d226:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d229:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d22d:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d233:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d237:	48 c7 c0 a1 ba 20 80 	mov    $0xffffffff8020baa1,%rax
ffffffff8021d23e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d242:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d245:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d249:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d24f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d252:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d256:	48 05 10 03 00 00    	add    $0x310,%rax
ffffffff8021d25c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8021d263:	48 c7 c2 ad ba 20 80 	mov    $0xffffffff8020baad,%rdx
ffffffff8021d26a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d26e:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d274:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d277:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d27b:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d281:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d287:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d28b:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d291:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d295:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d299:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d29f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d2a3:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
ffffffff8021d2aa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d2ae:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d2b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2b5:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d2bb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d2bf:	48 c7 c0 ad ba 20 80 	mov    $0xffffffff8020baad,%rax
ffffffff8021d2c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d2ca:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d2cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2d1:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d2d7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d2da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2de:	48 05 20 03 00 00    	add    $0x320,%rax
ffffffff8021d2e4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d2eb:	48 c7 c2 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rdx
ffffffff8021d2f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d2f6:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d2fc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d2ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d303:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d309:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d30f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d313:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d319:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d31d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d321:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d327:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d32b:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021d332:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d336:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d339:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d33d:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d343:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d347:	48 c7 c0 b9 ba 20 80 	mov    $0xffffffff8020bab9,%rax
ffffffff8021d34e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d352:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d355:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d359:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d35f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d362:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d366:	48 05 30 03 00 00    	add    $0x330,%rax
ffffffff8021d36c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8021d373:	48 c7 c2 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rdx
ffffffff8021d37a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d37e:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d384:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d38b:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d391:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d397:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d39b:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d3a1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d3a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3a9:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d3af:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d3b3:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
ffffffff8021d3ba:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d3be:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d3c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3c5:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d3cb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d3cf:	48 c7 c0 c5 ba 20 80 	mov    $0xffffffff8020bac5,%rax
ffffffff8021d3d6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d3da:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d3dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3e1:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d3e7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d3ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d3ee:	48 05 40 03 00 00    	add    $0x340,%rax
ffffffff8021d3f4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d3fb:	48 c7 c2 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rdx
ffffffff8021d402:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d406:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d40c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d40f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d413:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d419:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d41f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d423:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d429:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d42d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d431:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d437:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d43b:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff8021d442:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d446:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d449:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d44d:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d453:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d457:	48 c7 c0 d1 ba 20 80 	mov    $0xffffffff8020bad1,%rax
ffffffff8021d45e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d462:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d465:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d469:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d46f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d472:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d476:	48 05 50 03 00 00    	add    $0x350,%rax
ffffffff8021d47c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8021d483:	48 c7 c2 dd ba 20 80 	mov    $0xffffffff8020badd,%rdx
ffffffff8021d48a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d48e:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d494:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d497:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d49b:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d4a1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d4a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4ab:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d4b1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d4b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4b9:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d4bf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d4c3:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
ffffffff8021d4ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d4ce:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d4d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4d5:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d4db:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d4df:	48 c7 c0 dd ba 20 80 	mov    $0xffffffff8020badd,%rax
ffffffff8021d4e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d4ea:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d4ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4f1:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d4f7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d4fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d4fe:	48 05 60 03 00 00    	add    $0x360,%rax
ffffffff8021d504:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d50b:	48 c7 c2 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rdx
ffffffff8021d512:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d516:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d51c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d51f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d523:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d529:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d52f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d533:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d539:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d53d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d541:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d547:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d54b:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff8021d552:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d556:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d559:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d55d:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d563:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d567:	48 c7 c0 e9 ba 20 80 	mov    $0xffffffff8020bae9,%rax
ffffffff8021d56e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d572:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d575:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d579:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d57f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d582:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d586:	48 05 70 03 00 00    	add    $0x370,%rax
ffffffff8021d58c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8021d593:	48 c7 c2 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rdx
ffffffff8021d59a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d59e:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d5a4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d5a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5ab:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d5b1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d5b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5bb:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d5c1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d5c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5c9:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d5cf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d5d3:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
ffffffff8021d5da:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d5de:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d5e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d5e5:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d5eb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d5ef:	48 c7 c0 f5 ba 20 80 	mov    $0xffffffff8020baf5,%rax
ffffffff8021d5f6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d5fa:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d5fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d601:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d607:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d60a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d60e:	48 05 80 03 00 00    	add    $0x380,%rax
ffffffff8021d614:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d61b:	48 c7 c2 01 bb 20 80 	mov    $0xffffffff8020bb01,%rdx
ffffffff8021d622:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d626:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d62c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d62f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d633:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d639:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d63f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d643:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d649:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d64d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d651:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d657:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d65b:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff8021d662:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d666:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d669:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d66d:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d673:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d677:	48 c7 c0 01 bb 20 80 	mov    $0xffffffff8020bb01,%rax
ffffffff8021d67e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d682:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d685:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d689:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d68f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d692:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d696:	48 05 90 03 00 00    	add    $0x390,%rax
ffffffff8021d69c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8021d6a3:	48 c7 c2 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rdx
ffffffff8021d6aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6ae:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d6b4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d6b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6bb:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d6c1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d6c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6cb:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d6d1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d6d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6d9:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d6df:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d6e3:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff8021d6ea:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d6ee:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d6f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d6f5:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d6fb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d6ff:	48 c7 c0 0d bb 20 80 	mov    $0xffffffff8020bb0d,%rax
ffffffff8021d706:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d70a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d70d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d711:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d717:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d71a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d71e:	48 05 a0 03 00 00    	add    $0x3a0,%rax
ffffffff8021d724:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d72b:	48 c7 c2 19 bb 20 80 	mov    $0xffffffff8020bb19,%rdx
ffffffff8021d732:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d736:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d73c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d73f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d743:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d749:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d74f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d753:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d759:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d75d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d761:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d767:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d76b:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021d772:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d776:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d779:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d77d:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d783:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d787:	48 c7 c0 19 bb 20 80 	mov    $0xffffffff8020bb19,%rax
ffffffff8021d78e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d792:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d795:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d799:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d79f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d7a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7a6:	48 05 b0 03 00 00    	add    $0x3b0,%rax
ffffffff8021d7ac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8021d7b3:	48 c7 c2 25 bb 20 80 	mov    $0xffffffff8020bb25,%rdx
ffffffff8021d7ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7be:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d7c4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d7c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7cb:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d7d1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d7d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7db:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d7e1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d7e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d7e9:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d7ef:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d7f3:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
ffffffff8021d7fa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d7fe:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d801:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d805:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d80b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d80f:	48 c7 c0 25 bb 20 80 	mov    $0xffffffff8020bb25,%rax
ffffffff8021d816:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d81a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d81d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d821:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d827:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d82a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d82e:	48 05 c0 03 00 00    	add    $0x3c0,%rax
ffffffff8021d834:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d83b:	48 c7 c2 31 bb 20 80 	mov    $0xffffffff8020bb31,%rdx
ffffffff8021d842:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d846:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d84c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d84f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d853:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d859:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d85f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d863:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d869:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d86d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d871:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d877:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d87b:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff8021d882:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d886:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d889:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d88d:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d893:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d897:	48 c7 c0 31 bb 20 80 	mov    $0xffffffff8020bb31,%rax
ffffffff8021d89e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d8a2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d8a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8a9:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d8af:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d8b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8b6:	48 05 d0 03 00 00    	add    $0x3d0,%rax
ffffffff8021d8bc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8021d8c3:	48 c7 c2 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rdx
ffffffff8021d8ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8ce:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d8d4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d8d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8db:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d8e1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d8e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8eb:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d8f1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d8f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d8f9:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d8ff:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d903:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
ffffffff8021d90a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d90e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d911:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d915:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d91b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d91f:	48 c7 c0 3d bb 20 80 	mov    $0xffffffff8020bb3d,%rax
ffffffff8021d926:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d92a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d92d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d931:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d937:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d93a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d93e:	48 05 e0 03 00 00    	add    $0x3e0,%rax
ffffffff8021d944:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021d94b:	48 c7 c2 49 bb 20 80 	mov    $0xffffffff8020bb49,%rdx
ffffffff8021d952:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d956:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d95c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d95f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d963:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d969:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d96f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d973:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d979:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021d97d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d981:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d987:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021d98b:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff8021d992:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021d996:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d999:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d99d:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d9a3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021d9a7:	48 c7 c0 49 bb 20 80 	mov    $0xffffffff8020bb49,%rax
ffffffff8021d9ae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021d9b2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d9b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9b9:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d9bf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021d9c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9c6:	48 05 f0 03 00 00    	add    $0x3f0,%rax
ffffffff8021d9cc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8021d9d3:	48 c7 c2 55 bb 20 80 	mov    $0xffffffff8020bb55,%rdx
ffffffff8021d9da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9de:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d9e4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021d9e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9eb:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021d9f1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021d9f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021d9fb:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da01:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021da05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da09:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da0f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021da13:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
ffffffff8021da1a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021da1e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da25:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da2b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021da2f:	48 c7 c0 55 bb 20 80 	mov    $0xffffffff8020bb55,%rax
ffffffff8021da36:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021da3a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021da3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da41:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da47:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021da4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da4e:	48 05 00 04 00 00    	add    $0x400,%rax
ffffffff8021da54:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021da5b:	48 c7 c2 61 bb 20 80 	mov    $0xffffffff8020bb61,%rdx
ffffffff8021da62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da66:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021da6c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021da6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da73:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021da79:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021da7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da83:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021da89:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021da8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021da91:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021da97:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021da9b:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff8021daa2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021daa6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021daa9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daad:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021dab3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dab7:	48 c7 c0 61 bb 20 80 	mov    $0xffffffff8020bb61,%rax
ffffffff8021dabe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dac2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dac5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dac9:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021dacf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dad2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dad6:	48 05 10 04 00 00    	add    $0x410,%rax
ffffffff8021dadc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8021dae3:	48 c7 c2 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rdx
ffffffff8021daea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021daee:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021daf4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021daf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dafb:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db01:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021db07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db0b:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db11:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021db15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db19:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db1f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021db23:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
ffffffff8021db2a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021db2e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db35:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db3b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021db3f:	48 c7 c0 6d bb 20 80 	mov    $0xffffffff8020bb6d,%rax
ffffffff8021db46:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021db4a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021db4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db51:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db57:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021db5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db5e:	48 05 20 04 00 00    	add    $0x420,%rax
ffffffff8021db64:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021db6b:	48 c7 c2 79 bb 20 80 	mov    $0xffffffff8020bb79,%rdx
ffffffff8021db72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db76:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021db7c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021db7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db83:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021db89:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021db8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021db93:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021db99:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021db9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dba1:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dba7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dbab:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff8021dbb2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dbb6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dbb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbbd:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dbc3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dbc7:	48 c7 c0 79 bb 20 80 	mov    $0xffffffff8020bb79,%rax
ffffffff8021dbce:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dbd2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dbd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbd9:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dbdf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dbe2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbe6:	48 05 30 04 00 00    	add    $0x430,%rax
ffffffff8021dbec:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8021dbf3:	48 c7 c2 85 bb 20 80 	mov    $0xffffffff8020bb85,%rdx
ffffffff8021dbfa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dbfe:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc04:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dc07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc0b:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc11:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dc17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc1b:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc21:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dc25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc29:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc2f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dc33:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
ffffffff8021dc3a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dc3e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc45:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc4b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dc4f:	48 c7 c0 85 bb 20 80 	mov    $0xffffffff8020bb85,%rax
ffffffff8021dc56:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dc5a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dc5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc61:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc67:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dc6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc6e:	48 05 40 04 00 00    	add    $0x440,%rax
ffffffff8021dc74:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dc7b:	48 c7 c2 91 bb 20 80 	mov    $0xffffffff8020bb91,%rdx
ffffffff8021dc82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc86:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dc8c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dc8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dc93:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dc99:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dc9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dca3:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dca9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dcad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcb1:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dcb7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dcbb:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff8021dcc2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dcc6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dcc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dccd:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dcd3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dcd7:	48 c7 c0 91 bb 20 80 	mov    $0xffffffff8020bb91,%rax
ffffffff8021dcde:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dce2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dce5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dce9:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dcef:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dcf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dcf6:	48 05 50 04 00 00    	add    $0x450,%rax
ffffffff8021dcfc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8021dd03:	48 c7 c2 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rdx
ffffffff8021dd0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd0e:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd14:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dd17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd1b:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd21:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dd27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd2b:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd31:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dd35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd39:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd3f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dd43:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
ffffffff8021dd4a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dd4e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd55:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd5b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dd5f:	48 c7 c0 9d bb 20 80 	mov    $0xffffffff8020bb9d,%rax
ffffffff8021dd66:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021dd6a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dd6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd71:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd77:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021dd7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd7e:	48 05 60 04 00 00    	add    $0x460,%rax
ffffffff8021dd84:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dd8b:	48 c7 c2 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rdx
ffffffff8021dd92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dd96:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dd9c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dd9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dda3:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dda9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ddaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddb3:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021ddb9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ddbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddc1:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021ddc7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ddcb:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff8021ddd2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ddd6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ddd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dddd:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021dde3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021dde7:	48 c7 c0 a9 bb 20 80 	mov    $0xffffffff8020bba9,%rax
ffffffff8021ddee:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ddf2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ddf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ddf9:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021ddff:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021de02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de06:	48 05 70 04 00 00    	add    $0x470,%rax
ffffffff8021de0c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8021de13:	48 c7 c2 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rdx
ffffffff8021de1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de1e:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021de24:	66 89 10             	mov    %dx,(%rax)
ffffffff8021de27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de2b:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021de31:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021de37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de3b:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021de41:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021de45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de49:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021de4f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021de53:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
ffffffff8021de5a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021de5e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de65:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021de6b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021de6f:	48 c7 c0 b5 bb 20 80 	mov    $0xffffffff8020bbb5,%rax
ffffffff8021de76:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021de7a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021de7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de81:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021de87:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021de8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021de8e:	48 05 80 04 00 00    	add    $0x480,%rax
ffffffff8021de94:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021de9b:	48 c7 c2 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rdx
ffffffff8021dea2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dea6:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021deac:	66 89 10             	mov    %dx,(%rax)
ffffffff8021deaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021deb3:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021deb9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021debf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dec3:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021dec9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021decd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ded1:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021ded7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dedb:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff8021dee2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dee6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dee9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021deed:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021def3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021def7:	48 c7 c0 c1 bb 20 80 	mov    $0xffffffff8020bbc1,%rax
ffffffff8021defe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021df02:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df09:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021df0f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021df12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df16:	48 05 90 04 00 00    	add    $0x490,%rax
ffffffff8021df1c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8021df23:	48 c7 c2 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rdx
ffffffff8021df2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df2e:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021df34:	66 89 10             	mov    %dx,(%rax)
ffffffff8021df37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df3b:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021df41:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021df47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df4b:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021df51:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021df55:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df59:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021df5f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021df63:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
ffffffff8021df6a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021df6e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df71:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df75:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021df7b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021df7f:	48 c7 c0 cd bb 20 80 	mov    $0xffffffff8020bbcd,%rax
ffffffff8021df86:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021df8a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021df8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df91:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021df97:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021df9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021df9e:	48 05 a0 04 00 00    	add    $0x4a0,%rax
ffffffff8021dfa4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021dfab:	48 c7 c2 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rdx
ffffffff8021dfb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfb6:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dfbc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021dfbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfc3:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dfc9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021dfcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfd3:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dfd9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021dfdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dfe1:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021dfe7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021dfeb:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff8021dff2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021dff6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021dff9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021dffd:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021e003:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e007:	48 c7 c0 d9 bb 20 80 	mov    $0xffffffff8020bbd9,%rax
ffffffff8021e00e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e012:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e015:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e019:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021e01f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e022:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e026:	48 05 b0 04 00 00    	add    $0x4b0,%rax
ffffffff8021e02c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8021e033:	48 c7 c2 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rdx
ffffffff8021e03a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e03e:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e044:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e047:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e04b:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e051:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e057:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e05b:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e061:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e065:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e069:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e06f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e073:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
ffffffff8021e07a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e07e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e081:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e085:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e08b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e08f:	48 c7 c0 e5 bb 20 80 	mov    $0xffffffff8020bbe5,%rax
ffffffff8021e096:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e09a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e09d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0a1:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e0a7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e0aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0ae:	48 05 c0 04 00 00    	add    $0x4c0,%rax
ffffffff8021e0b4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e0bb:	48 c7 c2 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rdx
ffffffff8021e0c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0c6:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e0cc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e0cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0d3:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e0d9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e0df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0e3:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e0e9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e0ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e0f1:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e0f7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e0fb:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff8021e102:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e106:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e109:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e10d:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e113:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e117:	48 c7 c0 f1 bb 20 80 	mov    $0xffffffff8020bbf1,%rax
ffffffff8021e11e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e122:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e125:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e129:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e12f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e132:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e136:	48 05 d0 04 00 00    	add    $0x4d0,%rax
ffffffff8021e13c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8021e143:	48 c7 c2 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rdx
ffffffff8021e14a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e14e:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e154:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e157:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e15b:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e161:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e167:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e16b:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e171:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e175:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e179:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e17f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e183:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
ffffffff8021e18a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e18e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e191:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e195:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e19b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e19f:	48 c7 c0 fd bb 20 80 	mov    $0xffffffff8020bbfd,%rax
ffffffff8021e1a6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e1aa:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e1ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1b1:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e1b7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e1ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1be:	48 05 e0 04 00 00    	add    $0x4e0,%rax
ffffffff8021e1c4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e1cb:	48 c7 c2 09 bc 20 80 	mov    $0xffffffff8020bc09,%rdx
ffffffff8021e1d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1d6:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e1dc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e1df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1e3:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e1e9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e1ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e1f3:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e1f9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e1fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e201:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e207:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e20b:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff8021e212:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e216:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e219:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e21d:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e223:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e227:	48 c7 c0 09 bc 20 80 	mov    $0xffffffff8020bc09,%rax
ffffffff8021e22e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e232:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e235:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e239:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e23f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e242:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e246:	48 05 f0 04 00 00    	add    $0x4f0,%rax
ffffffff8021e24c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8021e253:	48 c7 c2 15 bc 20 80 	mov    $0xffffffff8020bc15,%rdx
ffffffff8021e25a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e25e:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e264:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e267:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e26b:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e271:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e277:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e27b:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e281:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e285:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e289:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e28f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e293:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
ffffffff8021e29a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e29e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e2a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2a5:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e2ab:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e2af:	48 c7 c0 15 bc 20 80 	mov    $0xffffffff8020bc15,%rax
ffffffff8021e2b6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e2ba:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e2bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2c1:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e2c7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e2ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2ce:	48 05 00 05 00 00    	add    $0x500,%rax
ffffffff8021e2d4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e2db:	48 c7 c2 21 bc 20 80 	mov    $0xffffffff8020bc21,%rdx
ffffffff8021e2e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2e6:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e2ec:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e2ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e2f3:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e2f9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e2ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e303:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e309:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e30d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e311:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e317:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e31b:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff8021e322:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e326:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e329:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e32d:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e333:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e337:	48 c7 c0 21 bc 20 80 	mov    $0xffffffff8020bc21,%rax
ffffffff8021e33e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e342:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e345:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e349:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e34f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e352:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e356:	48 05 10 05 00 00    	add    $0x510,%rax
ffffffff8021e35c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8021e363:	48 c7 c2 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rdx
ffffffff8021e36a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e36e:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e374:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e377:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e37b:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e381:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e38b:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e391:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e395:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e399:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e39f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e3a3:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
ffffffff8021e3aa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e3ae:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e3b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3b5:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e3bb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e3bf:	48 c7 c0 2d bc 20 80 	mov    $0xffffffff8020bc2d,%rax
ffffffff8021e3c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e3ca:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e3cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3d1:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e3d7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e3da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3de:	48 05 20 05 00 00    	add    $0x520,%rax
ffffffff8021e3e4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e3eb:	48 c7 c2 39 bc 20 80 	mov    $0xffffffff8020bc39,%rdx
ffffffff8021e3f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e3f6:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e3fc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e3ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e403:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e409:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e40f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e413:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e419:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e41d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e421:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e427:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e42b:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff8021e432:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e436:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e439:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e43d:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e443:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e447:	48 c7 c0 39 bc 20 80 	mov    $0xffffffff8020bc39,%rax
ffffffff8021e44e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e452:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e455:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e459:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e45f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e462:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e466:	48 05 30 05 00 00    	add    $0x530,%rax
ffffffff8021e46c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8021e473:	48 c7 c2 45 bc 20 80 	mov    $0xffffffff8020bc45,%rdx
ffffffff8021e47a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e47e:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e484:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e487:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e48b:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e491:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e497:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e49b:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e4a1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e4a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4a9:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e4af:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e4b3:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
ffffffff8021e4ba:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e4be:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e4c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4c5:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e4cb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e4cf:	48 c7 c0 45 bc 20 80 	mov    $0xffffffff8020bc45,%rax
ffffffff8021e4d6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e4da:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e4dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4e1:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e4e7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e4ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e4ee:	48 05 40 05 00 00    	add    $0x540,%rax
ffffffff8021e4f4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e4fb:	48 c7 c2 51 bc 20 80 	mov    $0xffffffff8020bc51,%rdx
ffffffff8021e502:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e506:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e50c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e50f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e513:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e519:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e51f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e523:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e529:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e52d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e531:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e537:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e53b:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff8021e542:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e546:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e549:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e54d:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e553:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e557:	48 c7 c0 51 bc 20 80 	mov    $0xffffffff8020bc51,%rax
ffffffff8021e55e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e562:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e565:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e569:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e56f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e572:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e576:	48 05 50 05 00 00    	add    $0x550,%rax
ffffffff8021e57c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8021e583:	48 c7 c2 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rdx
ffffffff8021e58a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e58e:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e594:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e597:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e59b:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e5a1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e5a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5ab:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e5b1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e5b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5b9:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e5bf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e5c3:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
ffffffff8021e5ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e5ce:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e5d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5d5:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e5db:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e5df:	48 c7 c0 5d bc 20 80 	mov    $0xffffffff8020bc5d,%rax
ffffffff8021e5e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e5ea:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e5ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5f1:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e5f7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e5fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e5fe:	48 05 60 05 00 00    	add    $0x560,%rax
ffffffff8021e604:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e60b:	48 c7 c2 69 bc 20 80 	mov    $0xffffffff8020bc69,%rdx
ffffffff8021e612:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e616:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e61c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e61f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e623:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e629:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e62f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e633:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e639:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e63d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e641:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e647:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e64b:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff8021e652:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e656:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e659:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e65d:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e663:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e667:	48 c7 c0 69 bc 20 80 	mov    $0xffffffff8020bc69,%rax
ffffffff8021e66e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e672:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e675:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e679:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e67f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e682:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e686:	48 05 70 05 00 00    	add    $0x570,%rax
ffffffff8021e68c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8021e693:	48 c7 c2 75 bc 20 80 	mov    $0xffffffff8020bc75,%rdx
ffffffff8021e69a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e69e:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e6a4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e6a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6ab:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e6b1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e6b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6bb:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e6c1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e6c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6c9:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e6cf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e6d3:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
ffffffff8021e6da:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e6de:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e6e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e6e5:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e6eb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e6ef:	48 c7 c0 75 bc 20 80 	mov    $0xffffffff8020bc75,%rax
ffffffff8021e6f6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e6fa:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e6fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e701:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e707:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e70a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e70e:	48 05 80 05 00 00    	add    $0x580,%rax
ffffffff8021e714:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e71b:	48 c7 c2 81 bc 20 80 	mov    $0xffffffff8020bc81,%rdx
ffffffff8021e722:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e726:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e72c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e72f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e733:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e739:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e73f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e743:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e749:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e74d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e751:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e757:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e75b:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff8021e762:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e766:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e769:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e76d:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e773:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e777:	48 c7 c0 81 bc 20 80 	mov    $0xffffffff8020bc81,%rax
ffffffff8021e77e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e782:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e785:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e789:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e78f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e792:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e796:	48 05 90 05 00 00    	add    $0x590,%rax
ffffffff8021e79c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8021e7a3:	48 c7 c2 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rdx
ffffffff8021e7aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7ae:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e7b4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e7b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7bb:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e7c1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e7c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7cb:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e7d1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e7d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7d9:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e7df:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e7e3:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
ffffffff8021e7ea:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e7ee:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e7f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e7f5:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e7fb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e7ff:	48 c7 c0 8d bc 20 80 	mov    $0xffffffff8020bc8d,%rax
ffffffff8021e806:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e80a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e80d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e811:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e817:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e81a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e81e:	48 05 a0 05 00 00    	add    $0x5a0,%rax
ffffffff8021e824:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e82b:	48 c7 c2 99 bc 20 80 	mov    $0xffffffff8020bc99,%rdx
ffffffff8021e832:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e836:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e83c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e83f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e843:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e849:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e84f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e853:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e859:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e85d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e861:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e867:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e86b:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff8021e872:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e876:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e879:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e87d:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e883:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e887:	48 c7 c0 99 bc 20 80 	mov    $0xffffffff8020bc99,%rax
ffffffff8021e88e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e892:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e895:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e899:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e89f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e8a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8a6:	48 05 b0 05 00 00    	add    $0x5b0,%rax
ffffffff8021e8ac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8021e8b3:	48 c7 c2 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rdx
ffffffff8021e8ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8be:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e8c4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e8c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8cb:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e8d1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e8d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8db:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e8e1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e8e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e8e9:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e8ef:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e8f3:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
ffffffff8021e8fa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e8fe:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e901:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e905:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e90b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e90f:	48 c7 c0 a5 bc 20 80 	mov    $0xffffffff8020bca5,%rax
ffffffff8021e916:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e91a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e91d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e921:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e927:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e92a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e92e:	48 05 c0 05 00 00    	add    $0x5c0,%rax
ffffffff8021e934:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021e93b:	48 c7 c2 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rdx
ffffffff8021e942:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e946:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e94c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e94f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e953:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e959:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e95f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e963:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e969:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e96d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e971:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e977:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021e97b:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021e982:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021e986:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e989:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e98d:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e993:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021e997:	48 c7 c0 b1 bc 20 80 	mov    $0xffffffff8020bcb1,%rax
ffffffff8021e99e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021e9a2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021e9a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9a9:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e9af:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021e9b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9b6:	48 05 d0 05 00 00    	add    $0x5d0,%rax
ffffffff8021e9bc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8021e9c3:	48 c7 c2 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rdx
ffffffff8021e9ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9ce:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e9d4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021e9d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9db:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e9e1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021e9e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9eb:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e9f1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021e9f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021e9f9:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021e9ff:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ea03:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
ffffffff8021ea0a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ea0e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea15:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021ea1b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ea1f:	48 c7 c0 bd bc 20 80 	mov    $0xffffffff8020bcbd,%rax
ffffffff8021ea26:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ea2a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea31:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021ea37:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ea3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea3e:	48 05 e0 05 00 00    	add    $0x5e0,%rax
ffffffff8021ea44:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ea4b:	48 c7 c2 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rdx
ffffffff8021ea52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea56:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021ea5c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ea5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea63:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021ea69:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ea6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea73:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021ea79:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ea7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea81:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021ea87:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ea8b:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021ea92:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ea96:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ea99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ea9d:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021eaa3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eaa7:	48 c7 c0 c9 bc 20 80 	mov    $0xffffffff8020bcc9,%rax
ffffffff8021eaae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eab2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eab5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eab9:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021eabf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eac2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eac6:	48 05 f0 05 00 00    	add    $0x5f0,%rax
ffffffff8021eacc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8021ead3:	48 c7 c2 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rdx
ffffffff8021eada:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eade:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eae4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eae7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eaeb:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eaf1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eaf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eafb:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb01:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eb05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb09:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb0f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eb13:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
ffffffff8021eb1a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eb1e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb25:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb2b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eb2f:	48 c7 c0 d5 bc 20 80 	mov    $0xffffffff8020bcd5,%rax
ffffffff8021eb36:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eb3a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eb3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb41:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb47:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021eb4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb4e:	48 05 00 06 00 00    	add    $0x600,%rax
ffffffff8021eb54:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021eb5b:	48 c7 c2 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rdx
ffffffff8021eb62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb66:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021eb6c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021eb6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb73:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021eb79:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eb7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb83:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021eb89:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eb8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eb91:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021eb97:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eb9b:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff8021eba2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eba6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eba9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebad:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ebb3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ebb7:	48 c7 c0 e1 bc 20 80 	mov    $0xffffffff8020bce1,%rax
ffffffff8021ebbe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ebc2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ebc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebc9:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ebcf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ebd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebd6:	48 05 10 06 00 00    	add    $0x610,%rax
ffffffff8021ebdc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8021ebe3:	48 c7 c2 ed bc 20 80 	mov    $0xffffffff8020bced,%rdx
ffffffff8021ebea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebee:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ebf4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ebf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ebfb:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec01:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ec07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec0b:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec11:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ec15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec19:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec1f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ec23:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
ffffffff8021ec2a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ec2e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec35:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec3b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ec3f:	48 c7 c0 ed bc 20 80 	mov    $0xffffffff8020bced,%rax
ffffffff8021ec46:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ec4a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ec4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec51:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec57:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ec5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec5e:	48 05 20 06 00 00    	add    $0x620,%rax
ffffffff8021ec64:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ec6b:	48 c7 c2 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rdx
ffffffff8021ec72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec76:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ec7c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ec7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec83:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ec89:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ec8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ec93:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ec99:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ec9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eca1:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021eca7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ecab:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021ecb2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ecb6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ecb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecbd:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ecc3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ecc7:	48 c7 c0 f9 bc 20 80 	mov    $0xffffffff8020bcf9,%rax
ffffffff8021ecce:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ecd2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ecd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecd9:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ecdf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ece2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ece6:	48 05 30 06 00 00    	add    $0x630,%rax
ffffffff8021ecec:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8021ecf3:	48 c7 c2 05 bd 20 80 	mov    $0xffffffff8020bd05,%rdx
ffffffff8021ecfa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ecfe:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed04:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ed07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed0b:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed11:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ed17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed1b:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed21:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ed25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed29:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed2f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ed33:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
ffffffff8021ed3a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ed3e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed45:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed4b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ed4f:	48 c7 c0 05 bd 20 80 	mov    $0xffffffff8020bd05,%rax
ffffffff8021ed56:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ed5a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ed5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed61:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed67:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ed6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed6e:	48 05 40 06 00 00    	add    $0x640,%rax
ffffffff8021ed74:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ed7b:	48 c7 c2 11 bd 20 80 	mov    $0xffffffff8020bd11,%rdx
ffffffff8021ed82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed86:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ed8c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ed8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ed93:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021ed99:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ed9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eda3:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021eda9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021edad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edb1:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021edb7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021edbb:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff8021edc2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021edc6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021edc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edcd:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021edd3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021edd7:	48 c7 c0 11 bd 20 80 	mov    $0xffffffff8020bd11,%rax
ffffffff8021edde:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ede2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ede5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ede9:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021edef:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021edf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021edf6:	48 05 50 06 00 00    	add    $0x650,%rax
ffffffff8021edfc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8021ee03:	48 c7 c2 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rdx
ffffffff8021ee0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee0e:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee14:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ee17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee1b:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee21:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ee27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee2b:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee31:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ee35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee39:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee3f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ee43:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
ffffffff8021ee4a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ee4e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee55:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee5b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ee5f:	48 c7 c0 1d bd 20 80 	mov    $0xffffffff8020bd1d,%rax
ffffffff8021ee66:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ee6a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ee6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee71:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee77:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ee7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee7e:	48 05 60 06 00 00    	add    $0x660,%rax
ffffffff8021ee84:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ee8b:	48 c7 c2 29 bd 20 80 	mov    $0xffffffff8020bd29,%rdx
ffffffff8021ee92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ee96:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ee9c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ee9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eea3:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021eea9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021eeaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eeb3:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021eeb9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021eebd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eec1:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021eec7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021eecb:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff8021eed2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021eed6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eed9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eedd:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021eee3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eee7:	48 c7 c0 29 bd 20 80 	mov    $0xffffffff8020bd29,%rax
ffffffff8021eeee:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021eef2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021eef5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021eef9:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021eeff:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ef02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef06:	48 05 70 06 00 00    	add    $0x670,%rax
ffffffff8021ef0c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8021ef13:	48 c7 c2 35 bd 20 80 	mov    $0xffffffff8020bd35,%rdx
ffffffff8021ef1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef1e:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ef24:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ef27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef2b:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ef31:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ef37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef3b:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ef41:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ef45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef49:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ef4f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ef53:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
ffffffff8021ef5a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ef5e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef65:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ef6b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ef6f:	48 c7 c0 35 bd 20 80 	mov    $0xffffffff8020bd35,%rax
ffffffff8021ef76:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ef7a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ef7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef81:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ef87:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ef8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ef8e:	48 05 80 06 00 00    	add    $0x680,%rax
ffffffff8021ef94:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ef9b:	48 c7 c2 41 bd 20 80 	mov    $0xffffffff8020bd41,%rdx
ffffffff8021efa2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efa6:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021efac:	66 89 10             	mov    %dx,(%rax)
ffffffff8021efaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efb3:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021efb9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021efbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efc3:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021efc9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021efcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efd1:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021efd7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021efdb:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff8021efe2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021efe6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021efe9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021efed:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021eff3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021eff7:	48 c7 c0 41 bd 20 80 	mov    $0xffffffff8020bd41,%rax
ffffffff8021effe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f002:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f005:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f009:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021f00f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f016:	48 05 90 06 00 00    	add    $0x690,%rax
ffffffff8021f01c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8021f023:	48 c7 c2 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rdx
ffffffff8021f02a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f02e:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f034:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f037:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f03b:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f041:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f047:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f04b:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f051:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f055:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f059:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f05f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f063:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
ffffffff8021f06a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f06e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f071:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f075:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f07b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f07f:	48 c7 c0 4d bd 20 80 	mov    $0xffffffff8020bd4d,%rax
ffffffff8021f086:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f08a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f08d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f091:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f097:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f09a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f09e:	48 05 a0 06 00 00    	add    $0x6a0,%rax
ffffffff8021f0a4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f0ab:	48 c7 c2 59 bd 20 80 	mov    $0xffffffff8020bd59,%rdx
ffffffff8021f0b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0b6:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f0bc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f0bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0c3:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f0c9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f0cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0d3:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f0d9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f0dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0e1:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f0e7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f0eb:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff8021f0f2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f0f6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f0f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f0fd:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f103:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f107:	48 c7 c0 59 bd 20 80 	mov    $0xffffffff8020bd59,%rax
ffffffff8021f10e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f112:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f115:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f119:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f11f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f122:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f126:	48 05 b0 06 00 00    	add    $0x6b0,%rax
ffffffff8021f12c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8021f133:	48 c7 c2 65 bd 20 80 	mov    $0xffffffff8020bd65,%rdx
ffffffff8021f13a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f13e:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f144:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f147:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f14b:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f151:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f157:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f15b:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f161:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f165:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f169:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f16f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f173:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
ffffffff8021f17a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f17e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f181:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f185:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f18b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f18f:	48 c7 c0 65 bd 20 80 	mov    $0xffffffff8020bd65,%rax
ffffffff8021f196:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f19a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f19d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1a1:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f1a7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f1aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1ae:	48 05 c0 06 00 00    	add    $0x6c0,%rax
ffffffff8021f1b4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f1bb:	48 c7 c2 71 bd 20 80 	mov    $0xffffffff8020bd71,%rdx
ffffffff8021f1c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1c6:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f1cc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f1cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1d3:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f1d9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f1df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1e3:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f1e9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f1ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f1f1:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f1f7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f1fb:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021f202:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f206:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f209:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f20d:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f213:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f217:	48 c7 c0 71 bd 20 80 	mov    $0xffffffff8020bd71,%rax
ffffffff8021f21e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f222:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f225:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f229:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f22f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f232:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f236:	48 05 d0 06 00 00    	add    $0x6d0,%rax
ffffffff8021f23c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8021f243:	48 c7 c2 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rdx
ffffffff8021f24a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f24e:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f254:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f257:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f25b:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f261:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f267:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f26b:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f271:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f275:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f279:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f27f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f283:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021f28a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f28e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f291:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f295:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f29b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f29f:	48 c7 c0 7d bd 20 80 	mov    $0xffffffff8020bd7d,%rax
ffffffff8021f2a6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f2aa:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f2ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2b1:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f2b7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f2ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2be:	48 05 e0 06 00 00    	add    $0x6e0,%rax
ffffffff8021f2c4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f2cb:	48 c7 c2 89 bd 20 80 	mov    $0xffffffff8020bd89,%rdx
ffffffff8021f2d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2d6:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f2dc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f2df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2e3:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f2e9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f2ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f2f3:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f2f9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f2fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f301:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f307:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f30b:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff8021f312:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f316:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f319:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f31d:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f323:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f327:	48 c7 c0 89 bd 20 80 	mov    $0xffffffff8020bd89,%rax
ffffffff8021f32e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f332:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f335:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f339:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f33f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f342:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f346:	48 05 f0 06 00 00    	add    $0x6f0,%rax
ffffffff8021f34c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8021f353:	48 c7 c2 95 bd 20 80 	mov    $0xffffffff8020bd95,%rdx
ffffffff8021f35a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f35e:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f364:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f367:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f36b:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f371:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f377:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f37b:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f381:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f385:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f389:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f38f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f393:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
ffffffff8021f39a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f39e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f3a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3a5:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f3ab:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f3af:	48 c7 c0 95 bd 20 80 	mov    $0xffffffff8020bd95,%rax
ffffffff8021f3b6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f3ba:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f3bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3c1:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f3c7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f3ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3ce:	48 05 00 07 00 00    	add    $0x700,%rax
ffffffff8021f3d4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f3db:	48 c7 c2 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rdx
ffffffff8021f3e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3e6:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f3ec:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f3ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f3f3:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f3f9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f3ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f403:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f409:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f40d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f411:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f417:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f41b:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff8021f422:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f426:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f429:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f42d:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f433:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f437:	48 c7 c0 a1 bd 20 80 	mov    $0xffffffff8020bda1,%rax
ffffffff8021f43e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f442:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f445:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f449:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f44f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f452:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f456:	48 05 10 07 00 00    	add    $0x710,%rax
ffffffff8021f45c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8021f463:	48 c7 c2 ad bd 20 80 	mov    $0xffffffff8020bdad,%rdx
ffffffff8021f46a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f46e:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f474:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f477:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f47b:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f481:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f487:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f48b:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f491:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f495:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f499:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f49f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f4a3:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
ffffffff8021f4aa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f4ae:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f4b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4b5:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f4bb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f4bf:	48 c7 c0 ad bd 20 80 	mov    $0xffffffff8020bdad,%rax
ffffffff8021f4c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f4ca:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f4cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4d1:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f4d7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f4da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4de:	48 05 20 07 00 00    	add    $0x720,%rax
ffffffff8021f4e4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f4eb:	48 c7 c2 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rdx
ffffffff8021f4f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f4f6:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f4fc:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f4ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f503:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f509:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f50f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f513:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f519:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f51d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f521:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f527:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f52b:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff8021f532:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f536:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f539:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f53d:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f543:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f547:	48 c7 c0 b9 bd 20 80 	mov    $0xffffffff8020bdb9,%rax
ffffffff8021f54e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f552:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f555:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f559:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f55f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f562:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f566:	48 05 30 07 00 00    	add    $0x730,%rax
ffffffff8021f56c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8021f573:	48 c7 c2 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rdx
ffffffff8021f57a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f57e:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f584:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f587:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f58b:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f591:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f597:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f59b:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f5a1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f5a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5a9:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f5af:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f5b3:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
ffffffff8021f5ba:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f5be:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f5c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5c5:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f5cb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f5cf:	48 c7 c0 c5 bd 20 80 	mov    $0xffffffff8020bdc5,%rax
ffffffff8021f5d6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f5da:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f5dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5e1:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f5e7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f5ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f5ee:	48 05 40 07 00 00    	add    $0x740,%rax
ffffffff8021f5f4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f5fb:	48 c7 c2 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rdx
ffffffff8021f602:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f606:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f60c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f60f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f613:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f619:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f61f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f623:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f629:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f62d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f631:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f637:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f63b:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff8021f642:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f646:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f649:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f64d:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f653:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f657:	48 c7 c0 d1 bd 20 80 	mov    $0xffffffff8020bdd1,%rax
ffffffff8021f65e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f662:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f665:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f669:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f66f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f672:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f676:	48 05 50 07 00 00    	add    $0x750,%rax
ffffffff8021f67c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8021f683:	48 c7 c2 dd bd 20 80 	mov    $0xffffffff8020bddd,%rdx
ffffffff8021f68a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f68e:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f694:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f697:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f69b:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f6a1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f6a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6ab:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f6b1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f6b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6b9:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f6bf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f6c3:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
ffffffff8021f6ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f6ce:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f6d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6d5:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f6db:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f6df:	48 c7 c0 dd bd 20 80 	mov    $0xffffffff8020bddd,%rax
ffffffff8021f6e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f6ea:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f6ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6f1:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f6f7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f6fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f6fe:	48 05 60 07 00 00    	add    $0x760,%rax
ffffffff8021f704:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f70b:	48 c7 c2 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rdx
ffffffff8021f712:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f716:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f71c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f71f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f723:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f729:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f72f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f733:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f739:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f73d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f741:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f747:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f74b:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff8021f752:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f756:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f759:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f75d:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f763:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f767:	48 c7 c0 e9 bd 20 80 	mov    $0xffffffff8020bde9,%rax
ffffffff8021f76e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f772:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f775:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f779:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f77f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f782:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f786:	48 05 70 07 00 00    	add    $0x770,%rax
ffffffff8021f78c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8021f793:	48 c7 c2 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rdx
ffffffff8021f79a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f79e:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f7a4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f7a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7ab:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f7b1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f7b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7bb:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f7c1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f7c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7c9:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f7cf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f7d3:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
ffffffff8021f7da:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f7de:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f7e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f7e5:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f7eb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f7ef:	48 c7 c0 f5 bd 20 80 	mov    $0xffffffff8020bdf5,%rax
ffffffff8021f7f6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f7fa:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f7fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f801:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f807:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f80a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f80e:	48 05 80 07 00 00    	add    $0x780,%rax
ffffffff8021f814:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f81b:	48 c7 c2 01 be 20 80 	mov    $0xffffffff8020be01,%rdx
ffffffff8021f822:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f826:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f82c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f82f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f833:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f839:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f83f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f843:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f849:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f84d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f851:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f857:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f85b:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff8021f862:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f866:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f869:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f86d:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f873:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f877:	48 c7 c0 01 be 20 80 	mov    $0xffffffff8020be01,%rax
ffffffff8021f87e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f882:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f885:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f889:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f88f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f892:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f896:	48 05 90 07 00 00    	add    $0x790,%rax
ffffffff8021f89c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8021f8a3:	48 c7 c2 0d be 20 80 	mov    $0xffffffff8020be0d,%rdx
ffffffff8021f8aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8ae:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f8b4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f8b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8bb:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f8c1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f8c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8cb:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f8d1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f8d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8d9:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f8df:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f8e3:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
ffffffff8021f8ea:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f8ee:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f8f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f8f5:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f8fb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f8ff:	48 c7 c0 0d be 20 80 	mov    $0xffffffff8020be0d,%rax
ffffffff8021f906:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f90a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f90d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f911:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f917:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f91a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f91e:	48 05 a0 07 00 00    	add    $0x7a0,%rax
ffffffff8021f924:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021f92b:	48 c7 c2 19 be 20 80 	mov    $0xffffffff8020be19,%rdx
ffffffff8021f932:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f936:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f93c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f93f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f943:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f949:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f94f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f953:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f959:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f95d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f961:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f967:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f96b:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff8021f972:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f976:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f979:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f97d:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f983:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021f987:	48 c7 c0 19 be 20 80 	mov    $0xffffffff8020be19,%rax
ffffffff8021f98e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021f992:	48 89 c2             	mov    %rax,%rdx
ffffffff8021f995:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f999:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f99f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021f9a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9a6:	48 05 b0 07 00 00    	add    $0x7b0,%rax
ffffffff8021f9ac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8021f9b3:	48 c7 c2 25 be 20 80 	mov    $0xffffffff8020be25,%rdx
ffffffff8021f9ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9be:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f9c4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021f9c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9cb:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f9d1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021f9d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9db:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f9e1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021f9e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021f9e9:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021f9ef:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021f9f3:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
ffffffff8021f9fa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021f9fe:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa05:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021fa0b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fa0f:	48 c7 c0 25 be 20 80 	mov    $0xffffffff8020be25,%rax
ffffffff8021fa16:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fa1a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa21:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021fa27:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fa2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa2e:	48 05 c0 07 00 00    	add    $0x7c0,%rax
ffffffff8021fa34:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fa3b:	48 c7 c2 31 be 20 80 	mov    $0xffffffff8020be31,%rdx
ffffffff8021fa42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa46:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fa4c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fa4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa53:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fa59:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fa5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa63:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fa69:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fa6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa71:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fa77:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fa7b:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021fa82:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fa86:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fa89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fa8d:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fa93:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fa97:	48 c7 c0 31 be 20 80 	mov    $0xffffffff8020be31,%rax
ffffffff8021fa9e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021faa2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021faa5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faa9:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021faaf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fab2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fab6:	48 05 d0 07 00 00    	add    $0x7d0,%rax
ffffffff8021fabc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8021fac3:	48 c7 c2 3d be 20 80 	mov    $0xffffffff8020be3d,%rdx
ffffffff8021faca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021face:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fad4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fad7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fadb:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fae1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fae7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faeb:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021faf1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021faf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021faf9:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021faff:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fb03:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
ffffffff8021fb0a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fb0e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb15:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fb1b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fb1f:	48 c7 c0 3d be 20 80 	mov    $0xffffffff8020be3d,%rax
ffffffff8021fb26:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fb2a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb31:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fb37:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fb3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb3e:	48 05 e0 07 00 00    	add    $0x7e0,%rax
ffffffff8021fb44:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fb4b:	48 c7 c2 49 be 20 80 	mov    $0xffffffff8020be49,%rdx
ffffffff8021fb52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb56:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fb5c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fb5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb63:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fb69:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fb6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb73:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fb79:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fb7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb81:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fb87:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fb8b:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff8021fb92:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fb96:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fb99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fb9d:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fba3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fba7:	48 c7 c0 49 be 20 80 	mov    $0xffffffff8020be49,%rax
ffffffff8021fbae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fbb2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fbb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbb9:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fbbf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fbc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbc6:	48 05 f0 07 00 00    	add    $0x7f0,%rax
ffffffff8021fbcc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8021fbd3:	48 c7 c2 55 be 20 80 	mov    $0xffffffff8020be55,%rdx
ffffffff8021fbda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbde:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fbe4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fbe7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbeb:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fbf1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fbf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fbfb:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc01:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fc05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc09:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc0f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fc13:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
ffffffff8021fc1a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fc1e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc25:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc2b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fc2f:	48 c7 c0 55 be 20 80 	mov    $0xffffffff8020be55,%rax
ffffffff8021fc36:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fc3a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fc3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc41:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc47:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fc4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc4e:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021fc54:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fc5b:	48 c7 c2 64 be 20 80 	mov    $0xffffffff8020be64,%rdx
ffffffff8021fc62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc66:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fc6c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fc6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc73:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fc79:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fc7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc83:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fc89:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fc8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fc91:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fc97:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fc9b:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff8021fca2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fca6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fca9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcad:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fcb3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fcb7:	48 c7 c0 64 be 20 80 	mov    $0xffffffff8020be64,%rax
ffffffff8021fcbe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fcc2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fcc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcc9:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fccf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fcd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcd6:	48 05 10 08 00 00    	add    $0x810,%rax
ffffffff8021fcdc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8021fce3:	48 c7 c2 73 be 20 80 	mov    $0xffffffff8020be73,%rdx
ffffffff8021fcea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcee:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fcf4:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fcf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fcfb:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd01:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fd07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd0b:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd11:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fd15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd19:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd1f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fd23:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff8021fd2a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fd2e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd35:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd3b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fd3f:	48 c7 c0 73 be 20 80 	mov    $0xffffffff8020be73,%rax
ffffffff8021fd46:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fd4a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fd4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd51:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd57:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fd5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd5e:	48 05 20 08 00 00    	add    $0x820,%rax
ffffffff8021fd64:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fd6b:	48 c7 c2 82 be 20 80 	mov    $0xffffffff8020be82,%rdx
ffffffff8021fd72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd76:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fd7c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fd7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd83:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fd89:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fd8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fd93:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fd99:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fd9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fda1:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fda7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fdab:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff8021fdb2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fdb6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fdb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdbd:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fdc3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fdc7:	48 c7 c0 82 be 20 80 	mov    $0xffffffff8020be82,%rax
ffffffff8021fdce:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fdd2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fdd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdd9:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fddf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fde2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fde6:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8021fdec:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8021fdf3:	48 c7 c2 91 be 20 80 	mov    $0xffffffff8020be91,%rdx
ffffffff8021fdfa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fdfe:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe04:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fe07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe0b:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe11:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fe17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe1b:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe21:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fe25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe29:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe2f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021fe33:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
ffffffff8021fe3a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fe3e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe45:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe4b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fe4f:	48 c7 c0 91 be 20 80 	mov    $0xffffffff8020be91,%rax
ffffffff8021fe56:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fe5a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fe5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe61:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe67:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fe6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe6e:	48 05 40 08 00 00    	add    $0x840,%rax
ffffffff8021fe74:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021fe7b:	48 c7 c2 a0 be 20 80 	mov    $0xffffffff8020bea0,%rdx
ffffffff8021fe82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe86:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fe8c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021fe8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fe93:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fe99:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021fe9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fea3:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fea9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021fead:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021feb1:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021feb7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021febb:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021fec2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021fec6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fec9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fecd:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fed3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021fed7:	48 c7 c0 a0 be 20 80 	mov    $0xffffffff8020bea0,%rax
ffffffff8021fede:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fee2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fee5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fee9:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021feef:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021fef2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fef6:	48 05 50 08 00 00    	add    $0x850,%rax
ffffffff8021fefc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8021ff03:	48 c7 c2 af be 20 80 	mov    $0xffffffff8020beaf,%rdx
ffffffff8021ff0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff0e:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff14:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ff17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff1b:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff21:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ff27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff2b:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff31:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ff35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff39:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff3f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ff43:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
ffffffff8021ff4a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ff4e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff55:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff5b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ff5f:	48 c7 c0 af be 20 80 	mov    $0xffffffff8020beaf,%rax
ffffffff8021ff66:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021ff6a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ff6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff71:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff77:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8021ff7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff7e:	48 05 60 08 00 00    	add    $0x860,%rax
ffffffff8021ff84:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8021ff8b:	48 c7 c2 be be 20 80 	mov    $0xffffffff8020bebe,%rdx
ffffffff8021ff92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ff96:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021ff9c:	66 89 10             	mov    %dx,(%rax)
ffffffff8021ff9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffa3:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021ffa9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8021ffaf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffb3:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021ffb9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8021ffbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffc1:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021ffc7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8021ffcb:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff8021ffd2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8021ffd6:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ffd9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021ffdd:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021ffe3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8021ffe7:	48 c7 c0 be be 20 80 	mov    $0xffffffff8020bebe,%rax
ffffffff8021ffee:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021fff2:	48 89 c2             	mov    %rax,%rdx
ffffffff8021fff5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8021fff9:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8021ffff:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220002:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220006:	48 05 70 08 00 00    	add    $0x870,%rax
ffffffff8022000c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff80220013:	48 c7 c2 cd be 20 80 	mov    $0xffffffff8020becd,%rdx
ffffffff8022001a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022001e:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff80220024:	66 89 10             	mov    %dx,(%rax)
ffffffff80220027:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022002b:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff80220031:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220037:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022003b:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff80220041:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220045:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220049:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8022004f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220053:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
ffffffff8022005a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022005e:	48 89 c2             	mov    %rax,%rdx
ffffffff80220061:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220065:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff8022006b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022006f:	48 c7 c0 cd be 20 80 	mov    $0xffffffff8020becd,%rax
ffffffff80220076:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022007a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022007d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220081:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff80220087:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022008a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022008e:	48 05 80 08 00 00    	add    $0x880,%rax
ffffffff80220094:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022009b:	48 c7 c2 dc be 20 80 	mov    $0xffffffff8020bedc,%rdx
ffffffff802200a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200a6:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff802200ac:	66 89 10             	mov    %dx,(%rax)
ffffffff802200af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200b3:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff802200b9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802200bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200c3:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff802200c9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802200cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200d1:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff802200d7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802200db:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff802200e2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802200e6:	48 89 c2             	mov    %rax,%rdx
ffffffff802200e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802200ed:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff802200f3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802200f7:	48 c7 c0 dc be 20 80 	mov    $0xffffffff8020bedc,%rax
ffffffff802200fe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220102:	48 89 c2             	mov    %rax,%rdx
ffffffff80220105:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220109:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8022010f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220112:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220116:	48 05 90 08 00 00    	add    $0x890,%rax
ffffffff8022011c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff80220123:	48 c7 c2 eb be 20 80 	mov    $0xffffffff8020beeb,%rdx
ffffffff8022012a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022012e:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220134:	66 89 10             	mov    %dx,(%rax)
ffffffff80220137:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022013b:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220141:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220147:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022014b:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220151:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220155:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220159:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8022015f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220163:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
ffffffff8022016a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022016e:	48 89 c2             	mov    %rax,%rdx
ffffffff80220171:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220175:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff8022017b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022017f:	48 c7 c0 eb be 20 80 	mov    $0xffffffff8020beeb,%rax
ffffffff80220186:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022018a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022018d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220191:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff80220197:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022019a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022019e:	48 05 a0 08 00 00    	add    $0x8a0,%rax
ffffffff802201a4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802201ab:	48 c7 c2 fa be 20 80 	mov    $0xffffffff8020befa,%rdx
ffffffff802201b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201b6:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802201bc:	66 89 10             	mov    %dx,(%rax)
ffffffff802201bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201c3:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802201c9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802201cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201d3:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802201d9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802201dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201e1:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff802201e7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802201eb:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff802201f2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802201f6:	48 89 c2             	mov    %rax,%rdx
ffffffff802201f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802201fd:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff80220203:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220207:	48 c7 c0 fa be 20 80 	mov    $0xffffffff8020befa,%rax
ffffffff8022020e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220212:	48 89 c2             	mov    %rax,%rdx
ffffffff80220215:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220219:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8022021f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220222:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220226:	48 05 b0 08 00 00    	add    $0x8b0,%rax
ffffffff8022022c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff80220233:	48 c7 c2 09 bf 20 80 	mov    $0xffffffff8020bf09,%rdx
ffffffff8022023a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022023e:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220244:	66 89 10             	mov    %dx,(%rax)
ffffffff80220247:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022024b:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220251:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220257:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022025b:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff80220261:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220265:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220269:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8022026f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220273:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
ffffffff8022027a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022027e:	48 89 c2             	mov    %rax,%rdx
ffffffff80220281:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220285:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff8022028b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022028f:	48 c7 c0 09 bf 20 80 	mov    $0xffffffff8020bf09,%rax
ffffffff80220296:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022029a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022029d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202a1:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802202a7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802202aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202ae:	48 05 c0 08 00 00    	add    $0x8c0,%rax
ffffffff802202b4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802202bb:	48 c7 c2 18 bf 20 80 	mov    $0xffffffff8020bf18,%rdx
ffffffff802202c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202c6:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802202cc:	66 89 10             	mov    %dx,(%rax)
ffffffff802202cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202d3:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802202d9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802202df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202e3:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802202e9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802202ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802202f1:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff802202f7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802202fb:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff80220302:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220306:	48 89 c2             	mov    %rax,%rdx
ffffffff80220309:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022030d:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff80220313:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220317:	48 c7 c0 18 bf 20 80 	mov    $0xffffffff8020bf18,%rax
ffffffff8022031e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220322:	48 89 c2             	mov    %rax,%rdx
ffffffff80220325:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220329:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff8022032f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220332:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220336:	48 05 d0 08 00 00    	add    $0x8d0,%rax
ffffffff8022033c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff80220343:	48 c7 c2 27 bf 20 80 	mov    $0xffffffff8020bf27,%rdx
ffffffff8022034a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022034e:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220354:	66 89 10             	mov    %dx,(%rax)
ffffffff80220357:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022035b:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220361:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220367:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022036b:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff80220371:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220375:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220379:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022037f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220383:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
ffffffff8022038a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022038e:	48 89 c2             	mov    %rax,%rdx
ffffffff80220391:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220395:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff8022039b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022039f:	48 c7 c0 27 bf 20 80 	mov    $0xffffffff8020bf27,%rax
ffffffff802203a6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802203aa:	48 89 c2             	mov    %rax,%rdx
ffffffff802203ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203b1:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802203b7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802203ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203be:	48 05 e0 08 00 00    	add    $0x8e0,%rax
ffffffff802203c4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802203cb:	48 c7 c2 36 bf 20 80 	mov    $0xffffffff8020bf36,%rdx
ffffffff802203d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203d6:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802203dc:	66 89 10             	mov    %dx,(%rax)
ffffffff802203df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203e3:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802203e9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802203ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802203f3:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff802203f9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802203fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220401:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220407:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022040b:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff80220412:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220416:	48 89 c2             	mov    %rax,%rdx
ffffffff80220419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022041d:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff80220423:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220427:	48 c7 c0 36 bf 20 80 	mov    $0xffffffff8020bf36,%rax
ffffffff8022042e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220432:	48 89 c2             	mov    %rax,%rdx
ffffffff80220435:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220439:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff8022043f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220442:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220446:	48 05 f0 08 00 00    	add    $0x8f0,%rax
ffffffff8022044c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff80220453:	48 c7 c2 45 bf 20 80 	mov    $0xffffffff8020bf45,%rdx
ffffffff8022045a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022045e:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220464:	66 89 10             	mov    %dx,(%rax)
ffffffff80220467:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022046b:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220471:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220477:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022047b:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff80220481:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220485:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220489:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff8022048f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220493:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
ffffffff8022049a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022049e:	48 89 c2             	mov    %rax,%rdx
ffffffff802204a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204a5:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802204ab:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802204af:	48 c7 c0 45 bf 20 80 	mov    $0xffffffff8020bf45,%rax
ffffffff802204b6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802204ba:	48 89 c2             	mov    %rax,%rdx
ffffffff802204bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204c1:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802204c7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802204ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204ce:	48 05 00 09 00 00    	add    $0x900,%rax
ffffffff802204d4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802204db:	48 c7 c2 54 bf 20 80 	mov    $0xffffffff8020bf54,%rdx
ffffffff802204e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204e6:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802204ec:	66 89 10             	mov    %dx,(%rax)
ffffffff802204ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802204f3:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff802204f9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802204ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220503:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220509:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022050d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220511:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220517:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022051b:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff80220522:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220526:	48 89 c2             	mov    %rax,%rdx
ffffffff80220529:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022052d:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff80220533:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220537:	48 c7 c0 54 bf 20 80 	mov    $0xffffffff8020bf54,%rax
ffffffff8022053e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220542:	48 89 c2             	mov    %rax,%rdx
ffffffff80220545:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220549:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff8022054f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220552:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220556:	48 05 10 09 00 00    	add    $0x910,%rax
ffffffff8022055c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff80220563:	48 c7 c2 63 bf 20 80 	mov    $0xffffffff8020bf63,%rdx
ffffffff8022056a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022056e:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220574:	66 89 10             	mov    %dx,(%rax)
ffffffff80220577:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022057b:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220581:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220587:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022058b:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff80220591:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220595:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220599:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff8022059f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802205a3:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
ffffffff802205aa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802205ae:	48 89 c2             	mov    %rax,%rdx
ffffffff802205b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205b5:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802205bb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802205bf:	48 c7 c0 63 bf 20 80 	mov    $0xffffffff8020bf63,%rax
ffffffff802205c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802205ca:	48 89 c2             	mov    %rax,%rdx
ffffffff802205cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205d1:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802205d7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802205da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205de:	48 05 20 09 00 00    	add    $0x920,%rax
ffffffff802205e4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802205eb:	48 c7 c2 72 bf 20 80 	mov    $0xffffffff8020bf72,%rdx
ffffffff802205f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802205f6:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff802205fc:	66 89 10             	mov    %dx,(%rax)
ffffffff802205ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220603:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220609:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022060f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220613:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220619:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022061d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220621:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220627:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022062b:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff80220632:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220636:	48 89 c2             	mov    %rax,%rdx
ffffffff80220639:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022063d:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff80220643:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220647:	48 c7 c0 72 bf 20 80 	mov    $0xffffffff8020bf72,%rax
ffffffff8022064e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220652:	48 89 c2             	mov    %rax,%rdx
ffffffff80220655:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220659:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff8022065f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220662:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220666:	48 05 30 09 00 00    	add    $0x930,%rax
ffffffff8022066c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff80220673:	48 c7 c2 81 bf 20 80 	mov    $0xffffffff8020bf81,%rdx
ffffffff8022067a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022067e:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220684:	66 89 10             	mov    %dx,(%rax)
ffffffff80220687:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022068b:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff80220691:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220697:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022069b:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802206a1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802206a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206a9:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802206af:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802206b3:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
ffffffff802206ba:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802206be:	48 89 c2             	mov    %rax,%rdx
ffffffff802206c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206c5:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802206cb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802206cf:	48 c7 c0 81 bf 20 80 	mov    $0xffffffff8020bf81,%rax
ffffffff802206d6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802206da:	48 89 c2             	mov    %rax,%rdx
ffffffff802206dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206e1:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802206e7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802206ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802206ee:	48 05 40 09 00 00    	add    $0x940,%rax
ffffffff802206f4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802206fb:	48 c7 c2 90 bf 20 80 	mov    $0xffffffff8020bf90,%rdx
ffffffff80220702:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220706:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff8022070c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022070f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220713:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220719:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022071f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220723:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220729:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022072d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220731:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220737:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022073b:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff80220742:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220746:	48 89 c2             	mov    %rax,%rdx
ffffffff80220749:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022074d:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff80220753:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220757:	48 c7 c0 90 bf 20 80 	mov    $0xffffffff8020bf90,%rax
ffffffff8022075e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220762:	48 89 c2             	mov    %rax,%rdx
ffffffff80220765:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220769:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff8022076f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220772:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220776:	48 05 50 09 00 00    	add    $0x950,%rax
ffffffff8022077c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff80220783:	48 c7 c2 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rdx
ffffffff8022078a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022078e:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220794:	66 89 10             	mov    %dx,(%rax)
ffffffff80220797:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022079b:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802207a1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802207a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207ab:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802207b1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802207b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207b9:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802207bf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802207c3:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
ffffffff802207ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802207ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802207d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207d5:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802207db:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802207df:	48 c7 c0 9f bf 20 80 	mov    $0xffffffff8020bf9f,%rax
ffffffff802207e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802207ea:	48 89 c2             	mov    %rax,%rdx
ffffffff802207ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207f1:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff802207f7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802207fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802207fe:	48 05 60 09 00 00    	add    $0x960,%rax
ffffffff80220804:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022080b:	48 c7 c2 ae bf 20 80 	mov    $0xffffffff8020bfae,%rdx
ffffffff80220812:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220816:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022081c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022081f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220823:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220829:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022082f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220833:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220839:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022083d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220841:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220847:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022084b:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff80220852:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220856:	48 89 c2             	mov    %rax,%rdx
ffffffff80220859:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022085d:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff80220863:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220867:	48 c7 c0 ae bf 20 80 	mov    $0xffffffff8020bfae,%rax
ffffffff8022086e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220872:	48 89 c2             	mov    %rax,%rdx
ffffffff80220875:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220879:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022087f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220882:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220886:	48 05 70 09 00 00    	add    $0x970,%rax
ffffffff8022088c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff80220893:	48 c7 c2 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rdx
ffffffff8022089a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022089e:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802208a4:	66 89 10             	mov    %dx,(%rax)
ffffffff802208a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208ab:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802208b1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802208b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208bb:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802208c1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802208c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208c9:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802208cf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802208d3:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
ffffffff802208da:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802208de:	48 89 c2             	mov    %rax,%rdx
ffffffff802208e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802208e5:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff802208eb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802208ef:	48 c7 c0 bd bf 20 80 	mov    $0xffffffff8020bfbd,%rax
ffffffff802208f6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802208fa:	48 89 c2             	mov    %rax,%rdx
ffffffff802208fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220901:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220907:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022090a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022090e:	48 05 80 09 00 00    	add    $0x980,%rax
ffffffff80220914:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022091b:	48 c7 c2 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rdx
ffffffff80220922:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220926:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff8022092c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022092f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220933:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220939:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022093f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220943:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220949:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022094d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220951:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220957:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022095b:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff80220962:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220966:	48 89 c2             	mov    %rax,%rdx
ffffffff80220969:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022096d:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff80220973:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220977:	48 c7 c0 cc bf 20 80 	mov    $0xffffffff8020bfcc,%rax
ffffffff8022097e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220982:	48 89 c2             	mov    %rax,%rdx
ffffffff80220985:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220989:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff8022098f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220992:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220996:	48 05 90 09 00 00    	add    $0x990,%rax
ffffffff8022099c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff802209a3:	48 c7 c2 db bf 20 80 	mov    $0xffffffff8020bfdb,%rdx
ffffffff802209aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209ae:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802209b4:	66 89 10             	mov    %dx,(%rax)
ffffffff802209b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209bb:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802209c1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802209c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209cb:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802209d1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802209d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209d9:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802209df:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802209e3:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
ffffffff802209ea:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802209ee:	48 89 c2             	mov    %rax,%rdx
ffffffff802209f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802209f5:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff802209fb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802209ff:	48 c7 c0 db bf 20 80 	mov    $0xffffffff8020bfdb,%rax
ffffffff80220a06:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220a0a:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a11:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220a17:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220a1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a1e:	48 05 a0 09 00 00    	add    $0x9a0,%rax
ffffffff80220a24:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220a2b:	48 c7 c2 ea bf 20 80 	mov    $0xffffffff8020bfea,%rdx
ffffffff80220a32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a36:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220a3c:	66 89 10             	mov    %dx,(%rax)
ffffffff80220a3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a43:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220a49:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220a4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a53:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220a59:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220a5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a61:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220a67:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220a6b:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff80220a72:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220a76:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a7d:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220a83:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220a87:	48 c7 c0 ea bf 20 80 	mov    $0xffffffff8020bfea,%rax
ffffffff80220a8e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220a92:	48 89 c2             	mov    %rax,%rdx
ffffffff80220a95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220a99:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220a9f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220aa2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220aa6:	48 05 b0 09 00 00    	add    $0x9b0,%rax
ffffffff80220aac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff80220ab3:	48 c7 c2 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rdx
ffffffff80220aba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220abe:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220ac4:	66 89 10             	mov    %dx,(%rax)
ffffffff80220ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220acb:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220ad1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220ad7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220adb:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220ae1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220ae5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ae9:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220aef:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220af3:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
ffffffff80220afa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220afe:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b05:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220b0b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220b0f:	48 c7 c0 f9 bf 20 80 	mov    $0xffffffff8020bff9,%rax
ffffffff80220b16:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220b1a:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b21:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220b27:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220b2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b2e:	48 05 c0 09 00 00    	add    $0x9c0,%rax
ffffffff80220b34:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220b3b:	48 c7 c2 08 c0 20 80 	mov    $0xffffffff8020c008,%rdx
ffffffff80220b42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b46:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220b4c:	66 89 10             	mov    %dx,(%rax)
ffffffff80220b4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b53:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220b59:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220b5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b63:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220b69:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220b6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b71:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220b77:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220b7b:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff80220b82:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220b86:	48 89 c2             	mov    %rax,%rdx
ffffffff80220b89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220b8d:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220b93:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220b97:	48 c7 c0 08 c0 20 80 	mov    $0xffffffff8020c008,%rax
ffffffff80220b9e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220ba2:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ba5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ba9:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220baf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220bb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bb6:	48 05 d0 09 00 00    	add    $0x9d0,%rax
ffffffff80220bbc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff80220bc3:	48 c7 c2 17 c0 20 80 	mov    $0xffffffff8020c017,%rdx
ffffffff80220bca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bce:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220bd4:	66 89 10             	mov    %dx,(%rax)
ffffffff80220bd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bdb:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220be1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220be7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220beb:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220bf1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220bf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220bf9:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220bff:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220c03:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
ffffffff80220c0a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220c0e:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c15:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220c1b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220c1f:	48 c7 c0 17 c0 20 80 	mov    $0xffffffff8020c017,%rax
ffffffff80220c26:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220c2a:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c31:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220c37:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220c3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c3e:	48 05 e0 09 00 00    	add    $0x9e0,%rax
ffffffff80220c44:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220c4b:	48 c7 c2 26 c0 20 80 	mov    $0xffffffff8020c026,%rdx
ffffffff80220c52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c56:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220c5c:	66 89 10             	mov    %dx,(%rax)
ffffffff80220c5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c63:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220c69:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220c6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c73:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220c79:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220c7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c81:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220c87:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220c8b:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80220c92:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220c96:	48 89 c2             	mov    %rax,%rdx
ffffffff80220c99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220c9d:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220ca3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220ca7:	48 c7 c0 26 c0 20 80 	mov    $0xffffffff8020c026,%rax
ffffffff80220cae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220cb2:	48 89 c2             	mov    %rax,%rdx
ffffffff80220cb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cb9:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220cbf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220cc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cc6:	48 05 f0 09 00 00    	add    $0x9f0,%rax
ffffffff80220ccc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff80220cd3:	48 c7 c2 35 c0 20 80 	mov    $0xffffffff8020c035,%rdx
ffffffff80220cda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cde:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220ce4:	66 89 10             	mov    %dx,(%rax)
ffffffff80220ce7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ceb:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220cf1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220cf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220cfb:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d01:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220d05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d09:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d0f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220d13:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
ffffffff80220d1a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220d1e:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d25:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d2b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220d2f:	48 c7 c0 35 c0 20 80 	mov    $0xffffffff8020c035,%rax
ffffffff80220d36:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220d3a:	48 89 c2             	mov    %rax,%rdx
ffffffff80220d3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d41:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d47:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220d4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d4e:	48 05 00 0a 00 00    	add    $0xa00,%rax
ffffffff80220d54:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220d5b:	48 c7 c2 44 c0 20 80 	mov    $0xffffffff8020c044,%rdx
ffffffff80220d62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d66:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220d6c:	66 89 10             	mov    %dx,(%rax)
ffffffff80220d6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d73:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220d79:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220d7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d83:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220d89:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220d8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220d91:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220d97:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220d9b:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80220da2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220da6:	48 89 c2             	mov    %rax,%rdx
ffffffff80220da9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dad:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220db3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220db7:	48 c7 c0 44 c0 20 80 	mov    $0xffffffff8020c044,%rax
ffffffff80220dbe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220dc2:	48 89 c2             	mov    %rax,%rdx
ffffffff80220dc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dc9:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220dcf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220dd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dd6:	48 05 10 0a 00 00    	add    $0xa10,%rax
ffffffff80220ddc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff80220de3:	48 c7 c2 53 c0 20 80 	mov    $0xffffffff8020c053,%rdx
ffffffff80220dea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dee:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220df4:	66 89 10             	mov    %dx,(%rax)
ffffffff80220df7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220dfb:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e01:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220e07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e0b:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e11:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220e15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e19:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e1f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220e23:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
ffffffff80220e2a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220e2e:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e35:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e3b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220e3f:	48 c7 c0 53 c0 20 80 	mov    $0xffffffff8020c053,%rax
ffffffff80220e46:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220e4a:	48 89 c2             	mov    %rax,%rdx
ffffffff80220e4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e51:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e57:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220e5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e5e:	48 05 20 0a 00 00    	add    $0xa20,%rax
ffffffff80220e64:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220e6b:	48 c7 c2 62 c0 20 80 	mov    $0xffffffff8020c062,%rdx
ffffffff80220e72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e76:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220e7c:	66 89 10             	mov    %dx,(%rax)
ffffffff80220e7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e83:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220e89:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220e8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220e93:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220e99:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220e9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ea1:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220ea7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220eab:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff80220eb2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220eb6:	48 89 c2             	mov    %rax,%rdx
ffffffff80220eb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ebd:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220ec3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220ec7:	48 c7 c0 62 c0 20 80 	mov    $0xffffffff8020c062,%rax
ffffffff80220ece:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220ed2:	48 89 c2             	mov    %rax,%rdx
ffffffff80220ed5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ed9:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220edf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220ee2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ee6:	48 05 30 0a 00 00    	add    $0xa30,%rax
ffffffff80220eec:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff80220ef3:	48 c7 c2 71 c0 20 80 	mov    $0xffffffff8020c071,%rdx
ffffffff80220efa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220efe:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f04:	66 89 10             	mov    %dx,(%rax)
ffffffff80220f07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f0b:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f11:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220f17:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f1b:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f21:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220f25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f29:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f2f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220f33:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
ffffffff80220f3a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220f3e:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f45:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f4b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220f4f:	48 c7 c0 71 c0 20 80 	mov    $0xffffffff8020c071,%rax
ffffffff80220f56:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220f5a:	48 89 c2             	mov    %rax,%rdx
ffffffff80220f5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f61:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f67:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220f6a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f6e:	48 05 40 0a 00 00    	add    $0xa40,%rax
ffffffff80220f74:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80220f7b:	48 c7 c2 80 c0 20 80 	mov    $0xffffffff8020c080,%rdx
ffffffff80220f82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f86:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220f8c:	66 89 10             	mov    %dx,(%rax)
ffffffff80220f8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220f93:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220f99:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80220f9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fa3:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220fa9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80220fad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fb1:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220fb7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80220fbb:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80220fc2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80220fc6:	48 89 c2             	mov    %rax,%rdx
ffffffff80220fc9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fcd:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220fd3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80220fd7:	48 c7 c0 80 c0 20 80 	mov    $0xffffffff8020c080,%rax
ffffffff80220fde:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80220fe2:	48 89 c2             	mov    %rax,%rdx
ffffffff80220fe5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220fe9:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220fef:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80220ff2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80220ff6:	48 05 50 0a 00 00    	add    $0xa50,%rax
ffffffff80220ffc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff80221003:	48 c7 c2 8f c0 20 80 	mov    $0xffffffff8020c08f,%rdx
ffffffff8022100a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022100e:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80221014:	66 89 10             	mov    %dx,(%rax)
ffffffff80221017:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022101b:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80221021:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221027:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022102b:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80221031:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221035:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221039:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff8022103f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221043:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
ffffffff8022104a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022104e:	48 89 c2             	mov    %rax,%rdx
ffffffff80221051:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221055:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff8022105b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022105f:	48 c7 c0 8f c0 20 80 	mov    $0xffffffff8020c08f,%rax
ffffffff80221066:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022106a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022106d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221071:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80221077:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022107a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022107e:	48 05 60 0a 00 00    	add    $0xa60,%rax
ffffffff80221084:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022108b:	48 c7 c2 9e c0 20 80 	mov    $0xffffffff8020c09e,%rdx
ffffffff80221092:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221096:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff8022109c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022109f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210a3:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff802210a9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802210af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210b3:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff802210b9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802210bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210c1:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff802210c7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802210cb:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff802210d2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802210d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802210d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210dd:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff802210e3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802210e7:	48 c7 c0 9e c0 20 80 	mov    $0xffffffff8020c09e,%rax
ffffffff802210ee:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802210f2:	48 89 c2             	mov    %rax,%rdx
ffffffff802210f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802210f9:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff802210ff:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221102:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221106:	48 05 70 0a 00 00    	add    $0xa70,%rax
ffffffff8022110c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff80221113:	48 c7 c2 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rdx
ffffffff8022111a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022111e:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221124:	66 89 10             	mov    %dx,(%rax)
ffffffff80221127:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022112b:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221131:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221137:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022113b:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221141:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221145:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221149:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff8022114f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221153:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
ffffffff8022115a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022115e:	48 89 c2             	mov    %rax,%rdx
ffffffff80221161:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221165:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff8022116b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022116f:	48 c7 c0 ad c0 20 80 	mov    $0xffffffff8020c0ad,%rax
ffffffff80221176:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022117a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022117d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221181:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221187:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022118a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022118e:	48 05 80 0a 00 00    	add    $0xa80,%rax
ffffffff80221194:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022119b:	48 c7 c2 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rdx
ffffffff802211a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211a6:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802211ac:	66 89 10             	mov    %dx,(%rax)
ffffffff802211af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211b3:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802211b9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802211bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211c3:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802211c9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802211cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211d1:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802211d7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802211db:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff802211e2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802211e6:	48 89 c2             	mov    %rax,%rdx
ffffffff802211e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802211ed:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff802211f3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802211f7:	48 c7 c0 bc c0 20 80 	mov    $0xffffffff8020c0bc,%rax
ffffffff802211fe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221202:	48 89 c2             	mov    %rax,%rdx
ffffffff80221205:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221209:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff8022120f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221212:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221216:	48 05 90 0a 00 00    	add    $0xa90,%rax
ffffffff8022121c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff80221223:	48 c7 c2 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rdx
ffffffff8022122a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022122e:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221234:	66 89 10             	mov    %dx,(%rax)
ffffffff80221237:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022123b:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221241:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221247:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022124b:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221251:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221255:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221259:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff8022125f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221263:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
ffffffff8022126a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022126e:	48 89 c2             	mov    %rax,%rdx
ffffffff80221271:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221275:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff8022127b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022127f:	48 c7 c0 cb c0 20 80 	mov    $0xffffffff8020c0cb,%rax
ffffffff80221286:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022128a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022128d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221291:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff80221297:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022129a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022129e:	48 05 a0 0a 00 00    	add    $0xaa0,%rax
ffffffff802212a4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802212ab:	48 c7 c2 da c0 20 80 	mov    $0xffffffff8020c0da,%rdx
ffffffff802212b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212b6:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802212bc:	66 89 10             	mov    %dx,(%rax)
ffffffff802212bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212c3:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802212c9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802212cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212d3:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802212d9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802212dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212e1:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff802212e7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802212eb:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff802212f2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802212f6:	48 89 c2             	mov    %rax,%rdx
ffffffff802212f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802212fd:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff80221303:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221307:	48 c7 c0 da c0 20 80 	mov    $0xffffffff8020c0da,%rax
ffffffff8022130e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221312:	48 89 c2             	mov    %rax,%rdx
ffffffff80221315:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221319:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff8022131f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221322:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221326:	48 05 b0 0a 00 00    	add    $0xab0,%rax
ffffffff8022132c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff80221333:	48 c7 c2 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rdx
ffffffff8022133a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022133e:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221344:	66 89 10             	mov    %dx,(%rax)
ffffffff80221347:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022134b:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221351:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221357:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022135b:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff80221361:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221365:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221369:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff8022136f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221373:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
ffffffff8022137a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022137e:	48 89 c2             	mov    %rax,%rdx
ffffffff80221381:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221385:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff8022138b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022138f:	48 c7 c0 e9 c0 20 80 	mov    $0xffffffff8020c0e9,%rax
ffffffff80221396:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022139a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022139d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213a1:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802213a7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802213aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213ae:	48 05 c0 0a 00 00    	add    $0xac0,%rax
ffffffff802213b4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802213bb:	48 c7 c2 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rdx
ffffffff802213c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213c6:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802213cc:	66 89 10             	mov    %dx,(%rax)
ffffffff802213cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213d3:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802213d9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802213df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213e3:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802213e9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802213ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802213f1:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff802213f7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802213fb:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff80221402:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221406:	48 89 c2             	mov    %rax,%rdx
ffffffff80221409:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022140d:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff80221413:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221417:	48 c7 c0 f8 c0 20 80 	mov    $0xffffffff8020c0f8,%rax
ffffffff8022141e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221422:	48 89 c2             	mov    %rax,%rdx
ffffffff80221425:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221429:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff8022142f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221432:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221436:	48 05 d0 0a 00 00    	add    $0xad0,%rax
ffffffff8022143c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff80221443:	48 c7 c2 07 c1 20 80 	mov    $0xffffffff8020c107,%rdx
ffffffff8022144a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022144e:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221454:	66 89 10             	mov    %dx,(%rax)
ffffffff80221457:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022145b:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221461:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221467:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022146b:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff80221471:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221475:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221479:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022147f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221483:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
ffffffff8022148a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022148e:	48 89 c2             	mov    %rax,%rdx
ffffffff80221491:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221495:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff8022149b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022149f:	48 c7 c0 07 c1 20 80 	mov    $0xffffffff8020c107,%rax
ffffffff802214a6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802214aa:	48 89 c2             	mov    %rax,%rdx
ffffffff802214ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214b1:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802214b7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802214ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214be:	48 05 e0 0a 00 00    	add    $0xae0,%rax
ffffffff802214c4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802214cb:	48 c7 c2 16 c1 20 80 	mov    $0xffffffff8020c116,%rdx
ffffffff802214d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214d6:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802214dc:	66 89 10             	mov    %dx,(%rax)
ffffffff802214df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214e3:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802214e9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802214ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802214f3:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff802214f9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802214fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221501:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221507:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022150b:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff80221512:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221516:	48 89 c2             	mov    %rax,%rdx
ffffffff80221519:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022151d:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff80221523:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221527:	48 c7 c0 16 c1 20 80 	mov    $0xffffffff8020c116,%rax
ffffffff8022152e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221532:	48 89 c2             	mov    %rax,%rdx
ffffffff80221535:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221539:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff8022153f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221542:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221546:	48 05 f0 0a 00 00    	add    $0xaf0,%rax
ffffffff8022154c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff80221553:	48 c7 c2 25 c1 20 80 	mov    $0xffffffff8020c125,%rdx
ffffffff8022155a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022155e:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221564:	66 89 10             	mov    %dx,(%rax)
ffffffff80221567:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022156b:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221571:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221577:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022157b:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff80221581:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221585:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221589:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff8022158f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221593:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
ffffffff8022159a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022159e:	48 89 c2             	mov    %rax,%rdx
ffffffff802215a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215a5:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802215ab:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802215af:	48 c7 c0 25 c1 20 80 	mov    $0xffffffff8020c125,%rax
ffffffff802215b6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802215ba:	48 89 c2             	mov    %rax,%rdx
ffffffff802215bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215c1:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802215c7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802215ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215ce:	48 05 00 0b 00 00    	add    $0xb00,%rax
ffffffff802215d4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802215db:	48 c7 c2 34 c1 20 80 	mov    $0xffffffff8020c134,%rdx
ffffffff802215e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215e6:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802215ec:	66 89 10             	mov    %dx,(%rax)
ffffffff802215ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802215f3:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff802215f9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802215ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221603:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221609:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022160d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221611:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221617:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022161b:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff80221622:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221626:	48 89 c2             	mov    %rax,%rdx
ffffffff80221629:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022162d:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff80221633:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221637:	48 c7 c0 34 c1 20 80 	mov    $0xffffffff8020c134,%rax
ffffffff8022163e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221642:	48 89 c2             	mov    %rax,%rdx
ffffffff80221645:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221649:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff8022164f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221652:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221656:	48 05 10 0b 00 00    	add    $0xb10,%rax
ffffffff8022165c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff80221663:	48 c7 c2 43 c1 20 80 	mov    $0xffffffff8020c143,%rdx
ffffffff8022166a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022166e:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221674:	66 89 10             	mov    %dx,(%rax)
ffffffff80221677:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022167b:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221681:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221687:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022168b:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff80221691:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221695:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221699:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff8022169f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802216a3:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
ffffffff802216aa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802216ae:	48 89 c2             	mov    %rax,%rdx
ffffffff802216b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216b5:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802216bb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802216bf:	48 c7 c0 43 c1 20 80 	mov    $0xffffffff8020c143,%rax
ffffffff802216c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802216ca:	48 89 c2             	mov    %rax,%rdx
ffffffff802216cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216d1:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802216d7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802216da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216de:	48 05 20 0b 00 00    	add    $0xb20,%rax
ffffffff802216e4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802216eb:	48 c7 c2 52 c1 20 80 	mov    $0xffffffff8020c152,%rdx
ffffffff802216f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802216f6:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff802216fc:	66 89 10             	mov    %dx,(%rax)
ffffffff802216ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221703:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221709:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022170f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221713:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221719:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022171d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221721:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221727:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022172b:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff80221732:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221736:	48 89 c2             	mov    %rax,%rdx
ffffffff80221739:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022173d:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff80221743:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221747:	48 c7 c0 52 c1 20 80 	mov    $0xffffffff8020c152,%rax
ffffffff8022174e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221752:	48 89 c2             	mov    %rax,%rdx
ffffffff80221755:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221759:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff8022175f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221762:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221766:	48 05 30 0b 00 00    	add    $0xb30,%rax
ffffffff8022176c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff80221773:	48 c7 c2 61 c1 20 80 	mov    $0xffffffff8020c161,%rdx
ffffffff8022177a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022177e:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221784:	66 89 10             	mov    %dx,(%rax)
ffffffff80221787:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022178b:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff80221791:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221797:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022179b:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802217a1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802217a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217a9:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802217af:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802217b3:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
ffffffff802217ba:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802217be:	48 89 c2             	mov    %rax,%rdx
ffffffff802217c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217c5:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802217cb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802217cf:	48 c7 c0 61 c1 20 80 	mov    $0xffffffff8020c161,%rax
ffffffff802217d6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802217da:	48 89 c2             	mov    %rax,%rdx
ffffffff802217dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217e1:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802217e7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802217ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802217ee:	48 05 40 0b 00 00    	add    $0xb40,%rax
ffffffff802217f4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802217fb:	48 c7 c2 70 c1 20 80 	mov    $0xffffffff8020c170,%rdx
ffffffff80221802:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221806:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff8022180c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022180f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221813:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221819:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022181f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221823:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221829:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022182d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221831:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221837:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022183b:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff80221842:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221846:	48 89 c2             	mov    %rax,%rdx
ffffffff80221849:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022184d:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff80221853:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221857:	48 c7 c0 70 c1 20 80 	mov    $0xffffffff8020c170,%rax
ffffffff8022185e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221862:	48 89 c2             	mov    %rax,%rdx
ffffffff80221865:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221869:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff8022186f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221872:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221876:	48 05 50 0b 00 00    	add    $0xb50,%rax
ffffffff8022187c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff80221883:	48 c7 c2 7f c1 20 80 	mov    $0xffffffff8020c17f,%rdx
ffffffff8022188a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022188e:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221894:	66 89 10             	mov    %dx,(%rax)
ffffffff80221897:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022189b:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802218a1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802218a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218ab:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802218b1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802218b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218b9:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802218bf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802218c3:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff802218ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802218ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802218d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218d5:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802218db:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802218df:	48 c7 c0 7f c1 20 80 	mov    $0xffffffff8020c17f,%rax
ffffffff802218e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802218ea:	48 89 c2             	mov    %rax,%rdx
ffffffff802218ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218f1:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff802218f7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802218fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802218fe:	48 05 60 0b 00 00    	add    $0xb60,%rax
ffffffff80221904:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022190b:	48 c7 c2 8e c1 20 80 	mov    $0xffffffff8020c18e,%rdx
ffffffff80221912:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221916:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022191c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022191f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221923:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221929:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022192f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221933:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221939:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022193d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221941:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221947:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022194b:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff80221952:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221956:	48 89 c2             	mov    %rax,%rdx
ffffffff80221959:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022195d:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff80221963:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221967:	48 c7 c0 8e c1 20 80 	mov    $0xffffffff8020c18e,%rax
ffffffff8022196e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221972:	48 89 c2             	mov    %rax,%rdx
ffffffff80221975:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221979:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022197f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221986:	48 05 70 0b 00 00    	add    $0xb70,%rax
ffffffff8022198c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff80221993:	48 c7 c2 9d c1 20 80 	mov    $0xffffffff8020c19d,%rdx
ffffffff8022199a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022199e:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802219a4:	66 89 10             	mov    %dx,(%rax)
ffffffff802219a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219ab:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802219b1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802219b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219bb:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802219c1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802219c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219c9:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802219cf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802219d3:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
ffffffff802219da:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802219de:	48 89 c2             	mov    %rax,%rdx
ffffffff802219e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802219e5:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff802219eb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802219ef:	48 c7 c0 9d c1 20 80 	mov    $0xffffffff8020c19d,%rax
ffffffff802219f6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802219fa:	48 89 c2             	mov    %rax,%rdx
ffffffff802219fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a01:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221a07:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221a0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a0e:	48 05 80 0b 00 00    	add    $0xb80,%rax
ffffffff80221a14:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221a1b:	48 c7 c2 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rdx
ffffffff80221a22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a26:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221a2c:	66 89 10             	mov    %dx,(%rax)
ffffffff80221a2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a33:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221a39:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221a3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a43:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221a49:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221a4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a51:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221a57:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221a5b:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff80221a62:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221a66:	48 89 c2             	mov    %rax,%rdx
ffffffff80221a69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a6d:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221a73:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221a77:	48 c7 c0 ac c1 20 80 	mov    $0xffffffff8020c1ac,%rax
ffffffff80221a7e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221a82:	48 89 c2             	mov    %rax,%rdx
ffffffff80221a85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a89:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221a8f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221a92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221a96:	48 05 90 0b 00 00    	add    $0xb90,%rax
ffffffff80221a9c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff80221aa3:	48 c7 c2 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rdx
ffffffff80221aaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221aae:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221ab4:	66 89 10             	mov    %dx,(%rax)
ffffffff80221ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221abb:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221ac1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221ac7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221acb:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221ad1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221ad5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ad9:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221adf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221ae3:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
ffffffff80221aea:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221aee:	48 89 c2             	mov    %rax,%rdx
ffffffff80221af1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221af5:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221afb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221aff:	48 c7 c0 bb c1 20 80 	mov    $0xffffffff8020c1bb,%rax
ffffffff80221b06:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221b0a:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b11:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221b17:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221b1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b1e:	48 05 a0 0b 00 00    	add    $0xba0,%rax
ffffffff80221b24:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221b2b:	48 c7 c2 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rdx
ffffffff80221b32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b36:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221b3c:	66 89 10             	mov    %dx,(%rax)
ffffffff80221b3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b43:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221b49:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221b4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b53:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221b59:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221b5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b61:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221b67:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221b6b:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff80221b72:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221b76:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b7d:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221b83:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221b87:	48 c7 c0 ca c1 20 80 	mov    $0xffffffff8020c1ca,%rax
ffffffff80221b8e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221b92:	48 89 c2             	mov    %rax,%rdx
ffffffff80221b95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221b99:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221b9f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221ba2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ba6:	48 05 b0 0b 00 00    	add    $0xbb0,%rax
ffffffff80221bac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff80221bb3:	48 c7 c2 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rdx
ffffffff80221bba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bbe:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221bc4:	66 89 10             	mov    %dx,(%rax)
ffffffff80221bc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bcb:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221bd1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221bd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221bdb:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221be1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221be5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221be9:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221bef:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221bf3:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
ffffffff80221bfa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221bfe:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c05:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221c0b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221c0f:	48 c7 c0 d9 c1 20 80 	mov    $0xffffffff8020c1d9,%rax
ffffffff80221c16:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221c1a:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c21:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221c27:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221c2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c2e:	48 05 c0 0b 00 00    	add    $0xbc0,%rax
ffffffff80221c34:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221c3b:	48 c7 c2 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rdx
ffffffff80221c42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c46:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221c4c:	66 89 10             	mov    %dx,(%rax)
ffffffff80221c4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c53:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221c59:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221c5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c63:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221c69:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221c6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c71:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221c77:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221c7b:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff80221c82:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221c86:	48 89 c2             	mov    %rax,%rdx
ffffffff80221c89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221c8d:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221c93:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221c97:	48 c7 c0 e8 c1 20 80 	mov    $0xffffffff8020c1e8,%rax
ffffffff80221c9e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221ca2:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ca5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ca9:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221caf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221cb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cb6:	48 05 d0 0b 00 00    	add    $0xbd0,%rax
ffffffff80221cbc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff80221cc3:	48 c7 c2 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rdx
ffffffff80221cca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cce:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221cd4:	66 89 10             	mov    %dx,(%rax)
ffffffff80221cd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cdb:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221ce1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221ce7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ceb:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221cf1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221cf5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221cf9:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221cff:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221d03:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
ffffffff80221d0a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221d0e:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d15:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221d1b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221d1f:	48 c7 c0 f7 c1 20 80 	mov    $0xffffffff8020c1f7,%rax
ffffffff80221d26:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221d2a:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d31:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221d37:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221d3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d3e:	48 05 e0 0b 00 00    	add    $0xbe0,%rax
ffffffff80221d44:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221d4b:	48 c7 c2 06 c2 20 80 	mov    $0xffffffff8020c206,%rdx
ffffffff80221d52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d56:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221d5c:	66 89 10             	mov    %dx,(%rax)
ffffffff80221d5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d63:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221d69:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221d6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d73:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221d79:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221d7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d81:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221d87:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221d8b:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff80221d92:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221d96:	48 89 c2             	mov    %rax,%rdx
ffffffff80221d99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221d9d:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221da3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221da7:	48 c7 c0 06 c2 20 80 	mov    $0xffffffff8020c206,%rax
ffffffff80221dae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221db2:	48 89 c2             	mov    %rax,%rdx
ffffffff80221db5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221db9:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221dbf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221dc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dc6:	48 05 f0 0b 00 00    	add    $0xbf0,%rax
ffffffff80221dcc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff80221dd3:	48 c7 c2 15 c2 20 80 	mov    $0xffffffff8020c215,%rdx
ffffffff80221dda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dde:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221de4:	66 89 10             	mov    %dx,(%rax)
ffffffff80221de7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221deb:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221df1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221df7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221dfb:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e01:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221e05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e09:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e0f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221e13:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
ffffffff80221e1a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221e1e:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e25:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e2b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221e2f:	48 c7 c0 15 c2 20 80 	mov    $0xffffffff8020c215,%rax
ffffffff80221e36:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221e3a:	48 89 c2             	mov    %rax,%rdx
ffffffff80221e3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e41:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e47:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221e4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e4e:	48 05 00 0c 00 00    	add    $0xc00,%rax
ffffffff80221e54:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221e5b:	48 c7 c2 24 c2 20 80 	mov    $0xffffffff8020c224,%rdx
ffffffff80221e62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e66:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221e6c:	66 89 10             	mov    %dx,(%rax)
ffffffff80221e6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e73:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221e79:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221e7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e83:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221e89:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221e8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221e91:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221e97:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221e9b:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff80221ea2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221ea6:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ea9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ead:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221eb3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221eb7:	48 c7 c0 24 c2 20 80 	mov    $0xffffffff8020c224,%rax
ffffffff80221ebe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221ec2:	48 89 c2             	mov    %rax,%rdx
ffffffff80221ec5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ec9:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221ecf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221ed2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ed6:	48 05 10 0c 00 00    	add    $0xc10,%rax
ffffffff80221edc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff80221ee3:	48 c7 c2 33 c2 20 80 	mov    $0xffffffff8020c233,%rdx
ffffffff80221eea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221eee:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221ef4:	66 89 10             	mov    %dx,(%rax)
ffffffff80221ef7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221efb:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f01:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221f07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f0b:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f11:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221f15:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f19:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f1f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221f23:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
ffffffff80221f2a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221f2e:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f31:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f35:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f3b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221f3f:	48 c7 c0 33 c2 20 80 	mov    $0xffffffff8020c233,%rax
ffffffff80221f46:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221f4a:	48 89 c2             	mov    %rax,%rdx
ffffffff80221f4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f51:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f57:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221f5a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f5e:	48 05 20 0c 00 00    	add    $0xc20,%rax
ffffffff80221f64:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80221f6b:	48 c7 c2 42 c2 20 80 	mov    $0xffffffff8020c242,%rdx
ffffffff80221f72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f76:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221f7c:	66 89 10             	mov    %dx,(%rax)
ffffffff80221f7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f83:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221f89:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80221f8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221f93:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221f99:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80221f9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fa1:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221fa7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80221fab:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80221fb2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80221fb6:	48 89 c2             	mov    %rax,%rdx
ffffffff80221fb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fbd:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221fc3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80221fc7:	48 c7 c0 42 c2 20 80 	mov    $0xffffffff8020c242,%rax
ffffffff80221fce:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80221fd2:	48 89 c2             	mov    %rax,%rdx
ffffffff80221fd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fd9:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221fdf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80221fe2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221fe6:	48 05 30 0c 00 00    	add    $0xc30,%rax
ffffffff80221fec:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff80221ff3:	48 c7 c2 51 c2 20 80 	mov    $0xffffffff8020c251,%rdx
ffffffff80221ffa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80221ffe:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80222004:	66 89 10             	mov    %dx,(%rax)
ffffffff80222007:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022200b:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80222011:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222017:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022201b:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80222021:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222025:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222029:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff8022202f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222033:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
ffffffff8022203a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022203e:	48 89 c2             	mov    %rax,%rdx
ffffffff80222041:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222045:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff8022204b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022204f:	48 c7 c0 51 c2 20 80 	mov    $0xffffffff8020c251,%rax
ffffffff80222056:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022205a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022205d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222061:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80222067:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022206a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022206e:	48 05 40 0c 00 00    	add    $0xc40,%rax
ffffffff80222074:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022207b:	48 c7 c2 60 c2 20 80 	mov    $0xffffffff8020c260,%rdx
ffffffff80222082:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222086:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff8022208c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022208f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222093:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff80222099:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022209f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220a3:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff802220a9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802220ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220b1:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff802220b7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802220bb:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff802220c2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802220c6:	48 89 c2             	mov    %rax,%rdx
ffffffff802220c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220cd:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff802220d3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802220d7:	48 c7 c0 60 c2 20 80 	mov    $0xffffffff8020c260,%rax
ffffffff802220de:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802220e2:	48 89 c2             	mov    %rax,%rdx
ffffffff802220e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220e9:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff802220ef:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802220f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802220f6:	48 05 50 0c 00 00    	add    $0xc50,%rax
ffffffff802220fc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80222103:	48 c7 c2 6f c2 20 80 	mov    $0xffffffff8020c26f,%rdx
ffffffff8022210a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022210e:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222114:	66 89 10             	mov    %dx,(%rax)
ffffffff80222117:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022211b:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222121:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222127:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022212b:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222131:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222135:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222139:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff8022213f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222143:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
ffffffff8022214a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022214e:	48 89 c2             	mov    %rax,%rdx
ffffffff80222151:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222155:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff8022215b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022215f:	48 c7 c0 6f c2 20 80 	mov    $0xffffffff8020c26f,%rax
ffffffff80222166:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022216a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022216d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222171:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222177:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022217a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022217e:	48 05 60 0c 00 00    	add    $0xc60,%rax
ffffffff80222184:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022218b:	48 c7 c2 7e c2 20 80 	mov    $0xffffffff8020c27e,%rdx
ffffffff80222192:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222196:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff8022219c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022219f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221a3:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802221a9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802221af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221b3:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802221b9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802221bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221c1:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802221c7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802221cb:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff802221d2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802221d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802221d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221dd:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802221e3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802221e7:	48 c7 c0 7e c2 20 80 	mov    $0xffffffff8020c27e,%rax
ffffffff802221ee:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802221f2:	48 89 c2             	mov    %rax,%rdx
ffffffff802221f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802221f9:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff802221ff:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222202:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222206:	48 05 70 0c 00 00    	add    $0xc70,%rax
ffffffff8022220c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80222213:	48 c7 c2 8d c2 20 80 	mov    $0xffffffff8020c28d,%rdx
ffffffff8022221a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022221e:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222224:	66 89 10             	mov    %dx,(%rax)
ffffffff80222227:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022222b:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222231:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222237:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022223b:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222241:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222245:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222249:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff8022224f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222253:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
ffffffff8022225a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022225e:	48 89 c2             	mov    %rax,%rdx
ffffffff80222261:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222265:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff8022226b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022226f:	48 c7 c0 8d c2 20 80 	mov    $0xffffffff8020c28d,%rax
ffffffff80222276:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022227a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022227d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222281:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222287:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022228a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022228e:	48 05 80 0c 00 00    	add    $0xc80,%rax
ffffffff80222294:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022229b:	48 c7 c2 9c c2 20 80 	mov    $0xffffffff8020c29c,%rdx
ffffffff802222a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222a6:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802222ac:	66 89 10             	mov    %dx,(%rax)
ffffffff802222af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222b3:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802222b9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802222bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222c3:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802222c9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802222cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222d1:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802222d7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802222db:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff802222e2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802222e6:	48 89 c2             	mov    %rax,%rdx
ffffffff802222e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802222ed:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff802222f3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802222f7:	48 c7 c0 9c c2 20 80 	mov    $0xffffffff8020c29c,%rax
ffffffff802222fe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222302:	48 89 c2             	mov    %rax,%rdx
ffffffff80222305:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222309:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff8022230f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222312:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222316:	48 05 90 0c 00 00    	add    $0xc90,%rax
ffffffff8022231c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80222323:	48 c7 c2 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rdx
ffffffff8022232a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022232e:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222334:	66 89 10             	mov    %dx,(%rax)
ffffffff80222337:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022233b:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222341:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222347:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022234b:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222351:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222355:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222359:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff8022235f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222363:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff8022236a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022236e:	48 89 c2             	mov    %rax,%rdx
ffffffff80222371:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222375:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff8022237b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022237f:	48 c7 c0 ab c2 20 80 	mov    $0xffffffff8020c2ab,%rax
ffffffff80222386:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022238a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022238d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222391:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff80222397:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022239a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022239e:	48 05 a0 0c 00 00    	add    $0xca0,%rax
ffffffff802223a4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802223ab:	48 c7 c2 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rdx
ffffffff802223b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223b6:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802223bc:	66 89 10             	mov    %dx,(%rax)
ffffffff802223bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223c3:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802223c9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802223cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223d3:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802223d9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802223dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223e1:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff802223e7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802223eb:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff802223f2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802223f6:	48 89 c2             	mov    %rax,%rdx
ffffffff802223f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802223fd:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff80222403:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222407:	48 c7 c0 ba c2 20 80 	mov    $0xffffffff8020c2ba,%rax
ffffffff8022240e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222412:	48 89 c2             	mov    %rax,%rdx
ffffffff80222415:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222419:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff8022241f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222422:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222426:	48 05 b0 0c 00 00    	add    $0xcb0,%rax
ffffffff8022242c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80222433:	48 c7 c2 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rdx
ffffffff8022243a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022243e:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222444:	66 89 10             	mov    %dx,(%rax)
ffffffff80222447:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022244b:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222451:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222457:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022245b:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff80222461:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222465:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222469:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff8022246f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222473:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
ffffffff8022247a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022247e:	48 89 c2             	mov    %rax,%rdx
ffffffff80222481:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222485:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff8022248b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022248f:	48 c7 c0 c9 c2 20 80 	mov    $0xffffffff8020c2c9,%rax
ffffffff80222496:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022249a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022249d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224a1:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802224a7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802224aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224ae:	48 05 c0 0c 00 00    	add    $0xcc0,%rax
ffffffff802224b4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802224bb:	48 c7 c2 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rdx
ffffffff802224c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224c6:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802224cc:	66 89 10             	mov    %dx,(%rax)
ffffffff802224cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224d3:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802224d9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802224df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224e3:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802224e9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802224ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802224f1:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff802224f7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802224fb:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff80222502:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222506:	48 89 c2             	mov    %rax,%rdx
ffffffff80222509:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022250d:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff80222513:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222517:	48 c7 c0 d8 c2 20 80 	mov    $0xffffffff8020c2d8,%rax
ffffffff8022251e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222522:	48 89 c2             	mov    %rax,%rdx
ffffffff80222525:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222529:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff8022252f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222532:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222536:	48 05 d0 0c 00 00    	add    $0xcd0,%rax
ffffffff8022253c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80222543:	48 c7 c2 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rdx
ffffffff8022254a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022254e:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222554:	66 89 10             	mov    %dx,(%rax)
ffffffff80222557:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022255b:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222561:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222567:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022256b:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff80222571:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222575:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222579:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022257f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222583:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
ffffffff8022258a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022258e:	48 89 c2             	mov    %rax,%rdx
ffffffff80222591:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222595:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff8022259b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022259f:	48 c7 c0 e7 c2 20 80 	mov    $0xffffffff8020c2e7,%rax
ffffffff802225a6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802225aa:	48 89 c2             	mov    %rax,%rdx
ffffffff802225ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225b1:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802225b7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802225ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225be:	48 05 e0 0c 00 00    	add    $0xce0,%rax
ffffffff802225c4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802225cb:	48 c7 c2 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rdx
ffffffff802225d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225d6:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802225dc:	66 89 10             	mov    %dx,(%rax)
ffffffff802225df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225e3:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802225e9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802225ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802225f3:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff802225f9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802225fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222601:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222607:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022260b:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff80222612:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222616:	48 89 c2             	mov    %rax,%rdx
ffffffff80222619:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022261d:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff80222623:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222627:	48 c7 c0 f6 c2 20 80 	mov    $0xffffffff8020c2f6,%rax
ffffffff8022262e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222632:	48 89 c2             	mov    %rax,%rdx
ffffffff80222635:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222639:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff8022263f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222642:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222646:	48 05 f0 0c 00 00    	add    $0xcf0,%rax
ffffffff8022264c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80222653:	48 c7 c2 05 c3 20 80 	mov    $0xffffffff8020c305,%rdx
ffffffff8022265a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022265e:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222664:	66 89 10             	mov    %dx,(%rax)
ffffffff80222667:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022266b:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222671:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222677:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022267b:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff80222681:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222685:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222689:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff8022268f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222693:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
ffffffff8022269a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022269e:	48 89 c2             	mov    %rax,%rdx
ffffffff802226a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226a5:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802226ab:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802226af:	48 c7 c0 05 c3 20 80 	mov    $0xffffffff8020c305,%rax
ffffffff802226b6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802226ba:	48 89 c2             	mov    %rax,%rdx
ffffffff802226bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226c1:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802226c7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802226ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226ce:	48 05 00 0d 00 00    	add    $0xd00,%rax
ffffffff802226d4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802226db:	48 c7 c2 14 c3 20 80 	mov    $0xffffffff8020c314,%rdx
ffffffff802226e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226e6:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802226ec:	66 89 10             	mov    %dx,(%rax)
ffffffff802226ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802226f3:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff802226f9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802226ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222703:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222709:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022270d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222711:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222717:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022271b:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff80222722:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222726:	48 89 c2             	mov    %rax,%rdx
ffffffff80222729:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022272d:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff80222733:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222737:	48 c7 c0 14 c3 20 80 	mov    $0xffffffff8020c314,%rax
ffffffff8022273e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222742:	48 89 c2             	mov    %rax,%rdx
ffffffff80222745:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222749:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff8022274f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222752:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222756:	48 05 10 0d 00 00    	add    $0xd10,%rax
ffffffff8022275c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80222763:	48 c7 c2 23 c3 20 80 	mov    $0xffffffff8020c323,%rdx
ffffffff8022276a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022276e:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222774:	66 89 10             	mov    %dx,(%rax)
ffffffff80222777:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022277b:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222781:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222787:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022278b:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff80222791:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222795:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222799:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff8022279f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802227a3:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
ffffffff802227aa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802227ae:	48 89 c2             	mov    %rax,%rdx
ffffffff802227b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227b5:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802227bb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802227bf:	48 c7 c0 23 c3 20 80 	mov    $0xffffffff8020c323,%rax
ffffffff802227c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802227ca:	48 89 c2             	mov    %rax,%rdx
ffffffff802227cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227d1:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802227d7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802227da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227de:	48 05 20 0d 00 00    	add    $0xd20,%rax
ffffffff802227e4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802227eb:	48 c7 c2 32 c3 20 80 	mov    $0xffffffff8020c332,%rdx
ffffffff802227f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802227f6:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff802227fc:	66 89 10             	mov    %dx,(%rax)
ffffffff802227ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222803:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222809:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022280f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222813:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222819:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022281d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222821:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222827:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022282b:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff80222832:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222836:	48 89 c2             	mov    %rax,%rdx
ffffffff80222839:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022283d:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff80222843:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222847:	48 c7 c0 32 c3 20 80 	mov    $0xffffffff8020c332,%rax
ffffffff8022284e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222852:	48 89 c2             	mov    %rax,%rdx
ffffffff80222855:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222859:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff8022285f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222862:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222866:	48 05 30 0d 00 00    	add    $0xd30,%rax
ffffffff8022286c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80222873:	48 c7 c2 41 c3 20 80 	mov    $0xffffffff8020c341,%rdx
ffffffff8022287a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022287e:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222884:	66 89 10             	mov    %dx,(%rax)
ffffffff80222887:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022288b:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff80222891:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222897:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022289b:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802228a1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802228a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228a9:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802228af:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802228b3:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
ffffffff802228ba:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802228be:	48 89 c2             	mov    %rax,%rdx
ffffffff802228c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228c5:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802228cb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802228cf:	48 c7 c0 41 c3 20 80 	mov    $0xffffffff8020c341,%rax
ffffffff802228d6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802228da:	48 89 c2             	mov    %rax,%rdx
ffffffff802228dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228e1:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802228e7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802228ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802228ee:	48 05 40 0d 00 00    	add    $0xd40,%rax
ffffffff802228f4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802228fb:	48 c7 c2 50 c3 20 80 	mov    $0xffffffff8020c350,%rdx
ffffffff80222902:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222906:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff8022290c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022290f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222913:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222919:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022291f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222923:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222929:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022292d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222931:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222937:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022293b:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff80222942:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222946:	48 89 c2             	mov    %rax,%rdx
ffffffff80222949:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022294d:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff80222953:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222957:	48 c7 c0 50 c3 20 80 	mov    $0xffffffff8020c350,%rax
ffffffff8022295e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222962:	48 89 c2             	mov    %rax,%rdx
ffffffff80222965:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222969:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff8022296f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222972:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222976:	48 05 50 0d 00 00    	add    $0xd50,%rax
ffffffff8022297c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80222983:	48 c7 c2 5f c3 20 80 	mov    $0xffffffff8020c35f,%rdx
ffffffff8022298a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022298e:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222994:	66 89 10             	mov    %dx,(%rax)
ffffffff80222997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022299b:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802229a1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802229a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229ab:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802229b1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802229b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229b9:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802229bf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802229c3:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
ffffffff802229ca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802229ce:	48 89 c2             	mov    %rax,%rdx
ffffffff802229d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229d5:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802229db:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802229df:	48 c7 c0 5f c3 20 80 	mov    $0xffffffff8020c35f,%rax
ffffffff802229e6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802229ea:	48 89 c2             	mov    %rax,%rdx
ffffffff802229ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229f1:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff802229f7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802229fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802229fe:	48 05 60 0d 00 00    	add    $0xd60,%rax
ffffffff80222a04:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222a0b:	48 c7 c2 6e c3 20 80 	mov    $0xffffffff8020c36e,%rdx
ffffffff80222a12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a16:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a1c:	66 89 10             	mov    %dx,(%rax)
ffffffff80222a1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a23:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a29:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222a2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a33:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a39:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222a3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a41:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a47:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222a4b:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff80222a52:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222a56:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a5d:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a63:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222a67:	48 c7 c0 6e c3 20 80 	mov    $0xffffffff8020c36e,%rax
ffffffff80222a6e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222a72:	48 89 c2             	mov    %rax,%rdx
ffffffff80222a75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a79:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a7f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222a82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a86:	48 05 70 0d 00 00    	add    $0xd70,%rax
ffffffff80222a8c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff80222a93:	48 c7 c2 7d c3 20 80 	mov    $0xffffffff8020c37d,%rdx
ffffffff80222a9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222a9e:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222aa4:	66 89 10             	mov    %dx,(%rax)
ffffffff80222aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222aab:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222ab1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222abb:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222ac1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222ac5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ac9:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222acf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222ad3:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
ffffffff80222ada:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222ade:	48 89 c2             	mov    %rax,%rdx
ffffffff80222ae1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ae5:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222aeb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222aef:	48 c7 c0 7d c3 20 80 	mov    $0xffffffff8020c37d,%rax
ffffffff80222af6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222afa:	48 89 c2             	mov    %rax,%rdx
ffffffff80222afd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b01:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222b07:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222b0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b0e:	48 05 80 0d 00 00    	add    $0xd80,%rax
ffffffff80222b14:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222b1b:	48 c7 c2 8c c3 20 80 	mov    $0xffffffff8020c38c,%rdx
ffffffff80222b22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b26:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222b2c:	66 89 10             	mov    %dx,(%rax)
ffffffff80222b2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b33:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222b39:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222b3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b43:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222b49:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222b4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b51:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222b57:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222b5b:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff80222b62:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222b66:	48 89 c2             	mov    %rax,%rdx
ffffffff80222b69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b6d:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222b73:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222b77:	48 c7 c0 8c c3 20 80 	mov    $0xffffffff8020c38c,%rax
ffffffff80222b7e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222b82:	48 89 c2             	mov    %rax,%rdx
ffffffff80222b85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b89:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222b8f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222b92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222b96:	48 05 90 0d 00 00    	add    $0xd90,%rax
ffffffff80222b9c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80222ba3:	48 c7 c2 9b c3 20 80 	mov    $0xffffffff8020c39b,%rdx
ffffffff80222baa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bae:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222bb4:	66 89 10             	mov    %dx,(%rax)
ffffffff80222bb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bbb:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222bc1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222bc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bcb:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222bd1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222bd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bd9:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222bdf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222be3:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
ffffffff80222bea:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222bee:	48 89 c2             	mov    %rax,%rdx
ffffffff80222bf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222bf5:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222bfb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222bff:	48 c7 c0 9b c3 20 80 	mov    $0xffffffff8020c39b,%rax
ffffffff80222c06:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222c0a:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c11:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222c17:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222c1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c1e:	48 05 a0 0d 00 00    	add    $0xda0,%rax
ffffffff80222c24:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222c2b:	48 c7 c2 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rdx
ffffffff80222c32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c36:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222c3c:	66 89 10             	mov    %dx,(%rax)
ffffffff80222c3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c43:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222c49:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222c4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c53:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222c59:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222c5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c61:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222c67:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222c6b:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80222c72:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222c76:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c7d:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222c83:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222c87:	48 c7 c0 aa c3 20 80 	mov    $0xffffffff8020c3aa,%rax
ffffffff80222c8e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222c92:	48 89 c2             	mov    %rax,%rdx
ffffffff80222c95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222c99:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222c9f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222ca2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ca6:	48 05 b0 0d 00 00    	add    $0xdb0,%rax
ffffffff80222cac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80222cb3:	48 c7 c2 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rdx
ffffffff80222cba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cbe:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222cc4:	66 89 10             	mov    %dx,(%rax)
ffffffff80222cc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ccb:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222cd1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222cd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222cdb:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222ce1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222ce5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ce9:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222cef:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222cf3:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
ffffffff80222cfa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222cfe:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d05:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222d0b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222d0f:	48 c7 c0 b9 c3 20 80 	mov    $0xffffffff8020c3b9,%rax
ffffffff80222d16:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222d1a:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d21:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222d27:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222d2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d2e:	48 05 c0 0d 00 00    	add    $0xdc0,%rax
ffffffff80222d34:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222d3b:	48 c7 c2 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rdx
ffffffff80222d42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d46:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222d4c:	66 89 10             	mov    %dx,(%rax)
ffffffff80222d4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d53:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222d59:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222d5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d63:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222d69:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222d6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d71:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222d77:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222d7b:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80222d82:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222d86:	48 89 c2             	mov    %rax,%rdx
ffffffff80222d89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222d8d:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222d93:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222d97:	48 c7 c0 c8 c3 20 80 	mov    $0xffffffff8020c3c8,%rax
ffffffff80222d9e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222da2:	48 89 c2             	mov    %rax,%rdx
ffffffff80222da5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222da9:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222daf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222db2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222db6:	48 05 d0 0d 00 00    	add    $0xdd0,%rax
ffffffff80222dbc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80222dc3:	48 c7 c2 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rdx
ffffffff80222dca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222dce:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222dd4:	66 89 10             	mov    %dx,(%rax)
ffffffff80222dd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ddb:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222de1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222de7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222deb:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222df1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222df5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222df9:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222dff:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222e03:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
ffffffff80222e0a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222e0e:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e15:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222e1b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222e1f:	48 c7 c0 d7 c3 20 80 	mov    $0xffffffff8020c3d7,%rax
ffffffff80222e26:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222e2a:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e31:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222e37:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222e3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e3e:	48 05 e0 0d 00 00    	add    $0xde0,%rax
ffffffff80222e44:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222e4b:	48 c7 c2 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rdx
ffffffff80222e52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e56:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222e5c:	66 89 10             	mov    %dx,(%rax)
ffffffff80222e5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e63:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222e69:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222e6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e73:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222e79:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222e7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e81:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222e87:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222e8b:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80222e92:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222e96:	48 89 c2             	mov    %rax,%rdx
ffffffff80222e99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222e9d:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222ea3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222ea7:	48 c7 c0 e6 c3 20 80 	mov    $0xffffffff8020c3e6,%rax
ffffffff80222eae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222eb2:	48 89 c2             	mov    %rax,%rdx
ffffffff80222eb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222eb9:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222ebf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222ec2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ec6:	48 05 f0 0d 00 00    	add    $0xdf0,%rax
ffffffff80222ecc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80222ed3:	48 c7 c2 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rdx
ffffffff80222eda:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ede:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222ee4:	66 89 10             	mov    %dx,(%rax)
ffffffff80222ee7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222eeb:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222ef1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222ef7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222efb:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f01:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222f05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f09:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f0f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222f13:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
ffffffff80222f1a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222f1e:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f21:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f25:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f2b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222f2f:	48 c7 c0 f5 c3 20 80 	mov    $0xffffffff8020c3f5,%rax
ffffffff80222f36:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222f3a:	48 89 c2             	mov    %rax,%rdx
ffffffff80222f3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f41:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f47:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222f4a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f4e:	48 05 00 0e 00 00    	add    $0xe00,%rax
ffffffff80222f54:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80222f5b:	48 c7 c2 04 c4 20 80 	mov    $0xffffffff8020c404,%rdx
ffffffff80222f62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f66:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222f6c:	66 89 10             	mov    %dx,(%rax)
ffffffff80222f6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f73:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222f79:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80222f7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f83:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222f89:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80222f8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222f91:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222f97:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80222f9b:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80222fa2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80222fa6:	48 89 c2             	mov    %rax,%rdx
ffffffff80222fa9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fad:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222fb3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80222fb7:	48 c7 c0 04 c4 20 80 	mov    $0xffffffff8020c404,%rax
ffffffff80222fbe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80222fc2:	48 89 c2             	mov    %rax,%rdx
ffffffff80222fc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fc9:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222fcf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80222fd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fd6:	48 05 10 0e 00 00    	add    $0xe10,%rax
ffffffff80222fdc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80222fe3:	48 c7 c2 13 c4 20 80 	mov    $0xffffffff8020c413,%rdx
ffffffff80222fea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222fee:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80222ff4:	66 89 10             	mov    %dx,(%rax)
ffffffff80222ff7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80222ffb:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80223001:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223007:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022300b:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80223011:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223015:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223019:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff8022301f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223023:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
ffffffff8022302a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022302e:	48 89 c2             	mov    %rax,%rdx
ffffffff80223031:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223035:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff8022303b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022303f:	48 c7 c0 13 c4 20 80 	mov    $0xffffffff8020c413,%rax
ffffffff80223046:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022304a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022304d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223051:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80223057:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022305a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022305e:	48 05 20 0e 00 00    	add    $0xe20,%rax
ffffffff80223064:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022306b:	48 c7 c2 22 c4 20 80 	mov    $0xffffffff8020c422,%rdx
ffffffff80223072:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223076:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff8022307c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022307f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223083:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80223089:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022308f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223093:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff80223099:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022309d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230a1:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff802230a7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802230ab:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff802230b2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802230b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802230b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230bd:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff802230c3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802230c7:	48 c7 c0 22 c4 20 80 	mov    $0xffffffff8020c422,%rax
ffffffff802230ce:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802230d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802230d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230d9:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff802230df:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802230e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230e6:	48 05 30 0e 00 00    	add    $0xe30,%rax
ffffffff802230ec:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802230f3:	48 c7 c2 31 c4 20 80 	mov    $0xffffffff8020c431,%rdx
ffffffff802230fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802230fe:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223104:	66 89 10             	mov    %dx,(%rax)
ffffffff80223107:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022310b:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223111:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223117:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022311b:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223121:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223125:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223129:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff8022312f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223133:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff8022313a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022313e:	48 89 c2             	mov    %rax,%rdx
ffffffff80223141:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223145:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff8022314b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022314f:	48 c7 c0 31 c4 20 80 	mov    $0xffffffff8020c431,%rax
ffffffff80223156:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022315a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022315d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223161:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223167:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022316a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022316e:	48 05 40 0e 00 00    	add    $0xe40,%rax
ffffffff80223174:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022317b:	48 c7 c2 40 c4 20 80 	mov    $0xffffffff8020c440,%rdx
ffffffff80223182:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223186:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff8022318c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022318f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223193:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff80223199:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022319f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231a3:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802231a9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802231ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231b1:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802231b7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802231bb:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff802231c2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802231c6:	48 89 c2             	mov    %rax,%rdx
ffffffff802231c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231cd:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802231d3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802231d7:	48 c7 c0 40 c4 20 80 	mov    $0xffffffff8020c440,%rax
ffffffff802231de:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802231e2:	48 89 c2             	mov    %rax,%rdx
ffffffff802231e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231e9:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802231ef:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802231f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802231f6:	48 05 50 0e 00 00    	add    $0xe50,%rax
ffffffff802231fc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80223203:	48 c7 c2 4f c4 20 80 	mov    $0xffffffff8020c44f,%rdx
ffffffff8022320a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022320e:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223214:	66 89 10             	mov    %dx,(%rax)
ffffffff80223217:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022321b:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223221:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223227:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022322b:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223231:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223235:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223239:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff8022323f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223243:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
ffffffff8022324a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022324e:	48 89 c2             	mov    %rax,%rdx
ffffffff80223251:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223255:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff8022325b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022325f:	48 c7 c0 4f c4 20 80 	mov    $0xffffffff8020c44f,%rax
ffffffff80223266:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022326a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022326d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223271:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223277:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022327a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022327e:	48 05 60 0e 00 00    	add    $0xe60,%rax
ffffffff80223284:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022328b:	48 c7 c2 5e c4 20 80 	mov    $0xffffffff8020c45e,%rdx
ffffffff80223292:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223296:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff8022329c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022329f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232a3:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802232a9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802232af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232b3:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802232b9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802232bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232c1:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802232c7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802232cb:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff802232d2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802232d6:	48 89 c2             	mov    %rax,%rdx
ffffffff802232d9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232dd:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802232e3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802232e7:	48 c7 c0 5e c4 20 80 	mov    $0xffffffff8020c45e,%rax
ffffffff802232ee:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802232f2:	48 89 c2             	mov    %rax,%rdx
ffffffff802232f5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802232f9:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff802232ff:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223302:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223306:	48 05 70 0e 00 00    	add    $0xe70,%rax
ffffffff8022330c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80223313:	48 c7 c2 6d c4 20 80 	mov    $0xffffffff8020c46d,%rdx
ffffffff8022331a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022331e:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223324:	66 89 10             	mov    %dx,(%rax)
ffffffff80223327:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022332b:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223331:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223337:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022333b:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223341:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223345:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223349:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff8022334f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223353:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
ffffffff8022335a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022335e:	48 89 c2             	mov    %rax,%rdx
ffffffff80223361:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223365:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff8022336b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022336f:	48 c7 c0 6d c4 20 80 	mov    $0xffffffff8020c46d,%rax
ffffffff80223376:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022337a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022337d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223381:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223387:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022338a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022338e:	48 05 80 0e 00 00    	add    $0xe80,%rax
ffffffff80223394:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff8022339b:	48 c7 c2 7c c4 20 80 	mov    $0xffffffff8020c47c,%rdx
ffffffff802233a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233a6:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802233ac:	66 89 10             	mov    %dx,(%rax)
ffffffff802233af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233b3:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802233b9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802233bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233c3:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802233c9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802233cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233d1:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802233d7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802233db:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff802233e2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802233e6:	48 89 c2             	mov    %rax,%rdx
ffffffff802233e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802233ed:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff802233f3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802233f7:	48 c7 c0 7c c4 20 80 	mov    $0xffffffff8020c47c,%rax
ffffffff802233fe:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223402:	48 89 c2             	mov    %rax,%rdx
ffffffff80223405:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223409:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff8022340f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223412:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223416:	48 05 90 0e 00 00    	add    $0xe90,%rax
ffffffff8022341c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80223423:	48 c7 c2 8b c4 20 80 	mov    $0xffffffff8020c48b,%rdx
ffffffff8022342a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022342e:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223434:	66 89 10             	mov    %dx,(%rax)
ffffffff80223437:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022343b:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223441:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223447:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022344b:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223451:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223455:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223459:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff8022345f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223463:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
ffffffff8022346a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022346e:	48 89 c2             	mov    %rax,%rdx
ffffffff80223471:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223475:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff8022347b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022347f:	48 c7 c0 8b c4 20 80 	mov    $0xffffffff8020c48b,%rax
ffffffff80223486:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022348a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022348d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223491:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff80223497:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022349a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022349e:	48 05 a0 0e 00 00    	add    $0xea0,%rax
ffffffff802234a4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802234ab:	48 c7 c2 9a c4 20 80 	mov    $0xffffffff8020c49a,%rdx
ffffffff802234b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234b6:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802234bc:	66 89 10             	mov    %dx,(%rax)
ffffffff802234bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234c3:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802234c9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802234cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234d3:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802234d9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802234dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234e1:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff802234e7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802234eb:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff802234f2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802234f6:	48 89 c2             	mov    %rax,%rdx
ffffffff802234f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802234fd:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff80223503:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223507:	48 c7 c0 9a c4 20 80 	mov    $0xffffffff8020c49a,%rax
ffffffff8022350e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223512:	48 89 c2             	mov    %rax,%rdx
ffffffff80223515:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223519:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff8022351f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223522:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223526:	48 05 b0 0e 00 00    	add    $0xeb0,%rax
ffffffff8022352c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80223533:	48 c7 c2 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rdx
ffffffff8022353a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022353e:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223544:	66 89 10             	mov    %dx,(%rax)
ffffffff80223547:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022354b:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223551:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223557:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022355b:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff80223561:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223565:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223569:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff8022356f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223573:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
ffffffff8022357a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022357e:	48 89 c2             	mov    %rax,%rdx
ffffffff80223581:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223585:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff8022358b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022358f:	48 c7 c0 a9 c4 20 80 	mov    $0xffffffff8020c4a9,%rax
ffffffff80223596:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022359a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022359d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235a1:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802235a7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802235aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235ae:	48 05 c0 0e 00 00    	add    $0xec0,%rax
ffffffff802235b4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802235bb:	48 c7 c2 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rdx
ffffffff802235c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235c6:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802235cc:	66 89 10             	mov    %dx,(%rax)
ffffffff802235cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235d3:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802235d9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802235df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235e3:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802235e9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802235ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802235f1:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff802235f7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802235fb:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff80223602:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223606:	48 89 c2             	mov    %rax,%rdx
ffffffff80223609:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022360d:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff80223613:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223617:	48 c7 c0 b8 c4 20 80 	mov    $0xffffffff8020c4b8,%rax
ffffffff8022361e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223622:	48 89 c2             	mov    %rax,%rdx
ffffffff80223625:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223629:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff8022362f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223632:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223636:	48 05 d0 0e 00 00    	add    $0xed0,%rax
ffffffff8022363c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80223643:	48 c7 c2 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rdx
ffffffff8022364a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022364e:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223654:	66 89 10             	mov    %dx,(%rax)
ffffffff80223657:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022365b:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223661:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223667:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022366b:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff80223671:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223675:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223679:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022367f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223683:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
ffffffff8022368a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022368e:	48 89 c2             	mov    %rax,%rdx
ffffffff80223691:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223695:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff8022369b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022369f:	48 c7 c0 c7 c4 20 80 	mov    $0xffffffff8020c4c7,%rax
ffffffff802236a6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802236aa:	48 89 c2             	mov    %rax,%rdx
ffffffff802236ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236b1:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802236b7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802236ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236be:	48 05 e0 0e 00 00    	add    $0xee0,%rax
ffffffff802236c4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802236cb:	48 c7 c2 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rdx
ffffffff802236d2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236d6:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802236dc:	66 89 10             	mov    %dx,(%rax)
ffffffff802236df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236e3:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802236e9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802236ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802236f3:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff802236f9:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802236fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223701:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223707:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022370b:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff80223712:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223716:	48 89 c2             	mov    %rax,%rdx
ffffffff80223719:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022371d:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff80223723:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223727:	48 c7 c0 d6 c4 20 80 	mov    $0xffffffff8020c4d6,%rax
ffffffff8022372e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223732:	48 89 c2             	mov    %rax,%rdx
ffffffff80223735:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223739:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff8022373f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223742:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223746:	48 05 f0 0e 00 00    	add    $0xef0,%rax
ffffffff8022374c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80223753:	48 c7 c2 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rdx
ffffffff8022375a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022375e:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223764:	66 89 10             	mov    %dx,(%rax)
ffffffff80223767:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022376b:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223771:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223777:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022377b:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff80223781:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223785:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223789:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff8022378f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223793:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
ffffffff8022379a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022379e:	48 89 c2             	mov    %rax,%rdx
ffffffff802237a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237a5:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802237ab:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802237af:	48 c7 c0 e5 c4 20 80 	mov    $0xffffffff8020c4e5,%rax
ffffffff802237b6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802237ba:	48 89 c2             	mov    %rax,%rdx
ffffffff802237bd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237c1:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802237c7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802237ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237ce:	48 05 00 0f 00 00    	add    $0xf00,%rax
ffffffff802237d4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802237db:	48 c7 c2 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rdx
ffffffff802237e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237e6:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802237ec:	66 89 10             	mov    %dx,(%rax)
ffffffff802237ef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802237f3:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff802237f9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff802237ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223803:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223809:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022380d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223811:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223817:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022381b:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff80223822:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223826:	48 89 c2             	mov    %rax,%rdx
ffffffff80223829:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022382d:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff80223833:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223837:	48 c7 c0 f4 c4 20 80 	mov    $0xffffffff8020c4f4,%rax
ffffffff8022383e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223842:	48 89 c2             	mov    %rax,%rdx
ffffffff80223845:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223849:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff8022384f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223852:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223856:	48 05 10 0f 00 00    	add    $0xf10,%rax
ffffffff8022385c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80223863:	48 c7 c2 03 c5 20 80 	mov    $0xffffffff8020c503,%rdx
ffffffff8022386a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022386e:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223874:	66 89 10             	mov    %dx,(%rax)
ffffffff80223877:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022387b:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223881:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223887:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022388b:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff80223891:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223895:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223899:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff8022389f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802238a3:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
ffffffff802238aa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802238ae:	48 89 c2             	mov    %rax,%rdx
ffffffff802238b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238b5:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802238bb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802238bf:	48 c7 c0 03 c5 20 80 	mov    $0xffffffff8020c503,%rax
ffffffff802238c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802238ca:	48 89 c2             	mov    %rax,%rdx
ffffffff802238cd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238d1:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802238d7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802238da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238de:	48 05 20 0f 00 00    	add    $0xf20,%rax
ffffffff802238e4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802238eb:	48 c7 c2 12 c5 20 80 	mov    $0xffffffff8020c512,%rdx
ffffffff802238f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802238f6:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff802238fc:	66 89 10             	mov    %dx,(%rax)
ffffffff802238ff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223903:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223909:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022390f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223913:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223919:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022391d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223921:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223927:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff8022392b:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff80223932:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223936:	48 89 c2             	mov    %rax,%rdx
ffffffff80223939:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022393d:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff80223943:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223947:	48 c7 c0 12 c5 20 80 	mov    $0xffffffff8020c512,%rax
ffffffff8022394e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223952:	48 89 c2             	mov    %rax,%rdx
ffffffff80223955:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223959:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff8022395f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223962:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223966:	48 05 30 0f 00 00    	add    $0xf30,%rax
ffffffff8022396c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80223973:	48 c7 c2 21 c5 20 80 	mov    $0xffffffff8020c521,%rdx
ffffffff8022397a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022397e:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223984:	66 89 10             	mov    %dx,(%rax)
ffffffff80223987:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022398b:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff80223991:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223997:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022399b:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802239a1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff802239a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239a9:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802239af:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802239b3:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
ffffffff802239ba:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802239be:	48 89 c2             	mov    %rax,%rdx
ffffffff802239c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239c5:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802239cb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802239cf:	48 c7 c0 21 c5 20 80 	mov    $0xffffffff8020c521,%rax
ffffffff802239d6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802239da:	48 89 c2             	mov    %rax,%rdx
ffffffff802239dd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239e1:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802239e7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802239ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802239ee:	48 05 40 0f 00 00    	add    $0xf40,%rax
ffffffff802239f4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff802239fb:	48 c7 c2 30 c5 20 80 	mov    $0xffffffff8020c530,%rdx
ffffffff80223a02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a06:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a0c:	66 89 10             	mov    %dx,(%rax)
ffffffff80223a0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a13:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a19:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223a1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a23:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a29:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223a2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a31:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a37:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223a3b:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff80223a42:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223a46:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a4d:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a53:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223a57:	48 c7 c0 30 c5 20 80 	mov    $0xffffffff8020c530,%rax
ffffffff80223a5e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223a62:	48 89 c2             	mov    %rax,%rdx
ffffffff80223a65:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a69:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a6f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223a72:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a76:	48 05 50 0f 00 00    	add    $0xf50,%rax
ffffffff80223a7c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80223a83:	48 c7 c2 3c c5 20 80 	mov    $0xffffffff8020c53c,%rdx
ffffffff80223a8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a8e:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223a94:	66 89 10             	mov    %dx,(%rax)
ffffffff80223a97:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223a9b:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223aa1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223aa7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223aab:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223ab1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223ab5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ab9:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223abf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223ac3:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
ffffffff80223aca:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223ace:	48 89 c2             	mov    %rax,%rdx
ffffffff80223ad1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ad5:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223adb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223adf:	48 c7 c0 3c c5 20 80 	mov    $0xffffffff8020c53c,%rax
ffffffff80223ae6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223aea:	48 89 c2             	mov    %rax,%rdx
ffffffff80223aed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223af1:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223af7:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223afa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223afe:	48 05 60 0f 00 00    	add    $0xf60,%rax
ffffffff80223b04:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223b0b:	48 c7 c2 48 c5 20 80 	mov    $0xffffffff8020c548,%rdx
ffffffff80223b12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b16:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b1c:	66 89 10             	mov    %dx,(%rax)
ffffffff80223b1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b23:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b29:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223b2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b33:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b39:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223b3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b41:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b47:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223b4b:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff80223b52:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223b56:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b5d:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b63:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223b67:	48 c7 c0 48 c5 20 80 	mov    $0xffffffff8020c548,%rax
ffffffff80223b6e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223b72:	48 89 c2             	mov    %rax,%rdx
ffffffff80223b75:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b79:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b7f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223b82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b86:	48 05 70 0f 00 00    	add    $0xf70,%rax
ffffffff80223b8c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80223b93:	48 c7 c2 54 c5 20 80 	mov    $0xffffffff8020c554,%rdx
ffffffff80223b9a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223b9e:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223ba4:	66 89 10             	mov    %dx,(%rax)
ffffffff80223ba7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bab:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223bb1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223bb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bbb:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223bc1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223bc5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223bc9:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223bcf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223bd3:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
ffffffff80223bda:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223bde:	48 89 c2             	mov    %rax,%rdx
ffffffff80223be1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223be5:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223beb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223bef:	48 c7 c0 54 c5 20 80 	mov    $0xffffffff8020c554,%rax
ffffffff80223bf6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223bfa:	48 89 c2             	mov    %rax,%rdx
ffffffff80223bfd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c01:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223c07:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223c0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c0e:	48 05 80 0f 00 00    	add    $0xf80,%rax
ffffffff80223c14:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223c1b:	48 c7 c2 60 c5 20 80 	mov    $0xffffffff8020c560,%rdx
ffffffff80223c22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c26:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223c2c:	66 89 10             	mov    %dx,(%rax)
ffffffff80223c2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c33:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223c39:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223c3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c43:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223c49:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223c4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c51:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223c57:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223c5b:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80223c62:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223c66:	48 89 c2             	mov    %rax,%rdx
ffffffff80223c69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c6d:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223c73:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223c77:	48 c7 c0 60 c5 20 80 	mov    $0xffffffff8020c560,%rax
ffffffff80223c7e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223c82:	48 89 c2             	mov    %rax,%rdx
ffffffff80223c85:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c89:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223c8f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223c92:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223c96:	48 05 90 0f 00 00    	add    $0xf90,%rax
ffffffff80223c9c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80223ca3:	48 c7 c2 6c c5 20 80 	mov    $0xffffffff8020c56c,%rdx
ffffffff80223caa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cae:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223cb4:	66 89 10             	mov    %dx,(%rax)
ffffffff80223cb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cbb:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223cc1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223cc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ccb:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223cd1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223cd5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cd9:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223cdf:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223ce3:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
ffffffff80223cea:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223cee:	48 89 c2             	mov    %rax,%rdx
ffffffff80223cf1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223cf5:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223cfb:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223cff:	48 c7 c0 6c c5 20 80 	mov    $0xffffffff8020c56c,%rax
ffffffff80223d06:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223d0a:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d11:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223d17:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223d1a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d1e:	48 05 a0 0f 00 00    	add    $0xfa0,%rax
ffffffff80223d24:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223d2b:	48 c7 c2 78 c5 20 80 	mov    $0xffffffff8020c578,%rdx
ffffffff80223d32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d36:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223d3c:	66 89 10             	mov    %dx,(%rax)
ffffffff80223d3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d43:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223d49:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223d4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d53:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223d59:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223d5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d61:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223d67:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223d6b:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80223d72:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223d76:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d7d:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223d83:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223d87:	48 c7 c0 78 c5 20 80 	mov    $0xffffffff8020c578,%rax
ffffffff80223d8e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223d92:	48 89 c2             	mov    %rax,%rdx
ffffffff80223d95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223d99:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223d9f:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223da2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223da6:	48 05 b0 0f 00 00    	add    $0xfb0,%rax
ffffffff80223dac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80223db3:	48 c7 c2 84 c5 20 80 	mov    $0xffffffff8020c584,%rdx
ffffffff80223dba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223dbe:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223dc4:	66 89 10             	mov    %dx,(%rax)
ffffffff80223dc7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223dcb:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223dd1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223dd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ddb:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223de1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223de5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223de9:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223def:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223df3:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
ffffffff80223dfa:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223dfe:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e05:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223e0b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223e0f:	48 c7 c0 84 c5 20 80 	mov    $0xffffffff8020c584,%rax
ffffffff80223e16:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223e1a:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e1d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e21:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223e27:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223e2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e2e:	48 05 c0 0f 00 00    	add    $0xfc0,%rax
ffffffff80223e34:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223e3b:	48 c7 c2 90 c5 20 80 	mov    $0xffffffff8020c590,%rdx
ffffffff80223e42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e46:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223e4c:	66 89 10             	mov    %dx,(%rax)
ffffffff80223e4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e53:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223e59:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223e5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e63:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223e69:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223e6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e71:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223e77:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223e7b:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80223e82:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223e86:	48 89 c2             	mov    %rax,%rdx
ffffffff80223e89:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223e8d:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223e93:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223e97:	48 c7 c0 90 c5 20 80 	mov    $0xffffffff8020c590,%rax
ffffffff80223e9e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223ea2:	48 89 c2             	mov    %rax,%rdx
ffffffff80223ea5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ea9:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223eaf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223eb2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223eb6:	48 05 d0 0f 00 00    	add    $0xfd0,%rax
ffffffff80223ebc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80223ec3:	48 c7 c2 9c c5 20 80 	mov    $0xffffffff8020c59c,%rdx
ffffffff80223eca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ece:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223ed4:	66 89 10             	mov    %dx,(%rax)
ffffffff80223ed7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223edb:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223ee1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223ee7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223eeb:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223ef1:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223ef5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ef9:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223eff:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223f03:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff80223f0a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223f0e:	48 89 c2             	mov    %rax,%rdx
ffffffff80223f11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f15:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223f1b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223f1f:	48 c7 c0 9c c5 20 80 	mov    $0xffffffff8020c59c,%rax
ffffffff80223f26:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223f2a:	48 89 c2             	mov    %rax,%rdx
ffffffff80223f2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f31:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223f37:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223f3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f3e:	48 05 e0 0f 00 00    	add    $0xfe0,%rax
ffffffff80223f44:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
ffffffff80223f4b:	48 c7 c2 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rdx
ffffffff80223f52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f56:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223f5c:	66 89 10             	mov    %dx,(%rax)
ffffffff80223f5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f63:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223f69:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80223f6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f73:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223f79:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80223f7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f81:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223f87:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80223f8b:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80223f92:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80223f96:	48 89 c2             	mov    %rax,%rdx
ffffffff80223f99:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223f9d:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223fa3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff80223fa7:	48 c7 c0 a8 c5 20 80 	mov    $0xffffffff8020c5a8,%rax
ffffffff80223fae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80223fb2:	48 89 c2             	mov    %rax,%rdx
ffffffff80223fb5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fb9:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223fbf:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80223fc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fc6:	48 05 f0 0f 00 00    	add    $0xff0,%rax
ffffffff80223fcc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Replace systick handler with customized ones - spurious interrupts
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
ffffffff80223fd3:	48 8b 05 d6 e2 00 00 	mov    0xe2d6(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80223fda:	48 85 c0             	test   %rax,%rax
ffffffff80223fdd:	0f 85 88 00 00 00    	jne    ffffffff8022406b <__RME_X64_CPU_Local_Init+0x81f2>
        RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff80223fe3:	48 c7 c2 63 c6 20 80 	mov    $0xffffffff8020c663,%rdx
ffffffff80223fea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223fee:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80223ff4:	66 89 10             	mov    %dx,(%rax)
ffffffff80223ff7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80223ffb:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80224001:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff80224007:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022400b:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80224011:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff80224015:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224019:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8022401f:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff80224023:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff8022402a:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8022402e:	48 89 c2             	mov    %rax,%rdx
ffffffff80224031:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224035:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff8022403b:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff8022403f:	48 c7 c0 63 c6 20 80 	mov    $0xffffffff8020c663,%rax
ffffffff80224046:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8022404a:	48 89 c2             	mov    %rax,%rdx
ffffffff8022404d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224051:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80224057:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff8022405a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022405e:	48 05 20 02 00 00    	add    $0x220,%rax
ffffffff80224064:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
    /* Register SMP handlers */
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff8022406b:	48 c7 c2 09 c6 20 80 	mov    $0xffffffff8020c609,%rdx
ffffffff80224072:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224076:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff8022407c:	66 89 10             	mov    %dx,(%rax)
ffffffff8022407f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224083:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80224089:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
ffffffff8022408f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224093:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff80224099:	c6 40 04 00          	movb   $0x0,0x4(%rax)
ffffffff8022409d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240a1:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff802240a7:	c6 40 05 8e          	movb   $0x8e,0x5(%rax)
ffffffff802240ab:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
ffffffff802240b2:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802240b6:	48 89 c2             	mov    %rax,%rdx
ffffffff802240b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240bd:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff802240c3:	66 89 50 06          	mov    %dx,0x6(%rax)
ffffffff802240c7:	48 c7 c0 09 c6 20 80 	mov    $0xffffffff8020c609,%rax
ffffffff802240ce:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802240d2:	48 89 c2             	mov    %rax,%rdx
ffffffff802240d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240d9:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff802240df:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff802240e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240e6:	48 05 30 08 00 00    	add    $0x830,%rax
ffffffff802240ec:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)

    /* Load the IDT */
    Desc[0]=RME_POW2(RME_PGT_SIZE_4K)-1;
ffffffff802240f3:	66 c7 45 c6 ff 0f    	movw   $0xfff,-0x3a(%rbp)
    Desc[1]=(rme_ptr_t)IDT_Table;
ffffffff802240f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802240fd:	66 89 45 c8          	mov    %ax,-0x38(%rbp)
    Desc[2]=((rme_ptr_t)IDT_Table)>>16;
ffffffff80224101:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224105:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80224109:	66 89 45 ca          	mov    %ax,-0x36(%rbp)
    Desc[3]=((rme_ptr_t)IDT_Table)>>32;
ffffffff8022410d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224111:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80224115:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    Desc[4]=((rme_ptr_t)IDT_Table)>>48;
ffffffff80224119:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022411d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80224121:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
    __RME_X64_IDT_Load((rme_ptr_t*)Desc);
ffffffff80224125:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
ffffffff80224129:	48 89 c7             	mov    %rax,%rdi
ffffffff8022412c:	e8 48 77 fe ff       	call   ffffffff8020b879 <__RME_X64_IDT_Load>

    GDT_Table=(rme_ptr_t*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K));
ffffffff80224131:	48 8b 05 18 df 00 00 	mov    0xdf18(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff80224138:	48 8b 15 71 e1 00 00 	mov    0xe171(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff8022413f:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80224143:	48 01 d0             	add    %rdx,%rax
ffffffff80224146:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff8022414c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    TSS_Table=(rme_ptr_t)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+RME_POW2(RME_PGT_SIZE_4K)+16*sizeof(rme_ptr_t));
ffffffff80224150:	48 8b 05 f9 de 00 00 	mov    0xdef9(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff80224157:	48 8b 15 52 e1 00 00 	mov    0xe152(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff8022415e:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80224162:	48 01 d0             	add    %rdx,%rax
ffffffff80224165:	48 05 80 10 00 00    	add    $0x1080,%rax
ffffffff8022416b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

    /* Dummy entry */
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff8022416f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224173:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* Kernel code, DPL=0, R/X */
    GDT_Table[1]=0x0020980000000000ULL;
ffffffff8022417a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022417e:	48 83 c0 08          	add    $0x8,%rax
ffffffff80224182:	48 b9 00 00 00 00 00 	movabs $0x20980000000000,%rcx
ffffffff80224189:	98 20 00 
ffffffff8022418c:	48 89 08             	mov    %rcx,(%rax)
    /* Kernel data, DPL=0, W */
    GDT_Table[2]=0x0000920000000000ULL;
ffffffff8022418f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224193:	48 83 c0 10          	add    $0x10,%rax
ffffffff80224197:	48 b9 00 00 00 00 00 	movabs $0x920000000000,%rcx
ffffffff8022419e:	92 00 00 
ffffffff802241a1:	48 89 08             	mov    %rcx,(%rax)
    /* Unused entry - this is for sysret instruction's requirement */
    GDT_Table[3]=0x0000000000000000ULL;
ffffffff802241a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802241a8:	48 83 c0 18          	add    $0x18,%rax
ffffffff802241ac:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
ffffffff802241b3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802241b7:	48 83 c0 20          	add    $0x20,%rax
ffffffff802241bb:	48 be 00 00 00 00 00 	movabs $0xf20000000000,%rsi
ffffffff802241c2:	f2 00 00 
ffffffff802241c5:	48 89 30             	mov    %rsi,(%rax)
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
ffffffff802241c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802241cc:	48 83 c0 28          	add    $0x28,%rax
ffffffff802241d0:	48 b9 00 00 00 00 00 	movabs $0x20f80000000000,%rcx
ffffffff802241d7:	f8 20 00 
ffffffff802241da:	48 89 08             	mov    %rcx,(%rax)
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802241dd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802241e1:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff802241e5:	48 89 c2             	mov    %rax,%rdx
ffffffff802241e8:	48 b8 00 00 ff ff ff 	movabs $0xffffff0000,%rax
ffffffff802241ef:	00 00 00 
ffffffff802241f2:	48 21 c2             	and    %rax,%rdx
ffffffff802241f5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802241f9:	48 c1 e8 18          	shr    $0x18,%rax
ffffffff802241fd:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff80224201:	48 89 d1             	mov    %rdx,%rcx
ffffffff80224204:	48 09 c1             	or     %rax,%rcx
ffffffff80224207:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022420b:	48 83 c0 30          	add    $0x30,%rax
ffffffff8022420f:	48 ba 67 00 00 00 00 	movabs $0x890000000067,%rdx
ffffffff80224216:	89 00 00 
ffffffff80224219:	48 09 ca             	or     %rcx,%rdx
ffffffff8022421c:	48 89 10             	mov    %rdx,(%rax)
    GDT_Table[7]=(TSS_Table>>32);
ffffffff8022421f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224223:	48 83 c0 38          	add    $0x38,%rax
ffffffff80224227:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8022422b:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8022422f:	48 89 10             	mov    %rdx,(%rax)

    /* Load the GDT */
    Desc[0]=8*sizeof(rme_ptr_t)-1;
ffffffff80224232:	66 c7 45 c6 3f 00    	movw   $0x3f,-0x3a(%rbp)
    Desc[1]=(rme_ptr_t)GDT_Table;
ffffffff80224238:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022423c:	66 89 45 c8          	mov    %ax,-0x38(%rbp)
    Desc[2]=((rme_ptr_t)GDT_Table)>>16;
ffffffff80224240:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224244:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80224248:	66 89 45 ca          	mov    %ax,-0x36(%rbp)
    Desc[3]=((rme_ptr_t)GDT_Table)>>32;
ffffffff8022424c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224250:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80224254:	66 89 45 cc          	mov    %ax,-0x34(%rbp)
    Desc[4]=((rme_ptr_t)GDT_Table)>>48;
ffffffff80224258:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022425c:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80224260:	66 89 45 ce          	mov    %ax,-0x32(%rbp)
    __RME_X64_GDT_Load((rme_ptr_t*)Desc);
ffffffff80224264:	48 8d 45 c6          	lea    -0x3a(%rbp),%rax
ffffffff80224268:	48 89 c7             	mov    %rax,%rdi
ffffffff8022426b:	e8 05 76 fe ff       	call   ffffffff8020b875 <__RME_X64_GDT_Load>
    /* Set the RSP to TSS */
    ((rme_u32_t*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80224270:	48 8b 05 21 e0 00 00 	mov    0xe021(%rip),%rax        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80224277:	89 c6                	mov    %eax,%esi
ffffffff80224279:	48 8b 05 30 e0 00 00 	mov    0xe030(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80224280:	83 c0 01             	add    $0x1,%eax
ffffffff80224283:	c1 e0 14             	shl    $0x14,%eax
ffffffff80224286:	89 c2                	mov    %eax,%edx
ffffffff80224288:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022428c:	48 83 c0 04          	add    $0x4,%rax
ffffffff80224290:	48 89 c1             	mov    %rax,%rcx
ffffffff80224293:	8d 04 16             	lea    (%rsi,%rdx,1),%eax
ffffffff80224296:	89 01                	mov    %eax,(%rcx)
    ((rme_u32_t*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80224298:	48 8b 05 f9 df 00 00 	mov    0xdff9(%rip),%rax        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff8022429f:	48 8b 15 0a e0 00 00 	mov    0xe00a(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff802242a6:	48 83 c2 01          	add    $0x1,%rdx
ffffffff802242aa:	48 c1 e2 14          	shl    $0x14,%rdx
ffffffff802242ae:	48 01 d0             	add    %rdx,%rax
ffffffff802242b1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802242b5:	48 89 c2             	mov    %rax,%rdx
ffffffff802242b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802242bc:	48 83 c0 08          	add    $0x8,%rax
ffffffff802242c0:	89 10                	mov    %edx,(%rax)
    /* IO Map Base = End of TSS (What's this?) */
    ((rme_u32_t*)TSS_Table)[16]=0x00680000;
ffffffff802242c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802242c6:	48 83 c0 40          	add    $0x40,%rax
ffffffff802242ca:	c7 00 00 00 68 00    	movl   $0x680000,(%rax)
    __RME_X64_TSS_Load(6*sizeof(rme_ptr_t));
ffffffff802242d0:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff802242d5:	e8 a3 75 fe ff       	call   ffffffff8020b87d <__RME_X64_TSS_Load>

    /* Initialize the RME per-cpu data here */
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff802242da:	48 8b 05 6f dd 00 00 	mov    0xdd6f(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff802242e1:	48 8b 15 c8 df 00 00 	mov    0xdfc8(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff802242e8:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff802242ec:	48 01 d0             	add    %rdx,%rax
    		                          RME_POW2(RME_PGT_SIZE_4K)+
ffffffff802242ef:	48 05 00 14 00 00    	add    $0x1400,%rax
    CPU_Local=(struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt)+
ffffffff802242f5:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
									  RME_POW2(RME_PGT_SIZE_1K));
    _RME_CPU_Local_Init(CPU_Local,RME_X64_CPU_Cnt);
ffffffff802242f9:	48 8b 15 b0 df 00 00 	mov    0xdfb0(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80224300:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224304:	48 89 d6             	mov    %rdx,%rsi
ffffffff80224307:	48 89 c7             	mov    %rax,%rdi
ffffffff8022430a:	e8 9c e9 fe ff       	call   ffffffff80212cab <_RME_CPU_Local_Init>

    /* Initialize x64 specific CPU-local data structure */
    Temp=(struct RME_X64_Temp*)(RME_X64_CPU_LOCAL_BASE(RME_X64_CPU_Cnt+1)-sizeof(struct RME_X64_Temp));
ffffffff8022430f:	48 8b 05 3a dd 00 00 	mov    0xdd3a(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff80224316:	48 8b 15 93 df 00 00 	mov    0xdf93(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff8022431d:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80224321:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80224325:	48 01 d0             	add    %rdx,%rax
ffffffff80224328:	48 83 e8 18          	sub    $0x18,%rax
ffffffff8022432c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    Temp->CPU_Local_Addr=(rme_ptr_t)CPU_Local;
ffffffff80224330:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80224334:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80224338:	48 89 10             	mov    %rdx,(%rax)
    Temp->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff8022433b:	48 8b 05 56 df 00 00 	mov    0xdf56(%rip),%rax        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80224342:	48 8b 15 67 df 00 00 	mov    0xdf67(%rip),%rdx        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80224349:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8022434d:	48 c1 e2 14          	shl    $0x14,%rdx
ffffffff80224351:	48 01 c2             	add    %rax,%rdx
ffffffff80224354:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80224358:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Temp->Temp_User_SP=0;
ffffffff8022435c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80224360:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80224367:	00 

    /* Set the base of GS to this memory */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff80224368:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022436c:	48 89 c6             	mov    %rax,%rsi
ffffffff8022436f:	b8 02 01 00 c0       	mov    $0xc0000102,%eax
ffffffff80224374:	48 89 c7             	mov    %rax,%rdi
ffffffff80224377:	e8 ae 74 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (rme_ptr_t)IDT_Table);
ffffffff8022437c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224380:	48 89 c6             	mov    %rax,%rsi
ffffffff80224383:	b8 01 01 00 c0       	mov    $0xc0000101,%eax
ffffffff80224388:	48 89 c7             	mov    %rax,%rdi
ffffffff8022438b:	e8 9a 74 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Enable SYSCALL/SYSRET */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff80224390:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
ffffffff80224395:	48 89 c7             	mov    %rax,%rdi
ffffffff80224398:	e8 79 74 fe ff       	call   ffffffff8020b816 <__RME_X64_Read_MSR>
ffffffff8022439d:	48 83 c8 01          	or     $0x1,%rax
ffffffff802243a1:	48 89 c6             	mov    %rax,%rsi
ffffffff802243a4:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
ffffffff802243a9:	48 89 c7             	mov    %rax,%rdi
ffffffff802243ac:	e8 79 74 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Set up SYSCALL/SYSRET parameters */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (rme_ptr_t)SVC_Handler);
ffffffff802243b1:	48 c7 c0 c2 c6 20 80 	mov    $0xffffffff8020c6c2,%rax
ffffffff802243b8:	48 89 c6             	mov    %rax,%rsi
ffffffff802243bb:	b8 82 00 00 c0       	mov    $0xc0000082,%eax
ffffffff802243c0:	48 89 c7             	mov    %rax,%rdi
ffffffff802243c3:	e8 62 74 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff802243c8:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff802243cf:	b8 84 00 00 c0       	mov    $0xc0000084,%eax
ffffffff802243d4:	48 89 c7             	mov    %rax,%rdi
ffffffff802243d7:	e8 4e 74 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
    /* The SYSRET, when returning to user mode in 64-bit, will load the SS from +8, and CS from +16.
     * The original place for CS is reserved for 32-bit usages and is thus not usable by 64-bit */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((rme_ptr_t)RME_X64_SEG_EMPTY)<<48)|(((rme_ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff802243dc:	48 b8 00 00 00 00 08 	movabs $0x1b000800000000,%rax
ffffffff802243e3:	00 1b 00 
ffffffff802243e6:	48 89 c6             	mov    %rax,%rsi
ffffffff802243e9:	b8 81 00 00 c0       	mov    $0xc0000081,%eax
ffffffff802243ee:	48 89 c7             	mov    %rax,%rdi
ffffffff802243f1:	e8 34 74 fe ff       	call   ffffffff8020b82a <__RME_X64_Write_MSR>
}
ffffffff802243f6:	90                   	nop
ffffffff802243f7:	c9                   	leave
ffffffff802243f8:	c3                   	ret

ffffffff802243f9 <__RME_X64_CPU_Local_Get_By_CPUID>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
struct RME_CPU_Local* __RME_X64_CPU_Local_Get_By_CPUID(rme_ptr_t CPUID)
{
ffffffff802243f9:	f3 0f 1e fa          	endbr64
ffffffff802243fd:	55                   	push   %rbp
ffffffff802243fe:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224401:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80224405:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return (struct RME_CPU_Local*)(RME_X64_CPU_LOCAL_BASE(CPUID)+
ffffffff80224409:	48 8b 05 40 dc 00 00 	mov    0xdc40(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff80224410:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80224414:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff80224418:	48 01 d0             	add    %rdx,%rax
			                       RME_POW2(RME_PGT_SIZE_4K)+
ffffffff8022441b:	48 05 00 14 00 00    	add    $0x1400,%rax
								   RME_POW2(RME_PGT_SIZE_1K));
}
ffffffff80224421:	c9                   	leave
ffffffff80224422:	c3                   	ret

ffffffff80224423 <__RME_X64_LAPIC_Ack>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Ack(void)
{
ffffffff80224423:	f3 0f 1e fa          	endbr64
ffffffff80224427:	55                   	push   %rbp
ffffffff80224428:	48 89 e5             	mov    %rsp,%rbp
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff8022442b:	48 8b 05 ee ee 00 00 	mov    0xeeee(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224432:	48 ba b0 00 00 00 00 	movabs $0xffff8000000000b0,%rdx
ffffffff80224439:	80 ff ff 
ffffffff8022443c:	48 01 d0             	add    %rdx,%rax
ffffffff8022443f:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
ffffffff80224445:	90                   	nop
ffffffff80224446:	5d                   	pop    %rbp
ffffffff80224447:	c3                   	ret

ffffffff80224448 <__RME_X64_LAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
ffffffff80224448:	f3 0f 1e fa          	endbr64
ffffffff8022444c:	55                   	push   %rbp
ffffffff8022444d:	48 89 e5             	mov    %rsp,%rbp
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff80224450:	48 8b 05 c9 ee 00 00 	mov    0xeec9(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff80224457:	48 8b 05 c2 ee 00 00 	mov    0xeec2(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff8022445e:	48 ba f0 00 00 00 00 	movabs $0xffff8000000000f0,%rdx
ffffffff80224465:	80 ff ff 
ffffffff80224468:	48 01 d0             	add    %rdx,%rax
ffffffff8022446b:	c7 00 80 01 00 00    	movl   $0x180,(%rax)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff80224471:	48 8b 05 a8 ee 00 00 	mov    0xeea8(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224478:	48 ba 50 03 00 00 00 	movabs $0xffff800000000350,%rdx
ffffffff8022447f:	80 ff ff 
ffffffff80224482:	48 01 d0             	add    %rdx,%rax
ffffffff80224485:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff8022448b:	48 8b 05 8e ee 00 00 	mov    0xee8e(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224492:	48 ba 60 03 00 00 00 	movabs $0xffff800000000360,%rdx
ffffffff80224499:	80 ff ff 
ffffffff8022449c:	48 01 d0             	add    %rdx,%rax
ffffffff8022449f:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff802244a5:	48 8b 05 74 ee 00 00 	mov    0xee74(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802244ac:	48 ba 30 00 00 00 00 	movabs $0xffff800000000030,%rdx
ffffffff802244b3:	80 ff ff 
ffffffff802244b6:	48 01 d0             	add    %rdx,%rax
ffffffff802244b9:	8b 00                	mov    (%rax),%eax
ffffffff802244bb:	25 00 00 fc 00       	and    $0xfc0000,%eax
ffffffff802244c0:	85 c0                	test   %eax,%eax
ffffffff802244c2:	74 1a                	je     ffffffff802244de <__RME_X64_LAPIC_Init+0x96>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff802244c4:	48 8b 05 55 ee 00 00 	mov    0xee55(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802244cb:	48 ba 40 03 00 00 00 	movabs $0xffff800000000340,%rdx
ffffffff802244d2:	80 ff ff 
ffffffff802244d5:	48 01 d0             	add    %rdx,%rax
ffffffff802244d8:	c7 00 00 00 01 00    	movl   $0x10000,(%rax)

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff802244de:	48 8b 05 3b ee 00 00 	mov    0xee3b(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802244e5:	48 ba 70 03 00 00 00 	movabs $0xffff800000000370,%rdx
ffffffff802244ec:	80 ff ff 
ffffffff802244ef:	48 01 d0             	add    %rdx,%rax
ffffffff802244f2:	c7 00 81 00 00 00    	movl   $0x81,(%rax)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff802244f8:	48 8b 05 21 ee 00 00 	mov    0xee21(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802244ff:	48 ba 80 02 00 00 00 	movabs $0xffff800000000280,%rdx
ffffffff80224506:	80 ff ff 
ffffffff80224509:	48 01 d0             	add    %rdx,%rax
ffffffff8022450c:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff80224512:	48 8b 05 07 ee 00 00 	mov    0xee07(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224519:	48 ba 80 02 00 00 00 	movabs $0xffff800000000280,%rdx
ffffffff80224520:	80 ff ff 
ffffffff80224523:	48 01 d0             	add    %rdx,%rax
ffffffff80224526:	c7 00 00 00 00 00    	movl   $0x0,(%rax)

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();
ffffffff8022452c:	e8 f2 fe ff ff       	call   ffffffff80224423 <__RME_X64_LAPIC_Ack>

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff80224531:	48 8b 05 e8 ed 00 00 	mov    0xede8(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224538:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff8022453f:	80 ff ff 
ffffffff80224542:	48 01 d0             	add    %rdx,%rax
ffffffff80224545:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff8022454b:	48 8b 05 ce ed 00 00 	mov    0xedce(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224552:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224559:	80 ff ff 
ffffffff8022455c:	48 01 d0             	add    %rdx,%rax
ffffffff8022455f:	c7 00 00 85 08 00    	movl   $0x88500,(%rax)
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff80224565:	90                   	nop
ffffffff80224566:	48 8b 05 b3 ed 00 00 	mov    0xedb3(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff8022456d:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224574:	80 ff ff 
ffffffff80224577:	48 01 d0             	add    %rdx,%rax
ffffffff8022457a:	8b 00                	mov    (%rax),%eax
ffffffff8022457c:	25 00 10 00 00       	and    $0x1000,%eax
ffffffff80224581:	85 c0                	test   %eax,%eax
ffffffff80224583:	75 e1                	jne    ffffffff80224566 <__RME_X64_LAPIC_Init+0x11e>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff80224585:	48 8b 05 94 ed 00 00 	mov    0xed94(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff8022458c:	48 ba 80 00 00 00 00 	movabs $0xffff800000000080,%rdx
ffffffff80224593:	80 ff ff 
ffffffff80224596:	48 01 d0             	add    %rdx,%rax
ffffffff80224599:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
ffffffff8022459f:	90                   	nop
ffffffff802245a0:	5d                   	pop    %rbp
ffffffff802245a1:	c3                   	ret

ffffffff802245a2 <__RME_X64_PIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_PIC_Init(void)
{
ffffffff802245a2:	f3 0f 1e fa          	endbr64
ffffffff802245a6:	55                   	push   %rbp
ffffffff802245a7:	48 89 e5             	mov    %rsp,%rbp
    /* Mask all interrupts */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff802245aa:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff802245af:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802245b4:	e8 51 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff802245b9:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff802245be:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802245c3:	e8 42 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Set up master (8259A-1) */
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff802245c8:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff802245cd:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff802245d2:	e8 33 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff802245d7:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff802245dc:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802245e1:	e8 24 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff802245e6:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff802245eb:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802245f0:	e8 15 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff802245f5:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff802245fa:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802245ff:	e8 06 72 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Set up slave (8259A-2) */
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff80224604:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff80224609:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff8022460e:	e8 f7 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff80224613:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff80224618:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8022461d:	e8 e8 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff80224622:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80224627:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8022462c:	e8 d9 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff80224631:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80224636:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8022463b:	e8 ca 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff80224640:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80224645:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8022464a:	e8 bb 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff8022464f:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80224654:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80224659:	e8 ac 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff8022465e:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80224663:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80224668:	e8 9d 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff8022466d:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80224672:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80224677:	e8 8e 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>

    /* Mask all interrupts - we do not use the PIC at all */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff8022467c:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80224681:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80224686:	e8 7f 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff8022468b:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80224690:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80224695:	e8 70 71 fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff8022469a:	90                   	nop
ffffffff8022469b:	5d                   	pop    %rbp
ffffffff8022469c:	c3                   	ret

ffffffff8022469d <__RME_X64_IOAPIC_Int_Enable>:
              rme_ptr_t CPUID - The CPU to enable this IRQ on.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Int_Enable(rme_ptr_t IRQ, rme_ptr_t CPUID)
{
ffffffff8022469d:	f3 0f 1e fa          	endbr64
ffffffff802246a1:	55                   	push   %rbp
ffffffff802246a2:	48 89 e5             	mov    %rsp,%rbp
ffffffff802246a5:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802246a9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802246ad:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_INT_USER(IRQ));
ffffffff802246b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802246b5:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff802246b8:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802246bf:	80 ff ff 
ffffffff802246c2:	83 c2 10             	add    $0x10,%edx
ffffffff802246c5:	89 10                	mov    %edx,(%rax)
ffffffff802246c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802246cb:	89 c2                	mov    %eax,%edx
ffffffff802246cd:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802246d4:	80 ff ff 
ffffffff802246d7:	83 c2 20             	add    $0x20,%edx
ffffffff802246da:	89 50 10             	mov    %edx,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,CPUID<<24);
ffffffff802246dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802246e1:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff802246e4:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802246eb:	80 ff ff 
ffffffff802246ee:	83 c2 11             	add    $0x11,%edx
ffffffff802246f1:	89 10                	mov    %edx,(%rax)
ffffffff802246f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802246f7:	89 c2                	mov    %eax,%edx
ffffffff802246f9:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224700:	80 ff ff 
ffffffff80224703:	c1 e2 18             	shl    $0x18,%edx
ffffffff80224706:	89 50 10             	mov    %edx,0x10(%rax)
}
ffffffff80224709:	90                   	nop
ffffffff8022470a:	c9                   	leave
ffffffff8022470b:	c3                   	ret

ffffffff8022470c <__RME_X64_IOAPIC_Int_Disable>:
Input       : rme_ptr_t IRQ - The user vector to enable.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Int_Disable(rme_ptr_t IRQ)
{
ffffffff8022470c:	f3 0f 1e fa          	endbr64
ffffffff80224710:	55                   	push   %rbp
ffffffff80224711:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224714:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80224718:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_IOAPIC_INT_DISABLED|RME_X64_INT_USER(IRQ));
ffffffff8022471c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224720:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff80224723:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022472a:	80 ff ff 
ffffffff8022472d:	83 c2 10             	add    $0x10,%edx
ffffffff80224730:	89 10                	mov    %edx,(%rax)
ffffffff80224732:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224736:	8d 50 20             	lea    0x20(%rax),%edx
ffffffff80224739:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224740:	80 ff ff 
ffffffff80224743:	81 ca 00 00 01 00    	or     $0x10000,%edx
ffffffff80224749:	89 50 10             	mov    %edx,0x10(%rax)
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff8022474c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224750:	8d 14 00             	lea    (%rax,%rax,1),%edx
ffffffff80224753:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff8022475a:	80 ff ff 
ffffffff8022475d:	83 c2 11             	add    $0x11,%edx
ffffffff80224760:	89 10                	mov    %edx,(%rax)
ffffffff80224762:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224769:	80 ff ff 
ffffffff8022476c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
}
ffffffff80224773:	90                   	nop
ffffffff80224774:	c9                   	leave
ffffffff80224775:	c3                   	ret

ffffffff80224776 <__RME_X64_IOAPIC_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_IOAPIC_Init(void)
{
ffffffff80224776:	f3 0f 1e fa          	endbr64
ffffffff8022477a:	55                   	push   %rbp
ffffffff8022477b:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022477e:	48 83 ec 20          	sub    $0x20,%rsp
    rme_ptr_t Max_Int;
    rme_ptr_t IOAPIC_ID;
    rme_cnt_t Count;
    /* IOAPIC initialization */
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff80224782:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224789:	80 ff ff 
ffffffff8022478c:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
ffffffff80224792:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff80224799:	80 ff ff 
ffffffff8022479c:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8022479f:	89 c0                	mov    %eax,%eax
ffffffff802247a1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff802247a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802247a9:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff802247ad:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff802247b2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    RME_DBG_S("\n\rMax interupt number is: ");
ffffffff802247b6:	48 c7 c7 0e 98 22 80 	mov    $0xffffffff8022980e,%rdi
ffffffff802247bd:	e8 49 82 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(Max_Int);
ffffffff802247c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802247c6:	48 89 c7             	mov    %rax,%rdi
ffffffff802247c9:	e8 43 80 fe ff       	call   ffffffff8020c811 <RME_Int_Print>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_ID,IOAPIC_ID);
ffffffff802247ce:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802247d5:	80 ff ff 
ffffffff802247d8:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
ffffffff802247de:	48 b8 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rax
ffffffff802247e5:	80 ff ff 
ffffffff802247e8:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff802247eb:	89 c0                	mov    %eax,%eax
ffffffff802247ed:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    IOAPIC_ID>>=24;
ffffffff802247f1:	48 c1 6d e8 18       	shrq   $0x18,-0x18(%rbp)
    /* This is not necessarily true when we have >1 IOAPICs */
    /* RME_ASSERT(IOAPIC_ID==RME_X64_IOAPIC_Info[0].IOAPIC_ID); */
    RME_DBG_S("\n\rIOAPIC ID is: ");
ffffffff802247f6:	48 c7 c7 29 98 22 80 	mov    $0xffffffff80229829,%rdi
ffffffff802247fd:	e8 09 82 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(IOAPIC_ID);
ffffffff80224802:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224806:	48 89 c7             	mov    %rax,%rdi
ffffffff80224809:	e8 03 80 fe ff       	call   ffffffff8020c811 <RME_Int_Print>

    /* Disable all interrupts */
    for(Count=0;Count<=Max_Int;Count++)
ffffffff8022480e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224815:	00 
ffffffff80224816:	eb 11                	jmp    ffffffff80224829 <__RME_X64_IOAPIC_Init+0xb3>
        __RME_X64_IOAPIC_Int_Disable(Count);
ffffffff80224818:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022481c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022481f:	e8 e8 fe ff ff       	call   ffffffff8022470c <__RME_X64_IOAPIC_Int_Disable>
    for(Count=0;Count<=Max_Int;Count++)
ffffffff80224824:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224829:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022482d:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff80224831:	73 e5                	jae    ffffffff80224818 <__RME_X64_IOAPIC_Init+0xa2>
}
ffffffff80224833:	90                   	nop
ffffffff80224834:	90                   	nop
ffffffff80224835:	c9                   	leave
ffffffff80224836:	c3                   	ret

ffffffff80224837 <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff80224837:	f3 0f 1e fa          	endbr64
ffffffff8022483b:	55                   	push   %rbp
ffffffff8022483c:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022483f:	48 83 ec 20          	sub    $0x20,%rsp
    rme_u8_t* Code;
    rme_cnt_t Count;
    rme_u16_t* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(rme_u8_t*)RME_X64_PA2VA(0x7000);
ffffffff80224843:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff8022484a:	80 ff ff 
ffffffff8022484d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80224851:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224858:	00 
ffffffff80224859:	eb 1f                	jmp    ffffffff8022487a <__RME_X64_SMP_Init+0x43>
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff8022485b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022485f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224863:	48 01 c2             	add    %rax,%rdx
ffffffff80224866:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022486a:	48 05 40 96 22 80    	add    $0xffffffff80229640,%rax
ffffffff80224870:	0f b6 00             	movzbl (%rax),%eax
ffffffff80224873:	88 02                	mov    %al,(%rdx)
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80224875:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff8022487a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022487e:	48 83 f8 61          	cmp    $0x61,%rax
ffffffff80224882:	76 d7                	jbe    ffffffff8022485b <__RME_X64_SMP_Init+0x24>

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
ffffffff80224884:	48 c7 05 21 da 00 00 	movq   $0x1,0xda21(%rip)        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff8022488b:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff8022488f:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff80224896:	00 
ffffffff80224897:	e9 d1 01 00 00       	jmp    ffffffff80224a6d <__RME_X64_SMP_Init+0x236>
    {
        RME_DBG_S("\n\rBooting CPU ");
ffffffff8022489c:	48 c7 c7 3a 98 22 80 	mov    $0xffffffff8022983a,%rdi
ffffffff802248a3:	e8 63 81 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_DBG_I(Count);
ffffffff802248a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802248ac:	48 89 c7             	mov    %rax,%rdi
ffffffff802248af:	e8 5d 7f fe ff       	call   ffffffff8020c811 <RME_Int_Print>
        /* Temporary stack */
        *(rme_u32_t*)(Code-4)=0x8000;
ffffffff802248b4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802248b8:	48 83 e8 04          	sub    $0x4,%rax
ffffffff802248bc:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(rme_u32_t*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff802248c2:	48 c7 c0 89 80 10 80 	mov    $0xffffffff80108089,%rax
ffffffff802248c9:	89 c2                	mov    %eax,%edx
ffffffff802248cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802248cf:	48 83 e8 08          	sub    $0x8,%rax
ffffffff802248d3:	81 c2 00 00 00 80    	add    $0x80000000,%edx
ffffffff802248d9:	89 10                	mov    %edx,(%rax)
        *(rme_ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff802248db:	48 8b 15 b6 d9 00 00 	mov    0xd9b6(%rip),%rdx        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff802248e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802248e6:	48 83 c0 01          	add    $0x1,%rax
ffffffff802248ea:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff802248ee:	48 89 c1             	mov    %rax,%rcx
ffffffff802248f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802248f5:	48 83 e8 10          	sub    $0x10,%rax
ffffffff802248f9:	48 01 ca             	add    %rcx,%rdx
ffffffff802248fc:	48 89 10             	mov    %rdx,(%rax)

        /* Initialize CMOS shutdown code to 0AH */
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff802248ff:	be 0f 00 00 00       	mov    $0xf,%esi
ffffffff80224904:	bf 70 00 00 00       	mov    $0x70,%edi
ffffffff80224909:	e8 fc 6e fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff8022490e:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80224913:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff80224918:	e8 ed 6e fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
        /* Warm reset vector point to AP code */
        Warm_Reset=(rme_u16_t*)RME_X64_PA2VA((0x40<<4|0x67));
ffffffff8022491d:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff80224924:	80 ff ff 
ffffffff80224927:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
        Warm_Reset[0]=0;
ffffffff8022492b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022492f:	66 c7 00 00 00       	movw   $0x0,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff80224934:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80224938:	48 83 c0 02          	add    $0x2,%rax
ffffffff8022493c:	66 c7 00 00 07       	movw   $0x700,(%rax)

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80224941:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224945:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80224949:	48 05 c0 22 23 80    	add    $0xffffffff802322c0,%rax
ffffffff8022494f:	48 8b 00             	mov    (%rax),%rax
ffffffff80224952:	89 c1                	mov    %eax,%ecx
ffffffff80224954:	48 8b 05 c5 e9 00 00 	mov    0xe9c5(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff8022495b:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224962:	80 ff ff 
ffffffff80224965:	48 01 d0             	add    %rdx,%rax
ffffffff80224968:	48 89 c2             	mov    %rax,%rdx
ffffffff8022496b:	89 c8                	mov    %ecx,%eax
ffffffff8022496d:	c1 e0 18             	shl    $0x18,%eax
ffffffff80224970:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80224972:	48 8b 05 a7 e9 00 00 	mov    0xe9a7(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224979:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224980:	80 ff ff 
ffffffff80224983:	48 01 d0             	add    %rdx,%rax
ffffffff80224986:	c7 00 00 c5 00 00    	movl   $0xc500,(%rax)
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff8022498c:	48 8b 05 8d e9 00 00 	mov    0xe98d(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224993:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff8022499a:	80 ff ff 
ffffffff8022499d:	48 01 d0             	add    %rdx,%rax
ffffffff802249a0:	c7 00 00 85 00 00    	movl   $0x8500,(%rax)
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802249a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802249aa:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802249ae:	48 05 c0 22 23 80    	add    $0xffffffff802322c0,%rax
ffffffff802249b4:	48 8b 00             	mov    (%rax),%rax
ffffffff802249b7:	89 c1                	mov    %eax,%ecx
ffffffff802249b9:	48 8b 05 60 e9 00 00 	mov    0xe960(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802249c0:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff802249c7:	80 ff ff 
ffffffff802249ca:	48 01 d0             	add    %rdx,%rax
ffffffff802249cd:	48 89 c2             	mov    %rax,%rdx
ffffffff802249d0:	89 c8                	mov    %ecx,%eax
ffffffff802249d2:	c1 e0 18             	shl    $0x18,%eax
ffffffff802249d5:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802249d7:	48 8b 05 42 e9 00 00 	mov    0xe942(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff802249de:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff802249e5:	80 ff ff 
ffffffff802249e8:	48 01 d0             	add    %rdx,%rax
ffffffff802249eb:	c7 00 07 06 00 00    	movl   $0x607,(%rax)
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802249f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802249f5:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802249f9:	48 05 c0 22 23 80    	add    $0xffffffff802322c0,%rax
ffffffff802249ff:	48 8b 00             	mov    (%rax),%rax
ffffffff80224a02:	89 c1                	mov    %eax,%ecx
ffffffff80224a04:	48 8b 05 15 e9 00 00 	mov    0xe915(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224a0b:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224a12:	80 ff ff 
ffffffff80224a15:	48 01 d0             	add    %rdx,%rax
ffffffff80224a18:	48 89 c2             	mov    %rax,%rdx
ffffffff80224a1b:	89 c8                	mov    %ecx,%eax
ffffffff80224a1d:	c1 e0 18             	shl    $0x18,%eax
ffffffff80224a20:	89 02                	mov    %eax,(%rdx)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff80224a22:	48 8b 05 f7 e8 00 00 	mov    0xe8f7(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224a29:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224a30:	80 ff ff 
ffffffff80224a33:	48 01 d0             	add    %rdx,%rax
ffffffff80224a36:	c7 00 07 06 00 00    	movl   $0x607,(%rax)
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff80224a3c:	90                   	nop
ffffffff80224a3d:	48 8b 05 6c d8 00 00 	mov    0xd86c(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80224a44:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80224a48:	48 05 c8 22 23 80    	add    $0xffffffff802322c8,%rax
ffffffff80224a4e:	48 8b 00             	mov    (%rax),%rax
ffffffff80224a51:	48 85 c0             	test   %rax,%rax
ffffffff80224a54:	74 e7                	je     ffffffff80224a3d <__RME_X64_SMP_Init+0x206>
        RME_X64_CPU_Cnt++;
ffffffff80224a56:	48 8b 05 53 d8 00 00 	mov    0xd853(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80224a5d:	48 83 c0 01          	add    $0x1,%rax
ffffffff80224a61:	48 89 05 48 d8 00 00 	mov    %rax,0xd848(%rip)        # ffffffff802322b0 <RME_X64_CPU_Cnt>
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff80224a68:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224a6d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80224a71:	48 8b 05 30 d8 00 00 	mov    0xd830(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80224a78:	48 39 c2             	cmp    %rax,%rdx
ffffffff80224a7b:	0f 82 1b fe ff ff    	jb     ffffffff8022489c <__RME_X64_SMP_Init+0x65>
    }
}
ffffffff80224a81:	90                   	nop
ffffffff80224a82:	90                   	nop
ffffffff80224a83:	c9                   	leave
ffffffff80224a84:	c3                   	ret

ffffffff80224a85 <__RME_X64_SMP_Tick>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
ffffffff80224a85:	f3 0f 1e fa          	endbr64
ffffffff80224a89:	55                   	push   %rbp
ffffffff80224a8a:	48 89 e5             	mov    %rsp,%rbp
    /* Is this a SMP? */
    if(RME_X64_Num_CPU>1)
ffffffff80224a8d:	48 8b 05 14 d8 00 00 	mov    0xd814(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80224a94:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80224a98:	76 34                	jbe    ffffffff80224ace <__RME_X64_SMP_Tick+0x49>
    {
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff80224a9a:	48 8b 05 7f e8 00 00 	mov    0xe87f(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224aa1:	48 ba 10 03 00 00 00 	movabs $0xffff800000000310,%rdx
ffffffff80224aa8:	80 ff ff 
ffffffff80224aab:	48 01 d0             	add    %rdx,%rax
ffffffff80224aae:	c7 00 00 00 00 ff    	movl   $0xff000000,(%rax)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff80224ab4:	48 8b 05 65 e8 00 00 	mov    0xe865(%rip),%rax        # ffffffff80233320 <RME_X64_LAPIC_Addr>
ffffffff80224abb:	48 ba 00 03 00 00 00 	movabs $0xffff800000000300,%rdx
ffffffff80224ac2:	80 ff ff 
ffffffff80224ac5:	48 01 d0             	add    %rdx,%rax
ffffffff80224ac8:	c7 00 83 00 0c 00    	movl   $0xc0083,(%rax)
                                                 RME_X64_LAPIC_ICRLO_FIXED|
                                                 RME_X64_INT_SMP_SYSTICK);
    }
}
ffffffff80224ace:	90                   	nop
ffffffff80224acf:	5d                   	pop    %rbp
ffffffff80224ad0:	c3                   	ret

ffffffff80224ad1 <__RME_X64_Timer_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_Timer_Init(void)
{
ffffffff80224ad1:	f3 0f 1e fa          	endbr64
ffffffff80224ad5:	55                   	push   %rbp
ffffffff80224ad6:	48 89 e5             	mov    %rsp,%rbp
    /* For timer interrupts, they will always be handled by core 1, and all the other
     * cores should receive a IPI for that, so their scheduler can look after their
     * threads. We are using square wave mode. */
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff80224ad9:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff80224ade:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff80224ae3:	e8 22 6d fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff80224ae8:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff80224aed:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80224af2:	e8 13 6d fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff80224af7:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80224afc:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80224b01:	e8 04 6d fe ff       	call   ffffffff8020b80a <__RME_X64_Out>
}
ffffffff80224b06:	90                   	nop
ffffffff80224b07:	5d                   	pop    %rbp
ffffffff80224b08:	c3                   	ret

ffffffff80224b09 <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Lowlvl_Init(void)
{
ffffffff80224b09:	f3 0f 1e fa          	endbr64
ffffffff80224b0d:	55                   	push   %rbp
ffffffff80224b0e:	48 89 e5             	mov    %rsp,%rbp
    /* We are here now ! */
    __RME_X64_UART_Init();
ffffffff80224b11:	e8 5e 67 ff ff       	call   ffffffff8021b274 <__RME_X64_UART_Init>
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
ffffffff80224b16:	e8 a6 6d ff ff       	call   ffffffff8021b8c1 <__RME_X64_ACPI_Init>
    /* Detect CPU features */
    __RME_X64_Feature_Get();
ffffffff80224b1b:	e8 b0 6e ff ff       	call   ffffffff8021b9d0 <__RME_X64_Feature_Get>
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80224b20:	48 8b 05 01 d5 00 00 	mov    0xd501(%rip),%rax        # ffffffff80232028 <RME_X64_MBInfo>
ffffffff80224b27:	8b 40 2c             	mov    0x2c(%rax),%eax
ffffffff80224b2a:	89 c2                	mov    %eax,%edx
ffffffff80224b2c:	48 8b 05 f5 d4 00 00 	mov    0xd4f5(%rip),%rax        # ffffffff80232028 <RME_X64_MBInfo>
ffffffff80224b33:	8b 40 30             	mov    0x30(%rax),%eax
ffffffff80224b36:	89 c0                	mov    %eax,%eax
ffffffff80224b38:	48 89 d6             	mov    %rdx,%rsi
ffffffff80224b3b:	48 89 c7             	mov    %rax,%rdi
ffffffff80224b3e:	e8 06 70 ff ff       	call   ffffffff8021bb49 <__RME_X64_Mem_Init>

    return 0;
ffffffff80224b43:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80224b48:	5d                   	pop    %rbp
ffffffff80224b49:	c3                   	ret

ffffffff80224b4a <__RME_Pgt_Kom_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Kom_Init(void)
{
ffffffff80224b4a:	f3 0f 1e fa          	endbr64
ffffffff80224b4e:	55                   	push   %rbp
ffffffff80224b4f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80224b52:	48 83 ec 30          	sub    $0x30,%rsp
    rme_cnt_t PDE_Cnt;
    rme_cnt_t Addr_Cnt;
    struct __RME_X64_Mem* Mem;

    /* Now initialize the kernel object allocation table */
    _RME_Kot_Init(RME_X64_Layout.Kot_Size/sizeof(rme_ptr_t));
ffffffff80224b56:	48 8b 05 eb d4 00 00 	mov    0xd4eb(%rip),%rax        # ffffffff80232048 <RME_X64_Layout+0x8>
ffffffff80224b5d:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80224b61:	48 89 c7             	mov    %rax,%rdi
ffffffff80224b64:	e8 ef d7 fe ff       	call   ffffffff80212358 <_RME_Kot_Init>
    /* Reset PCID counter */
    RME_X64_PCID_Inc=0;
ffffffff80224b69:	48 c7 05 dc eb 00 00 	movq   $0x0,0xebdc(%rip)        # ffffffff80233750 <RME_X64_PCID_Inc>
ffffffff80224b70:	00 00 00 00 

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224b74:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224b7b:	00 
ffffffff80224b7c:	e9 87 00 00 00       	jmp    ffffffff80224c08 <__RME_Pgt_Kom_Init+0xbe>
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|
ffffffff80224b81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224b85:	48 83 c0 01          	add    $0x1,%rax
ffffffff80224b89:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff80224b8d:	48 05 00 90 10 80    	add    $0xffffffff80109000,%rax
ffffffff80224b93:	48 89 c2             	mov    %rax,%rdx
ffffffff80224b96:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff80224b9b:	48 01 c2             	add    %rax,%rdx
ffffffff80224b9e:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80224ba5:	ff 0f 00 
ffffffff80224ba8:	48 21 d0             	and    %rdx,%rax
ffffffff80224bab:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff80224bb1:	48 89 c2             	mov    %rax,%rdx
ffffffff80224bb4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224bb8:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff80224bbe:	48 89 14 c5 00 90 10 	mov    %rdx,-0x7fef7000(,%rax,8)
ffffffff80224bc5:	80 
        		                    RME_X64_MMU_KERN_PML4;

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80224bc6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80224bcd:	00 
ffffffff80224bce:	eb 29                	jmp    ffffffff80224bf9 <__RME_Pgt_Kom_Init+0xaf>
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff80224bd0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80224bd4:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80224bd8:	48 89 c2             	mov    %rax,%rdx
ffffffff80224bdb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80224bdf:	48 01 d0             	add    %rdx,%rax
ffffffff80224be2:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80224be8:	48 c7 04 c5 00 90 10 	movq   $0x102,-0x7fef7000(,%rax,8)
ffffffff80224bef:	80 02 01 00 00 
        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80224bf4:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80224bf9:	48 81 7d f0 ff 01 00 	cmpq   $0x1ff,-0x10(%rbp)
ffffffff80224c00:	00 
ffffffff80224c01:	7e cd                	jle    ffffffff80224bd0 <__RME_Pgt_Kom_Init+0x86>
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80224c03:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80224c08:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff80224c0f:	00 
ffffffff80224c10:	0f 8e 6b ff ff ff    	jle    ffffffff80224b81 <__RME_Pgt_Kom_Init+0x37>
    }

    /* Map in the first 4GB as linear mappings as always, 4 super pages, including the device hole.
     * We need to detect whether the 1GB page is supported. If not, we just map the initial tables
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff80224c16:	48 8b 05 6b e9 00 00 	mov    0xe96b(%rip),%rax        # ffffffff80233588 <RME_X64_Feature+0x248>
ffffffff80224c1d:	25 00 00 00 04       	and    $0x4000000,%eax
ffffffff80224c22:	48 85 c0             	test   %rax,%rax
ffffffff80224c25:	0f 84 97 00 00 00    	je     ffffffff80224cc2 <__RME_Pgt_Kom_Init+0x178>
    {
        /* Can use 1GB pages */
        RME_DBG_S("\n\rThis CPU have 1GB superpage support");
ffffffff80224c2b:	48 c7 c7 50 98 22 80 	mov    $0xffffffff80229850,%rdi
ffffffff80224c32:	e8 d4 7d fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224c37:	48 8b 05 c2 53 ee ff 	mov    -0x11ac3e(%rip),%rax        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80224c3e:	0c 81                	or     $0x81,%al
ffffffff80224c40:	48 89 05 b9 53 ee ff 	mov    %rax,-0x11ac47(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224c47:	48 8b 05 ba 53 ee ff 	mov    -0x11ac46(%rip),%rax        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80224c4e:	48 0d 81 00 00 40    	or     $0x40000081,%rax
ffffffff80224c54:	48 89 05 ad 53 ee ff 	mov    %rax,-0x11ac53(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224c5b:	48 8b 05 ae 53 ee ff 	mov    -0x11ac52(%rip),%rax        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80224c62:	ba 81 00 00 80       	mov    $0x80000081,%edx
ffffffff80224c67:	48 09 d0             	or     %rdx,%rax
ffffffff80224c6a:	48 89 05 9f 53 ee ff 	mov    %rax,-0x11ac61(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        /* We need to mark the device hole as unbufferable */
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224c71:	48 8b 05 a0 53 ee ff 	mov    -0x11ac60(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224c78:	ba 81 00 00 c0       	mov    $0xc0000081,%edx
ffffffff80224c7d:	48 09 d0             	or     %rdx,%rax
ffffffff80224c80:	48 89 05 91 53 ee ff 	mov    %rax,-0x11ac6f(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff80224c87:	48 8b 05 8a 53 ee ff 	mov    -0x11ac76(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224c8e:	48 83 c8 18          	or     $0x18,%rax
ffffffff80224c92:	48 89 05 7f 53 ee ff 	mov    %rax,-0x11ac81(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224c99:	48 8b 05 50 53 fe ff 	mov    -0x1acb0(%rip),%rax        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80224ca0:	0c 81                	or     $0x81,%al
ffffffff80224ca2:	48 89 05 47 53 fe ff 	mov    %rax,-0x1acb9(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGT_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80224ca9:	48 8b 05 48 53 fe ff 	mov    -0x1acb8(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224cb0:	48 0d 81 00 00 40    	or     $0x40000081,%rax
ffffffff80224cb6:	48 89 05 3b 53 fe ff 	mov    %rax,-0x1acc5(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224cbd:	e9 84 00 00 00       	jmp    ffffffff80224d46 <__RME_Pgt_Kom_Init+0x1fc>
    }
    else
    {
        RME_DBG_S("\n\rThis CPU do not have 1GB superpage support");
ffffffff80224cc2:	48 c7 c7 78 98 22 80 	mov    $0xffffffff80229878,%rdi
ffffffff80224cc9:	e8 3d 7d fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        /* Cannot use 1GB pages, we revert to 2MB pages used during kernel startup */
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff80224cce:	48 8b 05 2b 53 ee ff 	mov    -0x11acd5(%rip),%rax        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80224cd5:	48 0d 01 40 10 00    	or     $0x104001,%rax
ffffffff80224cdb:	48 89 05 1e 53 ee ff 	mov    %rax,-0x11ace2(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
        RME_X64_Kpgt.PDP[0][1]|=0x105000|RME_X64_MMU_P;
ffffffff80224ce2:	48 8b 05 1f 53 ee ff 	mov    -0x11ace1(%rip),%rax        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80224ce9:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80224cef:	48 89 05 12 53 ee ff 	mov    %rax,-0x11acee(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
        RME_X64_Kpgt.PDP[0][2]|=0x106000|RME_X64_MMU_P;
ffffffff80224cf6:	48 8b 05 13 53 ee ff 	mov    -0x11aced(%rip),%rax        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80224cfd:	48 0d 01 60 10 00    	or     $0x106001,%rax
ffffffff80224d03:	48 89 05 06 53 ee ff 	mov    %rax,-0x11acfa(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        RME_X64_Kpgt.PDP[0][3]|=0x107000|RME_X64_MMU_PCD|RME_X64_MMU_PWT|RME_X64_MMU_P;
ffffffff80224d0a:	48 8b 05 07 53 ee ff 	mov    -0x11acf9(%rip),%rax        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80224d11:	48 0d 19 70 10 00    	or     $0x107019,%rax
ffffffff80224d17:	48 89 05 fa 52 ee ff 	mov    %rax,-0x11ad06(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff80224d1e:	48 8b 05 cb 52 fe ff 	mov    -0x1ad35(%rip),%rax        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff80224d25:	48 0d 01 40 10 00    	or     $0x104001,%rax
ffffffff80224d2b:	48 89 05 be 52 fe ff 	mov    %rax,-0x1ad42(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80224d32:	48 8b 05 bf 52 fe ff 	mov    -0x1ad41(%rip),%rax        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80224d39:	48 0d 01 50 10 00    	or     $0x105001,%rax
ffffffff80224d3f:	48 89 05 b2 52 fe ff 	mov    %rax,-0x1ad4e(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff80224d46:	48 8b 05 c3 52 00 00 	mov    0x52c3(%rip),%rax        # ffffffff8022a010 <RME_X64_Phys_Mem>
ffffffff80224d4d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224d51:	eb 26                	jmp    ffffffff80224d79 <__RME_Pgt_Kom_Init+0x22f>
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGT_SIZE_16M))
ffffffff80224d53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d57:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224d5b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d5f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224d63:	48 01 d0             	add    %rdx,%rax
ffffffff80224d66:	48 3d 00 00 00 01    	cmp    $0x1000000,%rax
ffffffff80224d6c:	77 17                	ja     ffffffff80224d85 <__RME_Pgt_Kom_Init+0x23b>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224d6e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224d72:	48 8b 00             	mov    (%rax),%rax
ffffffff80224d75:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224d79:	48 81 7d d8 10 a0 22 	cmpq   $0xffffffff8022a010,-0x28(%rbp)
ffffffff80224d80:	80 
ffffffff80224d81:	75 d0                	jne    ffffffff80224d53 <__RME_Pgt_Kom_Init+0x209>
ffffffff80224d83:	eb 01                	jmp    ffffffff80224d86 <__RME_Pgt_Kom_Init+0x23c>
        else
            break;
ffffffff80224d85:	90                   	nop
    }

    /* The first Kom1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGT_SIZE_16M));
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kom1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff80224d86:	48 8b 15 c3 d2 00 00 	mov    0xd2c3(%rip),%rdx        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff80224d8d:	48 8b 05 c4 d2 00 00 	mov    0xd2c4(%rip),%rax        # ffffffff80232058 <RME_X64_Layout+0x18>
ffffffff80224d94:	48 01 d0             	add    %rdx,%rax
ffffffff80224d97:	48 89 05 da d2 00 00 	mov    %rax,0xd2da(%rip)        # ffffffff80232078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80224d9e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224da2:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80224da6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224daa:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224dae:	48 01 c2             	add    %rax,%rdx
    		                     RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]);
ffffffff80224db1:	48 8b 05 c0 d2 00 00 	mov    0xd2c0(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGT_SIZE_16M)-
ffffffff80224db8:	48 29 c2             	sub    %rax,%rdx
ffffffff80224dbb:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff80224dc2:	7f ff ff 
ffffffff80224dc5:	48 01 d0             	add    %rdx,%rax
ffffffff80224dc8:	48 89 05 a9 d3 00 00 	mov    %rax,0xd3a9(%rip)        # ffffffff80232178 <RME_X64_Layout+0x138>

    /* Add the rest of Kom1 into the array */
    Addr_Cnt=1;
ffffffff80224dcf:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
ffffffff80224dd6:	00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224dd7:	e9 d8 00 00 00       	jmp    ffffffff80224eb4 <__RME_Pgt_Kom_Init+0x36a>
    {
        /* Add all segments under 4GB to Kom1 */
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224ddc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224de0:	48 8b 00             	mov    (%rax),%rax
ffffffff80224de3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        /* If detected anything above 4GB, then this is not Kom1, exiting */
        if(Mem->Start_Addr>=RME_POW2(RME_PGT_SIZE_4G))
ffffffff80224de7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224deb:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224def:	ba ff ff ff ff       	mov    $0xffffffff,%edx
ffffffff80224df4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80224df7:	0f 82 c7 00 00 00    	jb     ffffffff80224ec4 <__RME_Pgt_Kom_Init+0x37a>
            break;
        /* If this memory trunk have less than 4MB, drop it */
        if(Mem->Length<RME_POW2(RME_PGT_SIZE_4M))
ffffffff80224dfd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e01:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e05:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80224e0b:	77 3a                	ja     ffffffff80224e47 <__RME_Pgt_Kom_Init+0x2fd>
        {
            RME_DBG_S("\n\rAbandoning physical memory below 4G: addr 0x");
ffffffff80224e0d:	48 c7 c7 a8 98 22 80 	mov    $0xffffffff802298a8,%rdi
ffffffff80224e14:	e8 f2 7b fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_DBG_H(Mem->Start_Addr);
ffffffff80224e19:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e1d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224e21:	48 89 c7             	mov    %rax,%rdi
ffffffff80224e24:	e8 20 7b fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
            RME_DBG_S(", length 0x");
ffffffff80224e29:	48 c7 c7 d7 98 22 80 	mov    $0xffffffff802298d7,%rdi
ffffffff80224e30:	e8 d6 7b fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_DBG_H(Mem->Length);
ffffffff80224e35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e39:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e3d:	48 89 c7             	mov    %rax,%rdi
ffffffff80224e40:	e8 04 7b fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
            continue;
ffffffff80224e45:	eb 6d                	jmp    ffffffff80224eb4 <__RME_Pgt_Kom_Init+0x36a>
        }
        if(Addr_Cnt>=RME_X64_KOM1_MAXSEGS)
ffffffff80224e47:	48 83 7d e0 1f       	cmpq   $0x1f,-0x20(%rbp)
ffffffff80224e4c:	7e 0c                	jle    ffffffff80224e5a <__RME_Pgt_Kom_Init+0x310>
        {
            RME_DBG_S("\r\nThe memory under 4G is too fragmented. Aborting.");
ffffffff80224e4e:	48 c7 c7 e8 98 22 80 	mov    $0xffffffff802298e8,%rdi
ffffffff80224e55:	e8 b1 7b fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_ASSERT(0);
        }
        RME_X64_Layout.Kom1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M));
ffffffff80224e5a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e5e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224e62:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80224e68:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224e6e:	48 89 c2             	mov    %rax,%rdx
ffffffff80224e71:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80224e78:	80 ff ff 
ffffffff80224e7b:	48 01 c2             	add    %rax,%rdx
ffffffff80224e7e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224e82:	48 83 c0 06          	add    $0x6,%rax
ffffffff80224e86:	48 89 14 c5 48 20 23 	mov    %rdx,-0x7fdcdfb8(,%rax,8)
ffffffff80224e8d:	80 
        RME_X64_Layout.Kom1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGT_SIZE_2M);
ffffffff80224e8e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224e92:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224e96:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224e9c:	48 89 c2             	mov    %rax,%rdx
ffffffff80224e9f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224ea3:	48 83 c0 26          	add    $0x26,%rax
ffffffff80224ea7:	48 89 14 c5 48 20 23 	mov    %rdx,-0x7fdcdfb8(,%rax,8)
ffffffff80224eae:	80 
        Addr_Cnt++;
ffffffff80224eaf:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224eb4:	48 81 7d d8 10 a0 22 	cmpq   $0xffffffff8022a010,-0x28(%rbp)
ffffffff80224ebb:	80 
ffffffff80224ebc:	0f 85 1a ff ff ff    	jne    ffffffff80224ddc <__RME_Pgt_Kom_Init+0x292>
ffffffff80224ec2:	eb 01                	jmp    ffffffff80224ec5 <__RME_Pgt_Kom_Init+0x37b>
            break;
ffffffff80224ec4:	90                   	nop
    }
    RME_X64_Layout.Kom1_Trunks=Addr_Cnt;
ffffffff80224ec5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224ec9:	48 89 05 a0 d1 00 00 	mov    %rax,0xd1a0(%rip)        # ffffffff80232070 <RME_X64_Layout+0x30>

    /* This is the hole */
    RME_X64_Layout.Hole_Start=RME_X64_Layout.Kom1_Start[Addr_Cnt-1]+RME_X64_Layout.Kom1_Size[Addr_Cnt-1];
ffffffff80224ed0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224ed4:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224ed8:	48 83 c0 06          	add    $0x6,%rax
ffffffff80224edc:	48 8b 14 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rdx
ffffffff80224ee3:	80 
ffffffff80224ee4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80224ee8:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224eec:	48 83 c0 26          	add    $0x26,%rax
ffffffff80224ef0:	48 8b 04 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rax
ffffffff80224ef7:	80 
ffffffff80224ef8:	48 01 d0             	add    %rdx,%rax
ffffffff80224efb:	48 89 05 76 d3 00 00 	mov    %rax,0xd376(%rip)        # ffffffff80232278 <RME_X64_Layout+0x238>
    RME_X64_Layout.Hole_Size=RME_POW2(RME_PGT_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff80224f02:	48 8b 05 6f d3 00 00 	mov    0xd36f(%rip),%rax        # ffffffff80232278 <RME_X64_Layout+0x238>
ffffffff80224f09:	48 ba 00 00 00 00 01 	movabs $0xffff800100000000,%rdx
ffffffff80224f10:	80 ff ff 
ffffffff80224f13:	48 29 c2             	sub    %rax,%rdx
ffffffff80224f16:	48 89 15 63 d3 00 00 	mov    %rdx,0xd363(%rip)        # ffffffff80232280 <RME_X64_Layout+0x240>

    /* Create kernel page mappings for memory above 4GB - we assume only one segment below 4GB */
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kom1_Start[0];
ffffffff80224f1d:	48 8b 05 54 d1 00 00 	mov    0xd154(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff80224f24:	48 89 05 35 d1 00 00 	mov    %rax,0xd135(%rip)        # ffffffff80232060 <RME_X64_Layout+0x20>
    RME_X64_Layout.Kom2_Start=RME_X64_PA2VA(RME_POW2(RME_PGT_SIZE_4G));
ffffffff80224f2b:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff80224f32:	80 ff ff 
ffffffff80224f35:	48 89 05 4c d3 00 00 	mov    %rax,0xd34c(%rip)        # ffffffff80232288 <RME_X64_Layout+0x248>
    RME_X64_Layout.Kom2_Size=0;
ffffffff80224f3c:	48 c7 05 49 d3 00 00 	movq   $0x0,0xd349(%rip)        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff80224f43:	00 00 00 00 

    /* We have filled the first 4 1GB superpages */
    PML4_Cnt=0;
ffffffff80224f47:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80224f4e:	00 
    PDP_Cnt=3;
ffffffff80224f4f:	48 c7 45 f0 03 00 00 	movq   $0x3,-0x10(%rbp)
ffffffff80224f56:	00 
    PDE_Cnt=511;
ffffffff80224f57:	48 c7 45 e8 ff 01 00 	movq   $0x1ff,-0x18(%rbp)
ffffffff80224f5e:	00 
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80224f5f:	e9 d5 01 00 00       	jmp    ffffffff80225139 <__RME_Pgt_Kom_Init+0x5ef>
    {
        /* Throw away small segments */
        if(Mem->Length<2*RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224f64:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224f68:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224f6c:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff80224f72:	77 48                	ja     ffffffff80224fbc <__RME_Pgt_Kom_Init+0x472>
        {
            RME_DBG_S("\n\rAbandoning physical memory above 4G: addr 0x");
ffffffff80224f74:	48 c7 c7 20 99 22 80 	mov    $0xffffffff80229920,%rdi
ffffffff80224f7b:	e8 8b 7a fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_DBG_H(Mem->Start_Addr);
ffffffff80224f80:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224f84:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224f88:	48 89 c7             	mov    %rax,%rdi
ffffffff80224f8b:	e8 b9 79 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
            RME_DBG_S(", length 0x");
ffffffff80224f90:	48 c7 c7 d7 98 22 80 	mov    $0xffffffff802298d7,%rdi
ffffffff80224f97:	e8 6f 7a fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
            RME_DBG_H(Mem->Length);
ffffffff80224f9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224fa0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224fa4:	48 89 c7             	mov    %rax,%rdi
ffffffff80224fa7:	e8 9d 79 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff80224fac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224fb0:	48 8b 00             	mov    (%rax),%rax
ffffffff80224fb3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
            continue;
ffffffff80224fb7:	e9 7d 01 00 00       	jmp    ffffffff80225139 <__RME_Pgt_Kom_Init+0x5ef>
        }

        /* Align the memory segment to 2MB */
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGT_SIZE_2M);
ffffffff80224fbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224fc0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80224fc4:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80224fca:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224fd0:	48 89 c2             	mov    %rax,%rdx
ffffffff80224fd3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224fd7:	48 89 50 10          	mov    %rdx,0x10(%rax)
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGT_SIZE_2M);
ffffffff80224fdb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224fdf:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80224fe3:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80224fe7:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80224fed:	48 89 c2             	mov    %rax,%rdx
ffffffff80224ff0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80224ff4:	48 89 50 18          	mov    %rdx,0x18(%rax)

        /* Add these pages into the kernel at addresses above 4GB offset as 2MB pages */
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80224ff8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80224fff:	00 
ffffffff80225000:	e9 14 01 00 00       	jmp    ffffffff80225119 <__RME_Pgt_Kom_Init+0x5cf>
        {
            PDE_Cnt++;
ffffffff80225005:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
            if(PDE_Cnt==512)
ffffffff8022500a:	48 81 7d e8 00 02 00 	cmpq   $0x200,-0x18(%rbp)
ffffffff80225011:	00 
ffffffff80225012:	0f 85 8f 00 00 00    	jne    ffffffff802250a7 <__RME_Pgt_Kom_Init+0x55d>
            {
                PDE_Cnt=0;
ffffffff80225018:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8022501f:	00 
                PDP_Cnt++;
ffffffff80225020:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
                if(PDP_Cnt==512)
ffffffff80225025:	48 81 7d f0 00 02 00 	cmpq   $0x200,-0x10(%rbp)
ffffffff8022502c:	00 
ffffffff8022502d:	75 0d                	jne    ffffffff8022503c <__RME_Pgt_Kom_Init+0x4f2>
                {
                    PDP_Cnt=0;
ffffffff8022502f:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225036:	00 
                    PML4_Cnt++;
ffffffff80225037:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[0]))|RME_X64_MMU_P;
ffffffff8022503c:	48 8b 05 35 d0 00 00 	mov    0xd035(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff80225043:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8022504a:	80 00 00 
ffffffff8022504d:	48 01 c2             	add    %rax,%rdx
ffffffff80225050:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80225057:	ff 0f 00 
ffffffff8022505a:	48 21 d0             	and    %rdx,%rax
ffffffff8022505d:	48 83 c8 01          	or     $0x1,%rax
ffffffff80225061:	48 89 c2             	mov    %rax,%rdx
ffffffff80225064:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225068:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff8022506c:	48 89 c1             	mov    %rax,%rcx
ffffffff8022506f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225073:	48 01 c8             	add    %rcx,%rax
ffffffff80225076:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8022507c:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80225083:	80 
ffffffff80225084:	48 09 c2             	or     %rax,%rdx
ffffffff80225087:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022508b:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff8022508f:	48 89 c1             	mov    %rax,%rcx
ffffffff80225092:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225096:	48 01 c8             	add    %rcx,%rax
ffffffff80225099:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff8022509f:	48 89 14 c5 00 90 10 	mov    %rdx,-0x7fef7000(,%rax,8)
ffffffff802250a6:	80 
            }

            ((rme_ptr_t*)(RME_X64_Layout.Kom1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff802250a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802250ab:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff802250af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802250b3:	48 01 c2             	add    %rax,%rdx
ffffffff802250b6:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff802250bd:	ff 0f 00 
ffffffff802250c0:	48 21 d0             	and    %rdx,%rax
ffffffff802250c3:	48 8b 15 ae cf 00 00 	mov    0xcfae(%rip),%rdx        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff802250ca:	48 0d 83 01 00 00    	or     $0x183,%rax
ffffffff802250d0:	48 89 02             	mov    %rax,(%rdx)
            RME_X64_Layout.Kom1_Start[0]+=sizeof(rme_ptr_t);
ffffffff802250d3:	48 8b 05 9e cf 00 00 	mov    0xcf9e(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff802250da:	48 83 c0 08          	add    $0x8,%rax
ffffffff802250de:	48 89 05 93 cf 00 00 	mov    %rax,0xcf93(%rip)        # ffffffff80232078 <RME_X64_Layout+0x38>
            RME_X64_Layout.Kom1_Size[0]-=sizeof(rme_ptr_t);
ffffffff802250e5:	48 8b 05 8c d0 00 00 	mov    0xd08c(%rip),%rax        # ffffffff80232178 <RME_X64_Layout+0x138>
ffffffff802250ec:	48 83 e8 08          	sub    $0x8,%rax
ffffffff802250f0:	48 89 05 81 d0 00 00 	mov    %rax,0xd081(%rip)        # ffffffff80232178 <RME_X64_Layout+0x138>
            RME_X64_Layout.Kom2_Size+=RME_POW2(RME_PGT_SIZE_2M);
ffffffff802250f7:	48 8b 05 92 d1 00 00 	mov    0xd192(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff802250fe:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80225104:	48 89 05 85 d1 00 00 	mov    %rax,0xd185(%rip)        # ffffffff80232290 <RME_X64_Layout+0x250>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff8022510b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022510f:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80225115:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80225119:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022511d:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225121:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80225125:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225128:	0f 82 d7 fe ff ff    	jb     ffffffff80225005 <__RME_Pgt_Kom_Init+0x4bb>
        }

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff8022512e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225132:	48 8b 00             	mov    (%rax),%rax
ffffffff80225135:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80225139:	48 81 7d d8 10 a0 22 	cmpq   $0xffffffff8022a010,-0x28(%rbp)
ffffffff80225140:	80 
ffffffff80225141:	0f 85 1d fe ff ff    	jne    ffffffff80224f64 <__RME_Pgt_Kom_Init+0x41a>
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80225147:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8022514e:	00 
ffffffff8022514f:	eb 33                	jmp    ffffffff80225184 <__RME_Pgt_Kom_Init+0x63a>
        ((rme_ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff80225151:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225155:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff8022515c:	00 
ffffffff8022515d:	48 b8 00 18 10 00 00 	movabs $0xffff800000101800,%rax
ffffffff80225164:	80 ff ff 
ffffffff80225167:	48 01 c2             	add    %rax,%rdx
ffffffff8022516a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022516e:	48 05 00 01 00 00    	add    $0x100,%rax
ffffffff80225174:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff8022517b:	80 
ffffffff8022517c:	48 89 02             	mov    %rax,(%rdx)
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff8022517f:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80225184:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff8022518b:	00 
ffffffff8022518c:	7e c3                	jle    ffffffff80225151 <__RME_Pgt_Kom_Init+0x607>

    /* Page table allocation finished. Now need to align Kom1 to 2MB page boundary */
    RME_X64_Layout.Kom1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kom1_Start[0],RME_PGT_SIZE_2M);
ffffffff8022518e:	48 8b 05 e3 ce 00 00 	mov    0xcee3(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff80225195:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff8022519b:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff802251a1:	48 89 05 d0 ce 00 00 	mov    %rax,0xced0(%rip)        # ffffffff80232078 <RME_X64_Layout+0x38>
    RME_X64_Layout.Kom1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Size[0]-1,RME_PGT_SIZE_2M);
ffffffff802251a8:	48 8b 05 c9 cf 00 00 	mov    0xcfc9(%rip),%rax        # ffffffff80232178 <RME_X64_Layout+0x138>
ffffffff802251af:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802251b3:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff802251b9:	48 89 05 b8 cf 00 00 	mov    %rax,0xcfb8(%rip)        # ffffffff80232178 <RME_X64_Layout+0x138>

    /* All memory is mapped. Now figure out the size of kernel stacks */
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kom1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff802251c0:	48 8b 15 b1 ce 00 00 	mov    0xceb1(%rip),%rdx        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff802251c7:	48 8b 05 92 ce 00 00 	mov    0xce92(%rip),%rax        # ffffffff80232060 <RME_X64_Layout+0x20>
ffffffff802251ce:	48 29 c2             	sub    %rax,%rdx
ffffffff802251d1:	48 89 15 90 ce 00 00 	mov    %rdx,0xce90(%rip)        # ffffffff80232068 <RME_X64_Layout+0x28>

    /* See if we are allocating the stack from Kom2 or Kom1 */
    if(RME_X64_Layout.Kom2_Size==0)
ffffffff802251d8:	48 8b 05 b1 d0 00 00 	mov    0xd0b1(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff802251df:	48 85 c0             	test   %rax,%rax
ffffffff802251e2:	75 54                	jne    ffffffff80225238 <__RME_Pgt_Kom_Init+0x6ee>
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom1_Start[0]+RME_X64_Layout.Kom1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff802251e4:	48 8b 15 8d ce 00 00 	mov    0xce8d(%rip),%rdx        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff802251eb:	48 8b 05 86 cf 00 00 	mov    0xcf86(%rip),%rax        # ffffffff80232178 <RME_X64_Layout+0x138>
ffffffff802251f2:	48 01 d0             	add    %rdx,%rax
ffffffff802251f5:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802251f9:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff802251ff:	48 89 05 92 d0 00 00 	mov    %rax,0xd092(%rip)        # ffffffff80232298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff80225206:	48 8b 05 93 d0 00 00 	mov    0xd093(%rip),%rax        # ffffffff802322a0 <RME_X64_Layout+0x260>
ffffffff8022520d:	48 8b 15 84 d0 00 00 	mov    0xd084(%rip),%rdx        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80225214:	48 29 c2             	sub    %rax,%rdx
ffffffff80225217:	48 89 15 7a d0 00 00 	mov    %rdx,0xd07a(%rip)        # ffffffff80232298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom1_Start[0];
ffffffff8022521e:	48 8b 15 73 d0 00 00 	mov    0xd073(%rip),%rdx        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80225225:	48 8b 05 4c ce 00 00 	mov    0xce4c(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff8022522c:	48 29 c2             	sub    %rax,%rdx
ffffffff8022522f:	48 89 15 42 cf 00 00 	mov    %rdx,0xcf42(%rip)        # ffffffff80232178 <RME_X64_Layout+0x138>
ffffffff80225236:	eb 52                	jmp    ffffffff8022528a <__RME_Pgt_Kom_Init+0x740>
    }


    else
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff80225238:	48 8b 15 49 d0 00 00 	mov    0xd049(%rip),%rdx        # ffffffff80232288 <RME_X64_Layout+0x248>
ffffffff8022523f:	48 8b 05 4a d0 00 00 	mov    0xd04a(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff80225246:	48 01 d0             	add    %rdx,%rax
ffffffff80225249:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8022524d:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80225253:	48 89 05 3e d0 00 00 	mov    %rax,0xd03e(%rip)        # ffffffff80232298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff8022525a:	48 8b 05 3f d0 00 00 	mov    0xd03f(%rip),%rax        # ffffffff802322a0 <RME_X64_Layout+0x260>
ffffffff80225261:	48 8b 15 30 d0 00 00 	mov    0xd030(%rip),%rdx        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80225268:	48 29 c2             	sub    %rax,%rdx
ffffffff8022526b:	48 89 15 26 d0 00 00 	mov    %rdx,0xd026(%rip)        # ffffffff80232298 <RME_X64_Layout+0x258>
        RME_X64_Layout.Kom2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kom2_Start;
ffffffff80225272:	48 8b 15 1f d0 00 00 	mov    0xd01f(%rip),%rdx        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80225279:	48 8b 05 08 d0 00 00 	mov    0xd008(%rip),%rax        # ffffffff80232288 <RME_X64_Layout+0x248>
ffffffff80225280:	48 29 c2             	sub    %rax,%rdx
ffffffff80225283:	48 89 15 06 d0 00 00 	mov    %rdx,0xd006(%rip)        # ffffffff80232290 <RME_X64_Layout+0x250>
    }

    /* Now report all mapping info */
    RME_DBG_S("\n\r\n\rKot_Start:     0x");
ffffffff8022528a:	48 c7 c7 4f 99 22 80 	mov    $0xffffffff8022994f,%rdi
ffffffff80225291:	e8 75 77 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kot_Start);
ffffffff80225296:	48 8b 05 a3 cd 00 00 	mov    0xcda3(%rip),%rax        # ffffffff80232040 <RME_X64_Layout>
ffffffff8022529d:	48 89 c7             	mov    %rax,%rdi
ffffffff802252a0:	e8 a4 76 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rKot_Size:      0x");
ffffffff802252a5:	48 c7 c7 65 99 22 80 	mov    $0xffffffff80229965,%rdi
ffffffff802252ac:	e8 5a 77 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kot_Size);
ffffffff802252b1:	48 8b 05 90 cd 00 00 	mov    0xcd90(%rip),%rax        # ffffffff80232048 <RME_X64_Layout+0x8>
ffffffff802252b8:	48 89 c7             	mov    %rax,%rdi
ffffffff802252bb:	e8 89 76 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rPerCPU_Start:    0x");
ffffffff802252c0:	48 c7 c7 79 99 22 80 	mov    $0xffffffff80229979,%rdi
ffffffff802252c7:	e8 3f 77 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.PerCPU_Start);
ffffffff802252cc:	48 8b 05 7d cd 00 00 	mov    0xcd7d(%rip),%rax        # ffffffff80232050 <RME_X64_Layout+0x10>
ffffffff802252d3:	48 89 c7             	mov    %rax,%rdi
ffffffff802252d6:	e8 6e 76 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rPerCPU_Size:     0x");
ffffffff802252db:	48 c7 c7 8f 99 22 80 	mov    $0xffffffff8022998f,%rdi
ffffffff802252e2:	e8 24 77 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.PerCPU_Size);
ffffffff802252e7:	48 8b 05 6a cd 00 00 	mov    0xcd6a(%rip),%rax        # ffffffff80232058 <RME_X64_Layout+0x18>
ffffffff802252ee:	48 89 c7             	mov    %rax,%rdi
ffffffff802252f1:	e8 53 76 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rKpgtbl_Start:    0x");
ffffffff802252f6:	48 c7 c7 a5 99 22 80 	mov    $0xffffffff802299a5,%rdi
ffffffff802252fd:	e8 09 77 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kpgtbl_Start);
ffffffff80225302:	48 8b 05 57 cd 00 00 	mov    0xcd57(%rip),%rax        # ffffffff80232060 <RME_X64_Layout+0x20>
ffffffff80225309:	48 89 c7             	mov    %rax,%rdi
ffffffff8022530c:	e8 38 76 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rKpgtbl_Size:     0x");
ffffffff80225311:	48 c7 c7 bb 99 22 80 	mov    $0xffffffff802299bb,%rdi
ffffffff80225318:	e8 ee 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kpgtbl_Size);
ffffffff8022531d:	48 8b 05 44 cd 00 00 	mov    0xcd44(%rip),%rax        # ffffffff80232068 <RME_X64_Layout+0x28>
ffffffff80225324:	48 89 c7             	mov    %rax,%rdi
ffffffff80225327:	e8 1d 76 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff8022532c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80225333:	00 
ffffffff80225334:	eb 7d                	jmp    ffffffff802253b3 <__RME_Pgt_Kom_Init+0x869>
    {
        RME_DBG_S("\n\rKom1_Start[");
ffffffff80225336:	48 c7 c7 d1 99 22 80 	mov    $0xffffffff802299d1,%rdi
ffffffff8022533d:	e8 c9 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff80225342:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225346:	48 89 c7             	mov    %rax,%rdi
ffffffff80225349:	e8 c3 74 fe ff       	call   ffffffff8020c811 <RME_Int_Print>
        RME_DBG_S("]:  0x");
ffffffff8022534e:	48 c7 c7 df 99 22 80 	mov    $0xffffffff802299df,%rdi
ffffffff80225355:	e8 b1 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_DBG_H(RME_X64_Layout.Kom1_Start[Addr_Cnt]);
ffffffff8022535a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022535e:	48 83 c0 06          	add    $0x6,%rax
ffffffff80225362:	48 8b 04 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rax
ffffffff80225369:	80 
ffffffff8022536a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022536d:	e8 d7 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
        RME_DBG_S("\n\rKom1_Size[");
ffffffff80225372:	48 c7 c7 e6 99 22 80 	mov    $0xffffffff802299e6,%rdi
ffffffff80225379:	e8 8d 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_DBG_I(Addr_Cnt);
ffffffff8022537e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225382:	48 89 c7             	mov    %rax,%rdi
ffffffff80225385:	e8 87 74 fe ff       	call   ffffffff8020c811 <RME_Int_Print>
        RME_DBG_S("]:   0x");
ffffffff8022538a:	48 c7 c7 f3 99 22 80 	mov    $0xffffffff802299f3,%rdi
ffffffff80225391:	e8 75 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
        RME_DBG_H(RME_X64_Layout.Kom1_Size[Addr_Cnt]);
ffffffff80225396:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022539a:	48 83 c0 26          	add    $0x26,%rax
ffffffff8022539e:	48 8b 04 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rax
ffffffff802253a5:	80 
ffffffff802253a6:	48 89 c7             	mov    %rax,%rdi
ffffffff802253a9:	e8 9b 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kom1_Trunks;Addr_Cnt++)
ffffffff802253ae:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
ffffffff802253b3:	48 8b 05 b6 cc 00 00 	mov    0xccb6(%rip),%rax        # ffffffff80232070 <RME_X64_Layout+0x30>
ffffffff802253ba:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802253be:	48 39 c2             	cmp    %rax,%rdx
ffffffff802253c1:	0f 82 6f ff ff ff    	jb     ffffffff80225336 <__RME_Pgt_Kom_Init+0x7ec>
    }
    RME_DBG_S("\n\rHole_Start:      0x");
ffffffff802253c7:	48 c7 c7 fb 99 22 80 	mov    $0xffffffff802299fb,%rdi
ffffffff802253ce:	e8 38 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Hole_Start);
ffffffff802253d3:	48 8b 05 9e ce 00 00 	mov    0xce9e(%rip),%rax        # ffffffff80232278 <RME_X64_Layout+0x238>
ffffffff802253da:	48 89 c7             	mov    %rax,%rdi
ffffffff802253dd:	e8 67 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rHole_Size:       0x");
ffffffff802253e2:	48 c7 c7 11 9a 22 80 	mov    $0xffffffff80229a11,%rdi
ffffffff802253e9:	e8 1d 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Hole_Size);
ffffffff802253ee:	48 8b 05 8b ce 00 00 	mov    0xce8b(%rip),%rax        # ffffffff80232280 <RME_X64_Layout+0x240>
ffffffff802253f5:	48 89 c7             	mov    %rax,%rdi
ffffffff802253f8:	e8 4c 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rKom2_Start:     0x");
ffffffff802253fd:	48 c7 c7 27 9a 22 80 	mov    $0xffffffff80229a27,%rdi
ffffffff80225404:	e8 02 76 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Start);
ffffffff80225409:	48 8b 05 78 ce 00 00 	mov    0xce78(%rip),%rax        # ffffffff80232288 <RME_X64_Layout+0x248>
ffffffff80225410:	48 89 c7             	mov    %rax,%rdi
ffffffff80225413:	e8 31 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rKom2_Size:      0x");
ffffffff80225418:	48 c7 c7 3c 9a 22 80 	mov    $0xffffffff80229a3c,%rdi
ffffffff8022541f:	e8 e7 75 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Size);
ffffffff80225424:	48 8b 05 65 ce 00 00 	mov    0xce65(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff8022542b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022542e:	e8 16 75 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rStack_Start:     0x");
ffffffff80225433:	48 c7 c7 51 9a 22 80 	mov    $0xffffffff80229a51,%rdi
ffffffff8022543a:	e8 cc 75 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Stack_Start);
ffffffff8022543f:	48 8b 05 52 ce 00 00 	mov    0xce52(%rip),%rax        # ffffffff80232298 <RME_X64_Layout+0x258>
ffffffff80225446:	48 89 c7             	mov    %rax,%rdi
ffffffff80225449:	e8 fb 74 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rStack_Size:      0x");
ffffffff8022544e:	48 c7 c7 67 9a 22 80 	mov    $0xffffffff80229a67,%rdi
ffffffff80225455:	e8 b1 75 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Stack_Size);
ffffffff8022545a:	48 8b 05 3f ce 00 00 	mov    0xce3f(%rip),%rax        # ffffffff802322a0 <RME_X64_Layout+0x260>
ffffffff80225461:	48 89 c7             	mov    %rax,%rdi
ffffffff80225464:	e8 e0 74 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>

    return 0;
ffffffff80225469:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8022546e:	c9                   	leave
ffffffff8022546f:	c3                   	ret

ffffffff80225470 <__RME_SMP_Low_Level_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
rme_ptr_t __RME_SMP_Low_Level_Init(void)
{
ffffffff80225470:	f3 0f 1e fa          	endbr64
ffffffff80225474:	55                   	push   %rbp
ffffffff80225475:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225478:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_CPU_Local* CPU_Local;

    /* Initialize all vector tables */
    __RME_X64_CPU_Local_Init();
ffffffff8022547c:	e8 f8 69 ff ff       	call   ffffffff8021be79 <__RME_X64_CPU_Local_Init>
    /* Initialize LAPIC */
    __RME_X64_LAPIC_Init();
ffffffff80225481:	e8 c2 ef ff ff       	call   ffffffff80224448 <__RME_X64_LAPIC_Init>

    /* Check to see if we are booting this correctly */
    CPU_Local=RME_CPU_LOCAL();
ffffffff80225486:	e8 b4 63 fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff8022548b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_ASSERT(CPU_Local->CPUID==RME_X64_CPU_Cnt);
ffffffff8022548f:	48 8b 05 1a ce 00 00 	mov    0xce1a(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>

    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff80225496:	48 8b 05 13 ce 00 00 	mov    0xce13(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff8022549d:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802254a1:	48 05 c8 22 23 80    	add    $0xffffffff802322c8,%rax
ffffffff802254a7:	48 c7 00 01 00 00 00 	movq   $0x1,(%rax)
    /* Spin until the global CPU counter is zero again, which means the booting
     * processor has done booting and we can proceed now */
    while(RME_X64_CPU_Cnt!=0);
ffffffff802254ae:	90                   	nop
ffffffff802254af:	48 8b 05 fa cd 00 00 	mov    0xcdfa(%rip),%rax        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff802254b6:	48 85 c0             	test   %rax,%rax
ffffffff802254b9:	75 f4                	jne    ffffffff802254af <__RME_SMP_Low_Level_Init+0x3f>
    RME_ASSERT(CPU_Local->Thd_Cur!=0);
    RME_ASSERT(CPU_Local->Sig_Tim!=0);
    RME_ASSERT(CPU_Local->Sig_Vct!=0);

    /* Change page tables */
    __RME_Pgt_Set(RME_CAP_GETOBJ((CPU_Local->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff802254bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802254bf:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff802254c3:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff802254c7:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802254cb:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802254cf:	48 89 c7             	mov    %rax,%rdi
ffffffff802254d2:	e8 ec 13 00 00       	call   ffffffff802268c3 <__RME_Pgt_Set>
    /* Boot into the init thread - never returns */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPU_Local->CPUID), CPU_Local->CPUID);
ffffffff802254d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802254db:	48 8b 00             	mov    (%rax),%rax
ffffffff802254de:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802254e2:	48 8b 12             	mov    (%rdx),%rdx
ffffffff802254e5:	48 81 c2 01 04 00 00 	add    $0x401,%rdx
ffffffff802254ec:	48 89 d1             	mov    %rdx,%rcx
ffffffff802254ef:	48 c1 e1 0b          	shl    $0xb,%rcx
ffffffff802254f3:	48 89 c2             	mov    %rax,%rdx
ffffffff802254f6:	48 89 ce             	mov    %rcx,%rsi
ffffffff802254f9:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff802254fe:	e8 bd 63 fe ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>

    return 0;
ffffffff80225503:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80225508:	c9                   	leave
ffffffff80225509:	c3                   	ret

ffffffff8022550a <__RME_Boot>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Boot(void)
{
ffffffff8022550a:	f3 0f 1e fa          	endbr64
ffffffff8022550e:	55                   	push   %rbp
ffffffff8022550f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225512:	48 83 ec 40          	sub    $0x40,%rsp
    rme_ptr_t Phys_Addr;
    rme_ptr_t Page_Ptr;
    struct RME_Cap_Cpt* Cpt;
    struct RME_CPU_Local* CPU_Local;
    /* Initialize our own CPU-local data structures */
    RME_X64_CPU_Cnt = 0;
ffffffff80225516:	48 c7 05 8f cd 00 00 	movq   $0x0,0xcd8f(%rip)        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff8022551d:	00 00 00 00 
    RME_DBG_S("\r\nCPU 0 local IDT/GDT init");
ffffffff80225521:	48 c7 c7 7d 9a 22 80 	mov    $0xffffffff80229a7d,%rdi
ffffffff80225528:	e8 de 74 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    __RME_X64_CPU_Local_Init();
ffffffff8022552d:	e8 47 69 ff ff       	call   ffffffff8021be79 <__RME_X64_CPU_Local_Init>
    /* Initialize interrupt controllers (PIC, LAPIC, IOAPIC) */
    RME_DBG_S("\r\nCPU 0 LAPIC init");
ffffffff80225532:	48 c7 c7 98 9a 22 80 	mov    $0xffffffff80229a98,%rdi
ffffffff80225539:	e8 cd 74 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    __RME_X64_LAPIC_Init();
ffffffff8022553e:	e8 05 ef ff ff       	call   ffffffff80224448 <__RME_X64_LAPIC_Init>
    RME_DBG_S("\r\nPIC init");
ffffffff80225543:	48 c7 c7 ab 9a 22 80 	mov    $0xffffffff80229aab,%rdi
ffffffff8022554a:	e8 bc 74 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    __RME_X64_PIC_Init();
ffffffff8022554f:	e8 4e f0 ff ff       	call   ffffffff802245a2 <__RME_X64_PIC_Init>
    RME_DBG_S("\r\nIOAPIC init");
ffffffff80225554:	48 c7 c7 b6 9a 22 80 	mov    $0xffffffff80229ab6,%rdi
ffffffff8022555b:	e8 ab 74 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    __RME_X64_IOAPIC_Init();
ffffffff80225560:	e8 11 f2 ff ff       	call   ffffffff80224776 <__RME_X64_IOAPIC_Init>
    /* Start other processors, if there are any. They will keep spinning until
     * the booting processor finish all its work. */
    __RME_X64_SMP_Init();
ffffffff80225565:	e8 cd f2 ff ff       	call   ffffffff80224837 <__RME_X64_SMP_Init>

    /* Create all initial tables in Kom1, which is sure to be present. We reserve 16
     * pages at the start to load the init process */
    Cur_Addr=RME_X64_Layout.Kom1_Start[0]+16*RME_POW2(RME_PGT_SIZE_2M);
ffffffff8022556a:	48 8b 05 07 cb 00 00 	mov    0xcb07(%rip),%rax        # ffffffff80232078 <RME_X64_Layout+0x38>
ffffffff80225571:	48 05 00 00 00 02    	add    $0x2000000,%rax
ffffffff80225577:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    RME_DBG_S("\r\nKot registration start offset: 0x");
ffffffff8022557b:	48 c7 c7 c8 9a 22 80 	mov    $0xffffffff80229ac8,%rdi
ffffffff80225582:	e8 84 74 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80225587:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8022558e:	80 00 00 
ffffffff80225591:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225595:	48 01 d0             	add    %rdx,%rax
ffffffff80225598:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff8022559c:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff802255a0:	48 89 c7             	mov    %rax,%rdi
ffffffff802255a3:	e8 a1 73 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>

    /* Create the capability table for the init process - always 16 */
    Cpt=(struct RME_Cap_Cpt*)Cur_Addr;
ffffffff802255a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802255ac:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    RME_ASSERT(_RME_Cpt_Boot_Init(RME_BOOT_INIT_CPT,Cur_Addr,16)==RME_BOOT_INIT_CPT);
ffffffff802255b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802255b4:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff802255b9:	48 89 c6             	mov    %rax,%rsi
ffffffff802255bc:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff802255c1:	e8 b1 84 fe ff       	call   ffffffff8020da77 <_RME_Cpt_Boot_Init>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(16));
ffffffff802255c6:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff802255cd:	00 
    /* Create the capability table for initial page tables - now we are only
     * adding 2MB pages. There will be 1 PML4, 16 PDP, and 16*512=8192 PGD.
     * This should provide support for up to 4TB of memory, which will be sufficient
     * for at least a decade. These data structures will eat 32MB of memory, which
     * is fine */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_PGT, Cur_Addr, 1+16+8192)==0);
ffffffff802255ce:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802255d2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802255d6:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff802255dc:	48 89 d1             	mov    %rdx,%rcx
ffffffff802255df:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff802255e4:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802255e9:	48 89 c7             	mov    %rax,%rdi
ffffffff802255ec:	e8 75 85 fe ff       	call   ffffffff8020db66 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(1+16+8192));
ffffffff802255f1:	48 81 45 f8 00 10 08 	addq   $0x81000,-0x8(%rbp)
ffffffff802255f8:	00 

    /* Align the address to 4096 to prepare for page table creation */
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff802255f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802255fd:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225603:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225609:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Create PML4 */
    RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PML4,
ffffffff8022560d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225611:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225615:	6a 09                	push   $0x9
ffffffff80225617:	6a 27                	push   $0x27
ffffffff80225619:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff8022561f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff80225625:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225628:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8022562d:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80225632:	48 89 c7             	mov    %rax,%rdi
ffffffff80225635:	e8 66 a3 fe ff       	call   ffffffff8020f9a0 <_RME_Pgt_Boot_Crt>
ffffffff8022563a:	48 83 c4 10          	add    $0x10,%rsp
                                   Cur_Addr, 0, RME_PGT_TOP, RME_PGT_SIZE_512G, RME_PGT_NUM_512)==0);
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_TOP(RME_PGT_NUM_512));
ffffffff8022563e:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225645:	00 
    /* Create all our 16 PDPs, and cons them into the PML4 */
    for(Count=0;Count<16;Count++)
ffffffff80225646:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8022564d:	00 
ffffffff8022564e:	eb 73                	jmp    ffffffff802256c3 <__RME_Boot+0x1b9>
    {
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDP(Count),
ffffffff80225650:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225654:	48 8d 70 01          	lea    0x1(%rax),%rsi
ffffffff80225658:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022565c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225660:	6a 09                	push   $0x9
ffffffff80225662:	6a 1e                	push   $0x1e
ffffffff80225664:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff8022566a:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff80225670:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225673:	48 89 f2             	mov    %rsi,%rdx
ffffffff80225676:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8022567b:	48 89 c7             	mov    %rax,%rdi
ffffffff8022567e:	e8 1d a3 fe ff       	call   ffffffff8020f9a0 <_RME_Pgt_Boot_Crt>
ffffffff80225683:	48 83 c4 10          	add    $0x10,%rsp
                                       Cur_Addr, 0, RME_PGT_NOM, RME_PGT_SIZE_1G, RME_PGT_NUM_512)==0);
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff80225687:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff8022568e:	00 
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4), Count,
ffffffff8022568f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225693:	48 83 c0 01          	add    $0x1,%rax
ffffffff80225697:	0f b7 c0             	movzwl %ax,%eax
ffffffff8022569a:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff802256a0:	48 89 c1             	mov    %rax,%rcx
ffffffff802256a3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802256a7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802256ab:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff802256b1:	be 00 80 01 00       	mov    $0x18000,%esi
ffffffff802256b6:	48 89 c7             	mov    %rax,%rdi
ffffffff802256b9:	e8 98 a9 fe ff       	call   ffffffff80210056 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<16;Count++)
ffffffff802256be:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff802256c3:	48 83 7d f0 0f       	cmpq   $0xf,-0x10(%rbp)
ffffffff802256c8:	7e 86                	jle    ffffffff80225650 <__RME_Boot+0x146>
                                       RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count)), RME_PGT_ALL_PERM)==0);
    }

    /* Create 8192 PDEs, and cons them into their respective PDPs */
    for(Count=0;Count<8192;Count++)
ffffffff802256ca:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff802256d1:	00 
ffffffff802256d2:	e9 8e 00 00 00       	jmp    ffffffff80225765 <__RME_Boot+0x25b>
    {
        RME_ASSERT(_RME_Pgt_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGT, RME_BOOT_PDE(Count),
ffffffff802256d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802256db:	48 8d 70 11          	lea    0x11(%rax),%rsi
ffffffff802256df:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802256e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802256e7:	6a 09                	push   $0x9
ffffffff802256e9:	6a 15                	push   $0x15
ffffffff802256eb:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff802256f1:	41 b8 00 00 00 00    	mov    $0x0,%r8d
ffffffff802256f7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802256fa:	48 89 f2             	mov    %rsi,%rdx
ffffffff802256fd:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80225702:	48 89 c7             	mov    %rax,%rdi
ffffffff80225705:	e8 96 a2 fe ff       	call   ffffffff8020f9a0 <_RME_Pgt_Boot_Crt>
ffffffff8022570a:	48 83 c4 10          	add    $0x10,%rsp
                                       Cur_Addr, 0, RME_PGT_NOM, RME_PGT_SIZE_2M, RME_PGT_NUM_512)==0);
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_PGT_SIZE_NOM(RME_PGT_NUM_512));
ffffffff8022570e:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225715:	00 
        RME_ASSERT(_RME_Pgt_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff80225716:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022571a:	48 83 c0 11          	add    $0x11,%rax
ffffffff8022571e:	0f b7 c0             	movzwl %ax,%eax
ffffffff80225721:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff80225727:	48 89 c1             	mov    %rax,%rcx
ffffffff8022572a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022572e:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80225733:	48 89 c2             	mov    %rax,%rdx
ffffffff80225736:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022573a:	48 c1 f8 09          	sar    $0x9,%rax
ffffffff8022573e:	48 83 c0 01          	add    $0x1,%rax
ffffffff80225742:	0f b7 c0             	movzwl %ax,%eax
ffffffff80225745:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff8022574b:	48 89 c6             	mov    %rax,%rsi
ffffffff8022574e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225752:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80225758:	48 89 c7             	mov    %rax,%rdi
ffffffff8022575b:	e8 f6 a8 fe ff       	call   ffffffff80210056 <_RME_Pgt_Boot_Con>
    for(Count=0;Count<8192;Count++)
ffffffff80225760:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225765:	48 81 7d f0 ff 1f 00 	cmpq   $0x1fff,-0x10(%rbp)
ffffffff8022576c:	00 
ffffffff8022576d:	0f 8e 64 ff ff ff    	jle    ffffffff802256d7 <__RME_Boot+0x1cd>
                                       RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Count)), RME_PGT_ALL_PERM)==0);
    }

    /* Map all the Kom1 that we have into it */
    Page_Ptr=0;
ffffffff80225773:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8022577a:	00 
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff8022577b:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80225782:	00 
ffffffff80225783:	e9 a1 00 00 00       	jmp    ffffffff80225829 <__RME_Boot+0x31f>
    {
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff80225788:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8022578f:	00 
ffffffff80225790:	eb 75                	jmp    ffffffff80225807 <__RME_Boot+0x2fd>
        {
            Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kom1_Start[Kom1_Cnt])+Count;
ffffffff80225792:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80225796:	48 83 c0 06          	add    $0x6,%rax
ffffffff8022579a:	48 8b 14 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rdx
ffffffff802257a1:	80 
ffffffff802257a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802257a6:	48 01 c2             	add    %rax,%rdx
ffffffff802257a9:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff802257b0:	80 00 00 
ffffffff802257b3:	48 01 d0             	add    %rdx,%rax
ffffffff802257b6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
            RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802257ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802257be:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff802257c3:	48 89 c1             	mov    %rax,%rcx
ffffffff802257c6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802257ca:	48 c1 e8 09          	shr    $0x9,%rax
ffffffff802257ce:	48 83 c0 11          	add    $0x11,%rax
ffffffff802257d2:	0f b7 c0             	movzwl %ax,%eax
ffffffff802257d5:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff802257db:	48 89 c6             	mov    %rax,%rsi
ffffffff802257de:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff802257e2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802257e6:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff802257ec:	48 89 c7             	mov    %rax,%rdi
ffffffff802257ef:	e8 d5 a5 fe ff       	call   ffffffff8020fdc9 <_RME_Pgt_Boot_Add>
                                           Phys_Addr, Page_Ptr&0x1FF, RME_PGT_ALL_PERM)==0);
            Page_Ptr++;
ffffffff802257f4:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
        for(Count=0;Count<RME_X64_Layout.Kom1_Size[Kom1_Cnt];Count+=RME_POW2(RME_PGT_SIZE_2M))
ffffffff802257f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802257fd:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80225803:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80225807:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022580b:	48 83 c0 26          	add    $0x26,%rax
ffffffff8022580f:	48 8b 04 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rax
ffffffff80225816:	80 
ffffffff80225817:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8022581b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8022581e:	0f 82 6e ff ff ff    	jb     ffffffff80225792 <__RME_Boot+0x288>
    for(Kom1_Cnt=0;Kom1_Cnt<RME_X64_Layout.Kom1_Trunks;Kom1_Cnt++)
ffffffff80225824:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
ffffffff80225829:	48 8b 05 40 c8 00 00 	mov    0xc840(%rip),%rax        # ffffffff80232070 <RME_X64_Layout+0x30>
ffffffff80225830:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80225834:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225837:	0f 82 4b ff ff ff    	jb     ffffffff80225788 <__RME_Boot+0x27e>
        }
    }
    RME_DBG_S("\r\nKom1 pages: 0x");
ffffffff8022583d:	48 c7 c7 ec 9a 22 80 	mov    $0xffffffff80229aec,%rdi
ffffffff80225844:	e8 c2 71 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(Page_Ptr);
ffffffff80225849:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8022584d:	48 89 c7             	mov    %rax,%rdi
ffffffff80225850:	e8 f4 70 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S(", [0x0, 0x");
ffffffff80225855:	48 c7 c7 fd 9a 22 80 	mov    $0xffffffff80229afd,%rdi
ffffffff8022585c:	e8 aa 71 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff80225861:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225865:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80225869:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff8022586f:	48 89 c7             	mov    %rax,%rdi
ffffffff80225872:	e8 d2 70 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("]");
ffffffff80225877:	48 c7 c7 08 9b 22 80 	mov    $0xffffffff80229b08,%rdi
ffffffff8022587e:	e8 88 71 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>

    /* Map the Kom2 in - don't want lookups, we know where they are. Offset by 2048 because they are mapped above 4G */
    RME_DBG_S("\r\nKom2 pages: 0x");
ffffffff80225883:	48 c7 c7 0a 9b 22 80 	mov    $0xffffffff80229b0a,%rdi
ffffffff8022588a:	e8 7c 71 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M));
ffffffff8022588f:	48 8b 05 fa c9 00 00 	mov    0xc9fa(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff80225896:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8022589a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022589d:	e8 a7 70 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S(", [0x");
ffffffff802258a2:	48 c7 c7 1b 9b 22 80 	mov    $0xffffffff80229b1b,%rdi
ffffffff802258a9:	e8 5d 71 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M));
ffffffff802258ae:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802258b2:	48 83 c0 01          	add    $0x1,%rax
ffffffff802258b6:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff802258ba:	48 89 c7             	mov    %rax,%rdi
ffffffff802258bd:	e8 87 70 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S(", 0x");
ffffffff802258c2:	48 c7 c7 ed 97 22 80 	mov    $0xffffffff802297ed,%rdi
ffffffff802258c9:	e8 3d 71 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff802258ce:	48 c7 45 f0 00 08 00 	movq   $0x800,-0x10(%rbp)
ffffffff802258d5:	00 
ffffffff802258d6:	e9 bb 00 00 00       	jmp    ffffffff80225996 <__RME_Boot+0x48c>
    {
        Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff802258db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802258df:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff802258e3:	48 89 c2             	mov    %rax,%rdx
ffffffff802258e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802258ea:	48 c1 f8 09          	sar    $0x9,%rax
ffffffff802258ee:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff802258f3:	48 c1 e2 09          	shl    $0x9,%rdx
ffffffff802258f7:	48 01 d0             	add    %rdx,%rax
ffffffff802258fa:	48 05 00 02 00 00    	add    $0x200,%rax
ffffffff80225900:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80225907:	80 
ffffffff80225908:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff8022590f:	ff 0f 00 
ffffffff80225912:	48 21 c2             	and    %rax,%rdx
ffffffff80225915:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8022591c:	80 ff ff 
ffffffff8022591f:	48 01 d0             	add    %rdx,%rax
ffffffff80225922:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        Phys_Addr=RME_X64_MMU_ADDR(((rme_ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff80225926:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022592a:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff8022592f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80225936:	00 
ffffffff80225937:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8022593b:	48 01 d0             	add    %rdx,%rax
ffffffff8022593e:	48 8b 00             	mov    (%rax),%rax
ffffffff80225941:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff80225948:	ff 0f 00 
ffffffff8022594b:	48 21 d0             	and    %rdx,%rax
ffffffff8022594e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
        RME_ASSERT(_RME_Pgt_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80225952:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225956:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff8022595b:	48 89 c1             	mov    %rax,%rcx
ffffffff8022595e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225962:	48 c1 e8 09          	shr    $0x9,%rax
ffffffff80225966:	48 83 c0 11          	add    $0x11,%rax
ffffffff8022596a:	0f b7 c0             	movzwl %ax,%eax
ffffffff8022596d:	48 0d 00 80 01 00    	or     $0x18000,%rax
ffffffff80225973:	48 89 c6             	mov    %rax,%rsi
ffffffff80225976:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8022597a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8022597e:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80225984:	48 89 c7             	mov    %rax,%rdi
ffffffff80225987:	e8 3d a4 fe ff       	call   ffffffff8020fdc9 <_RME_Pgt_Boot_Add>
                                       Phys_Addr, Page_Ptr&0x1FF, RME_PGT_ALL_PERM)==0);
        Page_Ptr++;
ffffffff8022598c:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
    for(Count=2048;Count<(RME_X64_Layout.Kom2_Size/RME_POW2(RME_PGT_SIZE_2M)+2048);Count++)
ffffffff80225991:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225996:	48 8b 05 f3 c8 00 00 	mov    0xc8f3(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff8022599d:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff802259a1:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff802259a7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802259ab:	48 39 c2             	cmp    %rax,%rdx
ffffffff802259ae:	0f 82 27 ff ff ff    	jb     ffffffff802258db <__RME_Boot+0x3d1>
    }
    RME_DBG_H(Page_Ptr*RME_POW2(RME_PGT_SIZE_2M)+RME_POW2(RME_PGT_SIZE_2M)-1);
ffffffff802259b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802259b8:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff802259bc:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff802259c2:	48 89 c7             	mov    %rax,%rdi
ffffffff802259c5:	e8 7f 6f fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("]");
ffffffff802259ca:	48 c7 c7 08 9b 22 80 	mov    $0xffffffff80229b08,%rdi
ffffffff802259d1:	e8 35 70 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>

    /* Activate the first process - This process cannot be deleted */
    RME_ASSERT(_RME_Prc_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_PRC,
ffffffff802259d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802259da:	41 b8 00 80 01 00    	mov    $0x18000,%r8d
ffffffff802259e0:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff802259e5:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff802259ea:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff802259ef:	48 89 c7             	mov    %rax,%rdi
ffffffff802259f2:	e8 64 d7 fe ff       	call   ffffffff8021315b <_RME_Prc_Boot_Crt>
                                  RME_BOOT_INIT_CPT, RME_CAPID(RME_BOOT_TBL_PGT,RME_BOOT_PML4))==0);

    /* Create the initial kernel function capability */
    RME_ASSERT(_RME_Kfn_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_INIT_KERN)==0);
ffffffff802259f7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802259fb:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80225a00:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225a05:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a08:	e8 3b 52 ff ff       	call   ffffffff8021ac48 <_RME_Kfn_Boot_Crt>

    /* Create a capability table for initial kernel memory capabilities. We need a few for Kom1, and another one for Kom2 */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_KOM, Cur_Addr, RME_X64_KOM1_MAXSEGS+1)==0);
ffffffff80225a0d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225a11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a15:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff80225a1b:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225a1e:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff80225a23:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225a28:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a2b:	e8 36 81 fe ff       	call   ffffffff8020db66 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_KOM1_MAXSEGS+1));
ffffffff80225a30:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225a37:	00 
    /* Create Kom1 capabilities - can create page tables here */
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff80225a38:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225a3f:	00 
ffffffff80225a40:	eb 57                	jmp    ffffffff80225a99 <__RME_Boot+0x58f>
    {
        RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff80225a42:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225a46:	48 83 c0 06          	add    $0x6,%rax
ffffffff80225a4a:	48 8b 14 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rdx
ffffffff80225a51:	80 
ffffffff80225a52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225a56:	48 83 c0 26          	add    $0x26,%rax
ffffffff80225a5a:	48 8b 04 c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rax
ffffffff80225a61:	80 
ffffffff80225a62:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
ffffffff80225a66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225a6a:	48 83 c0 06          	add    $0x6,%rax
ffffffff80225a6e:	48 8b 0c c5 48 20 23 	mov    -0x7fdcdfb8(,%rax,8),%rcx
ffffffff80225a75:	80 
ffffffff80225a76:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225a7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225a7e:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff80225a84:	49 89 f0             	mov    %rsi,%r8
ffffffff80225a87:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80225a8c:	48 89 c7             	mov    %rax,%rdi
ffffffff80225a8f:	e8 e8 ce fe ff       	call   ffffffff8021297c <_RME_Kom_Boot_Crt>
    for(Count=0;Count<RME_X64_Layout.Kom1_Trunks;Count++)
ffffffff80225a94:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225a99:	48 8b 05 d0 c5 00 00 	mov    0xc5d0(%rip),%rax        # ffffffff80232070 <RME_X64_Layout+0x30>
ffffffff80225aa0:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225aa4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225aa7:	72 99                	jb     ffffffff80225a42 <__RME_Boot+0x538>
                                      RME_X64_Layout.Kom1_Start[Count],
                                      RME_X64_Layout.Kom1_Start[Count]+RME_X64_Layout.Kom1_Size[Count],
                                      RME_KOM_FLAG_ALL)==0);
    }
    /* Create Kom2 capability - cannot create page tables here */
    RME_ASSERT(_RME_Kom_Boot_Crt(RME_X64_CPT,
ffffffff80225aa9:	48 8b 15 d8 c7 00 00 	mov    0xc7d8(%rip),%rdx        # ffffffff80232288 <RME_X64_Layout+0x248>
ffffffff80225ab0:	48 8b 05 d9 c7 00 00 	mov    0xc7d9(%rip),%rax        # ffffffff80232290 <RME_X64_Layout+0x250>
ffffffff80225ab7:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80225abb:	48 8b 15 c6 c7 00 00 	mov    0xc7c6(%rip),%rdx        # ffffffff80232288 <RME_X64_Layout+0x248>
ffffffff80225ac2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225ac6:	41 b9 0d 00 00 00    	mov    $0xd,%r9d
ffffffff80225acc:	49 89 c8             	mov    %rcx,%r8
ffffffff80225acf:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225ad2:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff80225ad7:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80225adc:	48 89 c7             	mov    %rax,%rdi
ffffffff80225adf:	e8 98 ce fe ff       	call   ffffffff8021297c <_RME_Kom_Boot_Crt>
                                  RME_X64_Layout.Kom2_Start,
                                  RME_X64_Layout.Kom2_Start+RME_X64_Layout.Kom2_Size,
                                  RME_KOM_FLAG_CPT|RME_KOM_FLAG_THD|RME_KOM_FLAG_INV)==0);

    /* Create the initial kernel endpoints for timer ticks */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80225ae4:	48 8b 0d bd c7 00 00 	mov    0xc7bd(%rip),%rcx        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225aeb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225aef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225af3:	49 89 c8             	mov    %rcx,%r8
ffffffff80225af6:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225af9:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff80225afe:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225b03:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b06:	e8 5b 80 fe ff       	call   ffffffff8020db66 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225b0b:	48 8b 05 96 c7 00 00 	mov    0xc796(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225b12:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225b16:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225b1c:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225b22:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225b26:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225b2d:	00 
ffffffff80225b2e:	eb 51                	jmp    ffffffff80225b81 <__RME_Boot+0x677>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225b30:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225b34:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b37:	e8 bd e8 ff ff       	call   ffffffff802243f9 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225b3c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    	CPU_Local->Sig_Tim=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_TIMER]), struct RME_Cap_Sig*)[Count]);
ffffffff80225b40:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225b44:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225b48:	48 89 c2             	mov    %rax,%rdx
ffffffff80225b4b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225b4f:	48 05 80 01 00 00    	add    $0x180,%rax
ffffffff80225b55:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225b59:	48 01 d0             	add    %rdx,%rax
ffffffff80225b5c:	48 89 c2             	mov    %rax,%rdx
ffffffff80225b5f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80225b63:	48 89 50 10          	mov    %rdx,0x10(%rax)
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count)==0);
ffffffff80225b67:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225b6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225b6f:	be 06 00 00 00       	mov    $0x6,%esi
ffffffff80225b74:	48 89 c7             	mov    %rax,%rdi
ffffffff80225b77:	e8 a1 29 ff ff       	call   ffffffff8021851d <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225b7c:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225b81:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225b85:	48 8b 05 1c c7 00 00 	mov    0xc71c(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225b8c:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225b8f:	72 9f                	jb     ffffffff80225b30 <__RME_Boot+0x626>
    }

    /* Create the initial kernel endpoints for all other interrupts */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80225b91:	48 8b 0d 10 c7 00 00 	mov    0xc710(%rip),%rcx        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225b98:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225b9c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225ba0:	49 89 c8             	mov    %rcx,%r8
ffffffff80225ba3:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225ba6:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80225bab:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225bb0:	48 89 c7             	mov    %rax,%rdi
ffffffff80225bb3:	e8 ae 7f fe ff       	call   ffffffff8020db66 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225bb8:	48 8b 05 e9 c6 00 00 	mov    0xc6e9(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225bbf:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225bc3:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225bc9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225bcf:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225bd3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225bda:	00 
ffffffff80225bdb:	eb 51                	jmp    ffffffff80225c2e <__RME_Boot+0x724>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225bdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225be1:	48 89 c7             	mov    %rax,%rdi
ffffffff80225be4:	e8 10 e8 ff ff       	call   ffffffff802243f9 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225be9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    	CPU_Local->Sig_Vct=&(RME_CAP_GETOBJ(&(RME_X64_CPT[RME_BOOT_TBL_INT]), struct RME_Cap_Sig*)[Count]);
ffffffff80225bed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225bf1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225bf5:	48 89 c2             	mov    %rax,%rdx
ffffffff80225bf8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225bfc:	48 05 c0 01 00 00    	add    $0x1c0,%rax
ffffffff80225c02:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225c06:	48 01 d0             	add    %rdx,%rax
ffffffff80225c09:	48 89 c2             	mov    %rax,%rdx
ffffffff80225c0c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80225c10:	48 89 50 18          	mov    %rdx,0x18(%rax)
        RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count)==0);
ffffffff80225c14:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225c18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c1c:	be 07 00 00 00       	mov    $0x7,%esi
ffffffff80225c21:	48 89 c7             	mov    %rax,%rdi
ffffffff80225c24:	e8 f4 28 ff ff       	call   ffffffff8021851d <_RME_Sig_Boot_Crt>
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225c29:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225c2e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225c32:	48 8b 05 6f c6 00 00 	mov    0xc66f(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225c39:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225c3c:	72 9f                	jb     ffffffff80225bdd <__RME_Boot+0x6d3>
    }

    /* Activate the first thread, and set its priority */
    RME_ASSERT(_RME_Cpt_Boot_Crt(RME_X64_CPT, RME_BOOT_INIT_CPT, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80225c3e:	48 8b 0d 63 c6 00 00 	mov    0xc663(%rip),%rcx        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225c45:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80225c49:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225c4d:	49 89 c8             	mov    %rcx,%r8
ffffffff80225c50:	48 89 d1             	mov    %rdx,%rcx
ffffffff80225c53:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80225c58:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225c5d:	48 89 c7             	mov    %rax,%rdi
ffffffff80225c60:	e8 01 7f fe ff       	call   ffffffff8020db66 <_RME_Cpt_Boot_Crt>
    Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_CPT_SIZE(RME_X64_Num_CPU));
ffffffff80225c65:	48 8b 05 3c c6 00 00 	mov    0xc63c(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225c6c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80225c70:	48 05 ff 0f 00 00    	add    $0xfff,%rax
ffffffff80225c76:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80225c7c:	48 01 45 f8          	add    %rax,-0x8(%rbp)
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225c80:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80225c87:	00 
ffffffff80225c88:	eb 4f                	jmp    ffffffff80225cd9 <__RME_Boot+0x7cf>
    {
    	CPU_Local=__RME_X64_CPU_Local_Get_By_CPUID(Count);
ffffffff80225c8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225c8e:	48 89 c7             	mov    %rax,%rdi
ffffffff80225c91:	e8 63 e7 ff ff       	call   ffffffff802243f9 <__RME_X64_CPU_Local_Get_By_CPUID>
ffffffff80225c96:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PRC, Cur_Addr, 0, CPU_Local)>=0);
ffffffff80225c9a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80225c9e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225ca2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225ca6:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80225caa:	ff 75 d0             	push   -0x30(%rbp)
ffffffff80225cad:	41 b9 00 00 00 00    	mov    $0x0,%r9d
ffffffff80225cb3:	49 89 c8             	mov    %rcx,%r8
ffffffff80225cb6:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80225cbb:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80225cc0:	48 89 c7             	mov    %rax,%rdi
ffffffff80225cc3:	e8 ee f0 fe ff       	call   ffffffff80214db6 <_RME_Thd_Boot_Crt>
ffffffff80225cc8:	48 83 c4 10          	add    $0x10,%rsp
        Cur_Addr+=RME_KOT_VA_BASE_ROUND(RME_THD_SIZE(Count));
ffffffff80225ccc:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
ffffffff80225cd3:	00 
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80225cd4:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
ffffffff80225cd9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225cdd:	48 8b 05 c4 c5 00 00 	mov    0xc5c4(%rip),%rax        # ffffffff802322a8 <RME_X64_Num_CPU>
ffffffff80225ce4:	48 39 c2             	cmp    %rax,%rdx
ffffffff80225ce7:	72 a1                	jb     ffffffff80225c8a <__RME_Boot+0x780>
    }

    RME_DBG_S("\r\nKot registration end offset: 0x");
ffffffff80225ce9:	48 c7 c7 28 9b 22 80 	mov    $0xffffffff80229b28,%rdi
ffffffff80225cf0:	e8 16 6d fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(((Cur_Addr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER)/8);
ffffffff80225cf5:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80225cfc:	80 00 00 
ffffffff80225cff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d03:	48 01 d0             	add    %rdx,%rax
ffffffff80225d06:	48 c1 e8 04          	shr    $0x4,%rax
ffffffff80225d0a:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80225d0e:	48 89 c7             	mov    %rax,%rdi
ffffffff80225d11:	e8 33 6c fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\r\nKom1 frontier: 0x");
ffffffff80225d16:	48 c7 c7 4a 9b 22 80 	mov    $0xffffffff80229b4a,%rdi
ffffffff80225d1d:	e8 e9 6c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_H(Cur_Addr);
ffffffff80225d22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225d26:	48 89 c7             	mov    %rax,%rdi
ffffffff80225d29:	e8 1b 6c fe ff       	call   ffffffff8020c949 <RME_Hex_Print>

    /* Print sizes and halt */
    RME_DBG_S("\r\nThread object size: ");
ffffffff80225d2e:	48 c7 c7 5e 9b 22 80 	mov    $0xffffffff80229b5e,%rdi
ffffffff80225d35:	e8 d1 6c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Thd_Struct)/sizeof(rme_ptr_t));
ffffffff80225d3a:	bf 16 00 00 00       	mov    $0x16,%edi
ffffffff80225d3f:	e8 cd 6a fe ff       	call   ffffffff8020c811 <RME_Int_Print>
    RME_DBG_S("\r\nInvocation object size: ");
ffffffff80225d44:	48 c7 c7 75 9b 22 80 	mov    $0xffffffff80229b75,%rdi
ffffffff80225d4b:	e8 bb 6c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(sizeof(struct RME_Inv_Struct)/sizeof(rme_ptr_t));
ffffffff80225d50:	bf 09 00 00 00       	mov    $0x9,%edi
ffffffff80225d55:	e8 b7 6a fe ff       	call   ffffffff8020c811 <RME_Int_Print>

    /* Initialize the timer and start its interrupt routing */
    RME_DBG_S("\r\nTimer init\r\n");
ffffffff80225d5a:	48 c7 c7 90 9b 22 80 	mov    $0xffffffff80229b90,%rdi
ffffffff80225d61:	e8 a5 6c fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    __RME_X64_Timer_Init();
ffffffff80225d66:	e8 66 ed ff ff       	call   ffffffff80224ad1 <__RME_X64_Timer_Init>
    __RME_X64_IOAPIC_Int_Enable(2,0);
ffffffff80225d6b:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80225d70:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff80225d75:	e8 23 e9 ff ff       	call   ffffffff8022469d <__RME_X64_IOAPIC_Int_Enable>
    /* Change page tables */
    __RME_Pgt_Set(RME_CAP_GETOBJ((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prc->Pgt,rme_ptr_t));
ffffffff80225d7a:	e8 c0 5a fe ff       	call   ffffffff8020b83f <__RME_X64_CPU_Local_Get>
ffffffff80225d7f:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80225d83:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80225d87:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80225d8b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225d8f:	48 89 c7             	mov    %rax,%rdi
ffffffff80225d92:	e8 2c 0b 00 00       	call   ffffffff802268c3 <__RME_Pgt_Set>

    /* Load the init process to address 0x00 - It should be smaller than 2MB */
    extern const unsigned char UVM_Init[];
    _RME_Memcpy(0,(void*)UVM_Init,RME_POW2(RME_PGT_SIZE_2M));
ffffffff80225d97:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff80225d9c:	48 c7 c6 c0 72 22 80 	mov    $0xffffffff802272c0,%rsi
ffffffff80225da3:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225da8:	e8 1e 71 fe ff       	call   ffffffff8020cecb <_RME_Memcpy>

    /* Now other non-booting processors may proceed and go into their threads */
    RME_X64_CPU_Cnt=0;
ffffffff80225dad:	48 c7 05 f8 c4 00 00 	movq   $0x0,0xc4f8(%rip)        # ffffffff802322b0 <RME_X64_CPU_Cnt>
ffffffff80225db4:	00 00 00 00 
    /* Boot into the init thread */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff80225db8:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80225dbd:	be 00 08 20 00       	mov    $0x200800,%esi
ffffffff80225dc2:	bf 00 00 00 00       	mov    $0x0,%edi
ffffffff80225dc7:	e8 f4 5a fe ff       	call   ffffffff8020b8c0 <__RME_Enter_User_Mode>
    return 0;
ffffffff80225dcc:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80225dd1:	c9                   	leave
ffffffff80225dd2:	c3                   	ret

ffffffff80225dd3 <__RME_Reboot>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Reboot(void)
{
ffffffff80225dd3:	f3 0f 1e fa          	endbr64
ffffffff80225dd7:	55                   	push   %rbp
ffffffff80225dd8:	48 89 e5             	mov    %rsp,%rbp
    /* Currently we cannot parse th FADT yet. We need these info to shutdown the machine */
    /* outportb(FADT->ResetReg.Address, FADT->ResetValue); */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff80225ddb:	90                   	nop
ffffffff80225ddc:	5d                   	pop    %rbp
ffffffff80225ddd:	c3                   	ret

ffffffff80225dde <__RME_Shutdown>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Shutdown(void)
{
ffffffff80225dde:	f3 0f 1e fa          	endbr64
ffffffff80225de2:	55                   	push   %rbp
ffffffff80225de3:	48 89 e5             	mov    %rsp,%rbp
    /* Currently we cannot parse th DSDT yet. We need these info to shutdown the machine */
    /* outw(PM1a_CNT,SLP_TYPa|SLP_EN) */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
}
ffffffff80225de6:	90                   	nop
ffffffff80225de7:	5d                   	pop    %rbp
ffffffff80225de8:	c3                   	ret

ffffffff80225de9 <__RME_Get_Syscall_Param>:
              rme_ptr_t* Capid - The capability ID number.
              rme_ptr_t* Param - The parameters.
Return      : None.
******************************************************************************/
void __RME_Get_Syscall_Param(struct RME_Reg_Struct* Reg, rme_ptr_t* Svc, rme_ptr_t* Capid, rme_ptr_t* Param)
{
ffffffff80225de9:	f3 0f 1e fa          	endbr64
ffffffff80225ded:	55                   	push   %rbp
ffffffff80225dee:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225df1:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80225df5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225df9:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80225dfd:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80225e01:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    *Svc=(Reg->RDI)>>32;
ffffffff80225e05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e09:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80225e0d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80225e11:	48 89 c2             	mov    %rax,%rdx
ffffffff80225e14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225e18:	48 89 10             	mov    %rdx,(%rax)
    *Capid=(Reg->RDI)&0xFFFFFFFF;
ffffffff80225e1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e1f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80225e23:	89 c2                	mov    %eax,%edx
ffffffff80225e25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80225e29:	48 89 10             	mov    %rdx,(%rax)
    Param[0]=Reg->RSI;
ffffffff80225e2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e30:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80225e34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225e38:	48 89 10             	mov    %rdx,(%rax)
    Param[1]=Reg->RDX;
ffffffff80225e3b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225e3f:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff80225e43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e47:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80225e4b:	48 89 02             	mov    %rax,(%rdx)
    Param[2]=Reg->R8;
ffffffff80225e4e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80225e52:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff80225e56:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e5a:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80225e5e:	48 89 02             	mov    %rax,(%rdx)
}
ffffffff80225e61:	90                   	nop
ffffffff80225e62:	c9                   	leave
ffffffff80225e63:	c3                   	ret

ffffffff80225e64 <__RME_Set_Syscall_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Syscall_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff80225e64:	f3 0f 1e fa          	endbr64
ffffffff80225e68:	55                   	push   %rbp
ffffffff80225e69:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225e6c:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225e70:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225e74:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff80225e78:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225e7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225e80:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff80225e83:	90                   	nop
ffffffff80225e84:	c9                   	leave
ffffffff80225e85:	c3                   	ret

ffffffff80225e86 <__RME_Thd_Reg_Init>:
              rme_ptr_t Param - The parameter to pass to it.
Output      : struct RME_Reg_Struct* Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Init(rme_ptr_t Attr,rme_ptr_t Entry, rme_ptr_t Stack, rme_ptr_t Param, struct RME_Reg_Struct* Reg)
{
ffffffff80225e86:	f3 0f 1e fa          	endbr64
ffffffff80225e8a:	55                   	push   %rbp
ffffffff80225e8b:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225e8e:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80225e92:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225e96:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80225e9a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80225e9e:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff80225ea2:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    /* We use the SYSRET path on creation if possible */
    Reg->INT_NUM=0x10000;
ffffffff80225ea6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225eaa:	48 c7 40 78 00 00 01 	movq   $0x10000,0x78(%rax)
ffffffff80225eb1:	00 
    Reg->ERROR_CODE=0;
ffffffff80225eb2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225eb6:	48 c7 80 80 00 00 00 	movq   $0x0,0x80(%rax)
ffffffff80225ebd:	00 00 00 00 
    Reg->RIP=Entry;
ffffffff80225ec1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225ec5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80225ec9:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff80225ed0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225ed4:	48 c7 80 90 00 00 00 	movq   $0x2b,0x90(%rax)
ffffffff80225edb:	2b 00 00 00 
    /* IOPL 3, IF */
    Reg->RFLAGS=0x3200;
ffffffff80225edf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225ee3:	48 c7 80 98 00 00 00 	movq   $0x3200,0x98(%rax)
ffffffff80225eea:	00 32 00 00 
    Reg->RSP=Stack;
ffffffff80225eee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225ef2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80225ef6:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
    Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff80225efd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225f01:	48 c7 80 a8 00 00 00 	movq   $0x23,0xa8(%rax)
ffffffff80225f08:	23 00 00 00 
    /* Pass the parameter */
    Reg->RDI=Param;
ffffffff80225f0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80225f10:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80225f14:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff80225f18:	90                   	nop
ffffffff80225f19:	c9                   	leave
ffffffff80225f1a:	c3                   	ret

ffffffff80225f1b <__RME_Thd_Reg_Copy>:
Input       : struct RME_Reg_Struct* Src - The source register set.
Output      : struct RME_Reg_Struct* Dst - The destination register set.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Copy(struct RME_Reg_Struct* Dst, struct RME_Reg_Struct* Src)
{
ffffffff80225f1b:	f3 0f 1e fa          	endbr64
ffffffff80225f1f:	55                   	push   %rbp
ffffffff80225f20:	48 89 e5             	mov    %rsp,%rbp
ffffffff80225f23:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80225f27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80225f2b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Make sure that the ordering is the same so the compiler can optimize */
    Dst->RAX=Src->RAX;
ffffffff80225f2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f33:	48 8b 10             	mov    (%rax),%rdx
ffffffff80225f36:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f3a:	48 89 10             	mov    %rdx,(%rax)
    Dst->RBX=Src->RBX;
ffffffff80225f3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f41:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80225f45:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f49:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Dst->RCX=Src->RCX;
ffffffff80225f4d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f51:	48 8b 50 10          	mov    0x10(%rax),%rdx
ffffffff80225f55:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f59:	48 89 50 10          	mov    %rdx,0x10(%rax)
    Dst->RDX=Src->RDX;
ffffffff80225f5d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f61:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff80225f65:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f69:	48 89 50 18          	mov    %rdx,0x18(%rax)
    Dst->RSI=Src->RSI;
ffffffff80225f6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f71:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff80225f75:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f79:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Dst->RDI=Src->RDI;
ffffffff80225f7d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f81:	48 8b 50 28          	mov    0x28(%rax),%rdx
ffffffff80225f85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f89:	48 89 50 28          	mov    %rdx,0x28(%rax)
    Dst->RBP=Src->RBP;
ffffffff80225f8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225f91:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80225f95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225f99:	48 89 50 30          	mov    %rdx,0x30(%rax)
    Dst->R8=Src->R8;
ffffffff80225f9d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fa1:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff80225fa5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fa9:	48 89 50 38          	mov    %rdx,0x38(%rax)
    Dst->R9=Src->R9;
ffffffff80225fad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fb1:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80225fb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fb9:	48 89 50 40          	mov    %rdx,0x40(%rax)
    Dst->R10=Src->R10;
ffffffff80225fbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fc1:	48 8b 50 48          	mov    0x48(%rax),%rdx
ffffffff80225fc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fc9:	48 89 50 48          	mov    %rdx,0x48(%rax)
    Dst->R11=Src->R11;
ffffffff80225fcd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fd1:	48 8b 50 50          	mov    0x50(%rax),%rdx
ffffffff80225fd5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fd9:	48 89 50 50          	mov    %rdx,0x50(%rax)
    Dst->R12=Src->R12;
ffffffff80225fdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225fe1:	48 8b 50 58          	mov    0x58(%rax),%rdx
ffffffff80225fe5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225fe9:	48 89 50 58          	mov    %rdx,0x58(%rax)
    Dst->R13=Src->R13;
ffffffff80225fed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80225ff1:	48 8b 50 60          	mov    0x60(%rax),%rdx
ffffffff80225ff5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80225ff9:	48 89 50 60          	mov    %rdx,0x60(%rax)
    Dst->R14=Src->R14;
ffffffff80225ffd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226001:	48 8b 50 68          	mov    0x68(%rax),%rdx
ffffffff80226005:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226009:	48 89 50 68          	mov    %rdx,0x68(%rax)
    Dst->R15=Src->R15;
ffffffff8022600d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226011:	48 8b 50 70          	mov    0x70(%rax),%rdx
ffffffff80226015:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226019:	48 89 50 70          	mov    %rdx,0x70(%rax)
    /* Don't worry about user modifying INTNUM. If he or she did that it will corrupt userspace */
    Dst->INT_NUM=Src->INT_NUM;
ffffffff8022601d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226021:	48 8b 50 78          	mov    0x78(%rax),%rdx
ffffffff80226025:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226029:	48 89 50 78          	mov    %rdx,0x78(%rax)
    Dst->ERROR_CODE=Src->ERROR_CODE;
ffffffff8022602d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226031:	48 8b 90 80 00 00 00 	mov    0x80(%rax),%rdx
ffffffff80226038:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022603c:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
    /* This will always be canonical upon SYSRET, because we will truncate in on return */
    Dst->RIP=Src->RIP;
ffffffff80226043:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226047:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
ffffffff8022604e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226052:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Dst->CS=Src->CS;
ffffffff80226059:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022605d:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
ffffffff80226064:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226068:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
    Dst->RFLAGS=Src->RFLAGS;
ffffffff8022606f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226073:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
ffffffff8022607a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022607e:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
    Dst->RSP=Src->RSP;
ffffffff80226085:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226089:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
ffffffff80226090:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226094:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
    Dst->SS=Src->SS;
ffffffff8022609b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022609f:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
ffffffff802260a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802260aa:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
ffffffff802260b1:	90                   	nop
ffffffff802260b2:	c9                   	leave
ffffffff802260b3:	c3                   	ret

ffffffff802260b4 <__RME_Thd_Cop_Init>:
Input       : struct RME_Reg_Struct* Reg - The register struct to help initialize the coprocessor.
Output      : struct RME_Reg_Cop_Struct* Cop_Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Init(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff802260b4:	f3 0f 1e fa          	endbr64
ffffffff802260b8:	55                   	push   %rbp
ffffffff802260b9:	48 89 e5             	mov    %rsp,%rbp
ffffffff802260bc:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802260c0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802260c4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Empty function, return immediately. The FPU contents is not predictable */
}
ffffffff802260c8:	90                   	nop
ffffffff802260c9:	c9                   	leave
ffffffff802260ca:	c3                   	ret

ffffffff802260cb <__RME_Thd_Cop_Save>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Save(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff802260cb:	f3 0f 1e fa          	endbr64
ffffffff802260cf:	55                   	push   %rbp
ffffffff802260d0:	48 89 e5             	mov    %rsp,%rbp
ffffffff802260d3:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802260d7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802260db:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not used for now */
}
ffffffff802260df:	90                   	nop
ffffffff802260e0:	c9                   	leave
ffffffff802260e1:	c3                   	ret

ffffffff802260e2 <__RME_Thd_Cop_Restore>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Restore(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff802260e2:	f3 0f 1e fa          	endbr64
ffffffff802260e6:	55                   	push   %rbp
ffffffff802260e7:	48 89 e5             	mov    %rsp,%rbp
ffffffff802260ea:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802260ee:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802260f2:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not used for now */
}
ffffffff802260f6:	90                   	nop
ffffffff802260f7:	c9                   	leave
ffffffff802260f8:	c3                   	ret

ffffffff802260f9 <__RME_Inv_Reg_Save>:
Input       : struct RME_Reg_Struct* Reg - The register set.
Output      : struct RME_Iret_Struct* Ret - The invocation return register context.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Save(struct RME_Iret_Struct* Ret, struct RME_Reg_Struct* Reg)
{
ffffffff802260f9:	f3 0f 1e fa          	endbr64
ffffffff802260fd:	55                   	push   %rbp
ffffffff802260fe:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226101:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226105:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226109:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Ret->RIP=Reg->RIP;
ffffffff8022610d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226111:	48 8b 90 88 00 00 00 	mov    0x88(%rax),%rdx
ffffffff80226118:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022611c:	48 89 10             	mov    %rdx,(%rax)
    Ret->RSP=Reg->RSP;
ffffffff8022611f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226123:	48 8b 90 a0 00 00 00 	mov    0xa0(%rax),%rdx
ffffffff8022612a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022612e:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80226132:	90                   	nop
ffffffff80226133:	c9                   	leave
ffffffff80226134:	c3                   	ret

ffffffff80226135 <__RME_Inv_Reg_Restore>:
Input       : struct RME_Iret_Struct* Ret - The invocation return register context.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Restore(struct RME_Reg_Struct* Reg, struct RME_Iret_Struct* Ret)
{
ffffffff80226135:	f3 0f 1e fa          	endbr64
ffffffff80226139:	55                   	push   %rbp
ffffffff8022613a:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022613d:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80226141:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226145:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RIP=Ret->RIP;
ffffffff80226149:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022614d:	48 8b 10             	mov    (%rax),%rdx
ffffffff80226150:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226154:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
    Reg->RSP=Ret->RSP;
ffffffff8022615b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022615f:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff80226163:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226167:	48 89 90 a0 00 00 00 	mov    %rdx,0xa0(%rax)
}
ffffffff8022616e:	90                   	nop
ffffffff8022616f:	c9                   	leave
ffffffff80226170:	c3                   	ret

ffffffff80226171 <__RME_Set_Inv_Retval>:
Input       : rme_ret_t Retval - The return value.
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Inv_Retval(struct RME_Reg_Struct* Reg, rme_ret_t Retval)
{
ffffffff80226171:	f3 0f 1e fa          	endbr64
ffffffff80226175:	55                   	push   %rbp
ffffffff80226176:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226179:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022617d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80226181:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff80226185:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80226189:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022618d:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff80226191:	90                   	nop
ffffffff80226192:	c9                   	leave
ffffffff80226193:	c3                   	ret

ffffffff80226194 <write_string>:
/* End Function:__RME_Set_Inv_Retval *****************************************/

/* Crap for test */
void write_string( int colour, const char *string, rme_ptr_t pos)
{
ffffffff80226194:	f3 0f 1e fa          	endbr64
ffffffff80226198:	55                   	push   %rbp
ffffffff80226199:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022619c:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff802261a0:	89 7d ec             	mov    %edi,-0x14(%rbp)
ffffffff802261a3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff802261a7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
    volatile char *video = (volatile char*)RME_X64_PA2VA(pos+0xB8000);
ffffffff802261ab:	48 ba 00 80 0b 00 00 	movabs $0xffff8000000b8000,%rdx
ffffffff802261b2:	80 ff ff 
ffffffff802261b5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff802261b9:	48 01 d0             	add    %rdx,%rax
ffffffff802261bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    while( *string != 0 )
ffffffff802261c0:	eb 2e                	jmp    ffffffff802261f0 <write_string+0x5c>
    {
        *video++ = *string++;
ffffffff802261c2:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff802261c6:	48 8d 42 01          	lea    0x1(%rdx),%rax
ffffffff802261ca:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff802261ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802261d2:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff802261d6:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff802261da:	0f b6 12             	movzbl (%rdx),%edx
ffffffff802261dd:	88 10                	mov    %dl,(%rax)
        *video++ = colour;
ffffffff802261df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802261e3:	48 8d 50 01          	lea    0x1(%rax),%rdx
ffffffff802261e7:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff802261eb:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff802261ee:	88 10                	mov    %dl,(%rax)
    while( *string != 0 )
ffffffff802261f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802261f4:	0f b6 00             	movzbl (%rax),%eax
ffffffff802261f7:	84 c0                	test   %al,%al
ffffffff802261f9:	75 c7                	jne    ffffffff802261c2 <write_string+0x2e>
    }
}
ffffffff802261fb:	90                   	nop
ffffffff802261fc:	90                   	nop
ffffffff802261fd:	c9                   	leave
ffffffff802261fe:	c3                   	ret

ffffffff802261ff <NDBG>:

void NDBG(void)
{
ffffffff802261ff:	f3 0f 1e fa          	endbr64
ffffffff80226203:	55                   	push   %rbp
ffffffff80226204:	48 89 e5             	mov    %rsp,%rbp
    write_string( 0x07, "Here", 0);
ffffffff80226207:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8022620c:	48 c7 c6 9f 9b 22 80 	mov    $0xffffffff80229b9f,%rsi
ffffffff80226213:	bf 07 00 00 00       	mov    $0x7,%edi
ffffffff80226218:	e8 77 ff ff ff       	call   ffffffff80226194 <write_string>
}
ffffffff8022621d:	90                   	nop
ffffffff8022621e:	5d                   	pop    %rbp
ffffffff8022621f:	c3                   	ret

ffffffff80226220 <__RME_Kern_Func_Handler>:
Output      : None.
Return      : rme_ret_t - The value that the function returned.
******************************************************************************/
rme_ret_t __RME_Kern_Func_Handler(struct RME_Cap_Cpt* Cpt, struct RME_Reg_Struct* Reg,
                                  rme_ptr_t Func_ID, rme_ptr_t Sub_ID, rme_ptr_t Param1, rme_ptr_t Param2)
{
ffffffff80226220:	f3 0f 1e fa          	endbr64
ffffffff80226224:	55                   	push   %rbp
ffffffff80226225:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226228:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8022622c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226230:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226234:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80226238:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff8022623c:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
ffffffff80226240:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
    /* Now always call the HALT */
    char String[16];

    String[0]=Param1/10000000+'0';
ffffffff80226244:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226248:	48 ba bd 42 7a e5 d5 	movabs $0xd6bf94d5e57a42bd,%rdx
ffffffff8022624f:	94 bf d6 
ffffffff80226252:	48 f7 e2             	mul    %rdx
ffffffff80226255:	48 89 d0             	mov    %rdx,%rax
ffffffff80226258:	48 c1 e8 17          	shr    $0x17,%rax
ffffffff8022625c:	83 c0 30             	add    $0x30,%eax
ffffffff8022625f:	88 45 f0             	mov    %al,-0x10(%rbp)
    String[1]=(Param1/1000000)%10+'0';
ffffffff80226262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226266:	48 ba db 34 b6 d7 82 	movabs $0x431bde82d7b634db,%rdx
ffffffff8022626d:	de 1b 43 
ffffffff80226270:	48 f7 e2             	mul    %rdx
ffffffff80226273:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226276:	48 c1 e9 12          	shr    $0x12,%rcx
ffffffff8022627a:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226281:	cc cc cc 
ffffffff80226284:	48 89 c8             	mov    %rcx,%rax
ffffffff80226287:	48 f7 e2             	mul    %rdx
ffffffff8022628a:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8022628e:	48 89 d0             	mov    %rdx,%rax
ffffffff80226291:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226295:	48 01 d0             	add    %rdx,%rax
ffffffff80226298:	48 01 c0             	add    %rax,%rax
ffffffff8022629b:	48 29 c1             	sub    %rax,%rcx
ffffffff8022629e:	48 89 ca             	mov    %rcx,%rdx
ffffffff802262a1:	89 d0                	mov    %edx,%eax
ffffffff802262a3:	83 c0 30             	add    $0x30,%eax
ffffffff802262a6:	88 45 f1             	mov    %al,-0xf(%rbp)
    String[2]=(Param1/100000)%10+'0';
ffffffff802262a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802262ad:	48 c1 e8 05          	shr    $0x5,%rax
ffffffff802262b1:	48 ba 43 78 b4 71 c4 	movabs $0xa7c5ac471b47843,%rdx
ffffffff802262b8:	5a 7c 0a 
ffffffff802262bb:	48 f7 e2             	mul    %rdx
ffffffff802262be:	48 89 d1             	mov    %rdx,%rcx
ffffffff802262c1:	48 c1 e9 07          	shr    $0x7,%rcx
ffffffff802262c5:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802262cc:	cc cc cc 
ffffffff802262cf:	48 89 c8             	mov    %rcx,%rax
ffffffff802262d2:	48 f7 e2             	mul    %rdx
ffffffff802262d5:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802262d9:	48 89 d0             	mov    %rdx,%rax
ffffffff802262dc:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802262e0:	48 01 d0             	add    %rdx,%rax
ffffffff802262e3:	48 01 c0             	add    %rax,%rax
ffffffff802262e6:	48 29 c1             	sub    %rax,%rcx
ffffffff802262e9:	48 89 ca             	mov    %rcx,%rdx
ffffffff802262ec:	89 d0                	mov    %edx,%eax
ffffffff802262ee:	83 c0 30             	add    $0x30,%eax
ffffffff802262f1:	88 45 f2             	mov    %al,-0xe(%rbp)
    String[3]=(Param1/10000)%10+'0';
ffffffff802262f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802262f8:	48 ba 4b 59 86 38 d6 	movabs $0x346dc5d63886594b,%rdx
ffffffff802262ff:	c5 6d 34 
ffffffff80226302:	48 f7 e2             	mul    %rdx
ffffffff80226305:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226308:	48 c1 e9 0b          	shr    $0xb,%rcx
ffffffff8022630c:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226313:	cc cc cc 
ffffffff80226316:	48 89 c8             	mov    %rcx,%rax
ffffffff80226319:	48 f7 e2             	mul    %rdx
ffffffff8022631c:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226320:	48 89 d0             	mov    %rdx,%rax
ffffffff80226323:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226327:	48 01 d0             	add    %rdx,%rax
ffffffff8022632a:	48 01 c0             	add    %rax,%rax
ffffffff8022632d:	48 29 c1             	sub    %rax,%rcx
ffffffff80226330:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226333:	89 d0                	mov    %edx,%eax
ffffffff80226335:	83 c0 30             	add    $0x30,%eax
ffffffff80226338:	88 45 f3             	mov    %al,-0xd(%rbp)
    String[4]=(Param1/1000)%10+'0';
ffffffff8022633b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8022633f:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80226343:	48 ba cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rdx
ffffffff8022634a:	9b c4 20 
ffffffff8022634d:	48 f7 e2             	mul    %rdx
ffffffff80226350:	48 89 d1             	mov    %rdx,%rcx
ffffffff80226353:	48 c1 e9 04          	shr    $0x4,%rcx
ffffffff80226357:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff8022635e:	cc cc cc 
ffffffff80226361:	48 89 c8             	mov    %rcx,%rax
ffffffff80226364:	48 f7 e2             	mul    %rdx
ffffffff80226367:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff8022636b:	48 89 d0             	mov    %rdx,%rax
ffffffff8022636e:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226372:	48 01 d0             	add    %rdx,%rax
ffffffff80226375:	48 01 c0             	add    %rax,%rax
ffffffff80226378:	48 29 c1             	sub    %rax,%rcx
ffffffff8022637b:	48 89 ca             	mov    %rcx,%rdx
ffffffff8022637e:	89 d0                	mov    %edx,%eax
ffffffff80226380:	83 c0 30             	add    $0x30,%eax
ffffffff80226383:	88 45 f4             	mov    %al,-0xc(%rbp)
    String[5]=(Param1/100)%10+'0';
ffffffff80226386:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8022638a:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff8022638e:	48 ba c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rdx
ffffffff80226395:	c2 f5 28 
ffffffff80226398:	48 f7 e2             	mul    %rdx
ffffffff8022639b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8022639e:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff802263a2:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802263a9:	cc cc cc 
ffffffff802263ac:	48 89 c8             	mov    %rcx,%rax
ffffffff802263af:	48 f7 e2             	mul    %rdx
ffffffff802263b2:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802263b6:	48 89 d0             	mov    %rdx,%rax
ffffffff802263b9:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff802263bd:	48 01 d0             	add    %rdx,%rax
ffffffff802263c0:	48 01 c0             	add    %rax,%rax
ffffffff802263c3:	48 29 c1             	sub    %rax,%rcx
ffffffff802263c6:	48 89 ca             	mov    %rcx,%rdx
ffffffff802263c9:	89 d0                	mov    %edx,%eax
ffffffff802263cb:	83 c0 30             	add    $0x30,%eax
ffffffff802263ce:	88 45 f5             	mov    %al,-0xb(%rbp)
    String[6]=(Param1/10)%10+'0';
ffffffff802263d1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff802263d5:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802263dc:	cc cc cc 
ffffffff802263df:	48 f7 e2             	mul    %rdx
ffffffff802263e2:	48 89 d1             	mov    %rdx,%rcx
ffffffff802263e5:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff802263e9:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff802263f0:	cc cc cc 
ffffffff802263f3:	48 89 c8             	mov    %rcx,%rax
ffffffff802263f6:	48 f7 e2             	mul    %rdx
ffffffff802263f9:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff802263fd:	48 89 d0             	mov    %rdx,%rax
ffffffff80226400:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226404:	48 01 d0             	add    %rdx,%rax
ffffffff80226407:	48 01 c0             	add    %rax,%rax
ffffffff8022640a:	48 29 c1             	sub    %rax,%rcx
ffffffff8022640d:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226410:	89 d0                	mov    %edx,%eax
ffffffff80226412:	83 c0 30             	add    $0x30,%eax
ffffffff80226415:	88 45 f6             	mov    %al,-0xa(%rbp)
    String[7]=(Param1)%10+'0';
ffffffff80226418:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8022641c:	48 ba cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rdx
ffffffff80226423:	cc cc cc 
ffffffff80226426:	48 89 c8             	mov    %rcx,%rax
ffffffff80226429:	48 f7 e2             	mul    %rdx
ffffffff8022642c:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80226430:	48 89 d0             	mov    %rdx,%rax
ffffffff80226433:	48 c1 e0 02          	shl    $0x2,%rax
ffffffff80226437:	48 01 d0             	add    %rdx,%rax
ffffffff8022643a:	48 01 c0             	add    %rax,%rax
ffffffff8022643d:	48 29 c1             	sub    %rax,%rcx
ffffffff80226440:	48 89 ca             	mov    %rcx,%rdx
ffffffff80226443:	89 d0                	mov    %edx,%eax
ffffffff80226445:	83 c0 30             	add    $0x30,%eax
ffffffff80226448:	88 45 f7             	mov    %al,-0x9(%rbp)
    String[8]='\0';
ffffffff8022644b:	c6 45 f8 00          	movb   $0x0,-0x8(%rbp)
    write_string(Func_ID, (const char *)String, Sub_ID);
ffffffff8022644f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226453:	89 c1                	mov    %eax,%ecx
ffffffff80226455:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80226459:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
ffffffff8022645d:	48 89 c6             	mov    %rax,%rsi
ffffffff80226460:	89 cf                	mov    %ecx,%edi
ffffffff80226462:	e8 2d fd ff ff       	call   ffffffff80226194 <write_string>

    //__RME_X64_Halt();
    return 0;
ffffffff80226467:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8022646c:	c9                   	leave
ffffffff8022646d:	c3                   	ret

ffffffff8022646e <__RME_X64_Fault_Handler>:
              rme_ptr_t Reason - The fault source.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Fault_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Reason)
{
ffffffff8022646e:	f3 0f 1e fa          	endbr64
ffffffff80226472:	55                   	push   %rbp
ffffffff80226473:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226476:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022647a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022647e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not handling faults */
    RME_DBG_S("\n\r\n\r*** Fault: ");RME_DBG_I(Reason);RME_DBG_S(" - ");
ffffffff80226482:	48 c7 c7 a4 9b 22 80 	mov    $0xffffffff80229ba4,%rdi
ffffffff80226489:	e8 7d 65 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022648e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226492:	48 89 c7             	mov    %rax,%rdi
ffffffff80226495:	e8 77 63 fe ff       	call   ffffffff8020c811 <RME_Int_Print>
ffffffff8022649a:	48 c7 c7 b4 9b 22 80 	mov    $0xffffffff80229bb4,%rdi
ffffffff802264a1:	e8 65 65 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    /* When handling debug exceptions, note CVE 2018-8897, we may get something at
     * kernel level - If this is what we have, the user must have touched SS + INT */
    /* Print reason */
    switch(Reason)
ffffffff802264a6:	48 83 7d f0 14       	cmpq   $0x14,-0x10(%rbp)
ffffffff802264ab:	0f 87 4d 01 00 00    	ja     ffffffff802265fe <__RME_X64_Fault_Handler+0x190>
ffffffff802264b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802264b5:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff802264b9:	48 05 18 9f 22 80    	add    $0xffffffff80229f18,%rax
ffffffff802264bf:	48 8b 00             	mov    (%rax),%rax
ffffffff802264c2:	3e ff e0             	notrack jmp *%rax
    {
        case RME_X64_FAULT_DE:RME_DBG_S("Divide error");break;
ffffffff802264c5:	48 c7 c7 b8 9b 22 80 	mov    $0xffffffff80229bb8,%rdi
ffffffff802264cc:	e8 3a 65 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802264d1:	e9 35 01 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_DB:RME_DBG_S("Debug exception");break;
ffffffff802264d6:	48 c7 c7 c5 9b 22 80 	mov    $0xffffffff80229bc5,%rdi
ffffffff802264dd:	e8 29 65 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802264e2:	e9 24 01 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_INT_NMI:RME_DBG_S("NMI error");break;
ffffffff802264e7:	48 c7 c7 d5 9b 22 80 	mov    $0xffffffff80229bd5,%rdi
ffffffff802264ee:	e8 18 65 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802264f3:	e9 13 01 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_BP:RME_DBG_S("Debug breakpoint");break;
ffffffff802264f8:	48 c7 c7 df 9b 22 80 	mov    $0xffffffff80229bdf,%rdi
ffffffff802264ff:	e8 07 65 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226504:	e9 02 01 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_TRAP_OF:RME_DBG_S("Overflow exception");break;
ffffffff80226509:	48 c7 c7 f0 9b 22 80 	mov    $0xffffffff80229bf0,%rdi
ffffffff80226510:	e8 f6 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226515:	e9 f1 00 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_BR:RME_DBG_S("Bound range exception");break;
ffffffff8022651a:	48 c7 c7 03 9c 22 80 	mov    $0xffffffff80229c03,%rdi
ffffffff80226521:	e8 e5 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226526:	e9 e0 00 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_UD:RME_DBG_S("Undefined instruction");break;
ffffffff8022652b:	48 c7 c7 19 9c 22 80 	mov    $0xffffffff80229c19,%rdi
ffffffff80226532:	e8 d4 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226537:	e9 cf 00 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_NM:RME_DBG_S("Device not available");break;
ffffffff8022653c:	48 c7 c7 2f 9c 22 80 	mov    $0xffffffff80229c2f,%rdi
ffffffff80226543:	e8 c3 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226548:	e9 be 00 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_DF:RME_DBG_S("Double(nested) fault exception");break;
ffffffff8022654d:	48 c7 c7 48 9c 22 80 	mov    $0xffffffff80229c48,%rdi
ffffffff80226554:	e8 b2 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226559:	e9 ad 00 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_OLD_MF:RME_DBG_S("Coprocessor overrun - not used later on");break;
ffffffff8022655e:	48 c7 c7 68 9c 22 80 	mov    $0xffffffff80229c68,%rdi
ffffffff80226565:	e8 a1 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022656a:	e9 9c 00 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_TS:RME_DBG_S("Invalid TSS exception");break;
ffffffff8022656f:	48 c7 c7 90 9c 22 80 	mov    $0xffffffff80229c90,%rdi
ffffffff80226576:	e8 90 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022657b:	e9 8b 00 00 00       	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_NP:RME_DBG_S("Segment not present");break;
ffffffff80226580:	48 c7 c7 a6 9c 22 80 	mov    $0xffffffff80229ca6,%rdi
ffffffff80226587:	e8 7f 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022658c:	eb 7d                	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_SS:RME_DBG_S("Stack fault exception");break;
ffffffff8022658e:	48 c7 c7 ba 9c 22 80 	mov    $0xffffffff80229cba,%rdi
ffffffff80226595:	e8 71 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022659a:	eb 6f                	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_GP:RME_DBG_S("General protection exception");break;
ffffffff8022659c:	48 c7 c7 d0 9c 22 80 	mov    $0xffffffff80229cd0,%rdi
ffffffff802265a3:	e8 63 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265a8:	eb 61                	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_PF:RME_DBG_S("Page fault exception");break;
ffffffff802265aa:	48 c7 c7 ed 9c 22 80 	mov    $0xffffffff80229ced,%rdi
ffffffff802265b1:	e8 55 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265b6:	eb 53                	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_MF:RME_DBG_S("X87 FPU floating-point error:");break;
ffffffff802265b8:	48 c7 c7 02 9d 22 80 	mov    $0xffffffff80229d02,%rdi
ffffffff802265bf:	e8 47 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265c4:	eb 45                	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_AC:RME_DBG_S("Alignment check exception");break;
ffffffff802265c6:	48 c7 c7 20 9d 22 80 	mov    $0xffffffff80229d20,%rdi
ffffffff802265cd:	e8 39 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265d2:	eb 37                	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_ABORT_MC:RME_DBG_S("Machine check exception");break;
ffffffff802265d4:	48 c7 c7 3a 9d 22 80 	mov    $0xffffffff80229d3a,%rdi
ffffffff802265db:	e8 2b 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265e0:	eb 29                	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_XM:RME_DBG_S("SIMD floating-point exception");break;
ffffffff802265e2:	48 c7 c7 52 9d 22 80 	mov    $0xffffffff80229d52,%rdi
ffffffff802265e9:	e8 1d 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265ee:	eb 1b                	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        case RME_X64_FAULT_VE:RME_DBG_S("Virtualization exception");break;
ffffffff802265f0:	48 c7 c7 70 9d 22 80 	mov    $0xffffffff80229d70,%rdi
ffffffff802265f7:	e8 0f 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802265fc:	eb 0d                	jmp    ffffffff8022660b <__RME_X64_Fault_Handler+0x19d>
        default:RME_DBG_S("Unknown exception");break;
ffffffff802265fe:	48 c7 c7 89 9d 22 80 	mov    $0xffffffff80229d89,%rdi
ffffffff80226605:	e8 01 64 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022660a:	90                   	nop
    }
    /* Print all registers */
    RME_DBG_S("\n\rRAX:        0x");RME_DBG_H(Reg->RAX);
ffffffff8022660b:	48 c7 c7 9b 9d 22 80 	mov    $0xffffffff80229d9b,%rdi
ffffffff80226612:	e8 f4 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226617:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022661b:	48 8b 00             	mov    (%rax),%rax
ffffffff8022661e:	48 89 c7             	mov    %rax,%rdi
ffffffff80226621:	e8 23 63 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRBX:        0x");RME_DBG_H(Reg->RBX);
ffffffff80226626:	48 c7 c7 ac 9d 22 80 	mov    $0xffffffff80229dac,%rdi
ffffffff8022662d:	e8 d9 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226632:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226636:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8022663a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022663d:	e8 07 63 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRCX:        0x");RME_DBG_H(Reg->RCX);
ffffffff80226642:	48 c7 c7 bd 9d 22 80 	mov    $0xffffffff80229dbd,%rdi
ffffffff80226649:	e8 bd 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022664e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226652:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80226656:	48 89 c7             	mov    %rax,%rdi
ffffffff80226659:	e8 eb 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRDX:        0x");RME_DBG_H(Reg->RDX);
ffffffff8022665e:	48 c7 c7 ce 9d 22 80 	mov    $0xffffffff80229dce,%rdi
ffffffff80226665:	e8 a1 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022666a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022666e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226672:	48 89 c7             	mov    %rax,%rdi
ffffffff80226675:	e8 cf 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRSI:        0x");RME_DBG_H(Reg->RSI);
ffffffff8022667a:	48 c7 c7 df 9d 22 80 	mov    $0xffffffff80229ddf,%rdi
ffffffff80226681:	e8 85 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226686:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022668a:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8022668e:	48 89 c7             	mov    %rax,%rdi
ffffffff80226691:	e8 b3 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRDI:        0x");RME_DBG_H(Reg->RDI);
ffffffff80226696:	48 c7 c7 f0 9d 22 80 	mov    $0xffffffff80229df0,%rdi
ffffffff8022669d:	e8 69 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802266a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266a6:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff802266aa:	48 89 c7             	mov    %rax,%rdi
ffffffff802266ad:	e8 97 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRBP:        0x");RME_DBG_H(Reg->RBP);
ffffffff802266b2:	48 c7 c7 01 9e 22 80 	mov    $0xffffffff80229e01,%rdi
ffffffff802266b9:	e8 4d 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802266be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266c2:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802266c6:	48 89 c7             	mov    %rax,%rdi
ffffffff802266c9:	e8 7b 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR8:         0x");RME_DBG_H(Reg->R8);
ffffffff802266ce:	48 c7 c7 12 9e 22 80 	mov    $0xffffffff80229e12,%rdi
ffffffff802266d5:	e8 31 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802266da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266de:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802266e2:	48 89 c7             	mov    %rax,%rdi
ffffffff802266e5:	e8 5f 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR9:         0x");RME_DBG_H(Reg->R9);
ffffffff802266ea:	48 c7 c7 23 9e 22 80 	mov    $0xffffffff80229e23,%rdi
ffffffff802266f1:	e8 15 63 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802266f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802266fa:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff802266fe:	48 89 c7             	mov    %rax,%rdi
ffffffff80226701:	e8 43 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR10:        0x");RME_DBG_H(Reg->R10);
ffffffff80226706:	48 c7 c7 34 9e 22 80 	mov    $0xffffffff80229e34,%rdi
ffffffff8022670d:	e8 f9 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226712:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226716:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff8022671a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022671d:	e8 27 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR11:        0x");RME_DBG_H(Reg->R11);
ffffffff80226722:	48 c7 c7 45 9e 22 80 	mov    $0xffffffff80229e45,%rdi
ffffffff80226729:	e8 dd 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022672e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226732:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff80226736:	48 89 c7             	mov    %rax,%rdi
ffffffff80226739:	e8 0b 62 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR12:        0x");RME_DBG_H(Reg->R12);
ffffffff8022673e:	48 c7 c7 56 9e 22 80 	mov    $0xffffffff80229e56,%rdi
ffffffff80226745:	e8 c1 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022674a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022674e:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80226752:	48 89 c7             	mov    %rax,%rdi
ffffffff80226755:	e8 ef 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR13:        0x");RME_DBG_H(Reg->R13);
ffffffff8022675a:	48 c7 c7 67 9e 22 80 	mov    $0xffffffff80229e67,%rdi
ffffffff80226761:	e8 a5 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226766:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022676a:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff8022676e:	48 89 c7             	mov    %rax,%rdi
ffffffff80226771:	e8 d3 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR14:        0x");RME_DBG_H(Reg->R14);
ffffffff80226776:	48 c7 c7 78 9e 22 80 	mov    $0xffffffff80229e78,%rdi
ffffffff8022677d:	e8 89 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226782:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226786:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff8022678a:	48 89 c7             	mov    %rax,%rdi
ffffffff8022678d:	e8 b7 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rR15:        0x");RME_DBG_H(Reg->R15);
ffffffff80226792:	48 c7 c7 89 9e 22 80 	mov    $0xffffffff80229e89,%rdi
ffffffff80226799:	e8 6d 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff8022679e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802267a2:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff802267a6:	48 89 c7             	mov    %rax,%rdi
ffffffff802267a9:	e8 9b 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rINT_NUM:    0x");RME_DBG_H(Reg->INT_NUM);
ffffffff802267ae:	48 c7 c7 9a 9e 22 80 	mov    $0xffffffff80229e9a,%rdi
ffffffff802267b5:	e8 51 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802267ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802267be:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff802267c2:	48 89 c7             	mov    %rax,%rdi
ffffffff802267c5:	e8 7f 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rERROR_CODE: 0x");RME_DBG_H(Reg->ERROR_CODE);
ffffffff802267ca:	48 c7 c7 ab 9e 22 80 	mov    $0xffffffff80229eab,%rdi
ffffffff802267d1:	e8 35 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802267d6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802267da:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff802267e1:	48 89 c7             	mov    %rax,%rdi
ffffffff802267e4:	e8 60 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRIP:        0x");RME_DBG_H(Reg->RIP);
ffffffff802267e9:	48 c7 c7 bc 9e 22 80 	mov    $0xffffffff80229ebc,%rdi
ffffffff802267f0:	e8 16 62 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff802267f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802267f9:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
ffffffff80226800:	48 89 c7             	mov    %rax,%rdi
ffffffff80226803:	e8 41 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rCS:         0x");RME_DBG_H(Reg->CS);
ffffffff80226808:	48 c7 c7 cd 9e 22 80 	mov    $0xffffffff80229ecd,%rdi
ffffffff8022680f:	e8 f7 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226814:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226818:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff8022681f:	48 89 c7             	mov    %rax,%rdi
ffffffff80226822:	e8 22 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRFLAGS:     0x");RME_DBG_H(Reg->RFLAGS);
ffffffff80226827:	48 c7 c7 de 9e 22 80 	mov    $0xffffffff80229ede,%rdi
ffffffff8022682e:	e8 d8 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226833:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226837:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff8022683e:	48 89 c7             	mov    %rax,%rdi
ffffffff80226841:	e8 03 61 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rRSP:        0x");RME_DBG_H(Reg->RSP);
ffffffff80226846:	48 c7 c7 ef 9e 22 80 	mov    $0xffffffff80229eef,%rdi
ffffffff8022684d:	e8 b9 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226852:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226856:	48 8b 80 a0 00 00 00 	mov    0xa0(%rax),%rax
ffffffff8022685d:	48 89 c7             	mov    %rax,%rdi
ffffffff80226860:	e8 e4 60 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rSS:         0x");RME_DBG_H(Reg->SS);
ffffffff80226865:	48 c7 c7 00 9f 22 80 	mov    $0xffffffff80229f00,%rdi
ffffffff8022686c:	e8 9a 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
ffffffff80226871:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226875:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
ffffffff8022687c:	48 89 c7             	mov    %rax,%rdi
ffffffff8022687f:	e8 c5 60 fe ff       	call   ffffffff8020c949 <RME_Hex_Print>
    RME_DBG_S("\n\rHang");
ffffffff80226884:	48 c7 c7 11 9f 22 80 	mov    $0xffffffff80229f11,%rdi
ffffffff8022688b:	e8 7b 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>

    while(1);
ffffffff80226890:	90                   	nop
ffffffff80226891:	eb fd                	jmp    ffffffff80226890 <__RME_X64_Fault_Handler+0x422>

ffffffff80226893 <__RME_X64_Generic_Handler>:
              rme_ptr_t Int_Num - The interrupt number.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Generic_Handler(struct RME_Reg_Struct* Reg, rme_ptr_t Int_Num)
{
ffffffff80226893:	f3 0f 1e fa          	endbr64
ffffffff80226897:	55                   	push   %rbp
ffffffff80226898:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022689b:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8022689f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802268a3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    /* Not handling interrupts */
    RME_DBG_S("\r\nGeneral int:");
ffffffff802268a7:	48 c7 c7 c0 9f 22 80 	mov    $0xffffffff80229fc0,%rdi
ffffffff802268ae:	e8 58 61 fe ff       	call   ffffffff8020ca0b <RME_Str_Print>
    RME_DBG_I(Int_Num);
ffffffff802268b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802268b7:	48 89 c7             	mov    %rax,%rdi
ffffffff802268ba:	e8 52 5f fe ff       	call   ffffffff8020c811 <RME_Int_Print>

    switch(Int_Num)
    {
        /* Is this a generic IPI from other processors? */

        default:break;
ffffffff802268bf:	90                   	nop
    }
    /* Remember to perform context switch after any kernel sends */
}
ffffffff802268c0:	90                   	nop
ffffffff802268c1:	c9                   	leave
ffffffff802268c2:	c3                   	ret

ffffffff802268c3 <__RME_Pgt_Set>:
Input       : rme_ptr_t Pgt - The virtual address of the page table.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgt_Set(rme_ptr_t Pgt)
{
ffffffff802268c3:	f3 0f 1e fa          	endbr64
ffffffff802268c7:	55                   	push   %rbp
ffffffff802268c8:	48 89 e5             	mov    %rsp,%rbp
ffffffff802268cb:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802268cf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    __RME_X64_Pgt_Set(RME_X64_VA2PA(Pgt));
ffffffff802268d3:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802268da:	80 00 00 
ffffffff802268dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802268e1:	48 01 d0             	add    %rdx,%rax
ffffffff802268e4:	48 89 c7             	mov    %rax,%rdi
ffffffff802268e7:	e8 bd 4f fe ff       	call   ffffffff8020b8a9 <__RME_X64_Pgt_Set>
}
ffffffff802268ec:	90                   	nop
ffffffff802268ed:	c9                   	leave
ffffffff802268ee:	c3                   	ret

ffffffff802268ef <__RME_Pgt_Check>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Check(rme_ptr_t Base_Addr, rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order, rme_ptr_t Num_Order, rme_ptr_t Vaddr)
{
ffffffff802268ef:	f3 0f 1e fa          	endbr64
ffffffff802268f3:	55                   	push   %rbp
ffffffff802268f4:	48 89 e5             	mov    %rsp,%rbp
ffffffff802268f7:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff802268fb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802268ff:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80226903:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80226907:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff8022690b:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
    /* Is the table address aligned to 4kB? */
    if((Vaddr&0xFFF)!=0)
ffffffff8022690f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226913:	25 ff 0f 00 00       	and    $0xfff,%eax
ffffffff80226918:	48 85 c0             	test   %rax,%rax
ffffffff8022691b:	74 09                	je     ffffffff80226926 <__RME_Pgt_Check+0x37>
        return RME_ERR_HAL_FAIL;
ffffffff8022691d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226924:	eb 59                	jmp    ffffffff8022697f <__RME_Pgt_Check+0x90>

    /* Is the size order allowed? */
    if((Size_Order!=RME_PGT_SIZE_512G)&&(Size_Order!=RME_PGT_SIZE_1G)&&
ffffffff80226926:	48 83 7d e8 27       	cmpq   $0x27,-0x18(%rbp)
ffffffff8022692b:	74 1e                	je     ffffffff8022694b <__RME_Pgt_Check+0x5c>
ffffffff8022692d:	48 83 7d e8 1e       	cmpq   $0x1e,-0x18(%rbp)
ffffffff80226932:	74 17                	je     ffffffff8022694b <__RME_Pgt_Check+0x5c>
ffffffff80226934:	48 83 7d e8 15       	cmpq   $0x15,-0x18(%rbp)
ffffffff80226939:	74 10                	je     ffffffff8022694b <__RME_Pgt_Check+0x5c>
       (Size_Order!=RME_PGT_SIZE_2M)&&(Size_Order!=RME_PGT_SIZE_4K))
ffffffff8022693b:	48 83 7d e8 0c       	cmpq   $0xc,-0x18(%rbp)
ffffffff80226940:	74 09                	je     ffffffff8022694b <__RME_Pgt_Check+0x5c>
        return RME_ERR_HAL_FAIL;
ffffffff80226942:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226949:	eb 34                	jmp    ffffffff8022697f <__RME_Pgt_Check+0x90>

    /* Is the top-level relationship correct? */
    if(((Size_Order==RME_PGT_SIZE_512G)^(Is_Top!=0))!=0)
ffffffff8022694b:	48 83 7d e8 27       	cmpq   $0x27,-0x18(%rbp)
ffffffff80226950:	0f 94 c2             	sete   %dl
ffffffff80226953:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226958:	0f 95 c0             	setne  %al
ffffffff8022695b:	31 d0                	xor    %edx,%eax
ffffffff8022695d:	84 c0                	test   %al,%al
ffffffff8022695f:	74 09                	je     ffffffff8022696a <__RME_Pgt_Check+0x7b>
        return RME_ERR_HAL_FAIL;
ffffffff80226961:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226968:	eb 15                	jmp    ffffffff8022697f <__RME_Pgt_Check+0x90>

    /* Is the number order allowed? */
    if(Num_Order!=RME_PGT_NUM_512)
ffffffff8022696a:	48 83 7d e0 09       	cmpq   $0x9,-0x20(%rbp)
ffffffff8022696f:	74 09                	je     ffffffff8022697a <__RME_Pgt_Check+0x8b>
        return RME_ERR_HAL_FAIL;
ffffffff80226971:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226978:	eb 05                	jmp    ffffffff8022697f <__RME_Pgt_Check+0x90>

    return 0;
ffffffff8022697a:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff8022697f:	c9                   	leave
ffffffff80226980:	c3                   	ret

ffffffff80226981 <__RME_Pgt_Init>:
Input       : struct RME_Cap_Pgt* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Init(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff80226981:	f3 0f 1e fa          	endbr64
ffffffff80226985:	55                   	push   %rbp
ffffffff80226986:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226989:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8022698d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
    rme_cnt_t Count;
    rme_ptr_t* Ptr;
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226991:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226995:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226999:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
ffffffff8022699d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff802269a4:	00 
ffffffff802269a5:	eb 1f                	jmp    ffffffff802269c6 <__RME_Pgt_Init+0x45>
        Ptr[Count]=0;
ffffffff802269a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802269ab:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802269b2:	00 
ffffffff802269b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802269b7:	48 01 d0             	add    %rdx,%rax
ffffffff802269ba:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    for(Count=0;Count<256;Count++)
ffffffff802269c1:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff802269c6:	48 81 7d f8 ff 00 00 	cmpq   $0xff,-0x8(%rbp)
ffffffff802269cd:	00 
ffffffff802269ce:	7e d7                	jle    ffffffff802269a7 <__RME_Pgt_Init+0x26>

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgt_Op->Base&RME_PGT_TOP)!=0)
ffffffff802269d0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff802269d4:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff802269d8:	83 e0 01             	and    $0x1,%eax
ffffffff802269db:	48 85 c0             	test   %rax,%rax
ffffffff802269de:	74 62                	je     ffffffff80226a42 <__RME_Pgt_Init+0xc1>
    {
        for(;Count<512;Count++)
ffffffff802269e0:	eb 35                	jmp    ffffffff80226a17 <__RME_Pgt_Init+0x96>
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff802269e2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802269e6:	48 8d 88 00 ff ff ff 	lea    -0x100(%rax),%rcx
ffffffff802269ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802269f1:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802269f8:	00 
ffffffff802269f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802269fd:	48 01 c2             	add    %rax,%rdx
ffffffff80226a00:	48 8d 81 00 01 00 00 	lea    0x100(%rcx),%rax
ffffffff80226a07:	48 8b 04 c5 00 90 10 	mov    -0x7fef7000(,%rax,8),%rax
ffffffff80226a0e:	80 
ffffffff80226a0f:	48 89 02             	mov    %rax,(%rdx)
        for(;Count<512;Count++)
ffffffff80226a12:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80226a17:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
ffffffff80226a1e:	00 
ffffffff80226a1f:	7e c1                	jle    ffffffff802269e2 <__RME_Pgt_Init+0x61>
ffffffff80226a21:	eb 29                	jmp    ffffffff80226a4c <__RME_Pgt_Init+0xcb>
    }
    else
    {
        for(;Count<512;Count++)
            Ptr[Count]=0;
ffffffff80226a23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226a27:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226a2e:	00 
ffffffff80226a2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226a33:	48 01 d0             	add    %rdx,%rax
ffffffff80226a36:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        for(;Count<512;Count++)
ffffffff80226a3d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
ffffffff80226a42:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
ffffffff80226a49:	00 
ffffffff80226a4a:	7e d7                	jle    ffffffff80226a23 <__RME_Pgt_Init+0xa2>
    }

    return 0;
ffffffff80226a4c:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226a51:	c9                   	leave
ffffffff80226a52:	c3                   	ret

ffffffff80226a53 <__RME_Pgt_Del_Check>:
Input       : struct RME_Cap_Pgt Pgt_Op* - The capability to the page table to operate on.
Output      : None.
Return      : rme_ptr_t - If can be deleted, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Del_Check(struct RME_Cap_Pgt* Pgt_Op)
{
ffffffff80226a53:	f3 0f 1e fa          	endbr64
ffffffff80226a57:	55                   	push   %rbp
ffffffff80226a58:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226a5b:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80226a5f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)

    return 0;
ffffffff80226a63:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226a68:	c9                   	leave
ffffffff80226a69:	c3                   	ret

ffffffff80226a6a <__RME_Pgt_Page_Map>:
                                architecture specific page table's settings.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Map(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Paddr, rme_ptr_t Pos, rme_ptr_t Flags)
{
ffffffff80226a6a:	f3 0f 1e fa          	endbr64
ffffffff80226a6e:	55                   	push   %rbp
ffffffff80226a6f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226a72:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80226a76:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226a7a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226a7e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80226a82:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff80226a86:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226a8a:	83 e0 01             	and    $0x1,%eax
ffffffff80226a8d:	48 85 c0             	test   %rax,%rax
ffffffff80226a90:	75 0c                	jne    ffffffff80226a9e <__RME_Pgt_Page_Map+0x34>
        return RME_ERR_HAL_FAIL;
ffffffff80226a92:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226a99:	e9 d5 00 00 00       	jmp    ffffffff80226b73 <__RME_Pgt_Page_Map+0x109>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226a9e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226aa2:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226aa6:	83 e0 01             	and    $0x1,%eax
ffffffff80226aa9:	48 85 c0             	test   %rax,%rax
ffffffff80226aac:	74 16                	je     ffffffff80226ac4 <__RME_Pgt_Page_Map+0x5a>
ffffffff80226aae:	48 81 7d d8 ff 00 00 	cmpq   $0xff,-0x28(%rbp)
ffffffff80226ab5:	00 
ffffffff80226ab6:	76 0c                	jbe    ffffffff80226ac4 <__RME_Pgt_Page_Map+0x5a>
        return RME_ERR_HAL_FAIL;
ffffffff80226ab8:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226abf:	e9 af 00 00 00       	jmp    ffffffff80226b73 <__RME_Pgt_Page_Map+0x109>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226ac4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226ac8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226acc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Generate flags */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff80226ad0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226ad4:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226ad8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226adc:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226ae0:	75 2d                	jne    ffffffff80226b0f <__RME_Pgt_Page_Map+0xa5>
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff80226ae2:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226ae9:	ff 0f 00 
ffffffff80226aec:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff80226af0:	48 89 c2             	mov    %rax,%rdx
ffffffff80226af3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226af7:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226afa:	48 8b 04 c5 c0 94 22 	mov    -0x7fdd6b40(,%rax,8),%rax
ffffffff80226b01:	80 
ffffffff80226b02:	48 09 d0             	or     %rdx,%rax
ffffffff80226b05:	48 83 c8 04          	or     $0x4,%rax
ffffffff80226b09:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80226b0d:	eb 29                	jmp    ffffffff80226b38 <__RME_Pgt_Page_Map+0xce>
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff80226b0f:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226b16:	ff 0f 00 
ffffffff80226b19:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff80226b1d:	48 89 c2             	mov    %rax,%rdx
ffffffff80226b20:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226b24:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226b27:	48 8b 04 c5 c0 94 22 	mov    -0x7fdd6b40(,%rax,8),%rax
ffffffff80226b2e:	80 
ffffffff80226b2f:	48 09 d0             	or     %rdx,%rax
ffffffff80226b32:	0c 84                	or     $0x84,%al
ffffffff80226b34:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Try to map it in */
    if(RME_COMP_SWAP(&(Table[Pos]),0,X64_Flags)==0)
ffffffff80226b38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226b3c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226b43:	00 
ffffffff80226b44:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226b48:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226b50:	48 89 c2             	mov    %rax,%rdx
ffffffff80226b53:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80226b58:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226b5b:	e8 2d 46 ff ff       	call   ffffffff8021b18d <_RME_X64_Comp_Swap>
ffffffff80226b60:	48 85 c0             	test   %rax,%rax
ffffffff80226b63:	75 09                	jne    ffffffff80226b6e <__RME_Pgt_Page_Map+0x104>
        return RME_ERR_HAL_FAIL;
ffffffff80226b65:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226b6c:	eb 05                	jmp    ffffffff80226b73 <__RME_Pgt_Page_Map+0x109>

    return 0;
ffffffff80226b6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226b73:	c9                   	leave
ffffffff80226b74:	c3                   	ret

ffffffff80226b75 <__RME_Pgt_Page_Unmap>:
              rme_ptr_t Pos - The position in the page table.
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Page_Unmap(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos)
{
ffffffff80226b75:	f3 0f 1e fa          	endbr64
ffffffff80226b79:	55                   	push   %rbp
ffffffff80226b7a:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226b7d:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80226b81:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226b85:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Op->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226b89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226b8d:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226b91:	83 e0 01             	and    $0x1,%eax
ffffffff80226b94:	48 85 c0             	test   %rax,%rax
ffffffff80226b97:	74 16                	je     ffffffff80226baf <__RME_Pgt_Page_Unmap+0x3a>
ffffffff80226b99:	48 81 7d e0 ff 00 00 	cmpq   $0xff,-0x20(%rbp)
ffffffff80226ba0:	00 
ffffffff80226ba1:	76 0c                	jbe    ffffffff80226baf <__RME_Pgt_Page_Unmap+0x3a>
        return RME_ERR_HAL_FAIL;
ffffffff80226ba3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226baa:	e9 9a 00 00 00       	jmp    ffffffff80226c49 <__RME_Pgt_Page_Unmap+0xd4>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226baf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226bb3:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226bb7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Make sure that there is something */
    Temp=Table[Pos];
ffffffff80226bbb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226bbf:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226bc6:	00 
ffffffff80226bc7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226bcb:	48 01 d0             	add    %rdx,%rax
ffffffff80226bce:	48 8b 00             	mov    (%rax),%rax
ffffffff80226bd1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Temp==0)
ffffffff80226bd5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226bda:	75 09                	jne    ffffffff80226be5 <__RME_Pgt_Page_Unmap+0x70>
        return RME_ERR_HAL_FAIL;
ffffffff80226bdc:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226be3:	eb 64                	jmp    ffffffff80226c49 <__RME_Pgt_Page_Unmap+0xd4>

    /* Is this a page directory? We cannot unmap page directories like this */
    if((RME_PGT_SIZEORD(Pgt_Op->Order)!=RME_PGT_SIZE_4K)&&((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff80226be5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226be9:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226bed:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226bf1:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226bf5:	74 17                	je     ffffffff80226c0e <__RME_Pgt_Page_Unmap+0x99>
ffffffff80226bf7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226bfb:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226c00:	48 85 c0             	test   %rax,%rax
ffffffff80226c03:	75 09                	jne    ffffffff80226c0e <__RME_Pgt_Page_Unmap+0x99>
        return RME_ERR_HAL_FAIL;
ffffffff80226c05:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c0c:	eb 3b                	jmp    ffffffff80226c49 <__RME_Pgt_Page_Unmap+0xd4>

    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
ffffffff80226c0e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226c12:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226c19:	00 
ffffffff80226c1a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226c1e:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226c22:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226c26:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226c2b:	48 89 c6             	mov    %rax,%rsi
ffffffff80226c2e:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226c31:	e8 57 45 ff ff       	call   ffffffff8021b18d <_RME_X64_Comp_Swap>
ffffffff80226c36:	48 85 c0             	test   %rax,%rax
ffffffff80226c39:	75 09                	jne    ffffffff80226c44 <__RME_Pgt_Page_Unmap+0xcf>
        return RME_ERR_HAL_FAIL;
ffffffff80226c3b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c42:	eb 05                	jmp    ffffffff80226c49 <__RME_Pgt_Page_Unmap+0xd4>

    return 0;
ffffffff80226c44:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226c49:	c9                   	leave
ffffffff80226c4a:	c3                   	ret

ffffffff80226c4b <__RME_Pgt_Pgdir_Map>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Map(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                struct RME_Cap_Pgt* Pgt_Child, rme_ptr_t Flags)
{
ffffffff80226c4b:	f3 0f 1e fa          	endbr64
ffffffff80226c4f:	55                   	push   %rbp
ffffffff80226c50:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226c53:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80226c57:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80226c5b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80226c5f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80226c63:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t X64_Flags;

    /* It should at least be readable */
    if((Flags&RME_PGT_READ)==0)
ffffffff80226c67:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226c6b:	83 e0 01             	and    $0x1,%eax
ffffffff80226c6e:	48 85 c0             	test   %rax,%rax
ffffffff80226c71:	75 0c                	jne    ffffffff80226c7f <__RME_Pgt_Pgdir_Map+0x34>
        return RME_ERR_HAL_FAIL;
ffffffff80226c73:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226c7a:	e9 b1 00 00 00       	jmp    ffffffff80226d30 <__RME_Pgt_Pgdir_Map+0xe5>

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226c7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226c83:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226c87:	83 e0 01             	and    $0x1,%eax
ffffffff80226c8a:	48 85 c0             	test   %rax,%rax
ffffffff80226c8d:	74 16                	je     ffffffff80226ca5 <__RME_Pgt_Pgdir_Map+0x5a>
ffffffff80226c8f:	48 81 7d d0 ff 00 00 	cmpq   $0xff,-0x30(%rbp)
ffffffff80226c96:	00 
ffffffff80226c97:	76 0c                	jbe    ffffffff80226ca5 <__RME_Pgt_Pgdir_Map+0x5a>
        return RME_ERR_HAL_FAIL;
ffffffff80226c99:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ca0:	e9 8b 00 00 00       	jmp    ffffffff80226d30 <__RME_Pgt_Pgdir_Map+0xe5>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
ffffffff80226ca5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226ca9:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226cad:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    Child_Table=RME_CAP_GETOBJ(Pgt_Child,rme_ptr_t*);
ffffffff80226cb1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226cb5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226cb9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff80226cbd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226cc1:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80226cc8:	80 00 00 
ffffffff80226ccb:	48 01 c2             	add    %rax,%rdx
ffffffff80226cce:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226cd5:	ff 0f 00 
ffffffff80226cd8:	48 21 c2             	and    %rax,%rdx
ffffffff80226cdb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226cdf:	83 e0 df             	and    $0xffffffdf,%eax
ffffffff80226ce2:	48 8b 04 c5 c0 94 22 	mov    -0x7fdd6b40(,%rax,8),%rax
ffffffff80226ce9:	80 
ffffffff80226cea:	48 09 d0             	or     %rdx,%rax
ffffffff80226ced:	48 83 c8 04          	or     $0x4,%rax
ffffffff80226cf1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

    /* Try to map it in - may need to increase some count */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),0,X64_Flags)==0)
ffffffff80226cf5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226cf9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226d00:	00 
ffffffff80226d01:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226d05:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226d09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226d0d:	48 89 c2             	mov    %rax,%rdx
ffffffff80226d10:	be 00 00 00 00       	mov    $0x0,%esi
ffffffff80226d15:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226d18:	e8 70 44 ff ff       	call   ffffffff8021b18d <_RME_X64_Comp_Swap>
ffffffff80226d1d:	48 85 c0             	test   %rax,%rax
ffffffff80226d20:	75 09                	jne    ffffffff80226d2b <__RME_Pgt_Pgdir_Map+0xe0>
        return RME_ERR_HAL_FAIL;
ffffffff80226d22:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d29:	eb 05                	jmp    ffffffff80226d30 <__RME_Pgt_Pgdir_Map+0xe5>

    return 0;
ffffffff80226d2b:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226d30:	c9                   	leave
ffffffff80226d31:	c3                   	ret

ffffffff80226d32 <__RME_Pgt_Pgdir_Unmap>:
Output      : None.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Pgdir_Unmap(struct RME_Cap_Pgt* Pgt_Parent, rme_ptr_t Pos,
                                  struct RME_Cap_Pgt* Pgt_Child)
{
ffffffff80226d32:	f3 0f 1e fa          	endbr64
ffffffff80226d36:	55                   	push   %rbp
ffffffff80226d37:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226d3a:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80226d3e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80226d42:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80226d46:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
    rme_ptr_t* Parent_Table;
    rme_ptr_t* Child_Table;
    rme_ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgt_Parent->Base&RME_PGT_TOP)!=0)&&(Pos>=256))
ffffffff80226d4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226d4e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226d52:	83 e0 01             	and    $0x1,%eax
ffffffff80226d55:	48 85 c0             	test   %rax,%rax
ffffffff80226d58:	74 16                	je     ffffffff80226d70 <__RME_Pgt_Pgdir_Unmap+0x3e>
ffffffff80226d5a:	48 81 7d d0 ff 00 00 	cmpq   $0xff,-0x30(%rbp)
ffffffff80226d61:	00 
ffffffff80226d62:	76 0c                	jbe    ffffffff80226d70 <__RME_Pgt_Pgdir_Unmap+0x3e>
        return RME_ERR_HAL_FAIL;
ffffffff80226d64:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226d6b:	e9 c4 00 00 00       	jmp    ffffffff80226e34 <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgt_Parent,rme_ptr_t*);
ffffffff80226d70:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226d74:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226d78:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Make sure that there is something */
    Temp=Parent_Table[Pos];
ffffffff80226d7c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226d80:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226d87:	00 
ffffffff80226d88:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226d8c:	48 01 d0             	add    %rdx,%rax
ffffffff80226d8f:	48 8b 00             	mov    (%rax),%rax
ffffffff80226d92:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    if(Temp==0)
ffffffff80226d96:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80226d9b:	75 0c                	jne    ffffffff80226da9 <__RME_Pgt_Pgdir_Unmap+0x77>
        return RME_ERR_HAL_FAIL;
ffffffff80226d9d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226da4:	e9 8b 00 00 00       	jmp    ffffffff80226e34 <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Is this a page? We cannot unmap pages like this */
    if((RME_PGT_SIZEORD(Pgt_Parent->Order)==RME_PGT_SIZE_4K)||((Temp&RME_X64_MMU_PDE_SUP)!=0))
ffffffff80226da9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226dad:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226db1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226db5:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226db9:	74 0e                	je     ffffffff80226dc9 <__RME_Pgt_Pgdir_Unmap+0x97>
ffffffff80226dbb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226dbf:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226dc4:	48 85 c0             	test   %rax,%rax
ffffffff80226dc7:	74 09                	je     ffffffff80226dd2 <__RME_Pgt_Pgdir_Unmap+0xa0>
        return RME_ERR_HAL_FAIL;
ffffffff80226dc9:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226dd0:	eb 62                	jmp    ffffffff80226e34 <__RME_Pgt_Pgdir_Unmap+0x102>

    /* Is this child table mapped here? - check that in the future */

    Child_Table=(rme_ptr_t*)Temp;
ffffffff80226dd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226dd6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    rme_ptr_t* Expected_Child_Table = RME_CAP_GETOBJ(Pgt_Child, rme_ptr_t*);
ffffffff80226dda:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226dde:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226de2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    if (Child_Table != Expected_Child_Table)
ffffffff80226de6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226dea:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80226dee:	74 09                	je     ffffffff80226df9 <__RME_Pgt_Pgdir_Unmap+0xc7>
        return RME_ERR_HAL_FAIL;
ffffffff80226df0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226df7:	eb 3b                	jmp    ffffffff80226e34 <__RME_Pgt_Pgdir_Unmap+0x102>
    /* Try to unmap it. Use CAS just in case */
    if(RME_COMP_SWAP(&(Parent_Table[Pos]),Temp,0)==0)
ffffffff80226df9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226dfd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226e04:	00 
ffffffff80226e05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226e09:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
ffffffff80226e0d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226e11:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80226e16:	48 89 c6             	mov    %rax,%rsi
ffffffff80226e19:	48 89 cf             	mov    %rcx,%rdi
ffffffff80226e1c:	e8 6c 43 ff ff       	call   ffffffff8021b18d <_RME_X64_Comp_Swap>
ffffffff80226e21:	48 85 c0             	test   %rax,%rax
ffffffff80226e24:	75 09                	jne    ffffffff80226e2f <__RME_Pgt_Pgdir_Unmap+0xfd>
        return RME_ERR_HAL_FAIL;
ffffffff80226e26:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226e2d:	eb 05                	jmp    ffffffff80226e34 <__RME_Pgt_Pgdir_Unmap+0x102>

    return 0;
ffffffff80226e2f:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226e34:	c9                   	leave
ffffffff80226e35:	c3                   	ret

ffffffff80226e36 <__RME_Pgt_Lookup>:
Output      : rme_ptr_t* Paddr - The physical address of the page.
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Lookup(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Pos, rme_ptr_t* Paddr, rme_ptr_t* Flags)
{
ffffffff80226e36:	f3 0f 1e fa          	endbr64
ffffffff80226e3a:	55                   	push   %rbp
ffffffff80226e3b:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226e3e:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80226e42:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80226e46:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80226e4a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80226e4e:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    rme_ptr_t* Table;
    rme_ptr_t Temp;

    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGT_NUMORD(Pgt_Op->Order))!=0)
ffffffff80226e52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226e56:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226e5a:	89 c2                	mov    %eax,%edx
ffffffff80226e5c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226e60:	89 d1                	mov    %edx,%ecx
ffffffff80226e62:	48 d3 e8             	shr    %cl,%rax
ffffffff80226e65:	48 85 c0             	test   %rax,%rax
ffffffff80226e68:	74 0c                	je     ffffffff80226e76 <__RME_Pgt_Lookup+0x40>
        return RME_ERR_HAL_FAIL;
ffffffff80226e6a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226e71:	e9 d8 00 00 00       	jmp    ffffffff80226f4e <__RME_Pgt_Lookup+0x118>

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgt_Op,rme_ptr_t*);
ffffffff80226e76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226e7a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226e7e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    /* Get the position requested - atomic read */
    Temp=Table[Pos];
ffffffff80226e82:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80226e86:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226e8d:	00 
ffffffff80226e8e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226e92:	48 01 d0             	add    %rdx,%rax
ffffffff80226e95:	48 8b 00             	mov    (%rax),%rax
ffffffff80226e98:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

    /* Start lookup - is this a terminal page, or? */
    if(RME_PGT_SIZEORD(Pgt_Op->Order)==RME_PGT_SIZE_4K)
ffffffff80226e9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80226ea0:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80226ea4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80226ea8:	48 83 f8 0c          	cmp    $0xc,%rax
ffffffff80226eac:	75 18                	jne    ffffffff80226ec6 <__RME_Pgt_Lookup+0x90>
    {
        if((Temp&RME_X64_MMU_P)==0)
ffffffff80226eae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226eb2:	83 e0 01             	and    $0x1,%eax
ffffffff80226eb5:	48 85 c0             	test   %rax,%rax
ffffffff80226eb8:	75 2f                	jne    ffffffff80226ee9 <__RME_Pgt_Lookup+0xb3>
            return RME_ERR_HAL_FAIL;
ffffffff80226eba:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ec1:	e9 88 00 00 00       	jmp    ffffffff80226f4e <__RME_Pgt_Lookup+0x118>
    }
    else
    {
        if(((Temp&RME_X64_MMU_P)==0)||((Temp&RME_X64_MMU_PDE_SUP)==0))
ffffffff80226ec6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226eca:	83 e0 01             	and    $0x1,%eax
ffffffff80226ecd:	48 85 c0             	test   %rax,%rax
ffffffff80226ed0:	74 0e                	je     ffffffff80226ee0 <__RME_Pgt_Lookup+0xaa>
ffffffff80226ed2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226ed6:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80226edb:	48 85 c0             	test   %rax,%rax
ffffffff80226ede:	75 09                	jne    ffffffff80226ee9 <__RME_Pgt_Lookup+0xb3>
            return RME_ERR_HAL_FAIL;
ffffffff80226ee0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226ee7:	eb 65                	jmp    ffffffff80226f4e <__RME_Pgt_Lookup+0x118>
    }

    /* This is a page. Return the physical address and flags */
    if(Paddr!=0)
ffffffff80226ee9:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80226eee:	74 18                	je     ffffffff80226f08 <__RME_Pgt_Lookup+0xd2>
        *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff80226ef0:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80226ef7:	ff 0f 00 
ffffffff80226efa:	48 23 45 f0          	and    -0x10(%rbp),%rax
ffffffff80226efe:	48 89 c2             	mov    %rax,%rdx
ffffffff80226f01:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226f05:	48 89 10             	mov    %rdx,(%rax)

    if(Flags!=0)
ffffffff80226f08:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80226f0d:	74 3a                	je     ffffffff80226f49 <__RME_Pgt_Lookup+0x113>
        *Flags=RME_X64_PGFLG_NAT2RME(Temp);
ffffffff80226f0f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226f13:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff80226f17:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226f1e:	00 
ffffffff80226f1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226f23:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80226f27:	83 e0 06             	and    $0x6,%eax
ffffffff80226f2a:	48 09 c2             	or     %rax,%rdx
ffffffff80226f2d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226f31:	48 d1 e8             	shr    $1,%rax
ffffffff80226f34:	83 e0 01             	and    $0x1,%eax
ffffffff80226f37:	48 09 d0             	or     %rdx,%rax
ffffffff80226f3a:	48 8b 14 c5 c0 95 22 	mov    -0x7fdd6a40(,%rax,8),%rdx
ffffffff80226f41:	80 
ffffffff80226f42:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80226f46:	48 89 10             	mov    %rdx,(%rax)

    return 0;
ffffffff80226f49:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80226f4e:	c9                   	leave
ffffffff80226f4f:	c3                   	ret

ffffffff80226f50 <__RME_Pgt_Walk>:
              rme_ptr_t* Flags - The RME standard flags of the page.
Return      : rme_ptr_t - If successful, 0; else RME_ERR_HAL_FAIL.
******************************************************************************/
rme_ptr_t __RME_Pgt_Walk(struct RME_Cap_Pgt* Pgt_Op, rme_ptr_t Vaddr, rme_ptr_t* Pgt,
                           rme_ptr_t* Map_Vaddr, rme_ptr_t* Paddr, rme_ptr_t* Size_Order, rme_ptr_t* Num_Order, rme_ptr_t* Flags)
{
ffffffff80226f50:	f3 0f 1e fa          	endbr64
ffffffff80226f54:	55                   	push   %rbp
ffffffff80226f55:	48 89 e5             	mov    %rsp,%rbp
ffffffff80226f58:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80226f5c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80226f60:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80226f64:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80226f68:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
ffffffff80226f6c:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
ffffffff80226f70:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
    rme_ptr_t Flags_Accum;
    /* No execute bit - this bit is ORed */
    rme_ptr_t No_Execute;

    /* Check if this is the top-level page table */
    if(((Pgt_Op->Base)&RME_PGT_TOP)==0)
ffffffff80226f74:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226f78:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80226f7c:	83 e0 01             	and    $0x1,%eax
ffffffff80226f7f:	48 85 c0             	test   %rax,%rax
ffffffff80226f82:	75 0c                	jne    ffffffff80226f90 <__RME_Pgt_Walk+0x40>
        return RME_ERR_HAL_FAIL;
ffffffff80226f84:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226f8b:	e9 c8 01 00 00       	jmp    ffffffff80227158 <__RME_Pgt_Walk+0x208>

    /* Are we attempting a kernel or non-canonical lookup? If yes, stop immediately */
    if(Vaddr>=0x7FFFFFFFFFFFULL)
ffffffff80226f90:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffe,%rax
ffffffff80226f97:	7f 00 00 
ffffffff80226f9a:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff80226f9e:	73 0c                	jae    ffffffff80226fac <__RME_Pgt_Walk+0x5c>
        return RME_ERR_HAL_FAIL;
ffffffff80226fa0:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80226fa7:	e9 ac 01 00 00       	jmp    ffffffff80227158 <__RME_Pgt_Walk+0x208>

    /* Get the table and start lookup */
    Table=RME_CAP_GETOBJ(Pgt_Op, rme_ptr_t*);
ffffffff80226fac:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80226fb0:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80226fb4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

    /* Do lookup recursively */
    Size_Cnt=RME_PGT_SIZE_512G;
ffffffff80226fb8:	48 c7 45 f0 27 00 00 	movq   $0x27,-0x10(%rbp)
ffffffff80226fbf:	00 
    Flags_Accum=0xFFF;
ffffffff80226fc0:	48 c7 45 e8 ff 0f 00 	movq   $0xfff,-0x18(%rbp)
ffffffff80226fc7:	00 
    No_Execute=0;
ffffffff80226fc8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80226fcf:	00 
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff80226fd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80226fd4:	89 c2                	mov    %eax,%edx
ffffffff80226fd6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80226fda:	89 d1                	mov    %edx,%ecx
ffffffff80226fdc:	48 d3 e8             	shr    %cl,%rax
ffffffff80226fdf:	25 ff 01 00 00       	and    $0x1ff,%eax
ffffffff80226fe4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
        /* Atomic read */
        Temp=Table[Pos];
ffffffff80226fe8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80226fec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff80226ff3:	00 
ffffffff80226ff4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80226ff8:	48 01 d0             	add    %rdx,%rax
ffffffff80226ffb:	48 8b 00             	mov    (%rax),%rax
ffffffff80226ffe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Temp&RME_X64_MMU_P)==0)
ffffffff80227002:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80227006:	83 e0 01             	and    $0x1,%eax
ffffffff80227009:	48 85 c0             	test   %rax,%rax
ffffffff8022700c:	75 0c                	jne    ffffffff8022701a <__RME_Pgt_Walk+0xca>
            return RME_ERR_HAL_FAIL;
ffffffff8022700e:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80227015:	e9 3e 01 00 00       	jmp    ffffffff80227158 <__RME_Pgt_Walk+0x208>
        if(((Temp&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGT_SIZE_4K))
ffffffff8022701a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8022701e:	25 80 00 00 00       	and    $0x80,%eax
ffffffff80227023:	48 85 c0             	test   %rax,%rax
ffffffff80227026:	75 0b                	jne    ffffffff80227033 <__RME_Pgt_Walk+0xe3>
ffffffff80227028:	48 83 7d f0 0c       	cmpq   $0xc,-0x10(%rbp)
ffffffff8022702d:	0f 85 dc 00 00 00    	jne    ffffffff8022710f <__RME_Pgt_Walk+0x1bf>
        {
            /* This is a page - we found it */
            if(Pgt!=0)
ffffffff80227033:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff80227038:	74 0b                	je     ffffffff80227045 <__RME_Pgt_Walk+0xf5>
                *Pgt=(rme_ptr_t)Table;
ffffffff8022703a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022703e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80227042:	48 89 10             	mov    %rdx,(%rax)
            if(Map_Vaddr!=0)
ffffffff80227045:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff8022704a:	74 21                	je     ffffffff8022706d <__RME_Pgt_Walk+0x11d>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff8022704c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80227050:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff80227057:	89 c1                	mov    %eax,%ecx
ffffffff80227059:	48 d3 e2             	shl    %cl,%rdx
ffffffff8022705c:	48 89 d0             	mov    %rdx,%rax
ffffffff8022705f:	48 23 45 c0          	and    -0x40(%rbp),%rax
ffffffff80227063:	48 89 c2             	mov    %rax,%rdx
ffffffff80227066:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8022706a:	48 89 10             	mov    %rdx,(%rax)
            if(Paddr!=0)
ffffffff8022706d:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
ffffffff80227072:	74 18                	je     ffffffff8022708c <__RME_Pgt_Walk+0x13c>
                *Paddr=RME_X64_MMU_ADDR(Temp);
ffffffff80227074:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff8022707b:	ff 0f 00 
ffffffff8022707e:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80227082:	48 89 c2             	mov    %rax,%rdx
ffffffff80227085:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80227089:	48 89 10             	mov    %rdx,(%rax)
            if(Size_Order!=0)
ffffffff8022708c:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff80227091:	74 0b                	je     ffffffff8022709e <__RME_Pgt_Walk+0x14e>
                *Size_Order=Size_Cnt;
ffffffff80227093:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80227097:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8022709b:	48 89 10             	mov    %rdx,(%rax)
            if(Num_Order!=0)
ffffffff8022709e:	48 83 7d 10 00       	cmpq   $0x0,0x10(%rbp)
ffffffff802270a3:	74 0b                	je     ffffffff802270b0 <__RME_Pgt_Walk+0x160>
                *Num_Order=RME_PGT_NUM_512;
ffffffff802270a5:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff802270a9:	48 c7 00 09 00 00 00 	movq   $0x9,(%rax)
            if(Flags!=0)
ffffffff802270b0:	48 83 7d 18 00       	cmpq   $0x0,0x18(%rbp)
ffffffff802270b5:	0f 84 97 00 00 00    	je     ffffffff80227152 <__RME_Pgt_Walk+0x202>
                *Flags=RME_X64_PGFLG_NAT2RME(No_Execute|(Temp&Flags_Accum));
ffffffff802270bb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802270bf:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff802270c3:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff802270c7:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff802270cb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
ffffffff802270d2:	00 
ffffffff802270d3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802270d7:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff802270db:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff802270df:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff802270e3:	83 e0 06             	and    $0x6,%eax
ffffffff802270e6:	48 09 c2             	or     %rax,%rdx
ffffffff802270e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff802270ed:	48 23 45 e8          	and    -0x18(%rbp),%rax
ffffffff802270f1:	48 0b 45 e0          	or     -0x20(%rbp),%rax
ffffffff802270f5:	48 d1 e8             	shr    $1,%rax
ffffffff802270f8:	83 e0 01             	and    $0x1,%eax
ffffffff802270fb:	48 09 d0             	or     %rdx,%rax
ffffffff802270fe:	48 8b 14 c5 c0 95 22 	mov    -0x7fdd6a40(,%rax,8),%rdx
ffffffff80227105:	80 
ffffffff80227106:	48 8b 45 18          	mov    0x18(%rbp),%rax
ffffffff8022710a:	48 89 10             	mov    %rdx,(%rax)

            break;
ffffffff8022710d:	eb 43                	jmp    ffffffff80227152 <__RME_Pgt_Walk+0x202>
        }
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Flags_Accum&=Temp;
ffffffff8022710f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80227113:	48 21 45 e8          	and    %rax,-0x18(%rbp)
            No_Execute|=Temp&RME_X64_MMU_NX;
ffffffff80227117:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff8022711e:	00 00 80 
ffffffff80227121:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80227125:	48 09 45 e0          	or     %rax,-0x20(%rbp)
            Table=(rme_ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Temp));
ffffffff80227129:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80227130:	ff 0f 00 
ffffffff80227133:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80227137:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8022713e:	80 ff ff 
ffffffff80227141:	48 01 d0             	add    %rdx,%rax
ffffffff80227144:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
        }

        /* The size order always decreases by 512 */
        Size_Cnt-=RME_PGT_SIZE_512B;
ffffffff80227148:	48 83 6d f0 09       	subq   $0x9,-0x10(%rbp)
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
ffffffff8022714d:	e9 7e fe ff ff       	jmp    ffffffff80226fd0 <__RME_Pgt_Walk+0x80>
            break;
ffffffff80227152:	90                   	nop
    }

    return 0;
ffffffff80227153:	b8 00 00 00 00       	mov    $0x0,%eax
}
ffffffff80227158:	c9                   	leave
ffffffff80227159:	c3                   	ret

ffffffff8022715a <__RME_Svc_Param_Get>:

/*Function:__RME_Svc_Param_Get*/

void __RME_Svc_Param_Get(struct RME_Reg_Struct* Reg,rme_ptr_t* Svc,rme_ptr_t* Cid,rme_ptr_t* Param)
{
ffffffff8022715a:	f3 0f 1e fa          	endbr64
ffffffff8022715e:	55                   	push   %rbp
ffffffff8022715f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80227162:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80227166:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022716a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8022716e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80227172:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
    *Svc=(Reg->RDI)>>32;
ffffffff80227176:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022717a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8022717e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80227182:	48 89 c2             	mov    %rax,%rdx
ffffffff80227185:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80227189:	48 89 10             	mov    %rdx,(%rax)
    *Cid=(Reg->RDI)&0xFFFFFFFF;
ffffffff8022718c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227190:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80227194:	89 c2                	mov    %eax,%edx
ffffffff80227196:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8022719a:	48 89 10             	mov    %rdx,(%rax)
    Param[0]=Reg->RSI;
ffffffff8022719d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802271a1:	48 8b 50 20          	mov    0x20(%rax),%rdx
ffffffff802271a5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802271a9:	48 89 10             	mov    %rdx,(%rax)
    Param[1]=Reg->RDX;
ffffffff802271ac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802271b0:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff802271b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802271b8:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff802271bc:	48 89 02             	mov    %rax,(%rdx)
    Param[2]=Reg->R8;
ffffffff802271bf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff802271c3:	48 8d 50 10          	lea    0x10(%rax),%rdx
ffffffff802271c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802271cb:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff802271cf:	48 89 02             	mov    %rax,(%rdx)
}
ffffffff802271d2:	90                   	nop
ffffffff802271d3:	c9                   	leave
ffffffff802271d4:	c3                   	ret

ffffffff802271d5 <__RME_Svc_Retval_Set>:
/*End Function:__RME_Svc_Param_Get*/

/*Function:__RME_Svc_Retval_Set*/

void __RME_Svc_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff802271d5:	f3 0f 1e fa          	endbr64
ffffffff802271d9:	55                   	push   %rbp
ffffffff802271da:	48 89 e5             	mov    %rsp,%rbp
ffffffff802271dd:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff802271e1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff802271e5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RAX=(rme_ptr_t)Retval;
ffffffff802271e9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802271ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802271f1:	48 89 10             	mov    %rdx,(%rax)
}
ffffffff802271f4:	90                   	nop
ffffffff802271f5:	c9                   	leave
ffffffff802271f6:	c3                   	ret

ffffffff802271f7 <__RME_Inv_Retval_Set>:

/*End Function:__RME_Svc_Retval_Set*/

void __RME_Inv_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
ffffffff802271f7:	f3 0f 1e fa          	endbr64
ffffffff802271fb:	55                   	push   %rbp
ffffffff802271fc:	48 89 e5             	mov    %rsp,%rbp
ffffffff802271ff:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80227203:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80227207:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Reg->RDI=(rme_ptr_t)Retval;
ffffffff8022720b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8022720f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227213:	48 89 50 28          	mov    %rdx,0x28(%rax)
}
ffffffff80227217:	90                   	nop
ffffffff80227218:	c9                   	leave
ffffffff80227219:	c3                   	ret

ffffffff8022721a <__RME_List_Crt>:

void __RME_List_Crt(volatile struct RME_List* Head)
{
ffffffff8022721a:	f3 0f 1e fa          	endbr64
ffffffff8022721e:	55                   	push   %rbp
ffffffff8022721f:	48 89 e5             	mov    %rsp,%rbp
ffffffff80227222:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80227226:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
    Head->Next=Head;
ffffffff8022722a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8022722e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80227232:	48 89 10             	mov    %rdx,(%rax)
    Head->Prev=Head;
ffffffff80227235:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227239:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8022723d:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff80227241:	90                   	nop
ffffffff80227242:	c9                   	leave
ffffffff80227243:	c3                   	ret

ffffffff80227244 <__RME_List_Ins>:

void __RME_List_Ins(volatile struct RME_List* New,volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff80227244:	f3 0f 1e fa          	endbr64
ffffffff80227248:	55                   	push   %rbp
ffffffff80227249:	48 89 e5             	mov    %rsp,%rbp
ffffffff8022724c:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80227250:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80227254:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80227258:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
    New->Prev=Prev;
ffffffff8022725c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227260:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80227264:	48 89 50 08          	mov    %rdx,0x8(%rax)
    Prev->Next=New;
ffffffff80227268:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8022726c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80227270:	48 89 10             	mov    %rdx,(%rax)
    New->Next=Next;
ffffffff80227273:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80227277:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8022727b:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev=New;
ffffffff8022727e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80227282:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80227286:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff8022728a:	90                   	nop
ffffffff8022728b:	c9                   	leave
ffffffff8022728c:	c3                   	ret

ffffffff8022728d <__RME_List_Del>:

void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
ffffffff8022728d:	f3 0f 1e fa          	endbr64
ffffffff80227291:	55                   	push   %rbp
ffffffff80227292:	48 89 e5             	mov    %rsp,%rbp
ffffffff80227295:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80227299:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8022729d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
    Prev->Next = Next;
ffffffff802272a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff802272a5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff802272a9:	48 89 10             	mov    %rdx,(%rax)
    Next->Prev = Prev;
ffffffff802272ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff802272b0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff802272b4:	48 89 50 08          	mov    %rdx,0x8(%rax)
}
ffffffff802272b8:	90                   	nop
ffffffff802272b9:	c9                   	leave
ffffffff802272ba:	c3                   	ret
